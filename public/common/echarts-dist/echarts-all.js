!(function (e) {
  var t, n;
  !(function () {
    function e(e, t) {
      if (!t) return e;
      if (0 === e.indexOf(".")) {
        var n = t.split("/"),
          i = e.split("/"),
          a = n.length - 1,
          o = i.length,
          s = 0,
          r = 0;
        e: for (var l = 0; o > l; l++)
          switch (i[l]) {
            case "..":
              if (!(a > s)) break e;
              s++, r++;
              break;
            case ".":
              r++;
              break;
            default:
              break e;
          }
        return (n.length = a - s), (i = i.slice(r)), n.concat(i).join("/");
      }
      return e;
    }
    function i(t) {
      function n(n, s) {
        if ("string" == typeof n) {
          var r = i[n];
          return r || ((r = o(e(n, t))), (i[n] = r)), r;
        }
        n instanceof Array &&
          ((s = s || function () {}), s.apply(this, a(n, s, t)));
      }
      var i = {};
      return n;
    }
    function a(n, i, a) {
      for (
        var r = [], l = s[a], h = 0, V = Math.min(n.length, i.length);
        V > h;
        h++
      ) {
        var U,
          m = e(n[h], a);
        switch (m) {
          case "require":
            U = (l && l.require) || t;
            break;
          case "exports":
            U = l.exports;
            break;
          case "module":
            U = l;
            break;
          default:
            U = o(m);
        }
        r.push(U);
      }
      return r;
    }
    function o(e) {
      var t = s[e];
      if (!t) throw new Error("No " + e);
      if (!t.defined) {
        var n = t.factory,
          i = n.apply(this, a(t.deps || [], n, e));
        "undefined" != typeof i && (t.exports = i), (t.defined = 1);
      }
      return t.exports;
    }
    var s = {};
    (n = function (e, t, n) {
      s[e] = {
        id: e,
        deps: t,
        factory: n,
        defined: 0,
        exports: {},
        require: i(e),
      };
    }),
      (t = i(""));
  })(),
    n("echarts", ["echarts/echarts"], function (e) {
      return e;
    }),
    n(
      "echarts/echarts",
      [
        "require",
        "./config",
        "zrender/tool/util",
        "zrender/tool/event",
        "zrender",
        "zrender/config",
        "./chart/island",
        "./component/toolbox",
        "./component",
        "./component/title",
        "./component/tooltip",
        "./component/legend",
        "./util/ecData",
        "./chart",
        "zrender/tool/color",
        "./component/timeline",
        "zrender/shape/Image",
        "zrender/loadingEffect/Bubble",
        "zrender/loadingEffect/Spin",
        "./theme/macarons",
        "./theme/infographic",
      ],
      function (e) {
        function t() {
          s.Dispatcher.call(this);
        }
        function n(e) {
          (e.innerHTML = ""),
            (this._themeConfig = {}),
            (this.dom = e),
            (this._connected = !1),
            (this._status = { dragIn: !1, dragOut: !1, needRefresh: !1 }),
            (this._curEventType = !1),
            (this._chartList = []),
            (this._messageCenter = new t()),
            (this._messageCenterOutSide = new t()),
            (this.resize = this.resize()),
            this._init();
        }
        function i(e, t, n, i, a) {
          for (var o = e._chartList, s = o.length; s--; ) {
            var r = o[s];
            "function" == typeof r[t] && r[t](n, i, a);
          }
        }
        var a = e("./config"),
          o = e("zrender/tool/util"),
          s = e("zrender/tool/event"),
          r = {},
          l = new Date() - 0,
          h = {},
          V = "_echarts_instance_";
        (r.version = "1.0.0"),
          (r.mobile = !0),
          (r.dependencies = { zrender: "1.0.0" }),
          (r.init = function (t, i) {
            var a = e("zrender");
            a.version.replace(".", "") - 0 <
              r.dependencies.zrender.replace(".", "") - 0 &&
              console.error(
                "ZRender " +
                  a.version +
                  " is too old for ECharts " +
                  r.version +
                  ". Current version need ZRender " +
                  r.dependencies.zrender +
                  "+"
              ),
              (t = t instanceof Array ? t[0] : t);
            var o = t.getAttribute(V);
            return (
              o || ((o = l++), t.setAttribute(V, o)),
              h[o] && h[o].dispose(),
              (h[o] = new n(t)),
              (h[o].id = o),
              h[o].setTheme(i),
              h[o]
            );
          }),
          (r.getInstanceById = function (e) {
            return h[e];
          }),
          o.merge(t.prototype, s.Dispatcher.prototype, !0);
        var U = e("zrender/config").EVENT,
          m = [
            "CLICK",
            "DBLCLICK",
            "MOUSEOVER",
            "MOUSEOUT",
            "DRAGSTART",
            "DRAGEND",
            "DRAGENTER",
            "DRAGOVER",
            "DRAGLEAVE",
            "DROP",
          ];
        return (
          (n.prototype = {
            _init: function () {
              var t = this,
                n = e("zrender").init(this.dom);
              (this._zr = n),
                (this._messageCenter.dispatch = function (e, n, i, a) {
                  (i = i || {}),
                    (i.type = e),
                    (i.event = n),
                    t._messageCenter.dispatchWithContext(e, i, a),
                    "HOVER" != e && "MOUSEOUT" != e
                      ? setTimeout(function () {
                          t._messageCenterOutSide.dispatchWithContext(e, i, a);
                        }, 50)
                      : t._messageCenterOutSide.dispatchWithContext(e, i, a);
                }),
                (this._onevent = function (e) {
                  return t.__onevent(e);
                });
              for (var i in a.EVENT)
                "CLICK" != i &&
                  "DBLCLICK" != i &&
                  "HOVER" != i &&
                  "MOUSEOUT" != i &&
                  "MAP_ROAM" != i &&
                  this._messageCenter.bind(a.EVENT[i], this._onevent, this);
              var o = {};
              this._onzrevent = function (e) {
                return t[o[e.type]](e);
              };
              for (var s = 0, r = m.length; r > s; s++) {
                var l = m[s],
                  h = U[l];
                (o[h] = "_on" + l.toLowerCase()), n.on(h, this._onzrevent);
              }
              (this.chart = {}), (this.component = {});
              var V = e("./chart/island");
              (this._island = new V(
                this._themeConfig,
                this._messageCenter,
                n,
                {},
                this
              )),
                (this.chart.island = this._island);
              var p = e("./component/toolbox");
              (this._toolbox = new p(
                this._themeConfig,
                this._messageCenter,
                n,
                {},
                this
              )),
                (this.component.toolbox = this._toolbox);
              var d = e("./component");
              d.define("title", e("./component/title")),
                d.define("tooltip", e("./component/tooltip")),
                d.define("legend", e("./component/legend")),
                (0 === n.getWidth() || 0 === n.getHeight()) &&
                  console.error(
                    "Dom’s width & height should be ready before init."
                  );
            },
            __onevent: function (e) {
              e.__echartsId = e.__echartsId || this.id;
              var t = e.__echartsId === this.id;
              switch (
                (this._curEventType || (this._curEventType = e.type), e.type)
              ) {
                case a.EVENT.LEGEND_SELECTED:
                  this._onlegendSelected(e);
                  break;
                case a.EVENT.DATA_ZOOM:
                  if (!t) {
                    var n = this.component.dataZoom;
                    n && (n.silence(!0), n.absoluteZoom(e.zoom), n.silence(!1));
                  }
                  this._ondataZoom(e);
                  break;
                case a.EVENT.DATA_RANGE:
                  t && this._ondataRange(e);
                  break;
                case a.EVENT.MAGIC_TYPE_CHANGED:
                  if (!t) {
                    var i = this.component.toolbox;
                    i &&
                      (i.silence(!0),
                      i.setMagicType(e.magicType),
                      i.silence(!1));
                  }
                  this._onmagicTypeChanged(e);
                  break;
                case a.EVENT.DATA_VIEW_CHANGED:
                  t && this._ondataViewChanged(e);
                  break;
                case a.EVENT.TOOLTIP_HOVER:
                  t && this._tooltipHover(e);
                  break;
                case a.EVENT.RESTORE:
                  this._onrestore();
                  break;
                case a.EVENT.REFRESH:
                  t && this._onrefresh(e);
                  break;
                case a.EVENT.TOOLTIP_IN_GRID:
                case a.EVENT.TOOLTIP_OUT_GRID:
                  if (t) {
                    if (this._connected) {
                      var o = this.component.grid;
                      o &&
                        ((e.x = (e.event.zrenderX - o.getX()) / o.getWidth()),
                        (e.y = (e.event.zrenderY - o.getY()) / o.getHeight()));
                    }
                  } else {
                    var o = this.component.grid;
                    o &&
                      this._zr.trigger("mousemove", {
                        connectTrigger: !0,
                        zrenderX: o.getX() + e.x * o.getWidth(),
                        zrenderY: o.getY() + e.y * o.getHeight(),
                      });
                  }
              }
              if (this._connected && t && this._curEventType === e.type) {
                for (var s in this._connected)
                  this._connected[s].connectedEventHandler(e);
                this._curEventType = null;
              }
              (!t || (!this._connected && t)) && (this._curEventType = null);
            },
            _onclick: function (e) {
              if ((i(this, "onclick", e), e.target)) {
                var t = this._eventPackage(e.target);
                t &&
                  null != t.seriesIndex &&
                  this._messageCenter.dispatch(a.EVENT.CLICK, e.event, t, this);
              }
            },
            _ondblclick: function (e) {
              if ((i(this, "ondblclick", e), e.target)) {
                var t = this._eventPackage(e.target);
                t &&
                  null != t.seriesIndex &&
                  this._messageCenter.dispatch(
                    a.EVENT.DBLCLICK,
                    e.event,
                    t,
                    this
                  );
              }
            },
            _onmouseover: function (e) {
              if (e.target) {
                var t = this._eventPackage(e.target);
                t &&
                  null != t.seriesIndex &&
                  this._messageCenter.dispatch(a.EVENT.HOVER, e.event, t, this);
              }
            },
            _onmouseout: function (e) {
              if (e.target) {
                var t = this._eventPackage(e.target);
                t &&
                  null != t.seriesIndex &&
                  this._messageCenter.dispatch(
                    a.EVENT.MOUSEOUT,
                    e.event,
                    t,
                    this
                  );
              }
            },
            _ondragstart: function (e) {
              (this._status = { dragIn: !1, dragOut: !1, needRefresh: !1 }),
                i(this, "ondragstart", e);
            },
            _ondragenter: function (e) {
              i(this, "ondragenter", e);
            },
            _ondragover: function (e) {
              i(this, "ondragover", e);
            },
            _ondragleave: function (e) {
              i(this, "ondragleave", e);
            },
            _ondrop: function (e) {
              i(this, "ondrop", e, this._status),
                this._island.ondrop(e, this._status);
            },
            _ondragend: function (e) {
              if (
                (i(this, "ondragend", e, this._status),
                this._timeline && this._timeline.ondragend(e, this._status),
                this._island.ondragend(e, this._status),
                this._status.needRefresh)
              ) {
                this._syncBackupData(this._option);
                var t = this._messageCenter;
                t.dispatch(
                  a.EVENT.DATA_CHANGED,
                  e.event,
                  this._eventPackage(e.target),
                  this
                ),
                  t.dispatch(a.EVENT.REFRESH, null, null, this);
              }
            },
            _onlegendSelected: function (e) {
              (this._status.needRefresh = !1),
                i(this, "onlegendSelected", e, this._status),
                this._status.needRefresh &&
                  this._messageCenter.dispatch(
                    a.EVENT.REFRESH,
                    null,
                    null,
                    this
                  );
            },
            _ondataZoom: function (e) {
              (this._status.needRefresh = !1),
                i(this, "ondataZoom", e, this._status),
                this._status.needRefresh &&
                  this._messageCenter.dispatch(
                    a.EVENT.REFRESH,
                    null,
                    null,
                    this
                  );
            },
            _ondataRange: function (e) {
              this._clearEffect(),
                (this._status.needRefresh = !1),
                i(this, "ondataRange", e, this._status),
                this._status.needRefresh && this._zr.refreshNextFrame();
            },
            _onmagicTypeChanged: function () {
              this._clearEffect(), this._render(this._toolbox.getMagicOption());
            },
            _ondataViewChanged: function (e) {
              this._syncBackupData(e.option),
                this._messageCenter.dispatch(
                  a.EVENT.DATA_CHANGED,
                  null,
                  e,
                  this
                ),
                this._messageCenter.dispatch(a.EVENT.REFRESH, null, null, this);
            },
            _tooltipHover: function (e) {
              var t = [];
              i(this, "ontooltipHover", e, t);
            },
            _onrestore: function () {
              this.restore();
            },
            _onrefresh: function (e) {
              (this._refreshInside = !0),
                this.refresh(e),
                (this._refreshInside = !1);
            },
            _syncBackupData: function (e) {
              this.component.dataZoom &&
                this.component.dataZoom.syncBackupData(e);
            },
            _eventPackage: function (t) {
              if (t) {
                var n = e("./util/ecData"),
                  i = n.get(t, "seriesIndex"),
                  a = n.get(t, "dataIndex");
                return (
                  (a =
                    -1 != i && this.component.dataZoom
                      ? this.component.dataZoom.getRealDataIndex(i, a)
                      : a),
                  {
                    seriesIndex: i,
                    seriesName: (n.get(t, "series") || {}).name,
                    dataIndex: a,
                    data: n.get(t, "data"),
                    name: n.get(t, "name"),
                    value: n.get(t, "value"),
                    special: n.get(t, "special"),
                  }
                );
              }
            },
            _noDataCheck: function (e) {
              for (var t = e.series, n = 0, i = t.length; i > n; n++)
                if (
                  t[n].type == a.CHART_TYPE_MAP ||
                  (t[n].data && t[n].data.length > 0) ||
                  (t[n].markPoint &&
                    t[n].markPoint.data &&
                    t[n].markPoint.data.length > 0) ||
                  (t[n].markLine &&
                    t[n].markLine.data &&
                    t[n].markLine.data.length > 0) ||
                  (t[n].nodes && t[n].nodes.length > 0) ||
                  (t[n].links && t[n].links.length > 0) ||
                  (t[n].matrix && t[n].matrix.length > 0) ||
                  (t[n].eventList && t[n].eventList.length > 0)
                )
                  return !1;
              this.clear();
              var o = (this._option && this._option.noDataLoadingOption) ||
                this._themeConfig.noDataLoadingOption ||
                a.noDataLoadingOption || {
                  text:
                    (this._option && this._option.noDataText) ||
                    this._themeConfig.noDataText ||
                    a.noDataText,
                  effect:
                    (this._option && this._option.noDataEffect) ||
                    this._themeConfig.noDataEffect ||
                    a.noDataEffect,
                };
              return this.showLoading(o), !0;
            },
            _render: function (t) {
              if ((this._mergeGlobalConifg(t), !this._noDataCheck(t))) {
                var n = t.backgroundColor;
                n && (this.dom.style.backgroundColor = n),
                  this._zr.clearAnimation(),
                  (this._chartList = []);
                var i = e("./chart"),
                  o = e("./component");
                (t.xAxis || t.yAxis) &&
                  ((t.grid = t.grid || {}), (t.dataZoom = t.dataZoom || {}));
                for (
                  var s,
                    r,
                    l,
                    h = [
                      "title",
                      "legend",
                      "tooltip",
                      "dataRange",
                      "roamController",
                      "grid",
                      "dataZoom",
                      "xAxis",
                      "yAxis",
                      "polar",
                    ],
                    V = 0,
                    U = h.length;
                  U > V;
                  V++
                )
                  (r = h[V]),
                    (l = this.component[r]),
                    t[r]
                      ? (l
                          ? l.refresh && l.refresh(t)
                          : ((s = o.get(/^[xy]Axis$/.test(r) ? "axis" : r)),
                            (l = new s(
                              this._themeConfig,
                              this._messageCenter,
                              this._zr,
                              t,
                              this,
                              r
                            )),
                            (this.component[r] = l)),
                        this._chartList.push(l))
                      : l &&
                        (l.dispose(),
                        (this.component[r] = null),
                        delete this.component[r]);
                for (
                  var m, p, d, c = {}, V = 0, U = t.series.length;
                  U > V;
                  V++
                )
                  (p = t.series[V].type),
                    p
                      ? c[p] ||
                        ((c[p] = !0),
                        (m = i.get(p)),
                        m
                          ? (this.chart[p]
                              ? ((d = this.chart[p]), d.refresh(t))
                              : (d = new m(
                                  this._themeConfig,
                                  this._messageCenter,
                                  this._zr,
                                  t,
                                  this
                                )),
                            this._chartList.push(d),
                            (this.chart[p] = d))
                          : console.error(p + " has not been required."))
                      : console.error(
                          "series[" + V + "] chart type has not been defined."
                        );
                for (p in this.chart)
                  p == a.CHART_TYPE_ISLAND ||
                    c[p] ||
                    (this.chart[p].dispose(),
                    (this.chart[p] = null),
                    delete this.chart[p]);
                this.component.grid &&
                  this.component.grid.refixAxisShape(this.component),
                  this._island.refresh(t),
                  this._toolbox.refresh(t),
                  t.animation && !t.renderAsImage
                    ? this._zr.refresh()
                    : this._zr.render();
                var u = "IMG" + this.id,
                  y = document.getElementById(u);
                t.renderAsImage
                  ? (y
                      ? (y.src = this.getDataURL(t.renderAsImage))
                      : ((y = this.getImage(t.renderAsImage)),
                        (y.id = u),
                        (y.style.position = "absolute"),
                        (y.style.left = 0),
                        (y.style.top = 0),
                        this.dom.firstChild.appendChild(y)),
                    this.un(),
                    this._zr.un(),
                    this._disposeChartList(),
                    this._zr.clear())
                  : y && y.parentNode.removeChild(y),
                  (y = null),
                  (this._option = t);
              }
            },
            restore: function () {
              this._clearEffect(),
                (this._option = o.clone(this._optionRestore)),
                this._disposeChartList(),
                this._island.clear(),
                this._toolbox.reset(this._option, !0),
                this._render(this._option);
            },
            refresh: function (e) {
              this._clearEffect(), (e = e || {});
              var t = e.option;
              !this._refreshInside &&
                t &&
                ((t = this.getOption()),
                o.merge(t, e.option, !0),
                o.merge(this._optionRestore, e.option, !0),
                this._toolbox.reset(t)),
                this._island.refresh(t),
                this._toolbox.refresh(t),
                this._zr.clearAnimation();
              for (var n = 0, i = this._chartList.length; i > n; n++)
                this._chartList[n].refresh && this._chartList[n].refresh(t);
              this.component.grid &&
                this.component.grid.refixAxisShape(this.component),
                this._zr.refresh();
            },
            _disposeChartList: function () {
              this._clearEffect(), this._zr.clearAnimation();
              for (var e = this._chartList.length; e--; ) {
                var t = this._chartList[e];
                if (t) {
                  var n = t.type;
                  this.chart[n] && delete this.chart[n],
                    this.component[n] && delete this.component[n],
                    t.dispose && t.dispose();
                }
              }
              this._chartList = [];
            },
            _mergeGlobalConifg: function (t) {
              for (
                var n = [
                    "backgroundColor",
                    "calculable",
                    "calculableColor",
                    "calculableHolderColor",
                    "nameConnector",
                    "valueConnector",
                    "animation",
                    "animationThreshold",
                    "animationDuration",
                    "animationDurationUpdate",
                    "animationEasing",
                    "addDataAnimation",
                    "symbolList",
                    "DRAG_ENABLE_TIME",
                  ],
                  i = n.length;
                i--;

              ) {
                var o = n[i];
                null == t[o] &&
                  (t[o] =
                    null != this._themeConfig[o] ? this._themeConfig[o] : a[o]);
              }
              var s = t.color;
              (s && s.length) || (s = this._themeConfig.color || a.color),
                (this._zr.getColor = function (t) {
                  var n = e("zrender/tool/color");
                  return n.getColor(t, s);
                });
            },
            setOption: function (e, t) {
              return e.timeline
                ? this._setTimelineOption(e)
                : this._setOption(e, t);
            },
            _setOption: function (e, t) {
              return (
                (this._option =
                  !t && this._option
                    ? o.merge(this.getOption(), o.clone(e), !0)
                    : o.clone(e)),
                (this._optionRestore = o.clone(this._option)),
                this._option.series && 0 !== this._option.series.length
                  ? (this.component.dataZoom &&
                      (this._option.dataZoom ||
                        (this._option.toolbox &&
                          this._option.toolbox.feature &&
                          this._option.toolbox.feature.dataZoom &&
                          this._option.toolbox.feature.dataZoom.show)) &&
                      this.component.dataZoom.syncOption(this._option),
                    this._toolbox.reset(this._option),
                    this._render(this._option),
                    this)
                  : void this._zr.clear()
              );
            },
            getOption: function () {
              function e(e) {
                var i = n._optionRestore[e];
                if (i)
                  if (i instanceof Array)
                    for (var a = i.length; a--; )
                      t[e][a].data = o.clone(i[a].data);
                  else t[e].data = o.clone(i.data);
              }
              var t = o.clone(this._option),
                n = this;
              return e("xAxis"), e("yAxis"), e("series"), t;
            },
            setSeries: function (e, t) {
              return (
                t
                  ? ((this._option.series = e), this.setOption(this._option, t))
                  : this.setOption({ series: e }),
                this
              );
            },
            getSeries: function () {
              return this.getOption().series;
            },
            _setTimelineOption: function (t) {
              this._timeline && this._timeline.dispose();
              var n = e("./component/timeline"),
                i = new n(
                  this._themeConfig,
                  this._messageCenter,
                  this._zr,
                  t,
                  this
                );
              return (
                (this._timeline = i),
                (this.component.timeline = this._timeline),
                this
              );
            },
            addData: function (e, t, n, i, s) {
              for (
                var r = e instanceof Array ? e : [[e, t, n, i, s]],
                  l = this.getOption(),
                  h = this._optionRestore,
                  V = 0,
                  U = r.length;
                U > V;
                V++
              ) {
                (e = r[V][0]),
                  (t = r[V][1]),
                  (n = r[V][2]),
                  (i = r[V][3]),
                  (s = r[V][4]);
                var m = h.series[e],
                  p = n ? "unshift" : "push",
                  d = n ? "pop" : "shift";
                if (m) {
                  var c = m.data,
                    u = l.series[e].data;
                  if (
                    (c[p](t), u[p](t), i || (c[d](), (t = u[d]())), null != s)
                  ) {
                    var y, b;
                    if (
                      m.type === a.CHART_TYPE_PIE &&
                      (y = h.legend) &&
                      (b = y.data)
                    ) {
                      var g = l.legend.data;
                      if ((b[p](s), g[p](s), !i)) {
                        var k = o.indexOf(b, t.name);
                        -1 != k && b.splice(k, 1),
                          (k = o.indexOf(g, t.name)),
                          -1 != k && g.splice(k, 1);
                      }
                    } else if (null != h.xAxis && null != h.yAxis) {
                      var f,
                        L,
                        x = m.xAxisIndex || 0;
                      (null == h.xAxis[x].type ||
                        "category" === h.xAxis[x].type) &&
                        ((f = h.xAxis[x].data),
                        (L = l.xAxis[x].data),
                        f[p](s),
                        L[p](s),
                        i || (f[d](), L[d]())),
                        (x = m.yAxisIndex || 0),
                        "category" === h.yAxis[x].type &&
                          ((f = h.yAxis[x].data),
                          (L = l.yAxis[x].data),
                          f[p](s),
                          L[p](s),
                          i || (f[d](), L[d]()));
                    }
                  }
                  this._option.series[e].data = l.series[e].data;
                }
              }
              this._zr.clearAnimation();
              for (var _ = this._chartList, V = 0, U = _.length; U > V; V++)
                l.addDataAnimation &&
                  _[V].addDataAnimation &&
                  _[V].addDataAnimation(r);
              this.component.dataZoom && this.component.dataZoom.syncOption(l),
                (this._option = l);
              var W = this;
              return (
                setTimeout(
                  function () {
                    if (W._zr) {
                      W._zr.clearAnimation();
                      for (var e = 0, t = _.length; t > e; e++)
                        _[e].motionlessOnce =
                          l.addDataAnimation && _[e].addDataAnimation;
                      W._messageCenter.dispatch(
                        a.EVENT.REFRESH,
                        null,
                        { option: l },
                        W
                      );
                    }
                  },
                  l.addDataAnimation ? l.animationDurationUpdate : 0
                ),
                this
              );
            },
            addMarkPoint: function (e, t) {
              return this._addMark(e, t, "markPoint");
            },
            addMarkLine: function (e, t) {
              return this._addMark(e, t, "markLine");
            },
            _addMark: function (e, t, n) {
              var i,
                a = this._option.series;
              if (a && (i = a[e])) {
                var s = this._optionRestore.series,
                  r = s[e],
                  l = i[n],
                  h = r[n];
                (l = i[n] = l || { data: [] }), (h = r[n] = h || { data: [] });
                for (var V in t)
                  "data" === V
                    ? ((l.data = l.data.concat(t.data)),
                      (h.data = h.data.concat(t.data)))
                    : "object" != typeof t[V] || null == l[V]
                    ? (l[V] = h[V] = t[V])
                    : (o.merge(l[V], t[V], !0), o.merge(h[V], t[V], !0));
                var U = this.chart[i.type];
                U && U.addMark(e, t, n);
              }
              return this;
            },
            delMarkPoint: function (e, t) {
              return this._delMark(e, t, "markPoint");
            },
            delMarkLine: function (e, t) {
              return this._delMark(e, t, "markLine");
            },
            _delMark: function (e, t, n) {
              var i,
                a,
                o,
                s = this._option.series;
              if (!(s && (i = s[e]) && (a = i[n]) && (o = a.data))) return this;
              t = t.split(" > ");
              for (var r = -1, l = 0, h = o.length; h > l; l++) {
                var V = o[l];
                if (V instanceof Array) {
                  if (V[0].name === t[0] && V[1].name === t[1]) {
                    r = l;
                    break;
                  }
                } else if (V.name === t[0]) {
                  r = l;
                  break;
                }
              }
              if (r > -1) {
                o.splice(r, 1),
                  this._optionRestore.series[e][n].data.splice(r, 1);
                var U = this.chart[i.type];
                U && U.delMark(e, t.join(" > "), n);
              }
              return this;
            },
            getDom: function () {
              return this.dom;
            },
            getZrender: function () {
              return this._zr;
            },
            getDataURL: function (e) {
              if (0 === this._chartList.length) {
                var t = "IMG" + this.id,
                  n = document.getElementById(t);
                if (n) return n.src;
              }
              var i = this.component.tooltip;
              switch ((i && i.hideTip(), e)) {
                case "jpeg":
                  break;
                default:
                  e = "png";
              }
              var a = this._option.backgroundColor;
              return (
                a && "rgba(0,0,0,0)" === a.replace(" ", "") && (a = "#fff"),
                this._zr.toDataURL("image/" + e, a)
              );
            },
            getImage: function (e) {
              var t = this._optionRestore.title,
                n = document.createElement("img");
              return (
                (n.src = this.getDataURL(e)),
                (n.title = (t && t.text) || "ECharts"),
                n
              );
            },
            getConnectedDataURL: function (t) {
              if (!this.isConnected()) return this.getDataURL(t);
              var n = this.dom,
                i = {
                  self: {
                    img: this.getDataURL(t),
                    left: n.offsetLeft,
                    top: n.offsetTop,
                    right: n.offsetLeft + n.offsetWidth,
                    bottom: n.offsetTop + n.offsetHeight,
                  },
                },
                a = i.self.left,
                o = i.self.top,
                s = i.self.right,
                r = i.self.bottom;
              for (var l in this._connected)
                (n = this._connected[l].getDom()),
                  (i[l] = {
                    img: this._connected[l].getDataURL(t),
                    left: n.offsetLeft,
                    top: n.offsetTop,
                    right: n.offsetLeft + n.offsetWidth,
                    bottom: n.offsetTop + n.offsetHeight,
                  }),
                  (a = Math.min(a, i[l].left)),
                  (o = Math.min(o, i[l].top)),
                  (s = Math.max(s, i[l].right)),
                  (r = Math.max(r, i[l].bottom));
              var h = document.createElement("div");
              (h.style.position = "absolute"),
                (h.style.left = "-4000px"),
                (h.style.width = s - a + "px"),
                (h.style.height = r - o + "px"),
                document.body.appendChild(h);
              var V = e("zrender").init(h),
                U = e("zrender/shape/Image");
              for (var l in i)
                V.addShape(
                  new U({
                    style: {
                      x: i[l].left - a,
                      y: i[l].top - o,
                      image: i[l].img,
                    },
                  })
                );
              V.render();
              var m = this._option.backgroundColor;
              m && "rgba(0,0,0,0)" === m.replace(/ /g, "") && (m = "#fff");
              var p = V.toDataURL("image/png", m);
              return (
                setTimeout(function () {
                  V.dispose(), h.parentNode.removeChild(h), (h = null);
                }, 100),
                p
              );
            },
            getConnectedImage: function (e) {
              var t = this._optionRestore.title,
                n = document.createElement("img");
              return (
                (n.src = this.getConnectedDataURL(e)),
                (n.title = (t && t.text) || "ECharts"),
                n
              );
            },
            on: function (e, t) {
              return this._messageCenterOutSide.bind(e, t, this), this;
            },
            un: function (e, t) {
              return this._messageCenterOutSide.unbind(e, t), this;
            },
            connect: function (e) {
              if (!e) return this;
              if (
                (this._connected || (this._connected = {}), e instanceof Array)
              )
                for (var t = 0, n = e.length; n > t; t++)
                  this._connected[e[t].id] = e[t];
              else this._connected[e.id] = e;
              return this;
            },
            disConnect: function (e) {
              if (!e || !this._connected) return this;
              if (e instanceof Array)
                for (var t = 0, n = e.length; n > t; t++)
                  delete this._connected[e[t].id];
              else delete this._connected[e.id];
              for (var i in this._connected) return this;
              return (this._connected = !1), this;
            },
            connectedEventHandler: function (e) {
              e.__echartsId != this.id && this._onevent(e);
            },
            isConnected: function () {
              return !!this._connected;
            },
            showLoading: function (t) {
              var n = {
                bubble: e("zrender/loadingEffect/Bubble"),
                spin: e("zrender/loadingEffect/Spin"),
              };
              t = t || {};
              var i = t.textStyle || {};
              t.textStyle = i;
              var s = o.merge(
                o.merge(o.clone(i), this._themeConfig.textStyle),
                a.textStyle
              );
              (i.textFont =
                s.fontStyle +
                " " +
                s.fontWeight +
                " " +
                s.fontSize +
                "px " +
                s.fontFamily),
                (i.text =
                  t.text ||
                  (this._option && this._option.loadingText) ||
                  this._themeConfig.loadingText ||
                  a.loadingText),
                null != t.x && (i.x = t.x),
                null != t.y && (i.y = t.y),
                (t.effectOption = t.effectOption || {}),
                (t.effectOption.textStyle = i);
              var r = t.effect;
              return (
                ("string" == typeof r || null == r) &&
                  (r =
                    n[
                      t.effect ||
                        (this._option && this._option.loadingEffect) ||
                        this._themeConfig.loadingEffect ||
                        a.loadingEffect
                    ] || n.spin),
                this._zr.showLoading(new r(t.effectOption)),
                this
              );
            },
            hideLoading: function () {
              return this._zr.hideLoading(), this;
            },
            setTheme: function (t) {
              if (t) {
                if ("string" == typeof t)
                  switch (t) {
                    case "macarons":
                      t = e("./theme/macarons");
                      break;
                    case "infographic":
                      t = e("./theme/infographic");
                      break;
                    default:
                      t = {};
                  }
                else t = t || {};
                this._themeConfig = t;
              }
              this._timeline && this._timeline.setTheme(!0),
                this._optionRestore && this.restore();
            },
            resize: function () {
              var e = this;
              return function () {
                if (
                  (e._clearEffect(),
                  e._zr.resize(),
                  e._option && e._option.renderAsImage)
                )
                  return e._render(e._option), e;
                e._zr.clearAnimation(),
                  e._island.resize(),
                  e._toolbox.resize(),
                  e._timeline && e._timeline.resize();
                for (var t = 0, n = e._chartList.length; n > t; t++)
                  e._chartList[t].resize && e._chartList[t].resize();
                return (
                  e.component.grid &&
                    e.component.grid.refixAxisShape(e.component),
                  e._zr.refresh(),
                  e._messageCenter.dispatch(a.EVENT.RESIZE, null, null, e),
                  e
                );
              };
            },
            _clearEffect: function () {
              this._zr.modLayer(a.EFFECT_ZLEVEL, { motionBlur: !1 }),
                this._zr.painter.clearLayer(a.EFFECT_ZLEVEL);
            },
            clear: function () {
              return (
                this._disposeChartList(),
                this._zr.clear(),
                (this._option = {}),
                (this._optionRestore = {}),
                (this.dom.style.backgroundColor = null),
                this
              );
            },
            dispose: function () {
              var e = this.dom.getAttribute(V);
              e && delete h[e],
                this._island.dispose(),
                this._toolbox.dispose(),
                this._timeline && this._timeline.dispose(),
                this._messageCenter.unbind(),
                this.clear(),
                this._zr.dispose(),
                (this._zr = null);
            },
          }),
          r
        );
      }
    ),
    n("echarts/config", [], function () {
      var e = {
        CHART_TYPE_LINE: "line",
        CHART_TYPE_BAR: "bar",
        CHART_TYPE_SCATTER: "scatter",
        CHART_TYPE_PIE: "pie",
        CHART_TYPE_RADAR: "radar",
        CHART_TYPE_MAP: "map",
        CHART_TYPE_K: "k",
        CHART_TYPE_ISLAND: "island",
        CHART_TYPE_FORCE: "force",
        CHART_TYPE_CHORD: "chord",
        CHART_TYPE_GAUGE: "gauge",
        CHART_TYPE_FUNNEL: "funnel",
        CHART_TYPE_EVENTRIVER: "eventRiver",
        COMPONENT_TYPE_TITLE: "title",
        COMPONENT_TYPE_LEGEND: "legend",
        COMPONENT_TYPE_DATARANGE: "dataRange",
        COMPONENT_TYPE_DATAVIEW: "dataView",
        COMPONENT_TYPE_DATAZOOM: "dataZoom",
        COMPONENT_TYPE_TOOLBOX: "toolbox",
        COMPONENT_TYPE_TOOLTIP: "tooltip",
        COMPONENT_TYPE_GRID: "grid",
        COMPONENT_TYPE_AXIS: "axis",
        COMPONENT_TYPE_POLAR: "polar",
        COMPONENT_TYPE_X_AXIS: "xAxis",
        COMPONENT_TYPE_Y_AXIS: "yAxis",
        COMPONENT_TYPE_AXIS_CATEGORY: "categoryAxis",
        COMPONENT_TYPE_AXIS_VALUE: "valueAxis",
        COMPONENT_TYPE_TIMELINE: "timeline",
        COMPONENT_TYPE_ROAMCONTROLLER: "roamController",
        backgroundColor: "rgba(0,0,0,0)",
        color: [
          "#ff7f50",
          "#87cefa",
          "#da70d6",
          "#32cd32",
          "#6495ed",
          "#ff69b4",
          "#ba55d3",
          "#cd5c5c",
          "#ffa500",
          "#40e0d0",
        ],
        markPoint: {
          clickable: !0,
          symbol: "pin",
          symbolSize: 10,
          large: !1,
          effect: {
            show: !1,
            loop: !0,
            period: 15,
            type: "scale",
            scaleSize: 2,
            bounceDistance: 10,
          },
          itemStyle: {
            normal: { borderWidth: 2, label: { show: !0, position: "inside" } },
            emphasis: { label: { show: !0 } },
          },
        },
        markLine: {
          clickable: !0,
          symbol: ["circle", "arrow"],
          symbolSize: [2, 2],
          smoothRadian: 0.2,
          precision: 2,
          effect: { show: !1, loop: !0, period: 15, scaleSize: 2 },
          itemStyle: {
            normal: {
              borderWidth: 1.5,
              label: {
                show: !0,
                position: "end",
                textStyle: { align: "right", baseline: "bottom" },
              },
              lineStyle: { type: "dashed" },
            },
            emphasis: {
              label: {
                show: !1,
                textStyle: { align: "right", baseline: "bottom" },
              },
              lineStyle: {},
            },
          },
        },
        textStyle: {
          decoration: "none",
          fontFamily: "Arial, Verdana, sans-serif",
          fontSize: 12,
          fontStyle: "normal",
          fontWeight: "normal",
        },
        EVENT: {
          REFRESH: "refresh",
          RESTORE: "restore",
          RESIZE: "resize",
          CLICK: "click",
          DBLCLICK: "dblclick",
          HOVER: "hover",
          MOUSEOUT: "mouseout",
          DATA_CHANGED: "dataChanged",
          DATA_ZOOM: "dataZoom",
          DATA_RANGE: "dataRange",
          DATA_RANGE_SELECTED: "dataRangeSelected",
          DATA_RANGE_HOVERLINK: "dataRangeHoverLink",
          LEGEND_SELECTED: "legendSelected",
          LEGEND_HOVERLINK: "legendHoverLink",
          MAP_SELECTED: "mapSelected",
          PIE_SELECTED: "pieSelected",
          MAGIC_TYPE_CHANGED: "magicTypeChanged",
          DATA_VIEW_CHANGED: "dataViewChanged",
          TIMELINE_CHANGED: "timelineChanged",
          MAP_ROAM: "mapRoam",
          FORCE_LAYOUT_END: "forceLayoutEnd",
          TOOLTIP_HOVER: "tooltipHover",
          TOOLTIP_IN_GRID: "tooltipInGrid",
          TOOLTIP_OUT_GRID: "tooltipOutGrid",
          ROAMCONTROLLER: "roamController",
        },
        DRAG_ENABLE_TIME: 120,
        EFFECT_ZLEVEL: 10,
        symbolList: [
          "emptyCircle",
          "emptyRectangle",
          "emptyTriangle",
          "emptyDiamond",
          "circle",
          "rectangle",
          "triangle",
          "diamond",
        ],
        loadingEffect: "spin",
        loadingText: "数据读取中...",
        noDataEffect: "bubble",
        noDataText: "暂无数据",
        calculable: !1,
        calculableColor: "rgba(255,165,0,0.6)",
        calculableHolderColor: "#ccc",
        nameConnector: " & ",
        valueConnector: ": ",
        animation: !0,
        addDataAnimation: !0,
        animationThreshold: 2e3,
        animationDuration: 2e3,
        animationDurationUpdate: 500,
        animationEasing: "ExponentialOut",
      };
      return e;
    }),
    n("zrender/tool/util", ["require"], function () {
      function e(e) {
        return e && 1 === e.nodeType && "string" == typeof e.nodeName;
      }
      function t(n) {
        if ("object" == typeof n && null !== n) {
          var i = n;
          if (n instanceof Array) {
            i = [];
            for (var a = 0, o = n.length; o > a; a++) i[a] = t(n[a]);
          } else if (!c[u.call(n)] && !e(n)) {
            i = {};
            for (var s in n) n.hasOwnProperty(s) && (i[s] = t(n[s]));
          }
          return i;
        }
        return n;
      }
      function n(t, n, a, o) {
        if (n.hasOwnProperty(a)) {
          var s = t[a];
          "object" != typeof s || c[u.call(s)] || e(s)
            ? (!o && a in t) || (t[a] = n[a])
            : i(t[a], n[a], o);
        }
      }
      function i(e, t, i) {
        for (var a in t) n(e, t, a, i);
        return e;
      }
      function a() {
        return V || (V = document.createElement("canvas").getContext("2d")), V;
      }
      function o() {
        return (
          m ||
            ((U = document.createElement("canvas")),
            (p = U.width),
            (d = U.height),
            (m = U.getContext("2d"))),
          m
        );
      }
      function s(e, t) {
        var n,
          i = 100;
        e + y > p && ((p = e + y + i), (U.width = p), (n = !0)),
          t + b > d && ((d = t + b + i), (U.height = d), (n = !0)),
          -y > e &&
            ((y = Math.ceil(-e / i) * i), (p += y), (U.width = p), (n = !0)),
          -b > t &&
            ((b = Math.ceil(-t / i) * i), (d += b), (U.height = d), (n = !0)),
          n && m.translate(y, b);
      }
      function r() {
        return { x: y, y: b };
      }
      function l(e, t) {
        if (e.indexOf) return e.indexOf(t);
        for (var n = 0, i = e.length; i > n; n++) if (e[n] === t) return n;
        return -1;
      }
      function h(e, t) {
        function n() {}
        var i = e.prototype;
        (n.prototype = t.prototype), (e.prototype = new n());
        for (var a in i) e.prototype[a] = i[a];
        e.constructor = e;
      }
      var V,
        U,
        m,
        p,
        d,
        c = {
          "[object Function]": 1,
          "[object RegExp]": 1,
          "[object Date]": 1,
          "[object Error]": 1,
          "[object CanvasGradient]": 1,
        },
        u = Object.prototype.toString,
        y = 0,
        b = 0;
      return {
        inherits: h,
        clone: t,
        merge: i,
        getContext: a,
        getPixelContext: o,
        getPixelOffset: r,
        adjustCanvasSize: s,
        indexOf: l,
      };
    }),
    n("zrender/tool/event", ["require", "../mixin/Eventful"], function (e) {
      "use strict";
      function t(e) {
        return (
          ("undefined" != typeof e.zrenderX && e.zrenderX) ||
          ("undefined" != typeof e.offsetX && e.offsetX) ||
          ("undefined" != typeof e.layerX && e.layerX) ||
          ("undefined" != typeof e.clientX && e.clientX)
        );
      }
      function n(e) {
        return (
          ("undefined" != typeof e.zrenderY && e.zrenderY) ||
          ("undefined" != typeof e.offsetY && e.offsetY) ||
          ("undefined" != typeof e.layerY && e.layerY) ||
          ("undefined" != typeof e.clientY && e.clientY)
        );
      }
      function i(e) {
        return (
          ("undefined" != typeof e.zrenderDelta && e.zrenderDelta) ||
          ("undefined" != typeof e.wheelDelta && e.wheelDelta) ||
          ("undefined" != typeof e.detail && -e.detail)
        );
      }
      var a = e("../mixin/Eventful"),
        o =
          "function" == typeof window.addEventListener
            ? function (e) {
                e.preventDefault(), e.stopPropagation(), (e.cancelBubble = !0);
              }
            : function (e) {
                (e.returnValue = !1), (e.cancelBubble = !0);
              };
      return { getX: t, getY: n, getDelta: i, stop: o, Dispatcher: a };
    }),
    n("zrender", ["zrender/zrender"], function (e) {
      return e;
    }),
    n(
      "zrender/zrender",
      [
        "require",
        "./tool/util",
        "./tool/log",
        "./tool/guid",
        "./Handler",
        "./Painter",
        "./Storage",
        "./animation/Animation",
        "./tool/env",
      ],
      function (e) {
        function t(e) {
          return function () {
            for (var t = e.animatingElements, n = 0, i = t.length; i > n; n++)
              e.storage.mod(t[n].id);
            (t.length || e._needsRefreshNextFrame) && e.refresh();
          };
        }
        var n = e("./tool/util"),
          i = e("./tool/log"),
          a = e("./tool/guid"),
          o = e("./Handler"),
          s = e("./Painter"),
          r = e("./Storage"),
          l = e("./animation/Animation"),
          h = {},
          V = {};
        (V.version = "1.0.0"),
          (V.init = function (e) {
            var t = new U(a(), e);
            return (h[t.id] = t), t;
          }),
          (V.dispose = function (e) {
            if (e) e.dispose();
            else {
              for (var t in h) h[t].dispose();
              h = {};
            }
            return V;
          }),
          (V.getInstance = function (e) {
            return h[e];
          }),
          (V.delInstance = function (e) {
            return delete h[e], V;
          });
        var U = function (n, i) {
          (this.id = n),
            (this.env = e("./tool/env")),
            (this.storage = new r()),
            (this.painter = new s(i, this.storage)),
            (this.handler = new o(i, this.storage, this.painter)),
            (this.animatingElements = []),
            (this.animation = new l({ stage: { update: t(this) } })),
            this.animation.start();
          var a = this;
          (this.painter.refreshNextFrame = function () {
            a.refreshNextFrame();
          }),
            (this._needsRefreshNextFrame = !1);
        };
        return (
          (U.prototype.getId = function () {
            return this.id;
          }),
          (U.prototype.addShape = function (e) {
            return this.storage.addRoot(e), this;
          }),
          (U.prototype.addGroup = function (e) {
            return this.storage.addRoot(e), this;
          }),
          (U.prototype.delShape = function (e) {
            return this.storage.delRoot(e), this;
          }),
          (U.prototype.delGroup = function (e) {
            return this.storage.delRoot(e), this;
          }),
          (U.prototype.modShape = function (e, t) {
            return this.storage.mod(e, t), this;
          }),
          (U.prototype.modGroup = function (e, t) {
            return this.storage.mod(e, t), this;
          }),
          (U.prototype.modLayer = function (e, t) {
            return this.painter.modLayer(e, t), this;
          }),
          (U.prototype.addHoverShape = function (e) {
            return this.storage.addHover(e), this;
          }),
          (U.prototype.render = function (e) {
            return (
              this.painter.render(e), (this._needsRefreshNextFrame = !1), this
            );
          }),
          (U.prototype.refresh = function (e) {
            return (
              this.painter.refresh(e), (this._needsRefreshNextFrame = !1), this
            );
          }),
          (U.prototype.refreshNextFrame = function () {
            return (this._needsRefreshNextFrame = !0), this;
          }),
          (U.prototype.refreshHover = function (e) {
            return this.painter.refreshHover(e), this;
          }),
          (U.prototype.refreshShapes = function (e, t) {
            return this.painter.refreshShapes(e, t), this;
          }),
          (U.prototype.resize = function () {
            return this.painter.resize(), this;
          }),
          (U.prototype.animate = function (e, t, a) {
            if (("string" == typeof e && (e = this.storage.get(e)), e)) {
              var o;
              if (t) {
                for (
                  var s = t.split("."), r = e, l = 0, h = s.length;
                  h > l;
                  l++
                )
                  r && (r = r[s[l]]);
                r && (o = r);
              } else o = e;
              if (!o)
                return void i(
                  'Property "' + t + '" is not existed in element ' + e.id
                );
              var V = this.animatingElements;
              return (
                "undefined" == typeof e.__aniCount && (e.__aniCount = 0),
                0 === e.__aniCount && V.push(e),
                e.__aniCount++,
                this.animation.animate(o, { loop: a }).done(function () {
                  if ((e.__aniCount--, 0 === e.__aniCount)) {
                    var t = n.indexOf(V, e);
                    V.splice(t, 1);
                  }
                })
              );
            }
            i("Element not existed");
          }),
          (U.prototype.clearAnimation = function () {
            this.animation.clear();
          }),
          (U.prototype.showLoading = function (e) {
            return this.painter.showLoading(e), this;
          }),
          (U.prototype.hideLoading = function () {
            return this.painter.hideLoading(), this;
          }),
          (U.prototype.getWidth = function () {
            return this.painter.getWidth();
          }),
          (U.prototype.getHeight = function () {
            return this.painter.getHeight();
          }),
          (U.prototype.toDataURL = function (e, t, n) {
            return this.painter.toDataURL(e, t, n);
          }),
          (U.prototype.shapeToImage = function (e, t, n) {
            var i = a();
            return this.painter.shapeToImage(i, e, t, n);
          }),
          (U.prototype.on = function (e, t, n) {
            return this.handler.on(e, t, n), this;
          }),
          (U.prototype.un = function (e, t) {
            return this.handler.un(e, t), this;
          }),
          (U.prototype.trigger = function (e, t) {
            return this.handler.trigger(e, t), this;
          }),
          (U.prototype.clear = function () {
            return this.storage.delRoot(), this.painter.clear(), this;
          }),
          (U.prototype.dispose = function () {
            this.animation.stop(),
              this.clear(),
              this.storage.dispose(),
              this.painter.dispose(),
              this.handler.dispose(),
              (this.animation = this.animatingElements = this.storage = this.painter = this.handler = null),
              V.delInstance(this.id);
          }),
          V
        );
      }
    ),
    n("zrender/config", [], function () {
      var e = {
        EVENT: {
          RESIZE: "resize",
          CLICK: "click",
          DBLCLICK: "dblclick",
          MOUSEWHEEL: "mousewheel",
          MOUSEMOVE: "mousemove",
          MOUSEOVER: "mouseover",
          MOUSEOUT: "mouseout",
          MOUSEDOWN: "mousedown",
          MOUSEUP: "mouseup",
          GLOBALOUT: "globalout",
          DRAGSTART: "dragstart",
          DRAGEND: "dragend",
          DRAGENTER: "dragenter",
          DRAGOVER: "dragover",
          DRAGLEAVE: "dragleave",
          DROP: "drop",
          touchClickDelay: 300,
        },
        catchBrushException: !1,
        debugMode: 0,
        devicePixelRatio: Math.max(window.devicePixelRatio || 1, 1),
      };
      return e;
    }),
    n(
      "echarts/chart/island",
      [
        "require",
        "./base",
        "zrender/shape/Circle",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/event",
        "zrender/tool/color",
        "../util/accMath",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, s) {
          n.call(this, e, t, i, a, s),
            this._nameConnector,
            this._valueConnector,
            (this._zrHeight = this.zr.getHeight()),
            (this._zrWidth = this.zr.getWidth());
          var l = this;
          l.shapeHandler.onmousewheel = function (e) {
            var t = e.target,
              n = e.event,
              i = r.getDelta(n);
            (i = i > 0 ? -1 : 1),
              (t.style.r -= i),
              (t.style.r = t.style.r < 5 ? 5 : t.style.r);
            var a = o.get(t, "value"),
              s = a * l.option.island.calculateStep;
            a = s > 1 ? Math.round(a - s * i) : +(a - s * i).toFixed(2);
            var h = o.get(t, "name");
            (t.style.text = h + ":" + a),
              o.set(t, "value", a),
              o.set(t, "name", h),
              l.zr.modShape(t.id),
              l.zr.refreshNextFrame(),
              r.stop(n);
          };
        }
        var n = e("./base"),
          i = e("zrender/shape/Circle"),
          a = e("../config");
        a.island = { zlevel: 0, z: 5, r: 15, calculateStep: 0.1 };
        var o = e("../util/ecData"),
          s = e("zrender/tool/util"),
          r = e("zrender/tool/event");
        return (
          (t.prototype = {
            type: a.CHART_TYPE_ISLAND,
            _combine: function (t, n) {
              var i = e("zrender/tool/color"),
                a = e("../util/accMath"),
                s = a.accAdd(o.get(t, "value"), o.get(n, "value")),
                r = o.get(t, "name") + this._nameConnector + o.get(n, "name");
              (t.style.text = r + this._valueConnector + s),
                o.set(t, "value", s),
                o.set(t, "name", r),
                (t.style.r = this.option.island.r),
                (t.style.color = i.mix(t.style.color, n.style.color));
            },
            refresh: function (e) {
              e &&
                ((e.island = this.reformOption(e.island)),
                (this.option = e),
                (this._nameConnector = this.option.nameConnector),
                (this._valueConnector = this.option.valueConnector));
            },
            getOption: function () {
              return this.option;
            },
            resize: function () {
              var e = this.zr.getWidth(),
                t = this.zr.getHeight(),
                n = e / (this._zrWidth || e),
                i = t / (this._zrHeight || t);
              if (1 !== n || 1 !== i) {
                (this._zrWidth = e), (this._zrHeight = t);
                for (var a = 0, o = this.shapeList.length; o > a; a++)
                  this.zr.modShape(this.shapeList[a].id, {
                    style: {
                      x: Math.round(this.shapeList[a].style.x * n),
                      y: Math.round(this.shapeList[a].style.y * i),
                    },
                  });
              }
            },
            add: function (e) {
              var t = o.get(e, "name"),
                n = o.get(e, "value"),
                a = null != o.get(e, "series") ? o.get(e, "series").name : "",
                s = this.getFont(this.option.island.textStyle),
                r = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  style: {
                    x: e.style.x,
                    y: e.style.y,
                    r: this.option.island.r,
                    color: e.style.color || e.style.strokeColor,
                    text: t + this._valueConnector + n,
                    textFont: s,
                  },
                  draggable: !0,
                  hoverable: !0,
                  onmousewheel: this.shapeHandler.onmousewheel,
                  _type: "island",
                };
              "#fff" === r.style.color && (r.style.color = e.style.strokeColor),
                this.setCalculable(r),
                (r.dragEnableTime = 0),
                o.pack(r, { name: a }, -1, n, -1, t),
                (r = new i(r)),
                this.shapeList.push(r),
                this.zr.addShape(r);
            },
            del: function (e) {
              this.zr.delShape(e.id);
              for (var t = [], n = 0, i = this.shapeList.length; i > n; n++)
                this.shapeList[n].id != e.id && t.push(this.shapeList[n]);
              this.shapeList = t;
            },
            ondrop: function (e, t) {
              if (this.isDrop && e.target) {
                var n = e.target,
                  i = e.dragged;
                this._combine(n, i),
                  this.zr.modShape(n.id),
                  (t.dragIn = !0),
                  (this.isDrop = !1);
              }
            },
            ondragend: function (e, t) {
              var n = e.target;
              this.isDragend
                ? t.dragIn && (this.del(n), (t.needRefresh = !0))
                : t.dragIn ||
                  ((n.style.x = r.getX(e.event)),
                  (n.style.y = r.getY(e.event)),
                  this.add(n),
                  (t.needRefresh = !0)),
                (this.isDragend = !1);
            },
          }),
          s.inherits(t, n),
          e("../chart").define("island", t),
          t
        );
      }
    ),
    n(
      "echarts/component/toolbox",
      [
        "require",
        "./base",
        "zrender/shape/Image",
        "zrender/shape/Rectangle",
        "../util/shape/Icon",
        "../config",
        "zrender/tool/util",
        "zrender/config",
        "zrender/tool/event",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o),
            (this.dom = o.dom),
            (this._magicType = {}),
            (this._magicMap = {}),
            (this._isSilence = !1),
            this._iconList,
            (this._iconShapeMap = {}),
            (this._featureTitle = {}),
            (this._featureIcon = {}),
            (this._featureColor = {}),
            (this._featureOption = {}),
            (this._enableColor = "red"),
            (this._disableColor = "#ccc"),
            (this._markShapeList = []);
          var s = this;
          (s._onDataZoom = function (e) {
            s.__onDataZoom(e);
          }),
            (s._onDataZoomReset = function (e) {
              s.__onDataZoomReset(e);
            }),
            (s._onRestore = function (e) {
              s.__onRestore(e);
            }),
            (s._onMagicType = function (e) {
              s.__onMagicType(e);
            }),
            (s._onCustomHandler = function (e) {
              s.__onCustomHandler(e);
            }),
            (s._onmousemove = function (e) {
              return s.__onmousemove(e);
            }),
            (s._onmousedown = function (e) {
              return s.__onmousedown(e);
            }),
            (s._onmouseup = function (e) {
              return s.__onmouseup(e);
            });
        }
        var n = e("./base"),
          i = e("zrender/shape/Image"),
          a = e("zrender/shape/Rectangle"),
          o = e("../util/shape/Icon"),
          s = e("../config");
        s.toolbox = {
          zlevel: 0,
          z: 6,
          show: !1,
          orient: "horizontal",
          x: "right",
          y: "bottom",
          color: ["#1e90ff", "#22bb22", "#4b0082", "#d2691e"],
          disableColor: "#ddd",
          effectiveColor: "red",
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "#ccc",
          borderWidth: 0,
          padding: 1,
          itemGap: 18,
          itemSize: 24,
          showTitle: !0,
          feature: {
            dataZoom: {
              show: !1,
              title: { dataZoom: "区域缩放", dataZoomReset: "区域缩放后退" },
            },
            magicType: {
              show: !1,
              title: {
                line: "折线图切换",
                bar: "柱形图切换",
                stack: "堆积",
                tiled: "平铺",
                force: "力导向布局图切换",
                chord: "和弦图切换",
                pie: "饼图切换",
                funnel: "漏斗图切换",
              },
              type: [],
            },
            restore: { show: !1, title: "还原" },
          },
        };
        var r = e("zrender/tool/util"),
          l = e("zrender/config"),
          h = e("zrender/tool/event"),
          V = "stack",
          U = "tiled";
        return (
          (t.prototype = {
            type: s.COMPONENT_TYPE_TOOLBOX,
            _buildShape: function () {
              this._iconList = [];
              var e = this.option.toolbox;
              (this._enableColor = e.effectiveColor),
                (this._disableColor = e.disableColor);
              var t = e.feature,
                n = [];
              for (var i in t)
                if (t[i].show)
                  switch (i) {
                    case "mark":
                      break;
                    case "magicType":
                      for (var a = 0, o = t[i].type.length; o > a; a++)
                        (t[i].title[t[i].type[a] + "Chart"] =
                          t[i].title[t[i].type[a]]),
                          t[i].option &&
                            (t[i].option[t[i].type[a] + "Chart"] =
                              t[i].option[t[i].type[a]]),
                          n.push({ key: i, name: t[i].type[a] + "Chart" });
                      break;
                    case "dataZoom":
                      n.push({ key: i, name: "dataZoom" }),
                        n.push({ key: i, name: "dataZoomReset" });
                      break;
                    case "saveAsImage":
                    case "dataView":
                      break;
                    default:
                      n.push({ key: i, name: i });
                  }
              if (n.length > 0) {
                for (var s, i, a = 0, o = n.length; o > a; a++)
                  (s = n[a].name),
                    (i = n[a].key),
                    this._iconList.push(s),
                    (this._featureTitle[s] = t[i].title[s] || t[i].title),
                    t[i].icon &&
                      (this._featureIcon[s] = t[i].icon[s] || t[i].icon),
                    t[i].color &&
                      (this._featureColor[s] = t[i].color[s] || t[i].color),
                    t[i].option &&
                      (this._featureOption[s] = t[i].option[s] || t[i].option);
                (this._itemGroupLocation = this._getItemGroupLocation()),
                  this._buildBackground(),
                  this._buildItem();
                for (var a = 0, o = this.shapeList.length; o > a; a++)
                  this.zr.addShape(this.shapeList[a]);
                this._iconShapeMap.dataZoomReset &&
                  0 === this._zoomQueue.length &&
                  this._iconDisable(this._iconShapeMap.dataZoomReset);
              }
            },
            _buildItem: function () {
              var e,
                t,
                n,
                a,
                s = this.option.toolbox,
                r = this._iconList.length,
                l = this._itemGroupLocation.x,
                h = this._itemGroupLocation.y,
                V = s.itemSize,
                U = s.itemGap,
                m = s.color instanceof Array ? s.color : [s.color],
                p = this.getFont(s.textStyle);
              "horizontal" === s.orient
                ? ((t =
                    this._itemGroupLocation.y / this.zr.getHeight() < 0.5
                      ? "bottom"
                      : "top"),
                  (n =
                    this._itemGroupLocation.x / this.zr.getWidth() < 0.5
                      ? "left"
                      : "right"),
                  (a =
                    this._itemGroupLocation.y / this.zr.getHeight() < 0.5
                      ? "top"
                      : "bottom"))
                : (t =
                    this._itemGroupLocation.x / this.zr.getWidth() < 0.5
                      ? "right"
                      : "left"),
                (this._iconShapeMap = {});
              for (var d = this, c = 0; r > c; c++) {
                switch (
                  ((e = {
                    type: "icon",
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      x: l,
                      y: h,
                      width: V,
                      height: V,
                      iconType: this._iconList[c],
                      lineWidth: 1,
                      strokeColor:
                        this._featureColor[this._iconList[c]] ||
                        m[c % m.length],
                      brushType: "stroke",
                    },
                    highlightStyle: {
                      lineWidth: 1,
                      text: s.showTitle
                        ? this._featureTitle[this._iconList[c]]
                        : void 0,
                      textFont: p,
                      textPosition: t,
                      strokeColor:
                        this._featureColor[this._iconList[c]] ||
                        m[c % m.length],
                    },
                    hoverable: !0,
                    clickable: !0,
                  }),
                  this._featureIcon[this._iconList[c]] &&
                    ((e.style.image = this._featureIcon[
                      this._iconList[c]
                    ].replace(new RegExp("^image:\\/\\/"), "")),
                    (e.style.opacity = 0.8),
                    (e.highlightStyle.opacity = 1),
                    (e.type = "image")),
                  "horizontal" === s.orient &&
                    (0 === c &&
                      "left" === n &&
                      ((e.highlightStyle.textPosition = "specific"),
                      (e.highlightStyle.textAlign = n),
                      (e.highlightStyle.textBaseline = a),
                      (e.highlightStyle.textX = l),
                      (e.highlightStyle.textY =
                        "top" === a ? h + V + 10 : h - 10)),
                    c === r - 1 &&
                      "right" === n &&
                      ((e.highlightStyle.textPosition = "specific"),
                      (e.highlightStyle.textAlign = n),
                      (e.highlightStyle.textBaseline = a),
                      (e.highlightStyle.textX = l + V),
                      (e.highlightStyle.textY =
                        "top" === a ? h + V + 10 : h - 10))),
                  this._iconList[c])
                ) {
                  case "dataZoom":
                    e.onclick = d._onDataZoom;
                    break;
                  case "dataZoomReset":
                    e.onclick = d._onDataZoomReset;
                    break;
                  case "restore":
                    e.onclick = d._onRestore;
                    break;
                  default:
                    this._iconList[c].match("Chart")
                      ? ((e._name = this._iconList[c].replace("Chart", "")),
                        (e.onclick = d._onMagicType))
                      : (e.onclick = d._onCustomHandler);
                }
                "icon" === e.type
                  ? (e = new o(e))
                  : "image" === e.type && (e = new i(e)),
                  this.shapeList.push(e),
                  (this._iconShapeMap[this._iconList[c]] = e),
                  "horizontal" === s.orient ? (l += V + U) : (h += V + U);
              }
            },
            _buildBackground: function () {
              var e = this.option.toolbox,
                t = this.reformCssArray(this.option.toolbox.padding);
              this.shapeList.push(
                new a({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this._itemGroupLocation.x - t[3],
                    y: this._itemGroupLocation.y - t[0],
                    width: this._itemGroupLocation.width + t[3] + t[1],
                    height: this._itemGroupLocation.height + t[0] + t[2],
                    brushType: 0 === e.borderWidth ? "fill" : "both",
                    color: e.backgroundColor,
                    strokeColor: e.borderColor,
                    lineWidth: e.borderWidth,
                  },
                })
              );
            },
            _getItemGroupLocation: function () {
              var e = this.option.toolbox,
                t = this.reformCssArray(this.option.toolbox.padding),
                n = this._iconList.length,
                i = e.itemGap,
                a = e.itemSize,
                o = 0,
                s = 0;
              "horizontal" === e.orient
                ? ((o = (a + i) * n - i), (s = a))
                : ((s = (a + i) * n - i), (o = a));
              var r,
                l = this.zr.getWidth();
              switch (e.x) {
                case "center":
                  r = Math.floor((l - o) / 2);
                  break;
                case "left":
                  r = t[3] + e.borderWidth;
                  break;
                case "right":
                  r = l - o - t[1] - e.borderWidth;
                  break;
                default:
                  (r = e.x - 0), (r = isNaN(r) ? 0 : r);
              }
              var h,
                V = this.zr.getHeight();
              switch (e.y) {
                case "top":
                  h = t[0] + e.borderWidth;
                  break;
                case "bottom":
                  h = V - s - t[2] - e.borderWidth;
                  break;
                case "center":
                  h = Math.floor((V - s) / 2);
                  break;
                default:
                  (h = e.y - 0), (h = isNaN(h) ? 0 : h);
              }
              return { x: r, y: h, width: o, height: s };
            },
            __onmousemove: function (e) {
              this._zooming &&
                ((this._zoomShape.style.width =
                  h.getX(e.event) - this._zoomShape.style.x),
                (this._zoomShape.style.height =
                  h.getY(e.event) - this._zoomShape.style.y),
                this.zr.addHoverShape(this._zoomShape),
                (this.dom.style.cursor = "crosshair"),
                h.stop(e.event)),
                this._zoomStart &&
                  "pointer" != this.dom.style.cursor &&
                  "move" != this.dom.style.cursor &&
                  (this.dom.style.cursor = "crosshair");
            },
            __onmousedown: function (e) {
              if (!e.target) {
                this._zooming = !0;
                var t = h.getX(e.event),
                  n = h.getY(e.event),
                  i = this.option.dataZoom || {};
                return (
                  (this._zoomShape = new a({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      x: t,
                      y: n,
                      width: 1,
                      height: 1,
                      brushType: "both",
                    },
                    highlightStyle: {
                      lineWidth: 2,
                      color: i.fillerColor || s.dataZoom.fillerColor,
                      strokeColor: i.handleColor || s.dataZoom.handleColor,
                      brushType: "both",
                    },
                  })),
                  this.zr.addHoverShape(this._zoomShape),
                  !0
                );
              }
            },
            __onmouseup: function () {
              if (
                !this._zoomShape ||
                Math.abs(this._zoomShape.style.width) < 10 ||
                Math.abs(this._zoomShape.style.height) < 10
              )
                return (this._zooming = !1), !0;
              if (this._zooming && this.component.dataZoom) {
                this._zooming = !1;
                var e = this.component.dataZoom.rectZoom(this._zoomShape.style);
                e &&
                  (this._zoomQueue.push({
                    start: e.start,
                    end: e.end,
                    start2: e.start2,
                    end2: e.end2,
                  }),
                  this._iconEnable(this._iconShapeMap.dataZoomReset),
                  this.zr.refreshNextFrame());
              }
              return !0;
            },
            __onDataZoom: function (e) {
              var t = e.target;
              if (this._zooming || this._zoomStart)
                this._resetZoom(),
                  this.zr.refreshNextFrame(),
                  (this.dom.style.cursor = "default");
              else {
                this.zr.modShape(t.id, {
                  style: { strokeColor: this._enableColor },
                }),
                  this.zr.refreshNextFrame(),
                  (this._zoomStart = !0);
                var n = this;
                setTimeout(function () {
                  n.zr &&
                    n.zr.on(l.EVENT.MOUSEDOWN, n._onmousedown) &&
                    n.zr.on(l.EVENT.MOUSEUP, n._onmouseup) &&
                    n.zr.on(l.EVENT.MOUSEMOVE, n._onmousemove);
                }, 10),
                  (this.dom.style.cursor = "crosshair");
              }
              return !0;
            },
            __onDataZoomReset: function () {
              return (
                this._zooming && (this._zooming = !1),
                this._zoomQueue.pop(),
                this._zoomQueue.length > 0
                  ? this.component.dataZoom.absoluteZoom(
                      this._zoomQueue[this._zoomQueue.length - 1]
                    )
                  : (this.component.dataZoom.rectZoom(),
                    this._iconDisable(this._iconShapeMap.dataZoomReset),
                    this.zr.refreshNextFrame()),
                !0
              );
            },
            _resetZoom: function () {
              (this._zooming = !1),
                this._zoomStart &&
                  ((this._zoomStart = !1),
                  this._iconShapeMap.dataZoom &&
                    this.zr.modShape(this._iconShapeMap.dataZoom.id, {
                      style: {
                        strokeColor: this._iconShapeMap.dataZoom.highlightStyle
                          .strokeColor,
                      },
                    }),
                  this.zr.un(l.EVENT.MOUSEDOWN, this._onmousedown),
                  this.zr.un(l.EVENT.MOUSEUP, this._onmouseup),
                  this.zr.un(l.EVENT.MOUSEMOVE, this._onmousemove));
            },
            _iconDisable: function (e) {
              "image" != e.type
                ? this.zr.modShape(e.id, {
                    hoverable: !1,
                    clickable: !1,
                    style: { strokeColor: this._disableColor },
                  })
                : this.zr.modShape(e.id, {
                    hoverable: !1,
                    clickable: !1,
                    style: { opacity: 0.3 },
                  });
            },
            _iconEnable: function (e) {
              "image" != e.type
                ? this.zr.modShape(e.id, {
                    hoverable: !0,
                    clickable: !0,
                    style: { strokeColor: e.highlightStyle.strokeColor },
                  })
                : this.zr.modShape(e.id, {
                    hoverable: !0,
                    clickable: !0,
                    style: { opacity: 0.8 },
                  });
            },
            __onRestore: function () {
              return (
                this._resetZoom(),
                this.messageCenter.dispatch(
                  s.EVENT.RESTORE,
                  null,
                  null,
                  this.myChart
                ),
                !0
              );
            },
            __onMagicType: function (e) {
              var t = e.target._name;
              return (
                this._magicType[t] ||
                  ((this._magicType[t] = !0),
                  t === s.CHART_TYPE_LINE
                    ? (this._magicType[s.CHART_TYPE_BAR] = !1)
                    : t === s.CHART_TYPE_BAR &&
                      (this._magicType[s.CHART_TYPE_LINE] = !1),
                  t === s.CHART_TYPE_PIE
                    ? (this._magicType[s.CHART_TYPE_FUNNEL] = !1)
                    : t === s.CHART_TYPE_FUNNEL &&
                      (this._magicType[s.CHART_TYPE_PIE] = !1),
                  t === s.CHART_TYPE_FORCE
                    ? (this._magicType[s.CHART_TYPE_CHORD] = !1)
                    : t === s.CHART_TYPE_CHORD &&
                      (this._magicType[s.CHART_TYPE_FORCE] = !1),
                  t === V
                    ? (this._magicType[U] = !1)
                    : t === U && (this._magicType[V] = !1),
                  this.messageCenter.dispatch(
                    s.EVENT.MAGIC_TYPE_CHANGED,
                    e.event,
                    { magicType: this._magicType },
                    this.myChart
                  )),
                !0
              );
            },
            setMagicType: function (e) {
              (this._magicType = e),
                !this._isSilence &&
                  this.messageCenter.dispatch(
                    s.EVENT.MAGIC_TYPE_CHANGED,
                    null,
                    { magicType: this._magicType },
                    this.myChart
                  );
            },
            __onCustomHandler: function (e) {
              var t = e.target.style.iconType,
                n = this.option.toolbox.feature[t].onclick;
              "function" == typeof n && n.call(this, this.option);
            },
            reset: function (e, t) {
              if (
                (t && this.clear(),
                this.query(e, "toolbox.show") &&
                  this.query(e, "toolbox.feature.magicType.show"))
              ) {
                var n = e.toolbox.feature.magicType.type,
                  i = n.length;
                for (this._magicMap = {}; i--; ) this._magicMap[n[i]] = !0;
                i = e.series.length;
                for (var a, o; i--; )
                  (a = e.series[i].type),
                    this._magicMap[a] &&
                      ((o =
                        e.xAxis instanceof Array
                          ? e.xAxis[e.series[i].xAxisIndex || 0]
                          : e.xAxis),
                      o &&
                        "category" === (o.type || "category") &&
                        (o.__boundaryGap =
                          null != o.boundaryGap ? o.boundaryGap : !0),
                      (o =
                        e.yAxis instanceof Array
                          ? e.yAxis[e.series[i].yAxisIndex || 0]
                          : e.yAxis),
                      o &&
                        "category" === o.type &&
                        (o.__boundaryGap =
                          null != o.boundaryGap ? o.boundaryGap : !0),
                      (e.series[i].__type = a),
                      (e.series[i].__itemStyle = r.clone(
                        e.series[i].itemStyle || {}
                      ))),
                    (this._magicMap[V] || this._magicMap[U]) &&
                      (e.series[i].__stack = e.series[i].stack);
              }
              this._magicType = t ? {} : this._magicType || {};
              for (var s in this._magicType)
                if (this._magicType[s]) {
                  (this.option = e), this.getMagicOption();
                  break;
                }
              var l = e.dataZoom;
              if (l && l.show) {
                var h =
                    null != l.start && l.start >= 0 && l.start <= 100
                      ? l.start
                      : 0,
                  m = null != l.end && l.end >= 0 && l.end <= 100 ? l.end : 100;
                h > m && ((h += m), (m = h - m), (h -= m)),
                  (this._zoomQueue = [
                    { start: h, end: m, start2: 0, end2: 100 },
                  ]);
              } else this._zoomQueue = [];
            },
            getMagicOption: function () {
              var e, t;
              if (
                this._magicType[s.CHART_TYPE_LINE] ||
                this._magicType[s.CHART_TYPE_BAR]
              ) {
                for (
                  var n = this._magicType[s.CHART_TYPE_LINE] ? !1 : !0,
                    i = 0,
                    a = this.option.series.length;
                  a > i;
                  i++
                )
                  (t = this.option.series[i].type),
                    (t == s.CHART_TYPE_LINE || t == s.CHART_TYPE_BAR) &&
                      ((e =
                        this.option.xAxis instanceof Array
                          ? this.option.xAxis[
                              this.option.series[i].xAxisIndex || 0
                            ]
                          : this.option.xAxis),
                      e &&
                        "category" === (e.type || "category") &&
                        (e.boundaryGap = n ? !0 : e.__boundaryGap),
                      (e =
                        this.option.yAxis instanceof Array
                          ? this.option.yAxis[
                              this.option.series[i].yAxisIndex || 0
                            ]
                          : this.option.yAxis),
                      e &&
                        "category" === e.type &&
                        (e.boundaryGap = n ? !0 : e.__boundaryGap));
                this._defaultMagic(s.CHART_TYPE_LINE, s.CHART_TYPE_BAR);
              }
              if (
                (this._defaultMagic(s.CHART_TYPE_CHORD, s.CHART_TYPE_FORCE),
                this._defaultMagic(s.CHART_TYPE_PIE, s.CHART_TYPE_FUNNEL),
                this._magicType[V] || this._magicType[U])
              )
                for (var i = 0, a = this.option.series.length; a > i; i++)
                  this._magicType[V]
                    ? ((this.option.series[i].stack =
                        "_ECHARTS_STACK_KENER_2014_"),
                      (t = V))
                    : this._magicType[U] &&
                      ((this.option.series[i].stack = null), (t = U)),
                    this._featureOption[t + "Chart"] &&
                      r.merge(
                        this.option.series[i],
                        this._featureOption[t + "Chart"] || {},
                        !0
                      );
              return this.option;
            },
            _defaultMagic: function (e, t) {
              if (this._magicType[e] || this._magicType[t])
                for (var n = 0, i = this.option.series.length; i > n; n++) {
                  var a = this.option.series[n].type;
                  (a == e || a == t) &&
                    ((this.option.series[n].type = this._magicType[e] ? e : t),
                    (this.option.series[n].itemStyle = r.clone(
                      this.option.series[n].__itemStyle
                    )),
                    (a = this.option.series[n].type),
                    this._featureOption[a + "Chart"] &&
                      r.merge(
                        this.option.series[n],
                        this._featureOption[a + "Chart"] || {},
                        !0
                      ));
                }
            },
            silence: function (e) {
              this._isSilence = e;
            },
            resize: function () {
              this.clear(),
                this.option &&
                  this.option.toolbox &&
                  this.option.toolbox.show &&
                  this._buildShape();
            },
            clear: function (e) {
              this.zr &&
                (this.zr.delShape(this.shapeList),
                (this.shapeList = []),
                e ||
                  (this.zr.delShape(this._markShapeList),
                  (this._markShapeList = [])));
            },
            onbeforDispose: function () {
              this._markShapeList = null;
            },
            refresh: function (e) {
              e &&
                (this._resetZoom(),
                (e.toolbox = this.reformOption(e.toolbox)),
                (this.option = e),
                this.clear(!0),
                e.toolbox.show && this._buildShape());
            },
          }),
          r.inherits(t, n),
          e("../component").define("toolbox", t),
          t
        );
      }
    ),
    n("echarts/component", [], function () {
      var e = {},
        t = {};
      return (
        (e.define = function (n, i) {
          return (t[n] = i), e;
        }),
        (e.get = function (e) {
          return t[e];
        }),
        e
      );
    }),
    n(
      "echarts/component/title",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Rectangle",
        "../config",
        "zrender/tool/util",
        "zrender/tool/area",
        "zrender/tool/color",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Rectangle"),
          o = e("../config");
        o.title = {
          zlevel: 0,
          z: 6,
          show: !0,
          text: "",
          subtext: "",
          x: "center",
          y: "top",
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "#ccc",
          borderWidth: 0,
          padding: 1,
          itemGap: 5,
          textStyle: { fontSize: 20, fontWeight: "bolder", color: "#333" },
          subtextStyle: { color: "#aaa" },
        };
        var s = e("zrender/tool/util"),
          r = e("zrender/tool/area"),
          l = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: o.COMPONENT_TYPE_TITLE,
            _buildShape: function () {
              if (this.titleOption.show) {
                (this._itemGroupLocation = this._getItemGroupLocation()),
                  this._buildBackground(),
                  this._buildItem();
                for (var e = 0, t = this.shapeList.length; t > e; e++)
                  this.zr.addShape(this.shapeList[e]);
              }
            },
            _buildItem: function () {
              var e = this.titleOption.text,
                t = this.titleOption.link,
                n = this.titleOption.target,
                a = this.titleOption.subtext,
                o = this.titleOption.sublink,
                s = this.titleOption.subtarget,
                r = this.getFont(this.titleOption.textStyle),
                h = this.getFont(this.titleOption.subtextStyle),
                V = this._itemGroupLocation.x,
                U = this._itemGroupLocation.y,
                m = this._itemGroupLocation.width,
                p = this._itemGroupLocation.height,
                d = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  style: {
                    y: U,
                    color: this.titleOption.textStyle.color,
                    text: e,
                    textFont: r,
                    textBaseline: "top",
                  },
                  highlightStyle: {
                    color: l.lift(this.titleOption.textStyle.color, 1),
                    brushType: "fill",
                  },
                  hoverable: !1,
                };
              t &&
                ((d.hoverable = !0),
                (d.clickable = !0),
                (d.onclick = function () {
                  n && "self" == n ? (window.location = t) : window.open(t);
                }));
              var c = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  y: U + p,
                  color: this.titleOption.subtextStyle.color,
                  text: a,
                  textFont: h,
                  textBaseline: "bottom",
                },
                highlightStyle: {
                  color: l.lift(this.titleOption.subtextStyle.color, 1),
                  brushType: "fill",
                },
                hoverable: !1,
              };
              switch (
                (o &&
                  ((c.hoverable = !0),
                  (c.clickable = !0),
                  (c.onclick = function () {
                    s && "self" == s ? (window.location = o) : window.open(o);
                  })),
                this.titleOption.x)
              ) {
                case "center":
                  (d.style.x = c.style.x = V + m / 2),
                    (d.style.textAlign = c.style.textAlign = "center");
                  break;
                case "left":
                  (d.style.x = c.style.x = V),
                    (d.style.textAlign = c.style.textAlign = "left");
                  break;
                case "right":
                  (d.style.x = c.style.x = V + m),
                    (d.style.textAlign = c.style.textAlign = "right");
                  break;
                default:
                  (V = this.titleOption.x - 0),
                    (V = isNaN(V) ? 0 : V),
                    (d.style.x = c.style.x = V);
              }
              this.titleOption.textAlign &&
                (d.style.textAlign = c.style.textAlign = this.titleOption.textAlign),
                this.shapeList.push(new i(d)),
                "" !== a && this.shapeList.push(new i(c));
            },
            _buildBackground: function () {
              var e = this.reformCssArray(this.titleOption.padding);
              this.shapeList.push(
                new a({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this._itemGroupLocation.x - e[3],
                    y: this._itemGroupLocation.y - e[0],
                    width: this._itemGroupLocation.width + e[3] + e[1],
                    height: this._itemGroupLocation.height + e[0] + e[2],
                    brushType:
                      0 === this.titleOption.borderWidth ? "fill" : "both",
                    color: this.titleOption.backgroundColor,
                    strokeColor: this.titleOption.borderColor,
                    lineWidth: this.titleOption.borderWidth,
                  },
                })
              );
            },
            _getItemGroupLocation: function () {
              var e,
                t = this.reformCssArray(this.titleOption.padding),
                n = this.titleOption.text,
                i = this.titleOption.subtext,
                a = this.getFont(this.titleOption.textStyle),
                o = this.getFont(this.titleOption.subtextStyle),
                s = Math.max(r.getTextWidth(n, a), r.getTextWidth(i, o)),
                l =
                  r.getTextHeight(n, a) +
                  ("" === i
                    ? 0
                    : this.titleOption.itemGap + r.getTextHeight(i, o)),
                h = this.zr.getWidth();
              switch (this.titleOption.x) {
                case "center":
                  e = Math.floor((h - s) / 2);
                  break;
                case "left":
                  e = t[3] + this.titleOption.borderWidth;
                  break;
                case "right":
                  e = h - s - t[1] - this.titleOption.borderWidth;
                  break;
                default:
                  (e = this.titleOption.x - 0), (e = isNaN(e) ? 0 : e);
              }
              var V,
                U = this.zr.getHeight();
              switch (this.titleOption.y) {
                case "top":
                  V = t[0] + this.titleOption.borderWidth;
                  break;
                case "bottom":
                  V = U - l - t[2] - this.titleOption.borderWidth;
                  break;
                case "center":
                  V = Math.floor((U - l) / 2);
                  break;
                default:
                  (V = this.titleOption.y - 0), (V = isNaN(V) ? 0 : V);
              }
              return { x: e, y: V, width: s, height: l };
            },
            refresh: function (e) {
              e &&
                ((this.option = e),
                (this.option.title = this.reformOption(this.option.title)),
                (this.titleOption = this.option.title),
                (this.titleOption.textStyle = this.getTextStyle(
                  this.titleOption.textStyle
                )),
                (this.titleOption.subtextStyle = this.getTextStyle(
                  this.titleOption.subtextStyle
                ))),
                this.clear(),
                this._buildShape();
            },
          }),
          s.inherits(t, n),
          e("../component").define("title", t),
          t
        );
      }
    ),
    n(
      "echarts/component/tooltip",
      [
        "require",
        "./base",
        "../util/shape/Cross",
        "zrender/shape/Line",
        "zrender/shape/Rectangle",
        "../config",
        "../util/ecData",
        "zrender/config",
        "zrender/tool/event",
        "zrender/tool/area",
        "zrender/tool/color",
        "zrender/tool/util",
        "zrender/shape/Base",
        "../component",
      ],
      function (e) {
        function t(e, t, o, s, r) {
          n.call(this, e, t, o, s, r), (this.dom = r.dom);
          var l = this;
          (l._onmousemove = function (e) {
            return l.__onmousemove(e);
          }),
            (l._onglobalout = function (e) {
              return l.__onglobalout(e);
            }),
            this.zr.on(h.EVENT.CLICK, l._onmousemove),
            this.zr.on(h.EVENT.MOUSEMOVE, l._onmousemove),
            this.zr.on(h.EVENT.GLOBALOUT, l._onglobalout),
            (l._hide = function (e) {
              return l.__hide(e);
            }),
            (l._tryShow = function (e) {
              return l.__tryShow(e);
            }),
            (l._refixed = function (e) {
              return l.__refixed(e);
            }),
            (l._setContent = function (e, t) {
              return l.__setContent(e, t);
            }),
            (this._tDom = this._tDom || document.createElement("div")),
            (this._tDom.onselectstart = function () {
              return !1;
            }),
            (this._tDom.onmouseover = function () {
              l._mousein = !0;
            }),
            (this._tDom.onmouseout = function () {
              l._mousein = !1;
            }),
            (this._tDom.className = "echarts-tooltip"),
            (this._tDom.style.position = "absolute"),
            (this.hasAppend = !1),
            this._axisLineShape && this.zr.delShape(this._axisLineShape.id),
            (this._axisLineShape = new a({
              zlevel: this.getZlevelBase(),
              z: this.getZBase(),
              invisible: !0,
              hoverable: !1,
            })),
            this.shapeList.push(this._axisLineShape),
            this.zr.addShape(this._axisLineShape),
            this._axisShadowShape && this.zr.delShape(this._axisShadowShape.id),
            (this._axisShadowShape = new a({
              zlevel: this.getZlevelBase(),
              z: 1,
              invisible: !0,
              hoverable: !1,
            })),
            this.shapeList.push(this._axisShadowShape),
            this.zr.addShape(this._axisShadowShape),
            this._axisCrossShape && this.zr.delShape(this._axisCrossShape.id),
            (this._axisCrossShape = new i({
              zlevel: this.getZlevelBase(),
              z: this.getZBase(),
              invisible: !0,
              hoverable: !1,
            })),
            this.shapeList.push(this._axisCrossShape),
            this.zr.addShape(this._axisCrossShape),
            (this.showing = !1),
            this.refresh(s);
        }
        var n = e("./base"),
          i = e("../util/shape/Cross"),
          a = e("zrender/shape/Line"),
          o = e("zrender/shape/Rectangle"),
          s = new o({}),
          r = e("../config");
        r.tooltip = {
          zlevel: 0,
          z: 8,
          show: !0,
          showContent: !0,
          trigger: "item",
          islandFormatter: "{a} <br/>{b} : {c}",
          showDelay: 0,
          hideDelay: 200,
          transitionDuration: 0.4,
          enterable: !1,
          backgroundColor: "rgba(0,0,0,0.7)",
          borderColor: "#333",
          borderRadius: 4,
          borderWidth: 0,
          padding: 5,
          axisPointer: {
            type: "line",
            lineStyle: { color: "#48b", width: 2, type: "solid" },
            crossStyle: { color: "#1e90ff", width: 1, type: "dashed" },
            shadowStyle: {
              color: "rgba(150,150,150,0.3)",
              width: "auto",
              type: "default",
            },
          },
          textStyle: { color: "#fff" },
        };
        var l = e("../util/ecData"),
          h = e("zrender/config"),
          V = e("zrender/tool/event"),
          U = e("zrender/tool/area"),
          m = e("zrender/tool/color"),
          p = e("zrender/tool/util"),
          d = e("zrender/shape/Base");
        return (
          (t.prototype = {
            type: r.COMPONENT_TYPE_TOOLTIP,
            _gCssText:
              "position:absolute;display:block;border-style:solid;white-space:nowrap;",
            _style: function (e) {
              if (!e) return "";
              var t = [];
              if (e.transitionDuration) {
                var n =
                  "left " +
                  e.transitionDuration +
                  "s,top " +
                  e.transitionDuration +
                  "s";
                t.push("transition:" + n),
                  t.push("-moz-transition:" + n),
                  t.push("-webkit-transition:" + n),
                  t.push("-o-transition:" + n);
              }
              e.backgroundColor &&
                (t.push("background-Color:" + m.toHex(e.backgroundColor)),
                t.push("filter:alpha(opacity=70)"),
                t.push("background-Color:" + e.backgroundColor)),
                null != e.borderWidth &&
                  t.push("border-width:" + e.borderWidth + "px"),
                null != e.borderColor &&
                  t.push("border-color:" + e.borderColor),
                null != e.borderRadius &&
                  (t.push("border-radius:" + e.borderRadius + "px"),
                  t.push("-moz-border-radius:" + e.borderRadius + "px"),
                  t.push("-webkit-border-radius:" + e.borderRadius + "px"),
                  t.push("-o-border-radius:" + e.borderRadius + "px"));
              var i = e.textStyle;
              i &&
                (i.color && t.push("color:" + i.color),
                i.decoration && t.push("text-decoration:" + i.decoration),
                i.align && t.push("text-align:" + i.align),
                i.fontFamily && t.push("font-family:" + i.fontFamily),
                i.fontSize && t.push("font-size:" + i.fontSize + "px"),
                i.fontSize &&
                  t.push(
                    "line-height:" + Math.round((3 * i.fontSize) / 2) + "px"
                  ),
                i.fontStyle && t.push("font-style:" + i.fontStyle),
                i.fontWeight && t.push("font-weight:" + i.fontWeight));
              var a = e.padding;
              return (
                null != a &&
                  ((a = this.reformCssArray(a)),
                  t.push(
                    "padding:" +
                      a[0] +
                      "px " +
                      a[1] +
                      "px " +
                      a[2] +
                      "px " +
                      a[3] +
                      "px"
                  )),
                (t = t.join(";") + ";")
              );
            },
            __hide: function () {
              (this._lastDataIndex = -1),
                (this._lastSeriesIndex = -1),
                (this._lastItemTriggerId = -1),
                this._tDom && (this._tDom.style.display = "none");
              var e = !1;
              this._axisLineShape.invisible ||
                ((this._axisLineShape.invisible = !0),
                this.zr.modShape(this._axisLineShape.id),
                (e = !0)),
                this._axisShadowShape.invisible ||
                  ((this._axisShadowShape.invisible = !0),
                  this.zr.modShape(this._axisShadowShape.id),
                  (e = !0)),
                this._axisCrossShape.invisible ||
                  ((this._axisCrossShape.invisible = !0),
                  this.zr.modShape(this._axisCrossShape.id),
                  (e = !0)),
                this._lastTipShape &&
                  this._lastTipShape.tipShape.length > 0 &&
                  (this.zr.delShape(this._lastTipShape.tipShape),
                  (this._lastTipShape = !1),
                  (this.shapeList.length = 2)),
                e && this.zr.refreshNextFrame(),
                (this.showing = !1);
            },
            _show: function (e, t, n, i) {
              var a = this._tDom.offsetHeight,
                o = this._tDom.offsetWidth;
              e &&
                ("function" == typeof e && (e = e([t, n])),
                e instanceof Array && ((t = e[0]), (n = e[1]))),
                t + o > this._zrWidth && (t -= o + 40),
                n + a > this._zrHeight && (n -= a - 20),
                20 > n && (n = 0),
                (this._tDom.style.cssText =
                  this._gCssText +
                  this._defaultCssText +
                  (i ? i : "") +
                  "left:" +
                  t +
                  "px;top:" +
                  n +
                  "px;"),
                (10 > a || 10 > o) && setTimeout(this._refixed, 20),
                (this.showing = !0);
            },
            __refixed: function () {
              if (this._tDom) {
                var e = "",
                  t = this._tDom.offsetHeight,
                  n = this._tDom.offsetWidth;
                this._tDom.offsetLeft + n > this._zrWidth &&
                  (e += "left:" + (this._zrWidth - n - 20) + "px;"),
                  this._tDom.offsetTop + t > this._zrHeight &&
                    (e += "top:" + (this._zrHeight - t - 10) + "px;"),
                  "" !== e && (this._tDom.style.cssText += e);
              }
            },
            __tryShow: function () {
              var e, t;
              if (this._curTarget) {
                if (
                  "island" === this._curTarget._type &&
                  this.option.tooltip.show
                )
                  return void this._showItemTrigger();
                var n = l.get(this._curTarget, "series"),
                  i = l.get(this._curTarget, "data");
                (e = this.deepQuery([i, n, this.option], "tooltip.show")),
                  null != n && null != i && e
                    ? ((t = this.deepQuery(
                        [i, n, this.option],
                        "tooltip.trigger"
                      )),
                      "axis" === t
                        ? this._showAxisTrigger(
                            n.xAxisIndex,
                            n.yAxisIndex,
                            l.get(this._curTarget, "dataIndex")
                          )
                        : this._showItemTrigger())
                    : (clearTimeout(this._hidingTicket),
                      clearTimeout(this._showingTicket),
                      (this._hidingTicket = setTimeout(
                        this._hide,
                        this._hideDelay
                      )));
              } else this._findPolarTrigger() || this._findAxisTrigger();
            },
            _findAxisTrigger: function () {
              if (!this.component.xAxis || !this.component.yAxis)
                return void (this._hidingTicket = setTimeout(
                  this._hide,
                  this._hideDelay
                ));
              for (
                var e, t, n = this.option.series, i = 0, a = n.length;
                a > i;
                i++
              )
                if (
                  "axis" ===
                  this.deepQuery([n[i], this.option], "tooltip.trigger")
                )
                  return (
                    (e = n[i].xAxisIndex || 0),
                    (t = n[i].yAxisIndex || 0),
                    this.component.xAxis.getAxis(e) &&
                    this.component.xAxis.getAxis(e).type ===
                      r.COMPONENT_TYPE_AXIS_CATEGORY
                      ? void this._showAxisTrigger(
                          e,
                          t,
                          this._getNearestDataIndex(
                            "x",
                            this.component.xAxis.getAxis(e)
                          )
                        )
                      : this.component.yAxis.getAxis(t) &&
                        this.component.yAxis.getAxis(t).type ===
                          r.COMPONENT_TYPE_AXIS_CATEGORY
                      ? void this._showAxisTrigger(
                          e,
                          t,
                          this._getNearestDataIndex(
                            "y",
                            this.component.yAxis.getAxis(t)
                          )
                        )
                      : void this._showAxisTrigger(e, t, -1)
                  );
              "cross" === this.option.tooltip.axisPointer.type &&
                this._showAxisTrigger(-1, -1, -1);
            },
            _findPolarTrigger: function () {
              if (!this.component.polar) return !1;
              var e,
                t = V.getX(this._event),
                n = V.getY(this._event),
                i = this.component.polar.getNearestIndex([t, n]);
              return (
                i ? ((e = i.valueIndex), (i = i.polarIndex)) : (i = -1),
                -1 != i ? this._showPolarTrigger(i, e) : !1
              );
            },
            _getNearestDataIndex: function (e, t) {
              var n = -1,
                i = V.getX(this._event),
                a = V.getY(this._event);
              if ("x" === e) {
                for (
                  var o,
                    s,
                    r = this.component.grid.getXend(),
                    l = t.getCoordByIndex(n);
                  r > l && ((s = l), i >= l);

                )
                  (o = l), (l = t.getCoordByIndex(++n));
                return (
                  0 >= n
                    ? (n = 0)
                    : s - i >= i - o
                    ? (n -= 1)
                    : null == t.getNameByIndex(n) && (n -= 1),
                  n
                );
              }
              for (
                var h,
                  U,
                  m = this.component.grid.getY(),
                  l = t.getCoordByIndex(n);
                l > m && ((h = l), l >= a);

              )
                (U = l), (l = t.getCoordByIndex(++n));
              return (
                0 >= n
                  ? (n = 0)
                  : a - h >= U - a
                  ? (n -= 1)
                  : null == t.getNameByIndex(n) && (n -= 1),
                n
              );
            },
            _showAxisTrigger: function (e, t, n) {
              if (
                (!this._event.connectTrigger &&
                  this.messageCenter.dispatch(
                    r.EVENT.TOOLTIP_IN_GRID,
                    this._event,
                    null,
                    this.myChart
                  ),
                null == this.component.xAxis ||
                  null == this.component.yAxis ||
                  null == e ||
                  null == t)
              )
                return (
                  clearTimeout(this._hidingTicket),
                  clearTimeout(this._showingTicket),
                  void (this._hidingTicket = setTimeout(
                    this._hide,
                    this._hideDelay
                  ))
                );
              var i,
                a,
                o,
                s,
                l = this.option.series,
                h = [],
                U = [],
                m = "";
              if ("axis" === this.option.tooltip.trigger) {
                if (!this.option.tooltip.show) return;
                (a = this.option.tooltip.formatter),
                  (o = this.option.tooltip.position);
              }
              var p,
                d,
                c =
                  -1 != e &&
                  this.component.xAxis.getAxis(e).type ===
                    r.COMPONENT_TYPE_AXIS_CATEGORY
                    ? "xAxis"
                    : -1 != t &&
                      this.component.yAxis.getAxis(t).type ===
                        r.COMPONENT_TYPE_AXIS_CATEGORY
                    ? "yAxis"
                    : !1;
              if (c) {
                var u = "xAxis" == c ? e : t;
                i = this.component[c].getAxis(u);
                for (var y = 0, b = l.length; b > y; y++)
                  this._isSelected(l[y].name) &&
                    l[y][c + "Index"] === u &&
                    "axis" ===
                      this.deepQuery([l[y], this.option], "tooltip.trigger") &&
                    ((s = this.query(l[y], "tooltip.showContent") || s),
                    (a = this.query(l[y], "tooltip.formatter") || a),
                    (o = this.query(l[y], "tooltip.position") || o),
                    (m += this._style(this.query(l[y], "tooltip"))),
                    null != l[y].stack && "xAxis" == c
                      ? (h.unshift(l[y]), U.unshift(y))
                      : (h.push(l[y]), U.push(y)));
                this.messageCenter.dispatch(
                  r.EVENT.TOOLTIP_HOVER,
                  this._event,
                  { seriesIndex: U, dataIndex: n },
                  this.myChart
                );
                var g;
                "xAxis" == c
                  ? ((p = this.subPixelOptimize(
                      i.getCoordByIndex(n),
                      this._axisLineWidth
                    )),
                    (d = V.getY(this._event)),
                    (g = [
                      p,
                      this.component.grid.getY(),
                      p,
                      this.component.grid.getYend(),
                    ]))
                  : ((p = V.getX(this._event)),
                    (d = this.subPixelOptimize(
                      i.getCoordByIndex(n),
                      this._axisLineWidth
                    )),
                    (g = [
                      this.component.grid.getX(),
                      d,
                      this.component.grid.getXend(),
                      d,
                    ])),
                  this._styleAxisPointer(
                    h,
                    g[0],
                    g[1],
                    g[2],
                    g[3],
                    i.getGap(),
                    p,
                    d
                  );
              } else
                (p = V.getX(this._event)),
                  (d = V.getY(this._event)),
                  this._styleAxisPointer(
                    l,
                    this.component.grid.getX(),
                    d,
                    this.component.grid.getXend(),
                    d,
                    0,
                    p,
                    d
                  ),
                  n >= 0
                    ? this._showItemTrigger(!0)
                    : (clearTimeout(this._hidingTicket),
                      clearTimeout(this._showingTicket),
                      (this._tDom.style.display = "none"));
              if (h.length > 0) {
                if (
                  ((this._lastItemTriggerId = -1),
                  this._lastDataIndex != n || this._lastSeriesIndex != U[0])
                ) {
                  (this._lastDataIndex = n), (this._lastSeriesIndex = U[0]);
                  var k, f;
                  if ("function" == typeof a) {
                    for (var L = [], y = 0, b = h.length; b > y; y++)
                      (k = h[y].data[n]),
                        (f = this.getDataFromOption(k, "-")),
                        L.push({
                          seriesIndex: U[y],
                          seriesName: h[y].name || "",
                          series: h[y],
                          dataIndex: n,
                          data: k,
                          name: i.getNameByIndex(n),
                          value: f,
                          0: h[y].name || "",
                          1: i.getNameByIndex(n),
                          2: f,
                          3: k,
                        });
                    (this._curTicket = "axis:" + n),
                      (this._tDom.innerHTML = a.call(
                        this.myChart,
                        L,
                        this._curTicket,
                        this._setContent
                      ));
                  } else if ("string" == typeof a) {
                    (this._curTicket = 0 / 0),
                      (a = a
                        .replace("{a}", "{a0}")
                        .replace("{b}", "{b0}")
                        .replace("{c}", "{c0}"));
                    for (var y = 0, b = h.length; b > y; y++)
                      (a = a.replace(
                        "{a" + y + "}",
                        this._encodeHTML(h[y].name || "")
                      )),
                        (a = a.replace(
                          "{b" + y + "}",
                          this._encodeHTML(i.getNameByIndex(n))
                        )),
                        (k = h[y].data[n]),
                        (k = this.getDataFromOption(k, "-")),
                        (a = a.replace(
                          "{c" + y + "}",
                          k instanceof Array ? k : this.numAddCommas(k)
                        ));
                    this._tDom.innerHTML = a;
                  } else {
                    (this._curTicket = 0 / 0),
                      (a = this._encodeHTML(i.getNameByIndex(n)));
                    for (var y = 0, b = h.length; b > y; y++)
                      (a +=
                        "<br/>" + this._encodeHTML(h[y].name || "") + " : "),
                        (k = h[y].data[n]),
                        (k = this.getDataFromOption(k, "-")),
                        (a += k instanceof Array ? k : this.numAddCommas(k));
                    this._tDom.innerHTML = a;
                  }
                }
                if (s === !1 || !this.option.tooltip.showContent) return;
                this.hasAppend ||
                  ((this._tDom.style.left = this._zrWidth / 2 + "px"),
                  (this._tDom.style.top = this._zrHeight / 2 + "px"),
                  this.dom.firstChild.appendChild(this._tDom),
                  (this.hasAppend = !0)),
                  this._show(o, p + 10, d + 10, m);
              }
            },
            _showPolarTrigger: function (e, t) {
              if (
                null == this.component.polar ||
                null == e ||
                null == t ||
                0 > t
              )
                return !1;
              var n,
                i,
                a,
                o = this.option.series,
                s = [],
                r = [],
                l = "";
              if ("axis" === this.option.tooltip.trigger) {
                if (!this.option.tooltip.show) return !1;
                (n = this.option.tooltip.formatter),
                  (i = this.option.tooltip.position);
              }
              for (
                var h = this.option.polar[e].indicator[t].text,
                  U = 0,
                  m = o.length;
                m > U;
                U++
              )
                this._isSelected(o[U].name) &&
                  o[U].polarIndex === e &&
                  "axis" ===
                    this.deepQuery([o[U], this.option], "tooltip.trigger") &&
                  ((a = this.query(o[U], "tooltip.showContent") || a),
                  (n = this.query(o[U], "tooltip.formatter") || n),
                  (i = this.query(o[U], "tooltip.position") || i),
                  (l += this._style(this.query(o[U], "tooltip"))),
                  s.push(o[U]),
                  r.push(U));
              if (s.length > 0) {
                for (var p, d, c, u = [], U = 0, m = s.length; m > U; U++) {
                  p = s[U].data;
                  for (var y = 0, b = p.length; b > y; y++)
                    (d = p[y]),
                      this._isSelected(d.name) &&
                        ((d =
                          null != d
                            ? d
                            : { name: "", value: { dataIndex: "-" } }),
                        (c = this.getDataFromOption(d.value[t])),
                        u.push({
                          seriesIndex: r[U],
                          seriesName: s[U].name || "",
                          series: s[U],
                          dataIndex: t,
                          data: d,
                          name: d.name,
                          indicator: h,
                          value: c,
                          0: s[U].name || "",
                          1: d.name,
                          2: c,
                          3: h,
                        }));
                }
                if (u.length <= 0) return;
                if (
                  ((this._lastItemTriggerId = -1),
                  this._lastDataIndex != t || this._lastSeriesIndex != r[0])
                )
                  if (
                    ((this._lastDataIndex = t),
                    (this._lastSeriesIndex = r[0]),
                    "function" == typeof n)
                  )
                    (this._curTicket = "axis:" + t),
                      (this._tDom.innerHTML = n.call(
                        this.myChart,
                        u,
                        this._curTicket,
                        this._setContent
                      ));
                  else if ("string" == typeof n) {
                    n = n
                      .replace("{a}", "{a0}")
                      .replace("{b}", "{b0}")
                      .replace("{c}", "{c0}")
                      .replace("{d}", "{d0}");
                    for (var U = 0, m = u.length; m > U; U++)
                      (n = n.replace(
                        "{a" + U + "}",
                        this._encodeHTML(u[U].seriesName)
                      )),
                        (n = n.replace(
                          "{b" + U + "}",
                          this._encodeHTML(u[U].name)
                        )),
                        (n = n.replace(
                          "{c" + U + "}",
                          this.numAddCommas(u[U].value)
                        )),
                        (n = n.replace(
                          "{d" + U + "}",
                          this._encodeHTML(u[U].indicator)
                        ));
                    this._tDom.innerHTML = n;
                  } else {
                    n =
                      this._encodeHTML(u[0].name) +
                      "<br/>" +
                      this._encodeHTML(u[0].indicator) +
                      " : " +
                      this.numAddCommas(u[0].value);
                    for (var U = 1, m = u.length; m > U; U++)
                      (n += "<br/>" + this._encodeHTML(u[U].name) + "<br/>"),
                        (n +=
                          this._encodeHTML(u[U].indicator) +
                          " : " +
                          this.numAddCommas(u[U].value));
                    this._tDom.innerHTML = n;
                  }
                if (a === !1 || !this.option.tooltip.showContent) return;
                return (
                  this.hasAppend ||
                    ((this._tDom.style.left = this._zrWidth / 2 + "px"),
                    (this._tDom.style.top = this._zrHeight / 2 + "px"),
                    this.dom.firstChild.appendChild(this._tDom),
                    (this.hasAppend = !0)),
                  this._show(i, V.getX(this._event), V.getY(this._event), l),
                  !0
                );
              }
            },
            _showItemTrigger: function (e) {
              if (this._curTarget) {
                var t,
                  n,
                  i,
                  a = l.get(this._curTarget, "series"),
                  o = l.get(this._curTarget, "seriesIndex"),
                  s = l.get(this._curTarget, "data"),
                  h = l.get(this._curTarget, "dataIndex"),
                  U = l.get(this._curTarget, "name"),
                  m = l.get(this._curTarget, "value"),
                  p = l.get(this._curTarget, "special"),
                  d = l.get(this._curTarget, "special2"),
                  c = [s, a, this.option],
                  u = "";
                if ("island" != this._curTarget._type) {
                  var y = e ? "axis" : "item";
                  this.option.tooltip.trigger === y &&
                    ((t = this.option.tooltip.formatter),
                    (n = this.option.tooltip.position)),
                    this.query(a, "tooltip.trigger") === y &&
                      ((i = this.query(a, "tooltip.showContent") || i),
                      (t = this.query(a, "tooltip.formatter") || t),
                      (n = this.query(a, "tooltip.position") || n),
                      (u += this._style(this.query(a, "tooltip")))),
                    (i = this.query(s, "tooltip.showContent") || i),
                    (t = this.query(s, "tooltip.formatter") || t),
                    (n = this.query(s, "tooltip.position") || n),
                    (u += this._style(this.query(s, "tooltip")));
                } else
                  (this._lastItemTriggerId = 0 / 0),
                    (i = this.deepQuery(c, "tooltip.showContent")),
                    (t = this.deepQuery(c, "tooltip.islandFormatter")),
                    (n = this.deepQuery(c, "tooltip.islandPosition"));
                (this._lastDataIndex = -1),
                  (this._lastSeriesIndex = -1),
                  this._lastItemTriggerId !== this._curTarget.id &&
                    ((this._lastItemTriggerId = this._curTarget.id),
                    "function" == typeof t
                      ? ((this._curTicket = (a.name || "") + ":" + h),
                        (this._tDom.innerHTML = t.call(
                          this.myChart,
                          {
                            seriesIndex: o,
                            seriesName: a.name || "",
                            series: a,
                            dataIndex: h,
                            data: s,
                            name: U,
                            value: m,
                            percent: p,
                            indicator: p,
                            value2: d,
                            indicator2: d,
                            0: a.name || "",
                            1: U,
                            2: m,
                            3: p,
                            4: d,
                            5: s,
                            6: o,
                            7: h,
                          },
                          this._curTicket,
                          this._setContent
                        )))
                      : "string" == typeof t
                      ? ((this._curTicket = 0 / 0),
                        (t = t
                          .replace("{a}", "{a0}")
                          .replace("{b}", "{b0}")
                          .replace("{c}", "{c0}")),
                        (t = t
                          .replace("{a0}", this._encodeHTML(a.name || ""))
                          .replace("{b0}", this._encodeHTML(U))
                          .replace(
                            "{c0}",
                            m instanceof Array ? m : this.numAddCommas(m)
                          )),
                        (t = t.replace("{d}", "{d0}").replace("{d0}", p || "")),
                        (t = t
                          .replace("{e}", "{e0}")
                          .replace(
                            "{e0}",
                            l.get(this._curTarget, "special2") || ""
                          )),
                        (this._tDom.innerHTML = t))
                      : ((this._curTicket = 0 / 0),
                        (this._tDom.innerHTML =
                          a.type === r.CHART_TYPE_RADAR && p
                            ? this._itemFormatter.radar.call(this, a, U, m, p)
                            : a.type === r.CHART_TYPE_EVENTRIVER
                            ? this._itemFormatter.eventRiver.call(
                                this,
                                a,
                                U,
                                m,
                                s
                              )
                            : "" +
                              (null != a.name
                                ? this._encodeHTML(a.name) + "<br/>"
                                : "") +
                              ("" === U ? "" : this._encodeHTML(U) + " : ") +
                              (m instanceof Array
                                ? m
                                : this.numAddCommas(m)))));
                var b = V.getX(this._event),
                  g = V.getY(this._event);
                this.deepQuery(c, "tooltip.axisPointer.show") &&
                  this.component.grid &&
                  this._styleAxisPointer(
                    [a],
                    this.component.grid.getX(),
                    g,
                    this.component.grid.getXend(),
                    g,
                    0,
                    b,
                    g
                  ),
                  i !== !1 &&
                    this.option.tooltip.showContent &&
                    (this.hasAppend ||
                      ((this._tDom.style.left = this._zrWidth / 2 + "px"),
                      (this._tDom.style.top = this._zrHeight / 2 + "px"),
                      this.dom.firstChild.appendChild(this._tDom),
                      (this.hasAppend = !0)),
                    this._show(n, b + 20, g - 20, u));
              }
            },
            _itemFormatter: {
              radar: function (e, t, n, i) {
                var a = "";
                (a += this._encodeHTML("" === t ? e.name || "" : t)),
                  (a += "" === a ? "" : "<br />");
                for (var o = 0; o < i.length; o++)
                  a +=
                    this._encodeHTML(i[o].text) +
                    " : " +
                    this.numAddCommas(n[o]) +
                    "<br />";
                return a;
              },
              chord: function (e, t, n, i, a) {
                if (null == a)
                  return (
                    this._encodeHTML(t) + " (" + this.numAddCommas(n) + ")"
                  );
                var o = this._encodeHTML(t),
                  s = this._encodeHTML(i);
                return (
                  "" +
                  (null != e.name ? this._encodeHTML(e.name) + "<br/>" : "") +
                  o +
                  " -> " +
                  s +
                  " (" +
                  this.numAddCommas(n) +
                  ")<br />" +
                  s +
                  " -> " +
                  o +
                  " (" +
                  this.numAddCommas(a) +
                  ")"
                );
              },
              eventRiver: function (e, t, n, i) {
                var a = "";
                (a += this._encodeHTML("" === e.name ? "" : e.name + " : ")),
                  (a += this._encodeHTML(t)),
                  (a += "" === a ? "" : "<br />"),
                  (i = i.evolution);
                for (var o = 0, s = i.length; s > o; o++)
                  (a += '<div style="padding-top:5px;">'),
                    i[o].detail &&
                      (i[o].detail.img &&
                        (a +=
                          '<img src="' +
                          i[o].detail.img +
                          '" style="float:left;width:40px;height:40px;">'),
                      (a +=
                        '<div style="margin-left:45px;">' +
                        i[o].time +
                        "<br/>"),
                      (a +=
                        '<a href="' + i[o].detail.link + '" target="_blank">'),
                      (a += i[o].detail.text + "</a></div>"),
                      (a += "</div>"));
                return a;
              },
            },
            _styleAxisPointer: function (e, t, n, i, a, o, s, r) {
              if (e.length > 0) {
                var l,
                  h,
                  V = this.option.tooltip.axisPointer,
                  U = V.type,
                  m = { line: {}, cross: {}, shadow: {} };
                for (var p in m)
                  (m[p].color = V[p + "Style"].color),
                    (m[p].width = V[p + "Style"].width),
                    (m[p].type = V[p + "Style"].type);
                for (var d = 0, c = e.length; c > d; d++)
                  (l = e[d]),
                    (h = this.query(l, "tooltip.axisPointer.type")),
                    (U = h || U),
                    h &&
                      ((m[h].color =
                        this.query(
                          l,
                          "tooltip.axisPointer." + h + "Style.color"
                        ) || m[h].color),
                      (m[h].width =
                        this.query(
                          l,
                          "tooltip.axisPointer." + h + "Style.width"
                        ) || m[h].width),
                      (m[h].type =
                        this.query(
                          l,
                          "tooltip.axisPointer." + h + "Style.type"
                        ) || m[h].type));
                if ("line" === U) {
                  var u = m.line.width,
                    y = t == i;
                  (this._axisLineShape.style = {
                    xStart: y ? this.subPixelOptimize(t, u) : t,
                    yStart: y ? n : this.subPixelOptimize(n, u),
                    xEnd: y ? this.subPixelOptimize(i, u) : i,
                    yEnd: y ? a : this.subPixelOptimize(a, u),
                    strokeColor: m.line.color,
                    lineWidth: u,
                    lineType: m.line.type,
                  }),
                    (this._axisLineShape.invisible = !1),
                    this.zr.modShape(this._axisLineShape.id);
                } else if ("cross" === U) {
                  var b = m.cross.width;
                  (this._axisCrossShape.style = {
                    brushType: "stroke",
                    rect: this.component.grid.getArea(),
                    x: this.subPixelOptimize(s, b),
                    y: this.subPixelOptimize(r, b),
                    text: (
                      "( " +
                      this.component.xAxis.getAxis(0).getValueFromCoord(s) +
                      " , " +
                      this.component.yAxis.getAxis(0).getValueFromCoord(r) +
                      " )"
                    )
                      .replace("  , ", " ")
                      .replace(" ,  ", " "),
                    textPosition: "specific",
                    strokeColor: m.cross.color,
                    lineWidth: b,
                    lineType: m.cross.type,
                  }),
                    this.component.grid.getXend() - s > 100
                      ? ((this._axisCrossShape.style.textAlign = "left"),
                        (this._axisCrossShape.style.textX = s + 10))
                      : ((this._axisCrossShape.style.textAlign = "right"),
                        (this._axisCrossShape.style.textX = s - 10)),
                    r - this.component.grid.getY() > 50
                      ? ((this._axisCrossShape.style.textBaseline = "bottom"),
                        (this._axisCrossShape.style.textY = r - 10))
                      : ((this._axisCrossShape.style.textBaseline = "top"),
                        (this._axisCrossShape.style.textY = r + 10)),
                    (this._axisCrossShape.invisible = !1),
                    this.zr.modShape(this._axisCrossShape.id);
                } else
                  "shadow" === U &&
                    ((null == m.shadow.width ||
                      "auto" === m.shadow.width ||
                      isNaN(m.shadow.width)) &&
                      (m.shadow.width = o),
                    t === i
                      ? Math.abs(this.component.grid.getX() - t) < 2
                        ? ((m.shadow.width /= 2), (t = i += m.shadow.width / 2))
                        : Math.abs(this.component.grid.getXend() - t) < 2 &&
                          ((m.shadow.width /= 2), (t = i -= m.shadow.width / 2))
                      : n === a &&
                        (Math.abs(this.component.grid.getY() - n) < 2
                          ? ((m.shadow.width /= 2),
                            (n = a += m.shadow.width / 2))
                          : Math.abs(this.component.grid.getYend() - n) < 2 &&
                            ((m.shadow.width /= 2),
                            (n = a -= m.shadow.width / 2))),
                    (this._axisShadowShape.style = {
                      xStart: t,
                      yStart: n,
                      xEnd: i,
                      yEnd: a,
                      strokeColor: m.shadow.color,
                      lineWidth: m.shadow.width,
                    }),
                    (this._axisShadowShape.invisible = !1),
                    this.zr.modShape(this._axisShadowShape.id));
                this.zr.refreshNextFrame();
              }
            },
            __onmousemove: function (e) {
              if (
                (clearTimeout(this._hidingTicket),
                clearTimeout(this._showingTicket),
                !this._mousein || !this._enterable)
              ) {
                var t = e.target,
                  n = V.getX(e.event),
                  i = V.getY(e.event);
                if (t) {
                  (this._curTarget = t),
                    (this._event = e.event),
                    (this._event.zrenderX = n),
                    (this._event.zrenderY = i);
                  var a;
                  if (
                    this._needAxisTrigger &&
                    this.component.polar &&
                    -1 != (a = this.component.polar.isInside([n, i]))
                  )
                    for (
                      var o = this.option.series, l = 0, h = o.length;
                      h > l;
                      l++
                    )
                      if (
                        o[l].polarIndex === a &&
                        "axis" ===
                          this.deepQuery([o[l], this.option], "tooltip.trigger")
                      ) {
                        this._curTarget = null;
                        break;
                      }
                  this._showingTicket = setTimeout(
                    this._tryShow,
                    this._showDelay
                  );
                } else
                  (this._curTarget = !1),
                    (this._event = e.event),
                    (this._event.zrenderX = n),
                    (this._event.zrenderY = i),
                    this._needAxisTrigger &&
                    this.component.grid &&
                    U.isInside(s, this.component.grid.getArea(), n, i)
                      ? (this._showingTicket = setTimeout(
                          this._tryShow,
                          this._showDelay
                        ))
                      : this._needAxisTrigger &&
                        this.component.polar &&
                        -1 != this.component.polar.isInside([n, i])
                      ? (this._showingTicket = setTimeout(
                          this._tryShow,
                          this._showDelay
                        ))
                      : (!this._event.connectTrigger &&
                          this.messageCenter.dispatch(
                            r.EVENT.TOOLTIP_OUT_GRID,
                            this._event,
                            null,
                            this.myChart
                          ),
                        (this._hidingTicket = setTimeout(
                          this._hide,
                          this._hideDelay
                        )));
              }
            },
            __onglobalout: function () {
              clearTimeout(this._hidingTicket),
                clearTimeout(this._showingTicket),
                (this._hidingTicket = setTimeout(this._hide, this._hideDelay));
            },
            __setContent: function (e, t) {
              this._tDom &&
                (e === this._curTicket && (this._tDom.innerHTML = t),
                setTimeout(this._refixed, 20));
            },
            ontooltipHover: function (e, t) {
              if (
                !this._lastTipShape ||
                (this._lastTipShape &&
                  this._lastTipShape.dataIndex != e.dataIndex)
              ) {
                this._lastTipShape &&
                  this._lastTipShape.tipShape.length > 0 &&
                  (this.zr.delShape(this._lastTipShape.tipShape),
                  (this.shapeList.length = 2));
                for (var n = 0, i = t.length; i > n; n++)
                  (t[n].zlevel = this.getZlevelBase()),
                    (t[n].z = this.getZBase()),
                    (t[n].style = d.prototype.getHighlightStyle(
                      t[n].style,
                      t[n].highlightStyle
                    )),
                    (t[n].draggable = !1),
                    (t[n].hoverable = !1),
                    (t[n].clickable = !1),
                    (t[n].ondragend = null),
                    (t[n].ondragover = null),
                    (t[n].ondrop = null),
                    this.shapeList.push(t[n]),
                    this.zr.addShape(t[n]);
                this._lastTipShape = { dataIndex: e.dataIndex, tipShape: t };
              }
            },
            ondragend: function () {
              this._hide();
            },
            onlegendSelected: function (e) {
              this._selectedMap = e.selected;
            },
            _setSelectedMap: function () {
              this._selectedMap = this.component.legend
                ? p.clone(this.component.legend.getSelectedMap())
                : {};
            },
            _isSelected: function (e) {
              return null != this._selectedMap[e] ? this._selectedMap[e] : !0;
            },
            showTip: function (e) {
              if (e) {
                var t,
                  n = this.option.series;
                if (null != e.seriesIndex) t = e.seriesIndex;
                else
                  for (var i = e.seriesName, a = 0, o = n.length; o > a; a++)
                    if (n[a].name === i) {
                      t = a;
                      break;
                    }
                var s = n[t];
                if (null != s) {
                  var V = this.myChart.chart[s.type],
                    U =
                      "axis" ===
                      this.deepQuery([s, this.option], "tooltip.trigger");
                  if (V)
                    if (U) {
                      var m = e.dataIndex;
                      switch (V.type) {
                        case r.CHART_TYPE_LINE:
                        case r.CHART_TYPE_BAR:
                        case r.CHART_TYPE_K:
                          if (
                            null == this.component.xAxis ||
                            null == this.component.yAxis ||
                            s.data.length <= m
                          )
                            return;
                          var p = s.xAxisIndex || 0,
                            d = s.yAxisIndex || 0;
                          (this._event =
                            this.component.xAxis.getAxis(p).type ===
                            r.COMPONENT_TYPE_AXIS_CATEGORY
                              ? {
                                  zrenderX: this.component.xAxis
                                    .getAxis(p)
                                    .getCoordByIndex(m),
                                  zrenderY:
                                    this.component.grid.getY() +
                                    (this.component.grid.getYend() -
                                      this.component.grid.getY()) /
                                      4,
                                }
                              : {
                                  zrenderX:
                                    this.component.grid.getX() +
                                    (this.component.grid.getXend() -
                                      this.component.grid.getX()) /
                                      4,
                                  zrenderY: this.component.yAxis
                                    .getAxis(d)
                                    .getCoordByIndex(m),
                                }),
                            this._showAxisTrigger(p, d, m);
                          break;
                        case r.CHART_TYPE_RADAR:
                          if (
                            null == this.component.polar ||
                            s.data[0].value.length <= m
                          )
                            return;
                          var c = s.polarIndex || 0,
                            u = this.component.polar.getVector(c, m, "max");
                          (this._event = { zrenderX: u[0], zrenderY: u[1] }),
                            this._showPolarTrigger(c, m);
                      }
                    } else {
                      var y,
                        b,
                        g = V.shapeList;
                      switch (V.type) {
                        case r.CHART_TYPE_LINE:
                        case r.CHART_TYPE_BAR:
                        case r.CHART_TYPE_K:
                        case r.CHART_TYPE_SCATTER:
                          for (
                            var m = e.dataIndex, a = 0, o = g.length;
                            o > a;
                            a++
                          )
                            if (
                              null == g[a]._mark &&
                              l.get(g[a], "seriesIndex") == t &&
                              l.get(g[a], "dataIndex") == m
                            ) {
                              (this._curTarget = g[a]),
                                (y = g[a].style.x),
                                (b =
                                  V.type != r.CHART_TYPE_K
                                    ? g[a].style.y
                                    : g[a].style.y[0]);
                              break;
                            }
                          break;
                        case r.CHART_TYPE_RADAR:
                          for (
                            var m = e.dataIndex, a = 0, o = g.length;
                            o > a;
                            a++
                          )
                            if (
                              "polygon" === g[a].type &&
                              l.get(g[a], "seriesIndex") == t &&
                              l.get(g[a], "dataIndex") == m
                            ) {
                              this._curTarget = g[a];
                              var u = this.component.polar.getCenter(
                                s.polarIndex || 0
                              );
                              (y = u[0]), (b = u[1]);
                              break;
                            }
                          break;
                        case r.CHART_TYPE_PIE:
                          for (var k = e.name, a = 0, o = g.length; o > a; a++)
                            if (
                              "sector" === g[a].type &&
                              l.get(g[a], "seriesIndex") == t &&
                              l.get(g[a], "name") == k
                            ) {
                              this._curTarget = g[a];
                              var f = this._curTarget.style,
                                L =
                                  (((f.startAngle + f.endAngle) / 2) *
                                    Math.PI) /
                                  180;
                              (y =
                                this._curTarget.style.x +
                                (Math.cos(L) * f.r) / 1.5),
                                (b =
                                  this._curTarget.style.y -
                                  (Math.sin(L) * f.r) / 1.5);
                              break;
                            }
                          break;
                        case r.CHART_TYPE_MAP:
                          for (
                            var k = e.name, x = s.mapType, a = 0, o = g.length;
                            o > a;
                            a++
                          )
                            if (
                              "text" === g[a].type &&
                              g[a]._mapType === x &&
                              g[a].style._name === k
                            ) {
                              (this._curTarget = g[a]),
                                (y =
                                  this._curTarget.style.x +
                                  this._curTarget.position[0]),
                                (b =
                                  this._curTarget.style.y +
                                  this._curTarget.position[1]);
                              break;
                            }
                          break;
                        case r.CHART_TYPE_CHORD:
                          for (var k = e.name, a = 0, o = g.length; o > a; a++)
                            if (
                              "sector" === g[a].type &&
                              l.get(g[a], "name") == k
                            ) {
                              this._curTarget = g[a];
                              var f = this._curTarget.style,
                                L =
                                  (((f.startAngle + f.endAngle) / 2) *
                                    Math.PI) /
                                  180;
                              return (
                                (y =
                                  this._curTarget.style.x +
                                  Math.cos(L) * (f.r - 2)),
                                (b =
                                  this._curTarget.style.y -
                                  Math.sin(L) * (f.r - 2)),
                                void this.zr.trigger(h.EVENT.MOUSEMOVE, {
                                  zrenderX: y,
                                  zrenderY: b,
                                })
                              );
                            }
                          break;
                        case r.CHART_TYPE_FORCE:
                          for (var k = e.name, a = 0, o = g.length; o > a; a++)
                            if (
                              "circle" === g[a].type &&
                              l.get(g[a], "name") == k
                            ) {
                              (this._curTarget = g[a]),
                                (y = this._curTarget.position[0]),
                                (b = this._curTarget.position[1]);
                              break;
                            }
                      }
                      null != y &&
                        null != b &&
                        ((this._event = { zrenderX: y, zrenderY: b }),
                        this.zr.addHoverShape(this._curTarget),
                        this.zr.refreshHover(),
                        this._showItemTrigger());
                    }
                }
              }
            },
            hideTip: function () {
              this._hide();
            },
            refresh: function (e) {
              if (
                ((this._zrHeight = this.zr.getHeight()),
                (this._zrWidth = this.zr.getWidth()),
                this._lastTipShape &&
                  this._lastTipShape.tipShape.length > 0 &&
                  this.zr.delShape(this._lastTipShape.tipShape),
                (this._lastTipShape = !1),
                (this.shapeList.length = 2),
                (this._lastDataIndex = -1),
                (this._lastSeriesIndex = -1),
                (this._lastItemTriggerId = -1),
                e)
              ) {
                (this.option = e),
                  (this.option.tooltip = this.reformOption(
                    this.option.tooltip
                  )),
                  (this.option.tooltip.textStyle = p.merge(
                    this.option.tooltip.textStyle,
                    this.ecTheme.textStyle
                  )),
                  (this._needAxisTrigger = !1),
                  "axis" === this.option.tooltip.trigger &&
                    (this._needAxisTrigger = !0);
                for (
                  var t = this.option.series, n = 0, i = t.length;
                  i > n;
                  n++
                )
                  if ("axis" === this.query(t[n], "tooltip.trigger")) {
                    this._needAxisTrigger = !0;
                    break;
                  }
                (this._showDelay = this.option.tooltip.showDelay),
                  (this._hideDelay = this.option.tooltip.hideDelay),
                  (this._defaultCssText = this._style(this.option.tooltip)),
                  this._setSelectedMap(),
                  (this._axisLineWidth = this.option.tooltip.axisPointer.lineStyle.width),
                  (this._enterable = this.option.tooltip.enterable);
              }
              if (this.showing) {
                var a = this;
                setTimeout(function () {
                  a.zr.trigger(h.EVENT.MOUSEMOVE, a.zr.handler._event);
                }, 50);
              }
            },
            onbeforDispose: function () {
              this._lastTipShape &&
                this._lastTipShape.tipShape.length > 0 &&
                this.zr.delShape(this._lastTipShape.tipShape),
                clearTimeout(this._hidingTicket),
                clearTimeout(this._showingTicket),
                this.zr.un(h.EVENT.CLICK, this._onmousemove),
                this.zr.un(h.EVENT.MOUSEMOVE, this._onmousemove),
                this.zr.un(h.EVENT.GLOBALOUT, this._onglobalout),
                this.hasAppend &&
                  this.dom.firstChild &&
                  this.dom.firstChild.removeChild(this._tDom),
                (this._tDom = null);
            },
            _encodeHTML: function (e) {
              return String(e)
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#39;");
            },
          }),
          p.inherits(t, n),
          e("../component").define("tooltip", t),
          t
        );
      }
    ),
    n(
      "echarts/component/legend",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Rectangle",
        "zrender/shape/Sector",
        "../util/shape/Icon",
        "../util/shape/Candle",
        "../config",
        "zrender/tool/util",
        "zrender/tool/area",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          if (!this.query(a, "legend.data"))
            return void console.error(
              "option.legend.data has not been defined."
            );
          n.call(this, e, t, i, a, o);
          var s = this;
          (s._legendSelected = function (e) {
            s.__legendSelected(e);
          }),
            (this._colorIndex = 0),
            (this._colorMap = {}),
            (this._selectedMap = {}),
            (this._hasDataMap = {}),
            this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Rectangle"),
          o = e("zrender/shape/Sector"),
          s = e("../util/shape/Icon"),
          r = e("../util/shape/Candle"),
          l = e("../config");
        l.legend = {
          zlevel: 0,
          z: 4,
          show: !0,
          orient: "horizontal",
          x: "center",
          y: "top",
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "#ccc",
          borderWidth: 0,
          padding: 1,
          itemGap: 10,
          itemWidth: 18,
          itemHeight: 18,
          textStyle: { fontSize: 18, color: "#333" },
          selectedMode: !0,
        };
        var h = e("zrender/tool/util"),
          V = e("zrender/tool/area");
        t.prototype = {
          type: l.COMPONENT_TYPE_LEGEND,
          _buildShape: function () {
            if (this.legendOption.show) {
              (this._itemGroupLocation = this._getItemGroupLocation()),
                this._buildBackground(),
                this._buildItem();
              for (var e = 0, t = this.shapeList.length; t > e; e++)
                this.zr.addShape(this.shapeList[e]);
            }
          },
          _buildItem: function () {
            var e,
              t,
              n,
              a,
              o,
              r,
              l,
              U,
              m = this.legendOption.data,
              p = m.length,
              d = this.legendOption.textStyle,
              c = this.zr.getWidth(),
              u = this.zr.getHeight(),
              y = this._itemGroupLocation.x,
              b = this._itemGroupLocation.y,
              g = this.legendOption.itemWidth,
              k = this.legendOption.itemHeight,
              f = this.legendOption.itemGap;
            "vertical" === this.legendOption.orient &&
              "right" === this.legendOption.x &&
              (y =
                this._itemGroupLocation.x + this._itemGroupLocation.width - g);
            for (var L = 0; p > L; L++)
              (o = h.merge(m[L].textStyle || {}, d)),
                (r = this.getFont(o)),
                (e = this._getName(m[L])),
                (l = this._getFormatterName(e)),
                "" !== e
                  ? ((t = m[L].icon || this._getSomethingByName(e).type),
                    (U = this.getColor(e)),
                    "horizontal" === this.legendOption.orient
                      ? 200 > c - y &&
                        g +
                          5 +
                          V.getTextWidth(l, r) +
                          (L === p - 1 || "" === m[L + 1] ? 0 : f) >=
                          c - y &&
                        ((y = this._itemGroupLocation.x), (b += k + f))
                      : 200 > u - b &&
                        k + (L === p - 1 || "" === m[L + 1] ? 0 : f) >= u - b &&
                        ("right" === this.legendOption.x
                          ? (y -= this._itemGroupLocation.maxWidth + f)
                          : (y += this._itemGroupLocation.maxWidth + f),
                        (b = this._itemGroupLocation.y)),
                    (n = this._getItemShapeByType(
                      y,
                      b,
                      g,
                      k,
                      this._selectedMap[e] && this._hasDataMap[e] ? U : "#ccc",
                      t,
                      U
                    )),
                    (n._name = e),
                    (n = new s(n)),
                    (a = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      style: {
                        x: y + g + 5,
                        y: b + k / 2,
                        color: this._selectedMap[e]
                          ? "auto" === o.color
                            ? U
                            : o.color
                          : "#ccc",
                        text: l,
                        textFont: r,
                        textBaseline: "middle",
                      },
                      highlightStyle: { color: U, brushType: "fill" },
                      hoverable: !!this.legendOption.selectedMode,
                      clickable: !!this.legendOption.selectedMode,
                    }),
                    "vertical" === this.legendOption.orient &&
                      "right" === this.legendOption.x &&
                      ((a.style.x -= g + 10), (a.style.textAlign = "right")),
                    (a._name = e),
                    (a = new i(a)),
                    this.legendOption.selectedMode &&
                      ((n.onclick = a.onclick = this._legendSelected),
                      (n.onmouseover = a.onmouseover = this._dispatchHoverLink),
                      (n.hoverConnect = a.id),
                      (a.hoverConnect = n.id)),
                    this.shapeList.push(n),
                    this.shapeList.push(a),
                    "horizontal" === this.legendOption.orient
                      ? (y += g + 5 + V.getTextWidth(l, r) + f)
                      : (b += k + f))
                  : "horizontal" === this.legendOption.orient
                  ? ((y = this._itemGroupLocation.x), (b += k + f))
                  : ("right" === this.legendOption.x
                      ? (y -= this._itemGroupLocation.maxWidth + f)
                      : (y += this._itemGroupLocation.maxWidth + f),
                    (b = this._itemGroupLocation.y));
            "horizontal" === this.legendOption.orient &&
              "center" === this.legendOption.x &&
              b != this._itemGroupLocation.y &&
              this._mLineOptimize();
          },
          _getName: function (e) {
            return "undefined" != typeof e.name ? e.name : e;
          },
          _getFormatterName: function (e) {
            var t,
              n = this.legendOption.formatter;
            return (t =
              "function" == typeof n
                ? n.call(this.myChart, e)
                : "string" == typeof n
                ? n.replace("{name}", e)
                : e);
          },
          _getFormatterNameFromData: function (e) {
            var t = this._getName(e);
            return this._getFormatterName(t);
          },
          _mLineOptimize: function () {
            for (
              var e = [],
                t = this._itemGroupLocation.x,
                n = 2,
                i = this.shapeList.length;
              i > n;
              n++
            )
              this.shapeList[n].style.x === t
                ? e.push(
                    (this._itemGroupLocation.width -
                      (this.shapeList[n - 1].style.x +
                        V.getTextWidth(
                          this.shapeList[n - 1].style.text,
                          this.shapeList[n - 1].style.textFont
                        ) -
                        t)) /
                      2
                  )
                : n === i - 1 &&
                  e.push(
                    (this._itemGroupLocation.width -
                      (this.shapeList[n].style.x +
                        V.getTextWidth(
                          this.shapeList[n].style.text,
                          this.shapeList[n].style.textFont
                        ) -
                        t)) /
                      2
                  );
            for (var a = -1, n = 1, i = this.shapeList.length; i > n; n++)
              this.shapeList[n].style.x === t && a++,
                0 !== e[a] && (this.shapeList[n].style.x += e[a]);
          },
          _buildBackground: function () {
            var e = this.reformCssArray(this.legendOption.padding);
            this.shapeList.push(
              new a({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                hoverable: !1,
                style: {
                  x: this._itemGroupLocation.x - e[3],
                  y: this._itemGroupLocation.y - e[0],
                  width: this._itemGroupLocation.width + e[3] + e[1],
                  height: this._itemGroupLocation.height + e[0] + e[2],
                  brushType:
                    0 === this.legendOption.borderWidth ? "fill" : "both",
                  color: this.legendOption.backgroundColor,
                  strokeColor: this.legendOption.borderColor,
                  lineWidth: this.legendOption.borderWidth,
                },
              })
            );
          },
          _getItemGroupLocation: function () {
            var e = this.legendOption.data,
              t = e.length,
              n = this.legendOption.itemGap,
              i = this.legendOption.itemWidth + 5,
              a = this.legendOption.itemHeight,
              o = this.legendOption.textStyle,
              s = this.getFont(o),
              r = 0,
              l = 0,
              U = this.reformCssArray(this.legendOption.padding),
              m = this.zr.getWidth() - U[1] - U[3],
              p = this.zr.getHeight() - U[0] - U[2],
              d = 0,
              c = 0;
            if ("horizontal" === this.legendOption.orient) {
              l = a;
              for (var u = 0; t > u; u++)
                if ("" !== this._getName(e[u])) {
                  var y = V.getTextWidth(
                    this._getFormatterNameFromData(e[u]),
                    e[u].textStyle
                      ? this.getFont(h.merge(e[u].textStyle || {}, o))
                      : s
                  );
                  d + i + y + n > m
                    ? ((d -= n), (r = Math.max(r, d)), (l += a + n), (d = 0))
                    : ((d += i + y + n), (r = Math.max(r, d - n)));
                } else (d -= n), (r = Math.max(r, d)), (l += a + n), (d = 0);
            } else {
              for (var u = 0; t > u; u++)
                c = Math.max(
                  c,
                  V.getTextWidth(
                    this._getFormatterNameFromData(e[u]),
                    e[u].textStyle
                      ? this.getFont(h.merge(e[u].textStyle || {}, o))
                      : s
                  )
                );
              (c += i), (r = c);
              for (var u = 0; t > u; u++)
                "" !== this._getName(e[u])
                  ? d + a + n > p
                    ? ((r += c + n), (d -= n), (l = Math.max(l, d)), (d = 0))
                    : ((d += a + n), (l = Math.max(l, d - n)))
                  : ((r += c + n), (d -= n), (l = Math.max(l, d)), (d = 0));
            }
            (m = this.zr.getWidth()), (p = this.zr.getHeight());
            var b;
            switch (this.legendOption.x) {
              case "center":
                b = Math.floor((m - r) / 2);
                break;
              case "left":
                b = U[3] + this.legendOption.borderWidth;
                break;
              case "right":
                b = m - r - U[1] - U[3] - 2 * this.legendOption.borderWidth;
                break;
              default:
                b = this.parsePercent(this.legendOption.x, m);
            }
            var g;
            switch (this.legendOption.y) {
              case "top":
                g = U[0] + this.legendOption.borderWidth;
                break;
              case "bottom":
                g = p - l - U[0] - U[2] - 2 * this.legendOption.borderWidth;
                break;
              case "center":
                g = Math.floor((p - l) / 2);
                break;
              default:
                g = this.parsePercent(this.legendOption.y, p);
            }
            return { x: b, y: g, width: r, height: l, maxWidth: c };
          },
          _getSomethingByName: function (e) {
            for (
              var t, n = this.option.series, i = 0, a = n.length;
              a > i;
              i++
            ) {
              if (n[i].name === e)
                return {
                  type: n[i].type,
                  series: n[i],
                  seriesIndex: i,
                  data: null,
                  dataIndex: -1,
                };
              if (
                n[i].type === l.CHART_TYPE_PIE ||
                n[i].type === l.CHART_TYPE_RADAR ||
                n[i].type === l.CHART_TYPE_CHORD ||
                n[i].type === l.CHART_TYPE_FORCE ||
                n[i].type === l.CHART_TYPE_FUNNEL
              ) {
                t = n[i].categories || n[i].data || n[i].nodes;
                for (var o = 0, s = t.length; s > o; o++)
                  if (t[o].name === e)
                    return {
                      type: n[i].type,
                      series: n[i],
                      seriesIndex: i,
                      data: t[o],
                      dataIndex: o,
                    };
              }
            }
            return {
              type: "bar",
              series: null,
              seriesIndex: -1,
              data: null,
              dataIndex: -1,
            };
          },
          _getItemShapeByType: function (e, t, n, i, a, o, s) {
            var r,
              h = "#ccc" === a ? s : a,
              V = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  iconType: "legendicon" + o,
                  x: e,
                  y: t,
                  width: n,
                  height: i,
                  color: a,
                  strokeColor: a,
                  lineWidth: 2,
                },
                highlightStyle: { color: h, strokeColor: h, lineWidth: 1 },
                hoverable: this.legendOption.selectedMode,
                clickable: this.legendOption.selectedMode,
              };
            if (o.match("image")) {
              var r = o.replace(new RegExp("^image:\\/\\/"), "");
              o = "image";
            }
            switch (o) {
              case "line":
                (V.style.brushType = "stroke"),
                  (V.highlightStyle.lineWidth = 3);
                break;
              case "radar":
              case "scatter":
                V.highlightStyle.lineWidth = 3;
                break;
              case "k":
                (V.style.brushType = "both"),
                  (V.highlightStyle.lineWidth = 3),
                  (V.highlightStyle.color = V.style.color =
                    this.deepQuery(
                      [this.ecTheme, l],
                      "k.itemStyle.normal.color"
                    ) || "#fff"),
                  (V.style.strokeColor =
                    "#ccc" != a
                      ? this.deepQuery(
                          [this.ecTheme, l],
                          "k.itemStyle.normal.lineStyle.color"
                        ) || "#ff3200"
                      : a);
                break;
              case "image":
                (V.style.iconType = "image"),
                  (V.style.image = r),
                  "#ccc" === a && (V.style.opacity = 0.5);
            }
            return V;
          },
          __legendSelected: function (e) {
            var t = e.target._name;
            if ("single" === this.legendOption.selectedMode)
              for (var n in this._selectedMap) this._selectedMap[n] = !1;
            (this._selectedMap[t] = !this._selectedMap[t]),
              this.messageCenter.dispatch(
                l.EVENT.LEGEND_SELECTED,
                e.event,
                { selected: this._selectedMap, target: t },
                this.myChart
              );
          },
          refresh: function (e) {
            if (e) {
              (this.option = e || this.option),
                (this.option.legend = this.reformOption(this.option.legend)),
                (this.legendOption = this.option.legend);
              var t,
                n,
                i,
                a,
                o = this.legendOption.data || [];
              if (this.legendOption.selected)
                for (var s in this.legendOption.selected)
                  this._selectedMap[s] =
                    "undefined" != typeof this._selectedMap[s]
                      ? this._selectedMap[s]
                      : this.legendOption.selected[s];
              for (var r = 0, h = o.length; h > r; r++)
                (t = this._getName(o[r])),
                  "" !== t &&
                    ((n = this._getSomethingByName(t)),
                    n.series
                      ? ((this._hasDataMap[t] = !0),
                        (a =
                          !n.data ||
                          (n.type !== l.CHART_TYPE_PIE &&
                            n.type !== l.CHART_TYPE_FORCE &&
                            n.type !== l.CHART_TYPE_FUNNEL)
                            ? [n.series]
                            : [n.data, n.series]),
                        (i = this.getItemStyleColor(
                          this.deepQuery(a, "itemStyle.normal.color"),
                          n.seriesIndex,
                          n.dataIndex,
                          n.data
                        )),
                        i && n.type != l.CHART_TYPE_K && this.setColor(t, i),
                        (this._selectedMap[t] =
                          null != this._selectedMap[t]
                            ? this._selectedMap[t]
                            : !0))
                      : (this._hasDataMap[t] = !1));
            }
            this.clear(), this._buildShape();
          },
          getRelatedAmount: function (e) {
            for (
              var t, n = 0, i = this.option.series, a = 0, o = i.length;
              o > a;
              a++
            )
              if (
                (i[a].name === e && n++,
                i[a].type === l.CHART_TYPE_PIE ||
                  i[a].type === l.CHART_TYPE_RADAR ||
                  i[a].type === l.CHART_TYPE_CHORD ||
                  i[a].type === l.CHART_TYPE_FORCE ||
                  i[a].type === l.CHART_TYPE_FUNNEL)
              ) {
                t =
                  i[a].type != l.CHART_TYPE_FORCE ? i[a].data : i[a].categories;
                for (var s = 0, r = t.length; r > s; s++)
                  t[s].name === e && "-" != t[s].value && n++;
              }
            return n;
          },
          setColor: function (e, t) {
            this._colorMap[e] = t;
          },
          getColor: function (e) {
            return (
              this._colorMap[e] ||
                (this._colorMap[e] = this.zr.getColor(this._colorIndex++)),
              this._colorMap[e]
            );
          },
          hasColor: function (e) {
            return this._colorMap[e] ? this._colorMap[e] : !1;
          },
          add: function (e, t) {
            for (
              var n = this.legendOption.data, i = 0, a = n.length;
              a > i;
              i++
            )
              if (this._getName(n[i]) === e) return;
            this.legendOption.data.push(e),
              this.setColor(e, t),
              (this._selectedMap[e] = !0),
              (this._hasDataMap[e] = !0);
          },
          del: function (e) {
            for (
              var t = this.legendOption.data, n = 0, i = t.length;
              i > n;
              n++
            )
              if (this._getName(t[n]) === e)
                return this.legendOption.data.splice(n, 1);
          },
          getItemShape: function (e) {
            if (null != e)
              for (var t, n = 0, i = this.shapeList.length; i > n; n++)
                if (
                  ((t = this.shapeList[n]), t._name === e && "text" != t.type)
                )
                  return t;
          },
          setItemShape: function (e, t) {
            for (var n, i = 0, a = this.shapeList.length; a > i; i++)
              (n = this.shapeList[i]),
                n._name === e &&
                  "text" != n.type &&
                  (this._selectedMap[e] ||
                    ((t.style.color = "#ccc"), (t.style.strokeColor = "#ccc")),
                  this.zr.modShape(n.id, t));
          },
          isSelected: function (e) {
            return "undefined" != typeof this._selectedMap[e]
              ? this._selectedMap[e]
              : !0;
          },
          getSelectedMap: function () {
            return this._selectedMap;
          },
          setSelected: function (e, t) {
            if ("single" === this.legendOption.selectedMode)
              for (var n in this._selectedMap) this._selectedMap[n] = !1;
            (this._selectedMap[e] = t),
              this.messageCenter.dispatch(
                l.EVENT.LEGEND_SELECTED,
                null,
                { selected: this._selectedMap, target: e },
                this.myChart
              );
          },
          onlegendSelected: function (e, t) {
            var n = e.selected;
            for (var i in n)
              this._selectedMap[i] != n[i] && (t.needRefresh = !0),
                (this._selectedMap[i] = n[i]);
          },
        };
        var U = {
          line: function (e, t) {
            var n = t.height / 2;
            e.moveTo(t.x, t.y + n), e.lineTo(t.x + t.width, t.y + n);
          },
          pie: function (e, t) {
            var n = t.x,
              i = t.y,
              a = t.width,
              s = t.height;
            o.prototype.buildPath(e, {
              x: n + a,
              y: i + s,
              r: s,
              r0: 6,
              startAngle: 90,
              endAngle: 180,
            });
          },
          eventRiver: function (e, t) {
            var n = t.x,
              i = t.y,
              a = t.width,
              o = t.height;
            e.moveTo(n, i + o),
              e.bezierCurveTo(n + a, i + o, n, i + 4, n + a, i + 4),
              e.lineTo(n + a, i),
              e.bezierCurveTo(n, i, n + a, i + o - 4, n, i + o - 4),
              e.lineTo(n, i + o);
          },
          k: function (e, t) {
            var n = t.x,
              i = t.y,
              a = t.width,
              o = t.height;
            r.prototype.buildPath(e, {
              x: n + a / 2,
              y: [i + 1, i + 1, i + o - 6, i + o],
              width: a - 6,
            });
          },
          bar: function (e, t) {
            var n = t.x,
              i = t.y + 1,
              a = t.width,
              o = t.height - 2,
              s = 3;
            e.moveTo(n + s, i),
              e.lineTo(n + a - s, i),
              e.quadraticCurveTo(n + a, i, n + a, i + s),
              e.lineTo(n + a, i + o - s),
              e.quadraticCurveTo(n + a, i + o, n + a - s, i + o),
              e.lineTo(n + s, i + o),
              e.quadraticCurveTo(n, i + o, n, i + o - s),
              e.lineTo(n, i + s),
              e.quadraticCurveTo(n, i, n + s, i);
          },
          force: function (e, t) {
            s.prototype.iconLibrary.circle(e, t);
          },
          radar: function (e, t) {
            var n = 6,
              i = t.x + t.width / 2,
              a = t.y + t.height / 2,
              o = t.height / 2,
              s = (2 * Math.PI) / n,
              r = -Math.PI / 2,
              l = i + o * Math.cos(r),
              h = a + o * Math.sin(r);
            e.moveTo(l, h), (r += s);
            for (var V = 0, U = n - 1; U > V; V++)
              e.lineTo(i + o * Math.cos(r), a + o * Math.sin(r)), (r += s);
            e.lineTo(l, h);
          },
        };
        (U.chord = U.pie), (U.map = U.bar);
        for (var m in U) s.prototype.iconLibrary["legendicon" + m] = U[m];
        return h.inherits(t, n), e("../component").define("legend", t), t;
      }
    ),
    n("echarts/util/ecData", [], function () {
      function e(e, t, n, i, a, o, s, r) {
        var l;
        return (
          "undefined" != typeof i && (l = null == i.value ? i : i.value),
          (e._echartsData = {
            _series: t,
            _seriesIndex: n,
            _data: i,
            _dataIndex: a,
            _name: o,
            _value: l,
            _special: s,
            _special2: r,
          }),
          e._echartsData
        );
      }
      function t(e, t) {
        var n = e._echartsData;
        if (!t) return n;
        switch (t) {
          case "series":
          case "seriesIndex":
          case "data":
          case "dataIndex":
          case "name":
          case "value":
          case "special":
          case "special2":
            return n && n["_" + t];
        }
        return null;
      }
      function n(e, t, n) {
        switch (((e._echartsData = e._echartsData || {}), t)) {
          case "series":
          case "seriesIndex":
          case "data":
          case "dataIndex":
          case "name":
          case "value":
          case "special":
          case "special2":
            e._echartsData["_" + t] = n;
        }
      }
      function i(e, t) {
        t._echartsData = {
          _series: e._echartsData._series,
          _seriesIndex: e._echartsData._seriesIndex,
          _data: e._echartsData._data,
          _dataIndex: e._echartsData._dataIndex,
          _name: e._echartsData._name,
          _value: e._echartsData._value,
          _special: e._echartsData._special,
          _special2: e._echartsData._special2,
        };
      }
      return { pack: e, set: n, get: t, clone: i };
    }),
    n("echarts/chart", [], function () {
      var e = {},
        t = {};
      return (
        (e.define = function (n, i) {
          return (t[n] = i), e;
        }),
        (e.get = function (e) {
          return t[e];
        }),
        e
      );
    }),
    n("zrender/tool/color", ["require", "../tool/util"], function (e) {
      function t(e) {
        if (
          e instanceof Array ||
          -1 != e.indexOf("rgb") ||
          -1 != e.indexOf("hs")
        )
          return e;
        if (!Y[e]) {
          var t = D.getPixelContext();
          (t.fillStyle = e), t.rect(0, 0, 10, 10), t.fill();
          var n = t.getImageData(5, 5, 1, 1).data;
          Y[e] = m([n[0], n[1], n[2], n[3]], "rgba");
        }
        return Y[e];
      }
      function n(e) {
        N = e;
      }
      function i() {
        N = B;
      }
      function a(e, t) {
        return (e = 0 | e), (t = t || N), t[e % t.length];
      }
      function o(e) {
        H = e;
      }
      function s() {
        R = H;
      }
      function r() {
        return H;
      }
      function l(e, t, n, i, a, o, s) {
        P = P || D.getContext();
        for (
          var r = P.createRadialGradient(e, t, n, i, a, o), l = 0, h = s.length;
          h > l;
          l++
        )
          r.addColorStop(s[l][0], s[l][1]);
        return (r.__nonRecursion = !0), r;
      }
      function h(e, t, n, i, a) {
        P = P || D.getContext();
        for (
          var o = P.createLinearGradient(e, t, n, i), s = 0, r = a.length;
          r > s;
          s++
        )
          o.addColorStop(a[s][0], a[s][1]);
        return (o.__nonRecursion = !0), o;
      }
      function V(e, t, n) {
        (e = c(e)), (t = c(t)), (e = J(e)), (t = J(t));
        for (
          var i = [],
            a = (t[0] - e[0]) / n,
            o = (t[1] - e[1]) / n,
            s = (t[2] - e[2]) / n,
            r = (t[3] - e[3]) / n,
            l = 0,
            h = e[0],
            V = e[1],
            U = e[2],
            p = e[3];
          n > l;
          l++
        )
          (i[l] = m(
            [
              F(Math.floor(h), [0, 255]),
              F(Math.floor(V), [0, 255]),
              F(Math.floor(U), [0, 255]),
              p.toFixed(4) - 0,
            ],
            "rgba"
          )),
            (h += a),
            (V += o),
            (U += s),
            (p += r);
        return (
          (h = t[0]),
          (V = t[1]),
          (U = t[2]),
          (p = t[3]),
          (i[l] = m([h, V, U, p], "rgba")),
          i
        );
      }
      function U(e, t) {
        var n = [],
          i = e.length;
        if ((void 0 === t && (t = 20), 1 === i)) n = V(e[0], e[0], t);
        else if (i > 1)
          for (var a = 0, o = i - 1; o > a; a++) {
            var s = V(e[a], e[a + 1], t);
            o - 1 > a && s.pop(), (n = n.concat(s));
          }
        return n;
      }
      function m(e, t) {
        if (((t = t || "rgb"), e && (3 === e.length || 4 === e.length))) {
          if (
            ((e = S(e, function (e) {
              return e > 1 ? Math.ceil(e) : e;
            })),
            t.indexOf("hex") > -1)
          )
            return (
              "#" +
              ((1 << 24) + (e[0] << 16) + (e[1] << 8) + +e[2])
                .toString(16)
                .slice(1)
            );
          if (t.indexOf("hs") > -1) {
            var n = S(e.slice(1, 3), function (e) {
              return e + "%";
            });
            (e[1] = n[0]), (e[2] = n[1]);
          }
          return t.indexOf("a") > -1
            ? (3 === e.length && e.push(1),
              (e[3] = F(e[3], [0, 1])),
              t + "(" + e.slice(0, 4).join(",") + ")")
            : t + "(" + e.slice(0, 3).join(",") + ")";
        }
      }
      function p(e) {
        (e = W(e)), e.indexOf("rgba") < 0 && (e = c(e));
        var t = [],
          n = 0;
        return (
          e.replace(/[\d.]+/g, function (e) {
            (e = 3 > n ? 0 | e : +e), (t[n++] = e);
          }),
          t
        );
      }
      function d(e, t) {
        if (!E(e)) return e;
        var n = J(e),
          i = n[3];
        return (
          "undefined" == typeof i && (i = 1),
          e.indexOf("hsb") > -1
            ? (n = T(n))
            : e.indexOf("hsl") > -1 && (n = A(n)),
          t.indexOf("hsb") > -1 || t.indexOf("hsv") > -1
            ? (n = z(n))
            : t.indexOf("hsl") > -1 && (n = O(n)),
          (n[3] = i),
          m(n, t)
        );
      }
      function c(e) {
        return d(e, "rgba");
      }
      function u(e) {
        return d(e, "rgb");
      }
      function y(e) {
        return d(e, "hex");
      }
      function b(e) {
        return d(e, "hsva");
      }
      function g(e) {
        return d(e, "hsv");
      }
      function k(e) {
        return d(e, "hsba");
      }
      function f(e) {
        return d(e, "hsb");
      }
      function L(e) {
        return d(e, "hsla");
      }
      function x(e) {
        return d(e, "hsl");
      }
      function _(e) {
        for (var t in Y) if (y(Y[t]) === y(e)) return t;
        return null;
      }
      function W(e) {
        return String(e).replace(/\s+/g, "");
      }
      function X(e) {
        if (
          ((e = t(e)),
          (e = W(e)),
          (e = e.replace(/hsv/i, "hsb")),
          /^#[\da-f]{3}$/i.test(e))
        ) {
          e = parseInt(e.slice(1), 16);
          var n = (3840 & e) << 8,
            i = (240 & e) << 4,
            a = 15 & e;
          e =
            "#" +
            ((1 << 24) + (n << 4) + n + (i << 4) + i + (a << 4) + a)
              .toString(16)
              .slice(1);
        }
        return e;
      }
      function K(e, t) {
        if (!E(e)) return e;
        var n = t > 0 ? 1 : -1;
        "undefined" == typeof t && (t = 0),
          (t = Math.abs(t) > 1 ? 1 : Math.abs(t)),
          (e = u(e));
        for (var i = J(e), a = 0; 3 > a; a++)
          i[a] = 1 === n ? (i[a] * (1 - t)) | 0 : ((255 - i[a]) * t + i[a]) | 0;
        return "rgb(" + i.join(",") + ")";
      }
      function I(e) {
        if (!E(e)) return e;
        var t = J(c(e));
        return (
          (t = S(t, function (e) {
            return 255 - e;
          })),
          m(t, "rgb")
        );
      }
      function w(e, t, n) {
        if (!E(e) || !E(t)) return e;
        "undefined" == typeof n && (n = 0.5), (n = 1 - F(n, [0, 1]));
        for (
          var i = 2 * n - 1,
            a = J(c(e)),
            o = J(c(t)),
            s = a[3] - o[3],
            r = ((i * s === -1 ? i : (i + s) / (1 + i * s)) + 1) / 2,
            l = 1 - r,
            h = [],
            V = 0;
          3 > V;
          V++
        )
          h[V] = a[V] * r + o[V] * l;
        var U = a[3] * n + o[3] * (1 - n);
        return (
          (U = Math.max(0, Math.min(1, U))),
          1 === a[3] && 1 === o[3] ? m(h, "rgb") : ((h[3] = U), m(h, "rgba"))
        );
      }
      function v() {
        return "#" + (Math.random().toString(16) + "0000").slice(2, 8);
      }
      function J(e) {
        e = X(e);
        var t = e.match(G);
        if (null === t) throw new Error("The color format error");
        var n,
          i,
          a,
          o = [];
        if (t[2])
          (n = t[2].replace("#", "").split("")),
            (a = [n[0] + n[1], n[2] + n[3], n[4] + n[5]]),
            (o = S(a, function (e) {
              return F(parseInt(e, 16), [0, 255]);
            }));
        else if (t[4]) {
          var s = t[4].split(",");
          (i = s[3]),
            (a = s.slice(0, 3)),
            (o = S(a, function (e) {
              return (
                (e = Math.floor(
                  e.indexOf("%") > 0 ? 2.55 * parseInt(e, 0) : e
                )),
                F(e, [0, 255])
              );
            })),
            "undefined" != typeof i && o.push(F(parseFloat(i), [0, 1]));
        } else if (t[5] || t[6]) {
          var r = (t[5] || t[6]).split(","),
            l = parseInt(r[0], 0) / 360,
            h = r[1],
            V = r[2];
          (i = r[3]),
            (o = S([h, V], function (e) {
              return F(parseFloat(e) / 100, [0, 1]);
            })),
            o.unshift(l),
            "undefined" != typeof i && o.push(F(parseFloat(i), [0, 1]));
        }
        return o;
      }
      function C(e, t) {
        if (!E(e)) return e;
        null === t && (t = 1);
        var n = J(c(e));
        return (n[3] = F(Number(t).toFixed(4), [0, 1])), m(n, "rgba");
      }
      function S(e, t) {
        if ("function" != typeof t) throw new TypeError();
        for (var n = e ? e.length : 0, i = 0; n > i; i++) e[i] = t(e[i]);
        return e;
      }
      function F(e, t) {
        return e <= t[0] ? (e = t[0]) : e >= t[1] && (e = t[1]), e;
      }
      function E(e) {
        return e instanceof Array || "string" == typeof e;
      }
      function T(e) {
        var t,
          n,
          i,
          a = e[0],
          o = e[1],
          s = e[2];
        if (0 === o) (t = 255 * s), (n = 255 * s), (i = 255 * s);
        else {
          var r = 6 * a;
          6 === r && (r = 0);
          var l = 0 | r,
            h = s * (1 - o),
            V = s * (1 - o * (r - l)),
            U = s * (1 - o * (1 - (r - l))),
            m = 0,
            p = 0,
            d = 0;
          0 === l
            ? ((m = s), (p = U), (d = h))
            : 1 === l
            ? ((m = V), (p = s), (d = h))
            : 2 === l
            ? ((m = h), (p = s), (d = U))
            : 3 === l
            ? ((m = h), (p = V), (d = s))
            : 4 === l
            ? ((m = U), (p = h), (d = s))
            : ((m = s), (p = h), (d = V)),
            (t = 255 * m),
            (n = 255 * p),
            (i = 255 * d);
        }
        return [t, n, i];
      }
      function A(e) {
        var t,
          n,
          i,
          a = e[0],
          o = e[1],
          s = e[2];
        if (0 === o) (t = 255 * s), (n = 255 * s), (i = 255 * s);
        else {
          var r;
          r = 0.5 > s ? s * (1 + o) : s + o - o * s;
          var l = 2 * s - r;
          (t = 255 * M(l, r, a + 1 / 3)),
            (n = 255 * M(l, r, a)),
            (i = 255 * M(l, r, a - 1 / 3));
        }
        return [t, n, i];
      }
      function M(e, t, n) {
        return (
          0 > n && (n += 1),
          n > 1 && (n -= 1),
          1 > 6 * n
            ? e + 6 * (t - e) * n
            : 1 > 2 * n
            ? t
            : 2 > 3 * n
            ? e + (t - e) * (2 / 3 - n) * 6
            : e
        );
      }
      function z(e) {
        var t,
          n,
          i = e[0] / 255,
          a = e[1] / 255,
          o = e[2] / 255,
          s = Math.min(i, a, o),
          r = Math.max(i, a, o),
          l = r - s,
          h = r;
        if (0 === l) (t = 0), (n = 0);
        else {
          n = l / r;
          var V = ((r - i) / 6 + l / 2) / l,
            U = ((r - a) / 6 + l / 2) / l,
            m = ((r - o) / 6 + l / 2) / l;
          i === r
            ? (t = m - U)
            : a === r
            ? (t = 1 / 3 + V - m)
            : o === r && (t = 2 / 3 + U - V),
            0 > t && (t += 1),
            t > 1 && (t -= 1);
        }
        return (t = 360 * t), (n = 100 * n), (h = 100 * h), [t, n, h];
      }
      function O(e) {
        var t,
          n,
          i = e[0] / 255,
          a = e[1] / 255,
          o = e[2] / 255,
          s = Math.min(i, a, o),
          r = Math.max(i, a, o),
          l = r - s,
          h = (r + s) / 2;
        if (0 === l) (t = 0), (n = 0);
        else {
          n = 0.5 > h ? l / (r + s) : l / (2 - r - s);
          var V = ((r - i) / 6 + l / 2) / l,
            U = ((r - a) / 6 + l / 2) / l,
            m = ((r - o) / 6 + l / 2) / l;
          i === r
            ? (t = m - U)
            : a === r
            ? (t = 1 / 3 + V - m)
            : o === r && (t = 2 / 3 + U - V),
            0 > t && (t += 1),
            t > 1 && (t -= 1);
        }
        return (t = 360 * t), (n = 100 * n), (h = 100 * h), [t, n, h];
      }
      var P,
        D = e("../tool/util"),
        N = ["#ff9277", " #dddd00", " #ffc877", " #bbe3ff", " #d5ffbb"],
        B = N,
        H = "rgba(255,255,0,0.5)",
        R = H,
        G = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,
        Y = {};
      return {
        customPalette: n,
        resetPalette: i,
        getColor: a,
        getNameColor: t,
        getHighlightColor: r,
        customHighlight: o,
        resetHighlight: s,
        getRadialGradient: l,
        getLinearGradient: h,
        getGradientColors: U,
        getStepColors: V,
        reverse: I,
        mix: w,
        lift: K,
        trim: W,
        random: v,
        toRGB: u,
        toRGBA: c,
        toHex: y,
        toHSL: x,
        toHSLA: L,
        toHSB: f,
        toHSBA: k,
        toHSV: g,
        toHSVA: b,
        toName: _,
        toColor: m,
        toArray: p,
        alpha: C,
        getData: J,
      };
    }),
    n(
      "echarts/component/timeline",
      [
        "require",
        "./base",
        "zrender/shape/Rectangle",
        "../util/shape/Icon",
        "../util/shape/Chain",
        "../config",
        "zrender/tool/util",
        "zrender/tool/area",
        "zrender/tool/event",
        "../component",
      ],
      function (e) {
        function t(e, t, n, a, o) {
          i.call(this, e, t, n, a, o);
          var s = this;
          if (
            ((s._onclick = function (e) {
              return s.__onclick(e);
            }),
            (s._ondrift = function (e, t) {
              return s.__ondrift(this, e, t);
            }),
            (s._ondragend = function () {
              return s.__ondragend();
            }),
            (s._setCurrentOption = function () {
              var e = s.timelineOption;
              s.currentIndex %= e.data.length;
              var t = s.options[s.currentIndex] || {};
              s.myChart.setOption(t, e.notMerge),
                s.messageCenter.dispatch(
                  r.EVENT.TIMELINE_CHANGED,
                  null,
                  {
                    currentIndex: s.currentIndex,
                    data:
                      null != e.data[s.currentIndex].name
                        ? e.data[s.currentIndex].name
                        : e.data[s.currentIndex],
                  },
                  s.myChart
                );
            }),
            (s._onFrame = function () {
              s._setCurrentOption(),
                s._syncHandleShape(),
                s.timelineOption.autoPlay &&
                  (s.playTicket = setTimeout(function () {
                    return (
                      (s.currentIndex += 1),
                      !s.timelineOption.loop &&
                      s.currentIndex >= s.timelineOption.data.length
                        ? ((s.currentIndex = s.timelineOption.data.length - 1),
                          void s.stop())
                        : void s._onFrame()
                    );
                  }, s.timelineOption.playInterval));
            }),
            this.setTheme(!1),
            (this.options = this.option.options),
            (this.currentIndex =
              this.timelineOption.currentIndex %
              this.timelineOption.data.length),
            this.timelineOption.notMerge ||
              0 === this.currentIndex ||
              (this.options[this.currentIndex] = l.merge(
                this.options[this.currentIndex],
                this.options[0]
              )),
            this.timelineOption.show &&
              (this._buildShape(), this._syncHandleShape()),
            this._setCurrentOption(),
            this.timelineOption.autoPlay)
          ) {
            var s = this;
            this.playTicket = setTimeout(
              function () {
                s.play();
              },
              null != this.ecTheme.animationDuration
                ? this.ecTheme.animationDuration
                : r.animationDuration
            );
          }
        }
        function n(e, t) {
          var n = 2,
            i = t.x + n,
            a = t.y + n + 2,
            s = t.width - n,
            r = t.height - n,
            l = t.symbol;
          if ("last" === l)
            e.moveTo(i + s - 2, a + r / 3),
              e.lineTo(i + s - 2, a),
              e.lineTo(i + 2, a + r / 2),
              e.lineTo(i + s - 2, a + r),
              e.lineTo(i + s - 2, a + (r / 3) * 2),
              e.moveTo(i, a),
              e.lineTo(i, a);
          else if ("next" === l)
            e.moveTo(i + 2, a + r / 3),
              e.lineTo(i + 2, a),
              e.lineTo(i + s - 2, a + r / 2),
              e.lineTo(i + 2, a + r),
              e.lineTo(i + 2, a + (r / 3) * 2),
              e.moveTo(i, a),
              e.lineTo(i, a);
          else if ("play" === l)
            if ("stop" === t.status)
              e.moveTo(i + 2, a),
                e.lineTo(i + s - 2, a + r / 2),
                e.lineTo(i + 2, a + r),
                e.lineTo(i + 2, a);
            else {
              var h = "both" === t.brushType ? 2 : 3;
              e.rect(i + 2, a, h, r), e.rect(i + s - h - 2, a, h, r);
            }
          else if (l.match("image")) {
            var V = "";
            (V = l.replace(new RegExp("^image:\\/\\/"), "")),
              (l = o.prototype.iconLibrary.image),
              l(e, { x: i, y: a, width: s, height: r, image: V });
          }
        }
        var i = e("./base"),
          a = e("zrender/shape/Rectangle"),
          o = e("../util/shape/Icon"),
          s = e("../util/shape/Chain"),
          r = e("../config");
        r.timeline = {
          zlevel: 0,
          z: 4,
          show: !0,
          type: "time",
          notMerge: !1,
          realtime: !1,
          x: 1,
          x2: 2,
          y2: 0,
          height: 50,
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "#ccc",
          borderWidth: 0,
          padding: 1,
          controlPosition: "left",
          autoPlay: !1,
          loop: !0,
          playInterval: 2e3,
          lineStyle: { width: 1, color: "#666", type: "dashed" },
          label: {
            show: !0,
            interval: "auto",
            rotate: 0,
            textStyle: { color: "#333" },
          },
          checkpointStyle: {
            symbol: "auto",
            symbolSize: "auto",
            color: "auto",
            borderColor: "auto",
            borderWidth: "auto",
            label: { show: !0, textStyle: { color: "auto" } },
          },
          controlStyle: {
            itemSize: 22,
            itemGap: 8,
            normal: { color: "#333" },
            emphasis: { color: "#1e90ff" },
          },
          symbol: "emptyDiamond",
          symbolSize: 4,
          currentIndex: 0,
        };
        var l = e("zrender/tool/util"),
          h = e("zrender/tool/area"),
          V = e("zrender/tool/event");
        return (
          (t.prototype = {
            type: r.COMPONENT_TYPE_TIMELINE,
            _buildShape: function () {
              if (
                ((this._location = this._getLocation()),
                this._buildBackground(),
                this._buildControl(),
                (this._chainPoint = this._getChainPoint()),
                this.timelineOption.label.show)
              )
                for (
                  var e = this._getInterval(),
                    t = 0,
                    n = this._chainPoint.length;
                  n > t;
                  t += e
                )
                  this._chainPoint[t].showLabel = !0;
              this._buildChain(), this._buildHandle();
              for (var t = 0, i = this.shapeList.length; i > t; t++)
                this.zr.addShape(this.shapeList[t]);
            },
            _getLocation: function () {
              var e,
                t = this.timelineOption,
                n = this.reformCssArray(this.timelineOption.padding),
                i = this.zr.getWidth(),
                a = this.parsePercent(t.x, i),
                o = this.parsePercent(t.x2, i);
              null == t.width
                ? ((e = i - a - o), (o = i - o))
                : ((e = this.parsePercent(t.width, i)), (o = a + e));
              var s,
                r,
                l = this.zr.getHeight(),
                h = this.parsePercent(t.height, l);
              return (
                null != t.y
                  ? ((s = this.parsePercent(t.y, l)), (r = s + h))
                  : ((r = l - this.parsePercent(t.y2, l)), (s = r - h)),
                {
                  x: a + n[3],
                  y: s + n[0],
                  x2: o - n[1],
                  y2: r - n[2],
                  width: e - n[1] - n[3],
                  height: h - n[0] - n[2],
                }
              );
            },
            _getReformedLabel: function (e) {
              var t = this.timelineOption,
                n = null != t.data[e].name ? t.data[e].name : t.data[e],
                i = t.data[e].formatter || t.label.formatter;
              return (
                i &&
                  ("function" == typeof i
                    ? (n = i.call(this.myChart, n))
                    : "string" == typeof i && (n = i.replace("{value}", n))),
                n
              );
            },
            _getInterval: function () {
              var e = this._chainPoint,
                t = this.timelineOption,
                n = t.label.interval;
              if ("auto" === n) {
                var i = t.label.textStyle.fontSize,
                  a = t.data,
                  o = t.data.length;
                if (o > 3) {
                  var s,
                    r,
                    l = !1;
                  for (n = 0; !l && o > n; ) {
                    n++, (l = !0);
                    for (var V = n; o > V; V += n) {
                      if (((s = e[V].x - e[V - n].x), 0 !== t.label.rotate))
                        r = i;
                      else if (a[V].textStyle)
                        r = h.getTextWidth(e[V].name, e[V].textFont);
                      else {
                        var U = e[V].name + "",
                          m = (U.match(/\w/g) || "").length,
                          p = U.length - m;
                        r = (m * i * 2) / 3 + p * i;
                      }
                      if (r > s) {
                        l = !1;
                        break;
                      }
                    }
                  }
                } else n = 1;
              } else n = n - 0 + 1;
              return n;
            },
            _getChainPoint: function () {
              function e(e) {
                return null != h[e].name ? h[e].name : h[e] + "";
              }
              var t,
                n = this.timelineOption,
                i = n.symbol.toLowerCase(),
                a = n.symbolSize,
                o = n.label.rotate,
                s = n.label.textStyle,
                r = this.getFont(s),
                h = n.data,
                V = this._location.x,
                U = this._location.y + (this._location.height / 4) * 3,
                m = this._location.x2 - this._location.x,
                p = h.length,
                d = [];
              if (p > 1) {
                var c = m / p;
                if (
                  ((c = c > 50 ? 50 : 20 > c ? 5 : c),
                  (m -= 2 * c),
                  "number" === n.type)
                )
                  for (var u = 0; p > u; u++) d.push(V + c + (m / (p - 1)) * u);
                else {
                  (d[0] = new Date(e(0).replace(/-/g, "/"))),
                    (d[p - 1] = new Date(e(p - 1).replace(/-/g, "/")) - d[0]);
                  for (var u = 1; p > u; u++)
                    d[u] =
                      V +
                      c +
                      (m * (new Date(e(u).replace(/-/g, "/")) - d[0])) /
                        d[p - 1];
                  d[0] = V + c;
                }
              } else d.push(V + m / 2);
              for (var y, b, g, k, f, L = [], u = 0; p > u; u++)
                (V = d[u]),
                  (y = (h[u].symbol && h[u].symbol.toLowerCase()) || i),
                  y.match("empty")
                    ? ((y = y.replace("empty", "")), (g = !0))
                    : (g = !1),
                  y.match("star") &&
                    ((b = y.replace("star", "") - 0 || 5), (y = "star")),
                  (t = h[u].textStyle ? l.merge(h[u].textStyle || {}, s) : s),
                  (k = t.align || "center"),
                  o
                    ? ((k = o > 0 ? "right" : "left"),
                      (f = [(o * Math.PI) / 180, V, U - 5]))
                    : (f = !1),
                  L.push({
                    x: V,
                    n: b,
                    isEmpty: g,
                    symbol: y,
                    symbolSize: h[u].symbolSize || a,
                    color: h[u].color,
                    borderColor: h[u].borderColor,
                    borderWidth: h[u].borderWidth,
                    name: this._getReformedLabel(u),
                    textColor: t.color,
                    textAlign: k,
                    textBaseline: t.baseline || "middle",
                    textX: V,
                    textY: U - (o ? 5 : 0),
                    textFont: h[u].textStyle ? this.getFont(t) : r,
                    rotation: f,
                    showLabel: !1,
                  });
              return L;
            },
            _buildBackground: function () {
              var e = this.timelineOption,
                t = this.reformCssArray(this.timelineOption.padding),
                n = this._location.width,
                i = this._location.height;
              (0 !== e.borderWidth ||
                "rgba(0,0,0,0)" != e.backgroundColor.replace(/\s/g, "")) &&
                this.shapeList.push(
                  new a({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    hoverable: !1,
                    style: {
                      x: this._location.x - t[3],
                      y: this._location.y - t[0],
                      width: n + t[1] + t[3],
                      height: i + t[0] + t[2],
                      brushType: 0 === e.borderWidth ? "fill" : "both",
                      color: e.backgroundColor,
                      strokeColor: e.borderColor,
                      lineWidth: e.borderWidth,
                    },
                  })
                );
            },
            _buildControl: function () {
              var e = this,
                t = this.timelineOption,
                n = t.lineStyle,
                i = t.controlStyle;
              if ("none" !== t.controlPosition) {
                var a,
                  s = i.itemSize,
                  r = i.itemGap;
                "left" === t.controlPosition
                  ? ((a = this._location.x), (this._location.x += 3 * (s + r)))
                  : ((a = this._location.x2 - (3 * (s + r) - r)),
                    (this._location.x2 -= 3 * (s + r)));
                var h = this._location.y,
                  V = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() + 1,
                    style: {
                      iconType: "timelineControl",
                      symbol: "last",
                      x: a,
                      y: h,
                      width: s,
                      height: s,
                      brushType: "stroke",
                      color: i.normal.color,
                      strokeColor: i.normal.color,
                      lineWidth: n.width,
                    },
                    highlightStyle: {
                      color: i.emphasis.color,
                      strokeColor: i.emphasis.color,
                      lineWidth: n.width + 1,
                    },
                    clickable: !0,
                  };
                (this._ctrLastShape = new o(V)),
                  (this._ctrLastShape.onclick = function () {
                    e.last();
                  }),
                  this.shapeList.push(this._ctrLastShape),
                  (a += s + r),
                  (this._ctrPlayShape = new o(l.clone(V))),
                  (this._ctrPlayShape.style.brushType = "fill"),
                  (this._ctrPlayShape.style.symbol = "play"),
                  (this._ctrPlayShape.style.status = this.timelineOption
                    .autoPlay
                    ? "playing"
                    : "stop"),
                  (this._ctrPlayShape.style.x = a),
                  (this._ctrPlayShape.onclick = function () {
                    "stop" === e._ctrPlayShape.style.status
                      ? e.play()
                      : e.stop();
                  }),
                  this.shapeList.push(this._ctrPlayShape),
                  (a += s + r),
                  (this._ctrNextShape = new o(l.clone(V))),
                  (this._ctrNextShape.style.symbol = "next"),
                  (this._ctrNextShape.style.x = a),
                  (this._ctrNextShape.onclick = function () {
                    e.next();
                  }),
                  this.shapeList.push(this._ctrNextShape);
              }
            },
            _buildChain: function () {
              var e = this.timelineOption,
                t = e.lineStyle;
              (this._timelineShae = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  x: this._location.x,
                  y: this.subPixelOptimize(this._location.y, t.width),
                  width: this._location.x2 - this._location.x,
                  height: this._location.height,
                  chainPoint: this._chainPoint,
                  brushType: "both",
                  strokeColor: t.color,
                  lineWidth: t.width,
                  lineType: t.type,
                },
                hoverable: !1,
                clickable: !0,
                onclick: this._onclick,
              }),
                (this._timelineShae = new s(this._timelineShae)),
                this.shapeList.push(this._timelineShae);
            },
            _buildHandle: function () {
              var e = this._chainPoint[this.currentIndex],
                t = e.symbolSize + 1;
              (t = 5 > t ? 5 : t),
                (this._handleShape = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase() + 1,
                  hoverable: !1,
                  draggable: !0,
                  style: {
                    iconType: "diamond",
                    n: e.n,
                    x: e.x - t,
                    y: this._location.y + this._location.height / 4 - t,
                    width: 2 * t,
                    height: 2 * t,
                    brushType: "both",
                    textPosition: "specific",
                    textX: e.x,
                    textY: this._location.y - this._location.height / 4,
                    textAlign: "center",
                    textBaseline: "middle",
                  },
                  highlightStyle: {},
                  ondrift: this._ondrift,
                  ondragend: this._ondragend,
                }),
                (this._handleShape = new o(this._handleShape)),
                this.shapeList.push(this._handleShape);
            },
            _syncHandleShape: function () {
              if (this.timelineOption.show) {
                var e = this.timelineOption,
                  t = e.checkpointStyle,
                  n = this._chainPoint[this.currentIndex];
                (this._handleShape.style.text = t.label.show ? n.name : ""),
                  (this._handleShape.style.textFont = n.textFont),
                  (this._handleShape.style.n = n.n),
                  "auto" === t.symbol
                    ? (this._handleShape.style.iconType =
                        "none" != n.symbol ? n.symbol : "diamond")
                    : ((this._handleShape.style.iconType = t.symbol),
                      t.symbol.match("star") &&
                        ((this._handleShape.style.n =
                          t.symbol.replace("star", "") - 0 || 5),
                        (this._handleShape.style.iconType = "star")));
                var i;
                "auto" === t.symbolSize
                  ? ((i = n.symbolSize + 2), (i = 5 > i ? 5 : i))
                  : (i = t.symbolSize - 0),
                  (this._handleShape.style.color =
                    "auto" === t.color
                      ? n.color
                        ? n.color
                        : e.controlStyle.emphasis.color
                      : t.color),
                  (this._handleShape.style.textColor =
                    "auto" === t.label.textStyle.color
                      ? this._handleShape.style.color
                      : t.label.textStyle.color),
                  (this._handleShape.highlightStyle.strokeColor = this._handleShape.style.strokeColor =
                    "auto" === t.borderColor
                      ? n.borderColor
                        ? n.borderColor
                        : "#fff"
                      : t.borderColor),
                  (this._handleShape.style.lineWidth =
                    "auto" === t.borderWidth
                      ? n.borderWidth
                        ? n.borderWidth
                        : 0
                      : t.borderWidth - 0),
                  (this._handleShape.highlightStyle.lineWidth =
                    this._handleShape.style.lineWidth + 1),
                  this.zr
                    .animate(this._handleShape.id, "style")
                    .when(500, {
                      x: n.x - i,
                      textX: n.x,
                      y: this._location.y + this._location.height / 4 - i,
                      width: 2 * i,
                      height: 2 * i,
                    })
                    .start("ExponentialOut");
              }
            },
            _findChainIndex: function (e) {
              var t = this._chainPoint,
                n = t.length;
              if (e <= t[0].x) return 0;
              if (e >= t[n - 1].x) return n - 1;
              for (var i = 0; n - 1 > i; i++)
                if (e >= t[i].x && e <= t[i + 1].x)
                  return Math.abs(e - t[i].x) < Math.abs(e - t[i + 1].x)
                    ? i
                    : i + 1;
            },
            __onclick: function (e) {
              var t = V.getX(e.event),
                n = this._findChainIndex(t);
              return n === this.currentIndex
                ? !0
                : ((this.currentIndex = n),
                  this.timelineOption.autoPlay && this.stop(),
                  clearTimeout(this.playTicket),
                  void this._onFrame());
            },
            __ondrift: function (e, t) {
              this.timelineOption.autoPlay && this.stop();
              var n,
                i = this._chainPoint,
                a = i.length;
              e.style.x + t <= i[0].x - i[0].symbolSize
                ? ((e.style.x = i[0].x - i[0].symbolSize), (n = 0))
                : e.style.x + t >= i[a - 1].x - i[a - 1].symbolSize
                ? ((e.style.x = i[a - 1].x - i[a - 1].symbolSize), (n = a - 1))
                : ((e.style.x += t), (n = this._findChainIndex(e.style.x)));
              var o = i[n],
                s = o.symbolSize + 2;
              if (
                ((e.style.iconType = o.symbol),
                (e.style.n = o.n),
                (e.style.textX = e.style.x + s / 2),
                (e.style.y = this._location.y + this._location.height / 4 - s),
                (e.style.width = 2 * s),
                (e.style.height = 2 * s),
                (e.style.text = o.name),
                n === this.currentIndex)
              )
                return !0;
              if (((this.currentIndex = n), this.timelineOption.realtime)) {
                clearTimeout(this.playTicket);
                var r = this;
                this.playTicket = setTimeout(function () {
                  r._setCurrentOption();
                }, 200);
              }
              return !0;
            },
            __ondragend: function () {
              this.isDragend = !0;
            },
            ondragend: function (e, t) {
              this.isDragend &&
                e.target &&
                (!this.timelineOption.realtime && this._setCurrentOption(),
                (t.dragOut = !0),
                (t.dragIn = !0),
                (t.needRefresh = !1),
                (this.isDragend = !1),
                this._syncHandleShape());
            },
            last: function () {
              return (
                this.timelineOption.autoPlay && this.stop(),
                (this.currentIndex -= 1),
                this.currentIndex < 0 &&
                  (this.currentIndex = this.timelineOption.data.length - 1),
                this._onFrame(),
                this.currentIndex
              );
            },
            next: function () {
              return (
                this.timelineOption.autoPlay && this.stop(),
                (this.currentIndex += 1),
                this.currentIndex >= this.timelineOption.data.length &&
                  (this.currentIndex = 0),
                this._onFrame(),
                this.currentIndex
              );
            },
            play: function (e, t) {
              return (
                this._ctrPlayShape &&
                  "playing" != this._ctrPlayShape.style.status &&
                  ((this._ctrPlayShape.style.status = "playing"),
                  this.zr.modShape(this._ctrPlayShape.id),
                  this.zr.refreshNextFrame()),
                (this.timelineOption.autoPlay = null != t ? t : !0),
                this.timelineOption.autoPlay || clearTimeout(this.playTicket),
                (this.currentIndex = null != e ? e : this.currentIndex + 1),
                this.currentIndex >= this.timelineOption.data.length &&
                  (this.currentIndex = 0),
                this._onFrame(),
                this.currentIndex
              );
            },
            stop: function () {
              return (
                this._ctrPlayShape &&
                  "stop" != this._ctrPlayShape.style.status &&
                  ((this._ctrPlayShape.style.status = "stop"),
                  this.zr.modShape(this._ctrPlayShape.id),
                  this.zr.refreshNextFrame()),
                (this.timelineOption.autoPlay = !1),
                clearTimeout(this.playTicket),
                this.currentIndex
              );
            },
            resize: function () {
              this.timelineOption.show &&
                (this.clear(), this._buildShape(), this._syncHandleShape());
            },
            setTheme: function (e) {
              (this.timelineOption = this.reformOption(
                l.clone(this.option.timeline)
              )),
                (this.timelineOption.label.textStyle = this.getTextStyle(
                  this.timelineOption.label.textStyle
                )),
                (this.timelineOption.checkpointStyle.label.textStyle = this.getTextStyle(
                  this.timelineOption.checkpointStyle.label.textStyle
                )),
                this.timelineOption.show &&
                  e &&
                  (this.clear(), this._buildShape(), this._syncHandleShape());
            },
            onbeforDispose: function () {
              clearTimeout(this.playTicket);
            },
          }),
          (o.prototype.iconLibrary.timelineControl = n),
          l.inherits(t, i),
          e("../component").define("timeline", t),
          t
        );
      }
    ),
    n("zrender/shape/Image", ["require", "./Base", "../tool/util"], function (
      e
    ) {
      var t = e("./Base"),
        n = function (e) {
          t.call(this, e);
        };
      return (
        (n.prototype = {
          type: "image",
          brush: function (e, t, n) {
            var i = this.style || {};
            t && (i = this.getHighlightStyle(i, this.highlightStyle || {}));
            var a = i.image,
              o = this;
            if (
              (this._imageCache || (this._imageCache = {}),
              "string" == typeof a)
            ) {
              var s = a;
              this._imageCache[s]
                ? (a = this._imageCache[s])
                : ((a = new Image()),
                  (a.onload = function () {
                    (a.onload = null), o.modSelf(), n();
                  }),
                  (a.src = s),
                  (this._imageCache[s] = a));
            }
            if (a) {
              if ("IMG" == a.nodeName.toUpperCase())
                if (window.ActiveXObject) {
                  if ("complete" != a.readyState) return;
                } else if (!a.complete) return;
              var r = i.width || a.width,
                l = i.height || a.height,
                h = i.x,
                V = i.y;
              if (!a.width || !a.height) return;
              if (
                (e.save(),
                this.doClip(e),
                this.setContext(e, i),
                this.setTransform(e),
                i.sWidth && i.sHeight)
              ) {
                var U = i.sx || 0,
                  m = i.sy || 0;
                e.drawImage(a, U, m, i.sWidth, i.sHeight, h, V, r, l);
              } else if (i.sx && i.sy) {
                var U = i.sx,
                  m = i.sy,
                  p = r - U,
                  d = l - m;
                e.drawImage(a, U, m, p, d, h, V, r, l);
              } else e.drawImage(a, h, V, r, l);
              i.width || (i.width = r),
                i.height || (i.height = l),
                this.style.width || (this.style.width = r),
                this.style.height || (this.style.height = l),
                this.drawText(e, i, this.style),
                e.restore();
            }
          },
          getRect: function (e) {
            return { x: e.x, y: e.y, width: e.width, height: e.height };
          },
          clearCache: function () {
            this._imageCache = {};
          },
        }),
        e("../tool/util").inherits(n, t),
        n
      );
    }),
    n(
      "zrender/loadingEffect/Bubble",
      ["require", "./Base", "../tool/util", "../tool/color", "../shape/Circle"],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("./Base"),
          i = e("../tool/util"),
          a = e("../tool/color"),
          o = e("../shape/Circle");
        return (
          i.inherits(t, n),
          (t.prototype._start = function (e, t) {
            for (
              var n = i.merge(this.options, {
                  textStyle: { color: "#888" },
                  backgroundColor: "rgba(250, 250, 250, 0.8)",
                  effect: {
                    n: 50,
                    lineWidth: 2,
                    brushType: "stroke",
                    color: "random",
                    timeInterval: 100,
                  },
                }),
                s = this.createTextShape(n.textStyle),
                r = this.createBackgroundShape(n.backgroundColor),
                l = n.effect,
                h = l.n,
                V = l.brushType,
                U = l.lineWidth,
                m = [],
                p = this.canvasWidth,
                d = this.canvasHeight,
                c = 0;
              h > c;
              c++
            ) {
              var u = "random" == l.color ? a.alpha(a.random(), 0.3) : l.color;
              m[c] = new o({
                highlightStyle: {
                  x: Math.ceil(Math.random() * p),
                  y: Math.ceil(Math.random() * d),
                  r: Math.ceil(40 * Math.random()),
                  brushType: V,
                  color: u,
                  strokeColor: u,
                  lineWidth: U,
                },
                animationY: Math.ceil(20 * Math.random()),
              });
            }
            return setInterval(function () {
              e(r);
              for (var n = 0; h > n; n++) {
                var i = m[n].highlightStyle;
                i.y - m[n].animationY + i.r <= 0 &&
                  ((m[n].highlightStyle.y = d + i.r),
                  (m[n].highlightStyle.x = Math.ceil(Math.random() * p))),
                  (m[n].highlightStyle.y -= m[n].animationY),
                  e(m[n]);
              }
              e(s), t();
            }, l.timeInterval);
          }),
          t
        );
      }
    ),
    n(
      "zrender/loadingEffect/Spin",
      [
        "require",
        "./Base",
        "../tool/util",
        "../tool/color",
        "../tool/area",
        "../shape/Sector",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("./Base"),
          i = e("../tool/util"),
          a = e("../tool/color"),
          o = e("../tool/area"),
          s = e("../shape/Sector");
        return (
          i.inherits(t, n),
          (t.prototype._start = function (e, t) {
            var n = i.merge(this.options, {
                textStyle: { color: "#fff", textAlign: "start" },
                backgroundColor: "rgba(0, 0, 0, 0.8)",
              }),
              r = this.createTextShape(n.textStyle),
              l = 10,
              h = o.getTextWidth(
                r.highlightStyle.text,
                r.highlightStyle.textFont
              ),
              V = o.getTextHeight(
                r.highlightStyle.text,
                r.highlightStyle.textFont
              ),
              U = i.merge(this.options.effect || {}, {
                r0: 9,
                r: 15,
                n: 18,
                color: "#fff",
                timeInterval: 100,
              }),
              m = this.getLocation(
                this.options.textStyle,
                h + l + 2 * U.r,
                Math.max(2 * U.r, V)
              );
            (U.x = m.x + U.r),
              (U.y = r.highlightStyle.y = m.y + m.height / 2),
              (r.highlightStyle.x = U.x + U.r + l);
            for (
              var p = this.createBackgroundShape(n.backgroundColor),
                d = U.n,
                c = U.x,
                u = U.y,
                y = U.r0,
                b = U.r,
                g = U.color,
                k = [],
                f = Math.round(180 / d),
                L = 0;
              d > L;
              L++
            )
              k[L] = new s({
                highlightStyle: {
                  x: c,
                  y: u,
                  r0: y,
                  r: b,
                  startAngle: f * L * 2,
                  endAngle: f * L * 2 + f,
                  color: a.alpha(g, (L + 1) / d),
                  brushType: "fill",
                },
              });
            var x = [0, c, u];
            return setInterval(function () {
              e(p), (x[0] -= 0.3);
              for (var n = 0; d > n; n++) (k[n].rotation = x), e(k[n]);
              e(r), t();
            }, U.timeInterval);
          }),
          t
        );
      }
    ),
    n("echarts/theme/macarons", [], function () {
      var e = {
        color: [
          "#2ec7c9",
          "#b6a2de",
          "#5ab1ef",
          "#ffb980",
          "#d87a80",
          "#8d98b3",
          "#e5cf0d",
          "#97b552",
          "#95706d",
          "#dc69aa",
          "#07a2a4",
          "#9a7fd1",
          "#588dd5",
          "#f5994e",
          "#c05050",
          "#59678c",
          "#c9ab00",
          "#7eb00a",
          "#6f5553",
          "#c14089",
        ],
        title: { textStyle: { fontWeight: "normal", color: "#008acd" } },
        dataRange: { itemWidth: 15, color: ["#5ab1ef", "#e0ffff"] },
        toolbox: {
          color: ["#1e90ff", "#1e90ff", "#1e90ff", "#1e90ff"],
          effectiveColor: "#ff4500",
        },
        tooltip: {
          backgroundColor: "rgba(50,50,50,0.5)",
          axisPointer: {
            type: "line",
            lineStyle: { color: "#008acd" },
            crossStyle: { color: "#008acd" },
            shadowStyle: { color: "rgba(200,200,200,0.2)" },
          },
        },
        dataZoom: {
          dataBackgroundColor: "#efefff",
          fillerColor: "rgba(182,162,222,0.2)",
          handleColor: "#008acd",
        },
        grid: { borderColor: "#eee" },
        categoryAxis: {
          axisLine: { lineStyle: { color: "#008acd" } },
          splitLine: { lineStyle: { color: ["#eee"] } },
        },
        valueAxis: {
          axisLine: { lineStyle: { color: "#008acd" } },
          splitArea: {
            show: !0,
            areaStyle: {
              color: ["rgba(250,250,250,0.1)", "rgba(200,200,200,0.1)"],
            },
          },
          splitLine: { lineStyle: { color: ["#eee"] } },
        },
        polar: {
          axisLine: { lineStyle: { color: "#ddd" } },
          splitArea: {
            show: !0,
            areaStyle: {
              color: ["rgba(250,250,250,0.2)", "rgba(200,200,200,0.2)"],
            },
          },
          splitLine: { lineStyle: { color: "#ddd" } },
        },
        timeline: {
          lineStyle: { color: "#008acd" },
          controlStyle: {
            normal: { color: "#008acd" },
            emphasis: { color: "#008acd" },
          },
          symbol: "emptyCircle",
          symbolSize: 3,
        },
        bar: {
          itemStyle: {
            normal: { barBorderRadius: 5 },
            emphasis: { barBorderRadius: 5 },
          },
        },
        line: { smooth: !0, symbol: "emptyCircle", symbolSize: 3 },
        k: {
          itemStyle: {
            normal: {
              color: "#d87a80",
              color0: "#2ec7c9",
              lineStyle: { color: "#d87a80", color0: "#2ec7c9" },
            },
          },
        },
        scatter: { symbol: "circle", symbolSize: 4 },
        radar: { symbol: "emptyCircle", symbolSize: 3 },
        map: {
          itemStyle: {
            normal: {
              areaStyle: { color: "#ddd" },
              label: { textStyle: { color: "#d87a80" } },
            },
            emphasis: { areaStyle: { color: "#fe994e" } },
          },
        },
        force: { itemStyle: { normal: { linkStyle: { color: "#1e90ff" } } } },
        chord: {
          itemStyle: {
            normal: {
              borderWidth: 1,
              borderColor: "rgba(128, 128, 128, 0.5)",
              chordStyle: { lineStyle: { color: "rgba(128, 128, 128, 0.5)" } },
            },
            emphasis: {
              borderWidth: 1,
              borderColor: "rgba(128, 128, 128, 0.5)",
              chordStyle: { lineStyle: { color: "rgba(128, 128, 128, 0.5)" } },
            },
          },
        },
        gauge: {
          axisLine: {
            lineStyle: {
              color: [
                [0.2, "#2ec7c9"],
                [0.8, "#5ab1ef"],
                [1, "#d87a80"],
              ],
              width: 10,
            },
          },
          axisTick: {
            splitNumber: 10,
            length: 15,
            lineStyle: { color: "auto" },
          },
          splitLine: { length: 22, lineStyle: { color: "auto" } },
          pointer: { width: 5 },
        },
        textStyle: { fontFamily: "微软雅黑, Arial, Verdana, sans-serif" },
      };
      return e;
    }),
    n("echarts/theme/infographic", [], function () {
      var e = {
        color: [
          "#C1232B",
          "#B5C334",
          "#FCCE10",
          "#E87C25",
          "#27727B",
          "#FE8463",
          "#9BCA63",
          "#FAD860",
          "#F3A43B",
          "#60C0DD",
          "#D7504B",
          "#C6E579",
          "#F4E001",
          "#F0805A",
          "#26C0C0",
        ],
        title: { textStyle: { fontWeight: "normal", color: "#27727B" } },
        dataRange: {
          x: "right",
          y: "center",
          itemWidth: 5,
          itemHeight: 25,
          color: ["#C1232B", "#FCCE10"],
        },
        toolbox: {
          color: [
            "#C1232B",
            "#B5C334",
            "#FCCE10",
            "#E87C25",
            "#27727B",
            "#FE8463",
            "#9BCA63",
            "#FAD860",
            "#F3A43B",
            "#60C0DD",
          ],
          effectiveColor: "#ff4500",
        },
        tooltip: {
          backgroundColor: "rgba(50,50,50,0.5)",
          axisPointer: {
            type: "line",
            lineStyle: { color: "#27727B", type: "dashed" },
            crossStyle: { color: "#27727B" },
            shadowStyle: { color: "rgba(200,200,200,0.3)" },
          },
        },
        dataZoom: {
          dataBackgroundColor: "rgba(181,195,52,0.3)",
          fillerColor: "rgba(181,195,52,0.2)",
          handleColor: "#27727B",
        },
        grid: { borderWidth: 0 },
        categoryAxis: {
          axisLine: { lineStyle: { color: "#27727B" } },
          splitLine: { show: !1 },
        },
        valueAxis: {
          axisLine: { show: !1 },
          splitArea: { show: !1 },
          splitLine: { lineStyle: { color: ["#ccc"], type: "dashed" } },
        },
        polar: {
          axisLine: { lineStyle: { color: "#ddd" } },
          splitArea: {
            show: !0,
            areaStyle: {
              color: ["rgba(250,250,250,0.2)", "rgba(200,200,200,0.2)"],
            },
          },
          splitLine: { lineStyle: { color: "#ddd" } },
        },
        timeline: {
          lineStyle: { color: "#27727B" },
          controlStyle: {
            normal: { color: "#27727B" },
            emphasis: { color: "#27727B" },
          },
          symbol: "emptyCircle",
          symbolSize: 3,
        },
        line: {
          itemStyle: {
            normal: {
              borderWidth: 2,
              borderColor: "#fff",
              lineStyle: { width: 3 },
            },
            emphasis: { borderWidth: 0 },
          },
          symbol: "circle",
          symbolSize: 3.5,
        },
        k: {
          itemStyle: {
            normal: {
              color: "#C1232B",
              color0: "#B5C334",
              lineStyle: { width: 1, color: "#C1232B", color0: "#B5C334" },
            },
          },
        },
        scatter: {
          itemdStyle: {
            normal: { borderWidth: 1, borderColor: "rgba(200,200,200,0.5)" },
            emphasis: { borderWidth: 0 },
          },
          symbol: "star4",
          symbolSize: 4,
        },
        radar: { symbol: "emptyCircle", symbolSize: 3 },
        map: {
          itemStyle: {
            normal: {
              areaStyle: { color: "#ddd" },
              label: { textStyle: { color: "#C1232B" } },
            },
            emphasis: {
              areaStyle: { color: "#fe994e" },
              label: { textStyle: { color: "rgb(100,0,0)" } },
            },
          },
        },
        force: { itemStyle: { normal: { linkStyle: { color: "#27727B" } } } },
        chord: {
          itemStyle: {
            normal: {
              borderWidth: 1,
              borderColor: "rgba(128, 128, 128, 0.5)",
              chordStyle: { lineStyle: { color: "rgba(128, 128, 128, 0.5)" } },
            },
            emphasis: {
              borderWidth: 1,
              borderColor: "rgba(128, 128, 128, 0.5)",
              chordStyle: { lineStyle: { color: "rgba(128, 128, 128, 0.5)" } },
            },
          },
        },
        gauge: {
          center: ["50%", "80%"],
          radius: "100%",
          startAngle: 180,
          endAngle: 0,
          axisLine: {
            show: !0,
            lineStyle: {
              color: [
                [0.2, "#B5C334"],
                [0.8, "#27727B"],
                [1, "#C1232B"],
              ],
              width: "40%",
            },
          },
          axisTick: { splitNumber: 2, length: 5, lineStyle: { color: "#fff" } },
          axisLabel: { textStyle: { color: "#fff", fontWeight: "bolder" } },
          splitLine: { length: "5%", lineStyle: { color: "#fff" } },
          pointer: { width: "40%", length: "80%", color: "#fff" },
          title: {
            offsetCenter: [0, -20],
            textStyle: { color: "auto", fontSize: 20 },
          },
          detail: {
            offsetCenter: [0, 0],
            textStyle: { color: "auto", fontSize: 40 },
          },
        },
        textStyle: { fontFamily: "微软雅黑, Arial, Verdana, sans-serif" },
      };
      return e;
    }),
    n("zrender/mixin/Eventful", ["require"], function () {
      var e = function () {
        this._handlers = {};
      };
      return (
        (e.prototype.one = function (e, t, n) {
          var i = this._handlers;
          return t && e
            ? (i[e] || (i[e] = []),
              i[e].push({ h: t, one: !0, ctx: n || this }),
              this)
            : this;
        }),
        (e.prototype.bind = function (e, t, n) {
          var i = this._handlers;
          return t && e
            ? (i[e] || (i[e] = []),
              i[e].push({ h: t, one: !1, ctx: n || this }),
              this)
            : this;
        }),
        (e.prototype.unbind = function (e, t) {
          var n = this._handlers;
          if (!e) return (this._handlers = {}), this;
          if (t) {
            if (n[e]) {
              for (var i = [], a = 0, o = n[e].length; o > a; a++)
                n[e][a].h != t && i.push(n[e][a]);
              n[e] = i;
            }
            n[e] && 0 === n[e].length && delete n[e];
          } else delete n[e];
          return this;
        }),
        (e.prototype.dispatch = function (e) {
          if (this._handlers[e]) {
            var t = arguments,
              n = t.length;
            n > 3 && (t = Array.prototype.slice.call(t, 1));
            for (var i = this._handlers[e], a = i.length, o = 0; a > o; ) {
              switch (n) {
                case 1:
                  i[o].h.call(i[o].ctx);
                  break;
                case 2:
                  i[o].h.call(i[o].ctx, t[1]);
                  break;
                case 3:
                  i[o].h.call(i[o].ctx, t[1], t[2]);
                  break;
                default:
                  i[o].h.apply(i[o].ctx, t);
              }
              i[o].one ? (i.splice(o, 1), a--) : o++;
            }
          }
          return this;
        }),
        (e.prototype.dispatchWithContext = function (e) {
          if (this._handlers[e]) {
            var t = arguments,
              n = t.length;
            n > 4 && (t = Array.prototype.slice.call(t, 1, t.length - 1));
            for (
              var i = t[t.length - 1],
                a = this._handlers[e],
                o = a.length,
                s = 0;
              o > s;

            ) {
              switch (n) {
                case 1:
                  a[s].h.call(i);
                  break;
                case 2:
                  a[s].h.call(i, t[1]);
                  break;
                case 3:
                  a[s].h.call(i, t[1], t[2]);
                  break;
                default:
                  a[s].h.apply(i, t);
              }
              a[s].one ? (a.splice(s, 1), o--) : s++;
            }
          }
          return this;
        }),
        e
      );
    }),
    n("zrender/tool/log", ["require", "../config"], function (e) {
      var t = e("../config");
      return function () {
        if (0 !== t.debugMode)
          if (1 == t.debugMode)
            for (var e in arguments) throw new Error(arguments[e]);
          else if (t.debugMode > 1)
            for (var e in arguments) console.log(arguments[e]);
      };
    }),
    n("zrender/tool/guid", [], function () {
      var e = 2311;
      return function () {
        return "zrender__" + e++;
      };
    }),
    n(
      "zrender/Handler",
      [
        "require",
        "./config",
        "./tool/env",
        "./tool/event",
        "./tool/util",
        "./tool/vector",
        "./tool/matrix",
        "./mixin/Eventful",
      ],
      function (e) {
        "use strict";
        function t(e, t) {
          return function (n) {
            return e.call(t, n);
          };
        }
        function n(e, t) {
          return function (n, i, a) {
            return e.call(t, n, i, a);
          };
        }
        function i(e) {
          for (var n = p.length; n--; ) {
            var i = p[n];
            e["_" + i + "Handler"] = t(d[i], e);
          }
        }
        function a(e, t, n) {
          if (
            (this._draggingTarget && this._draggingTarget.id == e.id) ||
            e.isSilent()
          )
            return !1;
          var i = this._event;
          if (e.isCover(t, n)) {
            e.hoverable && this.storage.addHover(e);
            for (var a = e.parent; a; ) {
              if (
                a.clipShape &&
                !a.clipShape.isCover(this._mouseX, this._mouseY)
              )
                return !1;
              a = a.parent;
            }
            return (
              this._lastHover != e &&
                (this._processOutShape(i),
                this._processDragLeave(i),
                (this._lastHover = e),
                this._processDragEnter(i)),
              this._processOverShape(i),
              this._processDragOver(i),
              (this._hasfound = 1),
              !0
            );
          }
          return !1;
        }
        var o = e("./config"),
          s = e("./tool/env"),
          r = e("./tool/event"),
          l = e("./tool/util"),
          h = e("./tool/vector"),
          V = e("./tool/matrix"),
          U = o.EVENT,
          m = e("./mixin/Eventful"),
          p = [
            "resize",
            "click",
            "dblclick",
            "mousewheel",
            "mousemove",
            "mouseout",
            "mouseup",
            "mousedown",
            "touchstart",
            "touchend",
            "touchmove",
          ],
          d = {
            resize: function (e) {
              (e = e || window.event),
                (this._lastHover = null),
                (this._isMouseDown = 0),
                this.dispatch(U.RESIZE, e);
            },
            click: function (e) {
              e = this._zrenderEventFixed(e);
              var t = this._lastHover;
              ((t && t.clickable) || !t) &&
                this._clickThreshold < 5 &&
                this._dispatchAgency(t, U.CLICK, e),
                this._mousemoveHandler(e);
            },
            dblclick: function (e) {
              (e = e || window.event), (e = this._zrenderEventFixed(e));
              var t = this._lastHover;
              ((t && t.clickable) || !t) &&
                this._clickThreshold < 5 &&
                this._dispatchAgency(t, U.DBLCLICK, e),
                this._mousemoveHandler(e);
            },
            mousewheel: function (e) {
              e = this._zrenderEventFixed(e);
              var t = e.wheelDelta || -e.detail,
                n = t > 0 ? 1.1 : 1 / 1.1,
                i = !1,
                a = this._mouseX,
                o = this._mouseY;
              this.painter.eachBuildinLayer(function (t) {
                var s = t.position;
                if (t.zoomable) {
                  t.__zoom = t.__zoom || 1;
                  var l = t.__zoom;
                  (l *= n),
                    (l = Math.max(Math.min(t.maxZoom, l), t.minZoom)),
                    (n = l / t.__zoom),
                    (t.__zoom = l),
                    (s[0] -= (a - s[0]) * (n - 1)),
                    (s[1] -= (o - s[1]) * (n - 1)),
                    (t.scale[0] *= n),
                    (t.scale[1] *= n),
                    (t.dirty = !0),
                    (i = !0),
                    r.stop(e);
                }
              }),
                i && this.painter.refresh(),
                this._dispatchAgency(this._lastHover, U.MOUSEWHEEL, e),
                this._mousemoveHandler(e);
            },
            mousemove: function (e) {
              if (!this.painter.isLoading()) {
                (e = this._zrenderEventFixed(e)),
                  (this._lastX = this._mouseX),
                  (this._lastY = this._mouseY),
                  (this._mouseX = r.getX(e)),
                  (this._mouseY = r.getY(e));
                var t = this._mouseX - this._lastX,
                  n = this._mouseY - this._lastY;
                this._processDragStart(e),
                  (this._hasfound = 0),
                  (this._event = e),
                  this._iterateAndFindHover(),
                  this._hasfound ||
                    ((!this._draggingTarget ||
                      (this._lastHover &&
                        this._lastHover != this._draggingTarget)) &&
                      (this._processOutShape(e), this._processDragLeave(e)),
                    (this._lastHover = null),
                    this.storage.delHover(),
                    this.painter.clearHover());
                var i = "default";
                if (this._draggingTarget)
                  this.storage.drift(this._draggingTarget.id, t, n),
                    this._draggingTarget.modSelf(),
                    this.storage.addHover(this._draggingTarget),
                    this._clickThreshold++;
                else if (this._isMouseDown) {
                  var a = !1;
                  this.painter.eachBuildinLayer(function (e) {
                    e.panable &&
                      ((i = "move"),
                      (e.position[0] += t),
                      (e.position[1] += n),
                      (a = !0),
                      (e.dirty = !0));
                  }),
                    a && this.painter.refresh();
                }
                this._draggingTarget ||
                (this._hasfound && this._lastHover.draggable)
                  ? (i = "move")
                  : this._hasfound &&
                    this._lastHover.clickable &&
                    (i = "pointer"),
                  (this.root.style.cursor = i),
                  this._dispatchAgency(this._lastHover, U.MOUSEMOVE, e),
                  (this._draggingTarget ||
                    this._hasfound ||
                    this.storage.hasHoverShape()) &&
                    this.painter.refreshHover();
              }
            },
            mouseout: function (e) {
              e = this._zrenderEventFixed(e);
              var t = e.toElement || e.relatedTarget;
              if (t != this.root)
                for (; t && 9 != t.nodeType; ) {
                  if (t == this.root) return void this._mousemoveHandler(e);
                  t = t.parentNode;
                }
              (e.zrenderX = this._lastX),
                (e.zrenderY = this._lastY),
                (this.root.style.cursor = "default"),
                (this._isMouseDown = 0),
                this._processOutShape(e),
                this._processDrop(e),
                this._processDragEnd(e),
                this.painter.isLoading() || this.painter.refreshHover(),
                this.dispatch(U.GLOBALOUT, e);
            },
            mousedown: function (e) {
              return (
                (this._clickThreshold = 0),
                2 == this._lastDownButton
                  ? ((this._lastDownButton = e.button),
                    void (this._mouseDownTarget = null))
                  : ((this._lastMouseDownMoment = new Date()),
                    (e = this._zrenderEventFixed(e)),
                    (this._isMouseDown = 1),
                    (this._mouseDownTarget = this._lastHover),
                    this._dispatchAgency(this._lastHover, U.MOUSEDOWN, e),
                    void (this._lastDownButton = e.button))
              );
            },
            mouseup: function (e) {
              (e = this._zrenderEventFixed(e)),
                (this.root.style.cursor = "default"),
                (this._isMouseDown = 0),
                (this._mouseDownTarget = null),
                this._dispatchAgency(this._lastHover, U.MOUSEUP, e),
                this._processDrop(e),
                this._processDragEnd(e);
            },
            touchstart: function (e) {
              (e = this._zrenderEventFixed(e, !0)),
                (this._lastTouchMoment = new Date()),
                this._mobileFindFixed(e),
                this._mousedownHandler(e);
            },
            touchmove: function (e) {
              (e = this._zrenderEventFixed(e, !0)),
                this._mousemoveHandler(e),
                this._isDragging && r.stop(e);
            },
            touchend: function (e) {
              (e = this._zrenderEventFixed(e, !0)), this._mouseupHandler(e);
              var t = new Date();
              t - this._lastTouchMoment < U.touchClickDelay &&
                (this._mobileFindFixed(e),
                this._clickHandler(e),
                t - this._lastClickMoment < U.touchClickDelay / 2 &&
                  (this._dblclickHandler(e),
                  this._lastHover && this._lastHover.clickable && r.stop(e)),
                (this._lastClickMoment = t)),
                this.painter.clearHover();
            },
          },
          c = function (e, t, o) {
            m.call(this),
              (this.root = e),
              (this.storage = t),
              (this.painter = o),
              (this._lastX = this._lastY = this._mouseX = this._mouseY = 0),
              (this._findHover = n(a, this)),
              (this._domHover = o.getDomHover()),
              i(this),
              window.addEventListener
                ? (window.addEventListener("resize", this._resizeHandler),
                  s.os.tablet || s.os.phone
                    ? (e.addEventListener(
                        "touchstart",
                        this._touchstartHandler
                      ),
                      e.addEventListener("touchmove", this._touchmoveHandler),
                      e.addEventListener("touchend", this._touchendHandler))
                    : (e.addEventListener("click", this._clickHandler),
                      e.addEventListener("dblclick", this._dblclickHandler),
                      e.addEventListener("mousewheel", this._mousewheelHandler),
                      e.addEventListener("mousemove", this._mousemoveHandler),
                      e.addEventListener("mousedown", this._mousedownHandler),
                      e.addEventListener("mouseup", this._mouseupHandler)),
                  e.addEventListener("DOMMouseScroll", this._mousewheelHandler),
                  e.addEventListener("mouseout", this._mouseoutHandler))
                : (window.attachEvent("onresize", this._resizeHandler),
                  e.attachEvent("onclick", this._clickHandler),
                  (e.ondblclick = this._dblclickHandler),
                  e.attachEvent("onmousewheel", this._mousewheelHandler),
                  e.attachEvent("onmousemove", this._mousemoveHandler),
                  e.attachEvent("onmouseout", this._mouseoutHandler),
                  e.attachEvent("onmousedown", this._mousedownHandler),
                  e.attachEvent("onmouseup", this._mouseupHandler));
          };
        (c.prototype.on = function (e, t, n) {
          return this.bind(e, t, n), this;
        }),
          (c.prototype.un = function (e, t) {
            return this.unbind(e, t), this;
          }),
          (c.prototype.trigger = function (e, t) {
            switch (e) {
              case U.RESIZE:
              case U.CLICK:
              case U.DBLCLICK:
              case U.MOUSEWHEEL:
              case U.MOUSEMOVE:
              case U.MOUSEDOWN:
              case U.MOUSEUP:
              case U.MOUSEOUT:
                this["_" + e + "Handler"](t);
            }
          }),
          (c.prototype.dispose = function () {
            var e = this.root;
            window.removeEventListener
              ? (window.removeEventListener("resize", this._resizeHandler),
                s.os.tablet || s.os.phone
                  ? (e.removeEventListener(
                      "touchstart",
                      this._touchstartHandler
                    ),
                    e.removeEventListener("touchmove", this._touchmoveHandler),
                    e.removeEventListener("touchend", this._touchendHandler))
                  : (e.removeEventListener("click", this._clickHandler),
                    e.removeEventListener("dblclick", this._dblclickHandler),
                    e.removeEventListener(
                      "mousewheel",
                      this._mousewheelHandler
                    ),
                    e.removeEventListener("mousemove", this._mousemoveHandler),
                    e.removeEventListener("mousedown", this._mousedownHandler),
                    e.removeEventListener("mouseup", this._mouseupHandler)),
                e.removeEventListener(
                  "DOMMouseScroll",
                  this._mousewheelHandler
                ),
                e.removeEventListener("mouseout", this._mouseoutHandler))
              : (window.detachEvent("onresize", this._resizeHandler),
                e.detachEvent("onclick", this._clickHandler),
                e.detachEvent("dblclick", this._dblclickHandler),
                e.detachEvent("onmousewheel", this._mousewheelHandler),
                e.detachEvent("onmousemove", this._mousemoveHandler),
                e.detachEvent("onmouseout", this._mouseoutHandler),
                e.detachEvent("onmousedown", this._mousedownHandler),
                e.detachEvent("onmouseup", this._mouseupHandler)),
              (this.root = this._domHover = this.storage = this.painter = null),
              this.un();
          }),
          (c.prototype._processDragStart = function (e) {
            var t = this._lastHover;
            if (
              this._isMouseDown &&
              t &&
              t.draggable &&
              !this._draggingTarget &&
              this._mouseDownTarget == t
            ) {
              if (
                t.dragEnableTime &&
                new Date() - this._lastMouseDownMoment < t.dragEnableTime
              )
                return;
              var n = t;
              (this._draggingTarget = n),
                (this._isDragging = 1),
                (n.invisible = !0),
                this.storage.mod(n.id),
                this._dispatchAgency(n, U.DRAGSTART, e),
                this.painter.refresh();
            }
          }),
          (c.prototype._processDragEnter = function (e) {
            this._draggingTarget &&
              this._dispatchAgency(
                this._lastHover,
                U.DRAGENTER,
                e,
                this._draggingTarget
              );
          }),
          (c.prototype._processDragOver = function (e) {
            this._draggingTarget &&
              this._dispatchAgency(
                this._lastHover,
                U.DRAGOVER,
                e,
                this._draggingTarget
              );
          }),
          (c.prototype._processDragLeave = function (e) {
            this._draggingTarget &&
              this._dispatchAgency(
                this._lastHover,
                U.DRAGLEAVE,
                e,
                this._draggingTarget
              );
          }),
          (c.prototype._processDrop = function (e) {
            this._draggingTarget &&
              ((this._draggingTarget.invisible = !1),
              this.storage.mod(this._draggingTarget.id),
              this.painter.refresh(),
              this._dispatchAgency(
                this._lastHover,
                U.DROP,
                e,
                this._draggingTarget
              ));
          }),
          (c.prototype._processDragEnd = function (e) {
            this._draggingTarget &&
              (this._dispatchAgency(this._draggingTarget, U.DRAGEND, e),
              (this._lastHover = null)),
              (this._isDragging = 0),
              (this._draggingTarget = null);
          }),
          (c.prototype._processOverShape = function (e) {
            this._dispatchAgency(this._lastHover, U.MOUSEOVER, e);
          }),
          (c.prototype._processOutShape = function (e) {
            this._dispatchAgency(this._lastHover, U.MOUSEOUT, e);
          }),
          (c.prototype._dispatchAgency = function (e, t, n, i) {
            var a = "on" + t,
              o = { type: t, event: n, target: e, cancelBubble: !1 },
              s = e;
            for (
              i && (o.dragged = i);
              s &&
              (s[a] && (o.cancelBubble = s[a](o)),
              s.dispatch(t, o),
              (s = s.parent),
              !o.cancelBubble);

            );
            if (e) o.cancelBubble || this.dispatch(t, o);
            else if (!i) {
              var r = { type: t, event: n };
              this.dispatch(t, r),
                this.painter.eachOtherLayer(function (e) {
                  "function" == typeof e[a] && e[a](r),
                    e.dispatch && e.dispatch(t, r);
                });
            }
          }),
          (c.prototype._iterateAndFindHover = (function () {
            var e = V.create();
            return function () {
              for (
                var t,
                  n,
                  i = this.storage.getShapeList(),
                  a = [0, 0],
                  o = i.length - 1;
                o >= 0;
                o--
              ) {
                var s = i[o];
                if (
                  (t !== s.zlevel &&
                    ((n = this.painter.getLayer(s.zlevel, n)),
                    (a[0] = this._mouseX),
                    (a[1] = this._mouseY),
                    n.needTransform &&
                      (V.invert(e, n.transform), h.applyTransform(a, a, e))),
                  this._findHover(s, a[0], a[1]))
                )
                  break;
              }
            };
          })());
        var u = [{ x: 10 }, { x: -20 }, { x: 10, y: 10 }, { y: -20 }];
        return (
          (c.prototype._mobileFindFixed = function (e) {
            (this._lastHover = null),
              (this._mouseX = e.zrenderX),
              (this._mouseY = e.zrenderY),
              (this._event = e),
              this._iterateAndFindHover();
            for (var t = 0; !this._lastHover && t < u.length; t++) {
              var n = u[t];
              n.x && (this._mouseX += n.x),
                n.y && (this._mouseY += n.y),
                this._iterateAndFindHover();
            }
            this._lastHover &&
              ((e.zrenderX = this._mouseX), (e.zrenderY = this._mouseY));
          }),
          (c.prototype._zrenderEventFixed = function (e, t) {
            if (e.zrenderFixed) return e;
            if (t) {
              var n =
                "touchend" != e.type ? e.targetTouches[0] : e.changedTouches[0];
              if (n) {
                var i = this.painter._domRoot.getBoundingClientRect();
                (e.zrenderX = n.clientX - i.left),
                  (e.zrenderY = n.clientY - i.top);
              }
            } else {
              e = e || window.event;
              var a =
                e.toElement || e.relatedTarget || e.srcElement || e.target;
              a &&
                a != this._domHover &&
                ((e.zrenderX =
                  ("undefined" != typeof e.offsetX ? e.offsetX : e.layerX) +
                  a.offsetLeft),
                (e.zrenderY =
                  ("undefined" != typeof e.offsetY ? e.offsetY : e.layerY) +
                  a.offsetTop));
            }
            return (e.zrenderFixed = 1), e;
          }),
          l.merge(c.prototype, m.prototype, !0),
          c
        );
      }
    ),
    n(
      "zrender/Painter",
      [
        "require",
        "./config",
        "./tool/util",
        "./tool/log",
        "./loadingEffect/Base",
        "./Layer",
        "./shape/Image",
      ],
      function (e) {
        "use strict";
        function t() {
          return !1;
        }
        function n() {}
        function i(e) {
          return e
            ? e.isBuildin
              ? !0
              : "function" != typeof e.resize || "function" != typeof e.refresh
              ? !1
              : !0
            : !1;
        }
        var a = e("./config"),
          o = e("./tool/util"),
          s = e("./tool/log"),
          r = e("./loadingEffect/Base"),
          l = e("./Layer"),
          h = function (e, n) {
            (this.root = e),
              (e.style["-webkit-tap-highlight-color"] = "transparent"),
              (e.style["-webkit-user-select"] = "none"),
              (e.style["user-select"] = "none"),
              (e.style["-webkit-touch-callout"] = "none"),
              (this.storage = n),
              (e.innerHTML = ""),
              (this._width = this._getWidth()),
              (this._height = this._getHeight());
            var i = document.createElement("div");
            (this._domRoot = i),
              (i.style.position = "relative"),
              (i.style.overflow = "hidden"),
              (i.style.width = this._width + "px"),
              (i.style.height = this._height + "px"),
              e.appendChild(i),
              (this._layers = {}),
              (this._zlevelList = []),
              (this._layerConfig = {}),
              (this._loadingEffect = new r({})),
              (this.shapeToImage = this._createShapeToImageProcessor()),
              (this._bgDom = document.createElement("div")),
              (this._bgDom.style.cssText = [
                "position:absolute;left:0px;top:0px;width:",
                this._width,
                "px;height:",
                this._height + "px;",
                "-webkit-user-select:none;user-select;none;",
                "-webkit-touch-callout:none;",
              ].join("")),
              this._bgDom.setAttribute("data-zr-dom-id", "bg"),
              i.appendChild(this._bgDom),
              (this._bgDom.onselectstart = t);
            var a = new l("_zrender_hover_", this);
            (this._layers.hover = a),
              i.appendChild(a.dom),
              a.initContext(),
              (a.dom.onselectstart = t),
              (a.dom.style["-webkit-user-select"] = "none"),
              (a.dom.style["user-select"] = "none"),
              (a.dom.style["-webkit-touch-callout"] = "none"),
              (this.refreshNextFrame = null);
          };
        return (
          (h.prototype.render = function (e) {
            return (
              this.isLoading() && this.hideLoading(), this.refresh(e, !0), this
            );
          }),
          (h.prototype.refresh = function (e, t) {
            var n = this.storage.getShapeList(!0);
            this._paintList(n, t);
            for (var i = 0; i < this._zlevelList.length; i++) {
              var a = this._zlevelList[i],
                o = this._layers[a];
              !o.isBuildin && o.refresh && o.refresh();
            }
            return "function" == typeof e && e(), this;
          }),
          (h.prototype._preProcessLayer = function (e) {
            e.unusedCount++, e.updateTransform();
          }),
          (h.prototype._postProcessLayer = function (e) {
            (e.dirty = !1), 1 == e.unusedCount && e.clear();
          }),
          (h.prototype._paintList = function (e, t) {
            "undefined" == typeof t && (t = !1), this._updateLayerStatus(e);
            var n, i, o;
            this.eachBuildinLayer(this._preProcessLayer);
            for (var r = 0, l = e.length; l > r; r++) {
              var h = e[r];
              if (
                (i !== h.zlevel &&
                  (n && (n.needTransform && o.restore(), o.flush && o.flush()),
                  (i = h.zlevel),
                  (n = this.getLayer(i)),
                  n.isBuildin ||
                    s("ZLevel " + i + " has been used by unkown layer " + n.id),
                  (o = n.ctx),
                  (n.unusedCount = 0),
                  (n.dirty || t) && n.clear(),
                  n.needTransform && (o.save(), n.setTransform(o))),
                (n.dirty || t) &&
                  !h.invisible &&
                  (!h.onbrush || (h.onbrush && !h.onbrush(o, !1))))
              )
                if (a.catchBrushException)
                  try {
                    h.brush(o, !1, this.refreshNextFrame);
                  } catch (V) {
                    s(V, "brush error of " + h.type, h);
                  }
                else h.brush(o, !1, this.refreshNextFrame);
              h.__dirty = !1;
            }
            n && (n.needTransform && o.restore(), o.flush && o.flush()),
              this.eachBuildinLayer(this._postProcessLayer);
          }),
          (h.prototype.getLayer = function (e) {
            var t = this._layers[e];
            return (
              t ||
                ((t = new l(e, this)),
                (t.isBuildin = !0),
                this._layerConfig[e] && o.merge(t, this._layerConfig[e], !0),
                t.updateTransform(),
                this.insertLayer(e, t),
                t.initContext()),
              t
            );
          }),
          (h.prototype.insertLayer = function (e, t) {
            if (this._layers[e])
              return void s("ZLevel " + e + " has been used already");
            if (!i(t)) return void s("Layer of zlevel " + e + " is not valid");
            var n = this._zlevelList.length,
              a = null,
              o = -1;
            if (n > 0 && e > this._zlevelList[0]) {
              for (
                o = 0;
                n - 1 > o &&
                !(this._zlevelList[o] < e && this._zlevelList[o + 1] > e);
                o++
              );
              a = this._layers[this._zlevelList[o]];
            }
            this._zlevelList.splice(o + 1, 0, e);
            var r = a ? a.dom : this._bgDom;
            r.nextSibling
              ? r.parentNode.insertBefore(t.dom, r.nextSibling)
              : r.parentNode.appendChild(t.dom),
              (this._layers[e] = t);
          }),
          (h.prototype.eachLayer = function (e, t) {
            for (var n = 0; n < this._zlevelList.length; n++) {
              var i = this._zlevelList[n];
              e.call(t, this._layers[i], i);
            }
          }),
          (h.prototype.eachBuildinLayer = function (e, t) {
            for (var n = 0; n < this._zlevelList.length; n++) {
              var i = this._zlevelList[n],
                a = this._layers[i];
              a.isBuildin && e.call(t, a, i);
            }
          }),
          (h.prototype.eachOtherLayer = function (e, t) {
            for (var n = 0; n < this._zlevelList.length; n++) {
              var i = this._zlevelList[n],
                a = this._layers[i];
              a.isBuildin || e.call(t, a, i);
            }
          }),
          (h.prototype.getLayers = function () {
            return this._layers;
          }),
          (h.prototype._updateLayerStatus = function (e) {
            var t = this._layers,
              n = {};
            this.eachBuildinLayer(function (e, t) {
              (n[t] = e.elCount), (e.elCount = 0);
            });
            for (var i = 0, a = e.length; a > i; i++) {
              var o = e[i],
                s = o.zlevel,
                r = t[s];
              if (r) {
                if ((r.elCount++, r.dirty)) continue;
                r.dirty = o.__dirty;
              }
            }
            this.eachBuildinLayer(function (e, t) {
              n[t] !== e.elCount && (e.dirty = !0);
            });
          }),
          (h.prototype.refreshShapes = function (e, t) {
            for (var n = 0, i = e.length; i > n; n++) {
              var a = e[n];
              a.modSelf();
            }
            return this.refresh(t), this;
          }),
          (h.prototype.setLoadingEffect = function (e) {
            return (this._loadingEffect = e), this;
          }),
          (h.prototype.clear = function () {
            return this.eachBuildinLayer(this._clearLayer), this;
          }),
          (h.prototype._clearLayer = function (e) {
            e.clear();
          }),
          (h.prototype.modLayer = function (e, t) {
            if (t) {
              this._layerConfig[e]
                ? o.merge(this._layerConfig[e], t, !0)
                : (this._layerConfig[e] = t);
              var n = this._layers[e];
              n && o.merge(n, this._layerConfig[e], !0);
            }
          }),
          (h.prototype.delLayer = function (e) {
            var t = this._layers[e];
            t &&
              (this.modLayer(e, {
                position: t.position,
                rotation: t.rotation,
                scale: t.scale,
              }),
              t.dom.parentNode.removeChild(t.dom),
              delete this._layers[e],
              this._zlevelList.splice(o.indexOf(this._zlevelList, e), 1));
          }),
          (h.prototype.refreshHover = function () {
            this.clearHover();
            for (
              var e = this.storage.getHoverShapes(!0), t = 0, n = e.length;
              n > t;
              t++
            )
              this._brushHover(e[t]);
            var i = this._layers.hover.ctx;
            return i.flush && i.flush(), this.storage.delHover(), this;
          }),
          (h.prototype.clearHover = function () {
            var e = this._layers.hover;
            return e && e.clear(), this;
          }),
          (h.prototype.showLoading = function (e) {
            return (
              this._loadingEffect && this._loadingEffect.stop(),
              e && this.setLoadingEffect(e),
              this._loadingEffect.start(this),
              (this.loading = !0),
              this
            );
          }),
          (h.prototype.hideLoading = function () {
            return (
              this._loadingEffect.stop(),
              this.clearHover(),
              (this.loading = !1),
              this
            );
          }),
          (h.prototype.isLoading = function () {
            return this.loading;
          }),
          (h.prototype.resize = function () {
            var e = this._domRoot;
            e.style.display = "none";
            var t = this._getWidth(),
              n = this._getHeight();
            if (
              ((e.style.display = ""), this._width != t || n != this._height)
            ) {
              (this._width = t),
                (this._height = n),
                (e.style.width = t + "px"),
                (e.style.height = n + "px");
              for (var i in this._layers) this._layers[i].resize(t, n);
              this.refresh(null, !0);
            }
            return this;
          }),
          (h.prototype.clearLayer = function (e) {
            var t = this._layers[e];
            t && t.clear();
          }),
          (h.prototype.dispose = function () {
            this.isLoading() && this.hideLoading(),
              (this.root.innerHTML = ""),
              (this.root = this.storage = this._domRoot = this._layers = null);
          }),
          (h.prototype.getDomHover = function () {
            return this._layers.hover.dom;
          }),
          (h.prototype.toDataURL = function (e, t, n) {
            if (window.G_vmlCanvasManager) return null;
            var i = new l("image", this);
            this._bgDom.appendChild(i.dom), i.initContext();
            var o = i.ctx;
            (i.clearColor = t || "#fff"), i.clear();
            var r = this;
            this.storage.iterShape(
              function (e) {
                if (
                  !e.invisible &&
                  (!e.onbrush || (e.onbrush && !e.onbrush(o, !1)))
                )
                  if (a.catchBrushException)
                    try {
                      e.brush(o, !1, r.refreshNextFrame);
                    } catch (t) {
                      s(t, "brush error of " + e.type, e);
                    }
                  else e.brush(o, !1, r.refreshNextFrame);
              },
              { normal: "up", update: !0 }
            );
            var h = i.dom.toDataURL(e, n);
            return (o = null), this._bgDom.removeChild(i.dom), h;
          }),
          (h.prototype.getWidth = function () {
            return this._width;
          }),
          (h.prototype.getHeight = function () {
            return this._height;
          }),
          (h.prototype._getWidth = function () {
            var e = this.root,
              t = e.currentStyle || document.defaultView.getComputedStyle(e);
            return (
              (
                (e.clientWidth || parseInt(t.width, 10)) -
                parseInt(t.paddingLeft, 10) -
                parseInt(t.paddingRight, 10)
              ).toFixed(0) - 0
            );
          }),
          (h.prototype._getHeight = function () {
            var e = this.root,
              t = e.currentStyle || document.defaultView.getComputedStyle(e);
            return (
              (
                (e.clientHeight || parseInt(t.height, 10)) -
                parseInt(t.paddingTop, 10) -
                parseInt(t.paddingBottom, 10)
              ).toFixed(0) - 0
            );
          }),
          (h.prototype._brushHover = function (e) {
            var t = this._layers.hover.ctx;
            if (!e.onbrush || (e.onbrush && !e.onbrush(t, !0))) {
              var n = this.getLayer(e.zlevel);
              if (
                (n.needTransform && (t.save(), n.setTransform(t)),
                a.catchBrushException)
              )
                try {
                  e.brush(t, !0, this.refreshNextFrame);
                } catch (i) {
                  s(i, "hoverBrush error of " + e.type, e);
                }
              else e.brush(t, !0, this.refreshNextFrame);
              n.needTransform && t.restore();
            }
          }),
          (h.prototype._shapeToImage = function (t, n, i, a, o) {
            var s = document.createElement("canvas"),
              r = s.getContext("2d");
            (s.style.width = i + "px"),
              (s.style.height = a + "px"),
              s.setAttribute("width", i * o),
              s.setAttribute("height", a * o),
              r.clearRect(0, 0, i * o, a * o);
            var l = {
              position: n.position,
              rotation: n.rotation,
              scale: n.scale,
            };
            (n.position = [0, 0, 0]),
              (n.rotation = 0),
              (n.scale = [1, 1]),
              n && n.brush(r, !1);
            var h = e("./shape/Image"),
              V = new h({ id: t, style: { x: 0, y: 0, image: s } });
            return (
              null != l.position && (V.position = n.position = l.position),
              null != l.rotation && (V.rotation = n.rotation = l.rotation),
              null != l.scale && (V.scale = n.scale = l.scale),
              V
            );
          }),
          (h.prototype._createShapeToImageProcessor = function () {
            if (window.G_vmlCanvasManager) return n;
            var e = this;
            return function (t, n, i, o) {
              return e._shapeToImage(t, n, i, o, a.devicePixelRatio);
            };
          }),
          h
        );
      }
    ),
    n("zrender/Storage", ["require", "./tool/util", "./Group"], function (e) {
      "use strict";
      function t(e, t) {
        return e.zlevel == t.zlevel
          ? e.z == t.z
            ? e.__renderidx - t.__renderidx
            : e.z - t.z
          : e.zlevel - t.zlevel;
      }
      var n = e("./tool/util"),
        i = e("./Group"),
        a = { hover: !1, normal: "down", update: !1 },
        o = function () {
          (this._elements = {}),
            (this._hoverElements = []),
            (this._roots = []),
            (this._shapeList = []),
            (this._shapeListOffset = 0);
        };
      return (
        (o.prototype.iterShape = function (e, t) {
          if ((t || (t = a), t.hover))
            for (var n = 0, i = this._hoverElements.length; i > n; n++) {
              var o = this._hoverElements[n];
              if ((o.updateTransform(), e(o))) return this;
            }
          switch ((t.update && this.updateShapeList(), t.normal)) {
            case "down":
              for (var i = this._shapeList.length; i--; )
                if (e(this._shapeList[i])) return this;
              break;
            default:
              for (var n = 0, i = this._shapeList.length; i > n; n++)
                if (e(this._shapeList[n])) return this;
          }
          return this;
        }),
        (o.prototype.getHoverShapes = function (e) {
          for (var n = [], i = 0, a = this._hoverElements.length; a > i; i++) {
            n.push(this._hoverElements[i]);
            var o = this._hoverElements[i].hoverConnect;
            if (o) {
              var s;
              o = o instanceof Array ? o : [o];
              for (var r = 0, l = o.length; l > r; r++)
                (s = o[r].id ? o[r] : this.get(o[r])), s && n.push(s);
            }
          }
          if ((n.sort(t), e))
            for (var i = 0, a = n.length; a > i; i++) n[i].updateTransform();
          return n;
        }),
        (o.prototype.getShapeList = function (e) {
          return e && this.updateShapeList(), this._shapeList;
        }),
        (o.prototype.updateShapeList = function () {
          this._shapeListOffset = 0;
          for (var e = 0, n = this._roots.length; n > e; e++) {
            var i = this._roots[e];
            this._updateAndAddShape(i);
          }
          this._shapeList.length = this._shapeListOffset;
          for (var e = 0, n = this._shapeList.length; n > e; e++)
            this._shapeList[e].__renderidx = e;
          this._shapeList.sort(t);
        }),
        (o.prototype._updateAndAddShape = function (e, t) {
          if (!e.ignore)
            if ((e.updateTransform(), "group" == e.type)) {
              e.clipShape &&
                ((e.clipShape.parent = e),
                e.clipShape.updateTransform(),
                t
                  ? ((t = t.slice()), t.push(e.clipShape))
                  : (t = [e.clipShape]));
              for (var n = 0; n < e._children.length; n++) {
                var i = e._children[n];
                (i.__dirty = e.__dirty || i.__dirty),
                  this._updateAndAddShape(i, t);
              }
              e.__dirty = !1;
            } else
              (e.__clipShapes = t),
                (this._shapeList[this._shapeListOffset++] = e);
        }),
        (o.prototype.mod = function (e, t) {
          var i = this._elements[e];
          if (i && (i.modSelf(), t))
            if (t.parent || t._storage || t.__clipShapes) {
              var a = {};
              for (var o in t)
                "parent" !== o &&
                  "_storage" !== o &&
                  "__clipShapes" !== o &&
                  t.hasOwnProperty(o) &&
                  (a[o] = t[o]);
              n.merge(i, a, !0);
            } else n.merge(i, t, !0);
          return this;
        }),
        (o.prototype.drift = function (e, t, n) {
          var i = this._elements[e];
          return (
            i &&
              ((i.needTransform = !0),
              "horizontal" === i.draggable
                ? (n = 0)
                : "vertical" === i.draggable && (t = 0),
              (!i.ondrift || (i.ondrift && !i.ondrift(t, n))) && i.drift(t, n)),
            this
          );
        }),
        (o.prototype.addHover = function (e) {
          return e.updateNeedTransform(), this._hoverElements.push(e), this;
        }),
        (o.prototype.delHover = function () {
          return (this._hoverElements = []), this;
        }),
        (o.prototype.hasHoverShape = function () {
          return this._hoverElements.length > 0;
        }),
        (o.prototype.addRoot = function (e) {
          e instanceof i && e.addChildrenToStorage(this),
            this.addToMap(e),
            this._roots.push(e);
        }),
        (o.prototype.delRoot = function (e) {
          if ("undefined" == typeof e) {
            for (var t = 0; t < this._roots.length; t++) {
              var a = this._roots[t];
              a instanceof i && a.delChildrenFromStorage(this);
            }
            return (
              (this._elements = {}),
              (this._hoverElements = []),
              (this._roots = []),
              (this._shapeList = []),
              void (this._shapeListOffset = 0)
            );
          }
          if (e instanceof Array)
            for (var t = 0, o = e.length; o > t; t++) this.delRoot(e[t]);
          else {
            var s;
            s = "string" == typeof e ? this._elements[e] : e;
            var r = n.indexOf(this._roots, s);
            r >= 0 &&
              (this.delFromMap(s.id),
              this._roots.splice(r, 1),
              s instanceof i && s.delChildrenFromStorage(this));
          }
        }),
        (o.prototype.addToMap = function (e) {
          return (
            e instanceof i && (e._storage = this),
            e.modSelf(),
            (this._elements[e.id] = e),
            this
          );
        }),
        (o.prototype.get = function (e) {
          return this._elements[e];
        }),
        (o.prototype.delFromMap = function (e) {
          var t = this._elements[e];
          return (
            t &&
              (delete this._elements[e], t instanceof i && (t._storage = null)),
            this
          );
        }),
        (o.prototype.dispose = function () {
          this._elements = this._renderList = this._roots = this._hoverElements = null;
        }),
        o
      );
    }),
    n(
      "zrender/animation/Animation",
      ["require", "./Clip", "../tool/color", "../tool/util", "../tool/event"],
      function (e) {
        "use strict";
        function t(e, t) {
          return e[t];
        }
        function n(e, t, n) {
          e[t] = n;
        }
        function i(e, t, n) {
          return (t - e) * n + e;
        }
        function a(e, t, n, a, o) {
          var s = e.length;
          if (1 == o) for (var r = 0; s > r; r++) a[r] = i(e[r], t[r], n);
          else
            for (var l = e[0].length, r = 0; s > r; r++)
              for (var h = 0; l > h; h++) a[r][h] = i(e[r][h], t[r][h], n);
        }
        function o(e) {
          switch (typeof e) {
            case "undefined":
            case "string":
              return !1;
          }
          return "undefined" != typeof e.length;
        }
        function s(e, t, n, i, a, o, s, l, h) {
          var V = e.length;
          if (1 == h)
            for (var U = 0; V > U; U++)
              l[U] = r(e[U], t[U], n[U], i[U], a, o, s);
          else
            for (var m = e[0].length, U = 0; V > U; U++)
              for (var p = 0; m > p; p++)
                l[U][p] = r(e[U][p], t[U][p], n[U][p], i[U][p], a, o, s);
        }
        function r(e, t, n, i, a, o, s) {
          var r = 0.5 * (n - e),
            l = 0.5 * (i - t);
          return (
            (2 * (t - n) + r + l) * s +
            (-3 * (t - n) - 2 * r - l) * o +
            r * a +
            t
          );
        }
        function l(e) {
          if (o(e)) {
            var t = e.length;
            if (o(e[0])) {
              for (var n = [], i = 0; t > i; i++) n.push(c.call(e[i]));
              return n;
            }
            return c.call(e);
          }
          return e;
        }
        function h(e) {
          return (
            (e[0] = Math.floor(e[0])),
            (e[1] = Math.floor(e[1])),
            (e[2] = Math.floor(e[2])),
            "rgba(" + e.join(",") + ")"
          );
        }
        var V = e("./Clip"),
          U = e("../tool/color"),
          m = e("../tool/util"),
          p = e("../tool/event").Dispatcher,
          d =
            window.requestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            function (e) {
              setTimeout(e, 16);
            },
          c = Array.prototype.slice,
          u = function (e) {
            (e = e || {}),
              (this.stage = e.stage || {}),
              (this.onframe = e.onframe || function () {}),
              (this._clips = []),
              (this._running = !1),
              (this._time = 0),
              p.call(this);
          };
        (u.prototype = {
          add: function (e) {
            this._clips.push(e);
          },
          remove: function (e) {
            var t = m.indexOf(this._clips, e);
            t >= 0 && this._clips.splice(t, 1);
          },
          _update: function () {
            for (
              var e = new Date().getTime(),
                t = e - this._time,
                n = this._clips,
                i = n.length,
                a = [],
                o = [],
                s = 0;
              i > s;
              s++
            ) {
              var r = n[s],
                l = r.step(e);
              l && (a.push(l), o.push(r));
            }
            for (var s = 0; i > s; )
              n[s]._needsRemove ? ((n[s] = n[i - 1]), n.pop(), i--) : s++;
            i = a.length;
            for (var s = 0; i > s; s++) o[s].fire(a[s]);
            (this._time = e),
              this.onframe(t),
              this.dispatch("frame", t),
              this.stage.update && this.stage.update();
          },
          start: function () {
            function e() {
              t._running && (t._update(), d(e));
            }
            var t = this;
            (this._running = !0), (this._time = new Date().getTime()), d(e);
          },
          stop: function () {
            this._running = !1;
          },
          clear: function () {
            this._clips = [];
          },
          animate: function (e, t) {
            t = t || {};
            var n = new y(e, t.loop, t.getter, t.setter);
            return (n.animation = this), n;
          },
          constructor: u,
        }),
          m.merge(u.prototype, p.prototype, !0);
        var y = function (e, i, a, o) {
          (this._tracks = {}),
            (this._target = e),
            (this._loop = i || !1),
            (this._getter = a || t),
            (this._setter = o || n),
            (this._clipCount = 0),
            (this._delay = 0),
            (this._doneList = []),
            (this._onframeList = []),
            (this._clipList = []);
        };
        return (
          (y.prototype = {
            when: function (e, t) {
              for (var n in t)
                this._tracks[n] ||
                  ((this._tracks[n] = []),
                  0 !== e &&
                    this._tracks[n].push({
                      time: 0,
                      value: l(this._getter(this._target, n)),
                    })),
                  this._tracks[n].push({ time: parseInt(e, 10), value: t[n] });
              return this;
            },
            during: function (e) {
              return this._onframeList.push(e), this;
            },
            start: function (e) {
              var t = this,
                n = this._setter,
                l = this._getter,
                m = "spline" === e,
                p = function () {
                  if ((t._clipCount--, 0 === t._clipCount)) {
                    t._tracks = {};
                    for (var e = t._doneList.length, n = 0; e > n; n++)
                      t._doneList[n].call(t);
                  }
                },
                d = function (d, c) {
                  var u = d.length;
                  if (u) {
                    var y = d[0].value,
                      b = o(y),
                      g = !1,
                      k = b && o(y[0]) ? 2 : 1;
                    d.sort(function (e, t) {
                      return e.time - t.time;
                    });
                    var f;
                    if (u) {
                      f = d[u - 1].time;
                      for (var L = [], x = [], _ = 0; u > _; _++) {
                        L.push(d[_].time / f);
                        var W = d[_].value;
                        "string" == typeof W &&
                          ((W = U.toArray(W)),
                          0 === W.length &&
                            ((W[0] = W[1] = W[2] = 0), (W[3] = 1)),
                          (g = !0)),
                          x.push(W);
                      }
                      var X,
                        _,
                        K,
                        I,
                        w,
                        v,
                        J,
                        C = 0,
                        S = 0;
                      if (g) var F = [0, 0, 0, 0];
                      var E = function (e, o) {
                          if (S > o) {
                            for (
                              X = Math.min(C + 1, u - 1), _ = X;
                              _ >= 0 && !(L[_] <= o);
                              _--
                            );
                            _ = Math.min(_, u - 2);
                          } else {
                            for (_ = C; u > _ && !(L[_] > o); _++);
                            _ = Math.min(_ - 1, u - 2);
                          }
                          (C = _), (S = o);
                          var V = L[_ + 1] - L[_];
                          if (0 !== V) {
                            if (((K = (o - L[_]) / V), m))
                              if (
                                ((w = x[_]),
                                (I = x[0 === _ ? _ : _ - 1]),
                                (v = x[_ > u - 2 ? u - 1 : _ + 1]),
                                (J = x[_ > u - 3 ? u - 1 : _ + 2]),
                                b)
                              )
                                s(I, w, v, J, K, K * K, K * K * K, l(e, c), k);
                              else {
                                var U;
                                g
                                  ? ((U = s(
                                      I,
                                      w,
                                      v,
                                      J,
                                      K,
                                      K * K,
                                      K * K * K,
                                      F,
                                      1
                                    )),
                                    (U = h(F)))
                                  : (U = r(I, w, v, J, K, K * K, K * K * K)),
                                  n(e, c, U);
                              }
                            else if (b) a(x[_], x[_ + 1], K, l(e, c), k);
                            else {
                              var U;
                              g
                                ? (a(x[_], x[_ + 1], K, F, 1), (U = h(F)))
                                : (U = i(x[_], x[_ + 1], K)),
                                n(e, c, U);
                            }
                            for (_ = 0; _ < t._onframeList.length; _++)
                              t._onframeList[_](e, o);
                          }
                        },
                        T = new V({
                          target: t._target,
                          life: f,
                          loop: t._loop,
                          delay: t._delay,
                          onframe: E,
                          ondestroy: p,
                        });
                      e && "spline" !== e && (T.easing = e),
                        t._clipList.push(T),
                        t._clipCount++,
                        t.animation.add(T);
                    }
                  }
                };
              for (var c in this._tracks) d(this._tracks[c], c);
              return this;
            },
            stop: function () {
              for (var e = 0; e < this._clipList.length; e++) {
                var t = this._clipList[e];
                this.animation.remove(t);
              }
              this._clipList = [];
            },
            delay: function (e) {
              return (this._delay = e), this;
            },
            done: function (e) {
              return e && this._doneList.push(e), this;
            },
          }),
          u
        );
      }
    ),
    n("zrender/tool/env", [], function () {
      function e(e) {
        var t = (this.os = {}),
          n = (this.browser = {}),
          i = e.match(/Web[kK]it[\/]{0,1}([\d.]+)/),
          a = e.match(/(Android);?[\s\/]+([\d.]+)?/),
          o = e.match(/(iPad).*OS\s([\d_]+)/),
          s = e.match(/(iPod)(.*OS\s([\d_]+))?/),
          r = !o && e.match(/(iPhone\sOS)\s([\d_]+)/),
          l = e.match(/(webOS|hpwOS)[\s\/]([\d.]+)/),
          h = l && e.match(/TouchPad/),
          V = e.match(/Kindle\/([\d.]+)/),
          U = e.match(/Silk\/([\d._]+)/),
          m = e.match(/(BlackBerry).*Version\/([\d.]+)/),
          p = e.match(/(BB10).*Version\/([\d.]+)/),
          d = e.match(/(RIM\sTablet\sOS)\s([\d.]+)/),
          c = e.match(/PlayBook/),
          u = e.match(/Chrome\/([\d.]+)/) || e.match(/CriOS\/([\d.]+)/),
          y = e.match(/Firefox\/([\d.]+)/),
          b = e.match(/MSIE ([\d.]+)/),
          g = i && e.match(/Mobile\//) && !u,
          k = e.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !u,
          b = e.match(/MSIE\s([\d.]+)/);
        return (
          (n.webkit = !!i) && (n.version = i[1]),
          a && ((t.android = !0), (t.version = a[2])),
          r &&
            !s &&
            ((t.ios = t.iphone = !0), (t.version = r[2].replace(/_/g, "."))),
          o && ((t.ios = t.ipad = !0), (t.version = o[2].replace(/_/g, "."))),
          s &&
            ((t.ios = t.ipod = !0),
            (t.version = s[3] ? s[3].replace(/_/g, ".") : null)),
          l && ((t.webos = !0), (t.version = l[2])),
          h && (t.touchpad = !0),
          m && ((t.blackberry = !0), (t.version = m[2])),
          p && ((t.bb10 = !0), (t.version = p[2])),
          d && ((t.rimtabletos = !0), (t.version = d[2])),
          c && (n.playbook = !0),
          V && ((t.kindle = !0), (t.version = V[1])),
          U && ((n.silk = !0), (n.version = U[1])),
          !U && t.android && e.match(/Kindle Fire/) && (n.silk = !0),
          u && ((n.chrome = !0), (n.version = u[1])),
          y && ((n.firefox = !0), (n.version = y[1])),
          b && ((n.ie = !0), (n.version = b[1])),
          g && (e.match(/Safari/) || t.ios) && (n.safari = !0),
          k && (n.webview = !0),
          b && ((n.ie = !0), (n.version = b[1])),
          (t.tablet = !!(
            o ||
            c ||
            (a && !e.match(/Mobile/)) ||
            (y && e.match(/Tablet/)) ||
            (b && !e.match(/Phone/) && e.match(/Touch/))
          )),
          (t.phone = !(
            t.tablet ||
            t.ipod ||
            !(
              a ||
              r ||
              l ||
              m ||
              p ||
              (u && e.match(/Android/)) ||
              (u && e.match(/CriOS\/([\d.]+)/)) ||
              (y && e.match(/Mobile/)) ||
              (b && e.match(/Touch/))
            )
          )),
          {
            browser: n,
            os: t,
            canvasSupported: document.createElement("canvas").getContext
              ? !0
              : !1,
          }
        );
      }
      return e(navigator.userAgent);
    }),
    n("zrender/tool/vector", [], function () {
      var e = "undefined" == typeof Float32Array ? Array : Float32Array,
        t = {
          create: function (t, n) {
            var i = new e(2);
            return (i[0] = t || 0), (i[1] = n || 0), i;
          },
          copy: function (e, t) {
            return (e[0] = t[0]), (e[1] = t[1]), e;
          },
          set: function (e, t, n) {
            return (e[0] = t), (e[1] = n), e;
          },
          add: function (e, t, n) {
            return (e[0] = t[0] + n[0]), (e[1] = t[1] + n[1]), e;
          },
          scaleAndAdd: function (e, t, n, i) {
            return (e[0] = t[0] + n[0] * i), (e[1] = t[1] + n[1] * i), e;
          },
          sub: function (e, t, n) {
            return (e[0] = t[0] - n[0]), (e[1] = t[1] - n[1]), e;
          },
          len: function (e) {
            return Math.sqrt(this.lenSquare(e));
          },
          lenSquare: function (e) {
            return e[0] * e[0] + e[1] * e[1];
          },
          mul: function (e, t, n) {
            return (e[0] = t[0] * n[0]), (e[1] = t[1] * n[1]), e;
          },
          div: function (e, t, n) {
            return (e[0] = t[0] / n[0]), (e[1] = t[1] / n[1]), e;
          },
          dot: function (e, t) {
            return e[0] * t[0] + e[1] * t[1];
          },
          scale: function (e, t, n) {
            return (e[0] = t[0] * n), (e[1] = t[1] * n), e;
          },
          normalize: function (e, n) {
            var i = t.len(n);
            return (
              0 === i
                ? ((e[0] = 0), (e[1] = 0))
                : ((e[0] = n[0] / i), (e[1] = n[1] / i)),
              e
            );
          },
          distance: function (e, t) {
            return Math.sqrt(
              (e[0] - t[0]) * (e[0] - t[0]) + (e[1] - t[1]) * (e[1] - t[1])
            );
          },
          distanceSquare: function (e, t) {
            return (
              (e[0] - t[0]) * (e[0] - t[0]) + (e[1] - t[1]) * (e[1] - t[1])
            );
          },
          negate: function (e, t) {
            return (e[0] = -t[0]), (e[1] = -t[1]), e;
          },
          lerp: function (e, t, n, i) {
            return (
              (e[0] = t[0] + i * (n[0] - t[0])),
              (e[1] = t[1] + i * (n[1] - t[1])),
              e
            );
          },
          applyTransform: function (e, t, n) {
            var i = t[0],
              a = t[1];
            return (
              (e[0] = n[0] * i + n[2] * a + n[4]),
              (e[1] = n[1] * i + n[3] * a + n[5]),
              e
            );
          },
          min: function (e, t, n) {
            return (
              (e[0] = Math.min(t[0], n[0])), (e[1] = Math.min(t[1], n[1])), e
            );
          },
          max: function (e, t, n) {
            return (
              (e[0] = Math.max(t[0], n[0])), (e[1] = Math.max(t[1], n[1])), e
            );
          },
        };
      return (
        (t.length = t.len),
        (t.lengthSquare = t.lenSquare),
        (t.dist = t.distance),
        (t.distSquare = t.distanceSquare),
        t
      );
    }),
    n("zrender/tool/matrix", [], function () {
      var e = "undefined" == typeof Float32Array ? Array : Float32Array,
        t = {
          create: function () {
            var n = new e(6);
            return t.identity(n), n;
          },
          identity: function (e) {
            return (
              (e[0] = 1),
              (e[1] = 0),
              (e[2] = 0),
              (e[3] = 1),
              (e[4] = 0),
              (e[5] = 0),
              e
            );
          },
          copy: function (e, t) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = t[2]),
              (e[3] = t[3]),
              (e[4] = t[4]),
              (e[5] = t[5]),
              e
            );
          },
          mul: function (e, t, n) {
            return (
              (e[0] = t[0] * n[0] + t[2] * n[1]),
              (e[1] = t[1] * n[0] + t[3] * n[1]),
              (e[2] = t[0] * n[2] + t[2] * n[3]),
              (e[3] = t[1] * n[2] + t[3] * n[3]),
              (e[4] = t[0] * n[4] + t[2] * n[5] + t[4]),
              (e[5] = t[1] * n[4] + t[3] * n[5] + t[5]),
              e
            );
          },
          translate: function (e, t, n) {
            return (
              (e[0] = t[0]),
              (e[1] = t[1]),
              (e[2] = t[2]),
              (e[3] = t[3]),
              (e[4] = t[4] + n[0]),
              (e[5] = t[5] + n[1]),
              e
            );
          },
          rotate: function (e, t, n) {
            var i = t[0],
              a = t[2],
              o = t[4],
              s = t[1],
              r = t[3],
              l = t[5],
              h = Math.sin(n),
              V = Math.cos(n);
            return (
              (e[0] = i * V + s * h),
              (e[1] = -i * h + s * V),
              (e[2] = a * V + r * h),
              (e[3] = -a * h + V * r),
              (e[4] = V * o + h * l),
              (e[5] = V * l - h * o),
              e
            );
          },
          scale: function (e, t, n) {
            var i = n[0],
              a = n[1];
            return (
              (e[0] = t[0] * i),
              (e[1] = t[1] * a),
              (e[2] = t[2] * i),
              (e[3] = t[3] * a),
              (e[4] = t[4] * i),
              (e[5] = t[5] * a),
              e
            );
          },
          invert: function (e, t) {
            var n = t[0],
              i = t[2],
              a = t[4],
              o = t[1],
              s = t[3],
              r = t[5],
              l = n * s - o * i;
            return l
              ? ((l = 1 / l),
                (e[0] = s * l),
                (e[1] = -o * l),
                (e[2] = -i * l),
                (e[3] = n * l),
                (e[4] = (i * r - s * a) * l),
                (e[5] = (o * a - n * r) * l),
                e)
              : null;
          },
          mulVector: function (e, t, n) {
            var i = t[0],
              a = t[2],
              o = t[4],
              s = t[1],
              r = t[3],
              l = t[5];
            return (
              (e[0] = n[0] * i + n[1] * a + o),
              (e[1] = n[0] * s + n[1] * r + l),
              e
            );
          },
        };
      return t;
    }),
    n(
      "zrender/loadingEffect/Base",
      ["require", "../tool/util", "../shape/Text", "../shape/Rectangle"],
      function (e) {
        function t(e) {
          this.setOptions(e);
        }
        var n = e("../tool/util"),
          i = e("../shape/Text"),
          a = e("../shape/Rectangle"),
          o = "Loading...",
          s = "normal 16px Arial";
        return (
          (t.prototype.createTextShape = function (e) {
            return new i({
              highlightStyle: n.merge(
                {
                  x: this.canvasWidth / 2,
                  y: this.canvasHeight / 2,
                  text: o,
                  textAlign: "center",
                  textBaseline: "middle",
                  textFont: s,
                  color: "#333",
                  brushType: "fill",
                },
                e,
                !0
              ),
            });
          }),
          (t.prototype.createBackgroundShape = function (e) {
            return new a({
              highlightStyle: {
                x: 0,
                y: 0,
                width: this.canvasWidth,
                height: this.canvasHeight,
                brushType: "fill",
                color: e,
              },
            });
          }),
          (t.prototype.start = function (e) {
            function t(t) {
              e.storage.addHover(t);
            }
            function n() {
              e.refreshHover();
            }
            (this.canvasWidth = e._width),
              (this.canvasHeight = e._height),
              (this.loadingTimer = this._start(t, n));
          }),
          (t.prototype._start = function () {
            return setInterval(function () {}, 1e4);
          }),
          (t.prototype.stop = function () {
            clearInterval(this.loadingTimer);
          }),
          (t.prototype.setOptions = function (e) {
            this.options = e || {};
          }),
          (t.prototype.adjust = function (e, t) {
            return e <= t[0] ? (e = t[0]) : e >= t[1] && (e = t[1]), e;
          }),
          (t.prototype.getLocation = function (e, t, n) {
            var i = null != e.x ? e.x : "center";
            switch (i) {
              case "center":
                i = Math.floor((this.canvasWidth - t) / 2);
                break;
              case "left":
                i = 0;
                break;
              case "right":
                i = this.canvasWidth - t;
            }
            var a = null != e.y ? e.y : "center";
            switch (a) {
              case "center":
                a = Math.floor((this.canvasHeight - n) / 2);
                break;
              case "top":
                a = 0;
                break;
              case "bottom":
                a = this.canvasHeight - n;
            }
            return { x: i, y: a, width: t, height: n };
          }),
          t
        );
      }
    ),
    n(
      "zrender/Layer",
      ["require", "./mixin/Transformable", "./tool/util", "./config"],
      function (e) {
        function t() {
          return !1;
        }
        function n(e, t, n) {
          var i = document.createElement(t),
            a = n.getWidth(),
            o = n.getHeight();
          return (
            (i.style.position = "absolute"),
            (i.style.left = 0),
            (i.style.top = 0),
            (i.style.width = a + "px"),
            (i.style.height = o + "px"),
            (i.width = a * s.devicePixelRatio),
            (i.height = o * s.devicePixelRatio),
            i.setAttribute("data-zr-dom-id", e),
            i
          );
        }
        var i = e("./mixin/Transformable"),
          a = e("./tool/util"),
          o = window.G_vmlCanvasManager,
          s = e("./config"),
          r = function (e, a) {
            (this.id = e),
              (this.dom = n(e, "canvas", a)),
              (this.dom.onselectstart = t),
              (this.dom.style["-webkit-user-select"] = "none"),
              (this.dom.style["user-select"] = "none"),
              (this.dom.style["-webkit-touch-callout"] = "none"),
              (this.dom.style["-webkit-tap-highlight-color"] = "rgba(0,0,0,0)"),
              o && o.initElement(this.dom),
              (this.domBack = null),
              (this.ctxBack = null),
              (this.painter = a),
              (this.unusedCount = 0),
              (this.config = null),
              (this.dirty = !0),
              (this.elCount = 0),
              (this.clearColor = 0),
              (this.motionBlur = !1),
              (this.lastFrameAlpha = 0.7),
              (this.zoomable = !1),
              (this.panable = !1),
              (this.maxZoom = 1 / 0),
              (this.minZoom = 0),
              i.call(this);
          };
        return (
          (r.prototype.initContext = function () {
            this.ctx = this.dom.getContext("2d");
            var e = s.devicePixelRatio;
            1 != e && this.ctx.scale(e, e);
          }),
          (r.prototype.createBackBuffer = function () {
            if (!o) {
              (this.domBack = n("back-" + this.id, "canvas", this.painter)),
                (this.ctxBack = this.domBack.getContext("2d"));
              var e = s.devicePixelRatio;
              1 != e && this.ctxBack.scale(e, e);
            }
          }),
          (r.prototype.resize = function (e, t) {
            var n = s.devicePixelRatio;
            (this.dom.style.width = e + "px"),
              (this.dom.style.height = t + "px"),
              this.dom.setAttribute("width", e * n),
              this.dom.setAttribute("height", t * n),
              1 != n && this.ctx.scale(n, n),
              this.domBack &&
                (this.domBack.setAttribute("width", e * n),
                this.domBack.setAttribute("height", t * n),
                1 != n && this.ctxBack.scale(n, n));
          }),
          (r.prototype.clear = function () {
            var e = this.dom,
              t = this.ctx,
              n = e.width,
              i = e.height,
              a = this.clearColor && !o,
              r = this.motionBlur && !o,
              l = this.lastFrameAlpha,
              h = s.devicePixelRatio;
            if (
              (r &&
                (this.domBack || this.createBackBuffer(),
                (this.ctxBack.globalCompositeOperation = "copy"),
                this.ctxBack.drawImage(e, 0, 0, n / h, i / h)),
              t.clearRect(0, 0, n / h, i / h),
              a &&
                (t.save(),
                (t.fillStyle = this.clearColor),
                t.fillRect(0, 0, n / h, i / h),
                t.restore()),
              r)
            ) {
              var V = this.domBack;
              t.save(),
                (t.globalAlpha = l),
                t.drawImage(V, 0, 0, n / h, i / h),
                t.restore();
            }
          }),
          a.merge(r.prototype, i.prototype),
          r
        );
      }
    ),
    n(
      "zrender/shape/Text",
      ["require", "../tool/area", "./Base", "../tool/util"],
      function (e) {
        var t = e("../tool/area"),
          n = e("./Base"),
          i = function (e) {
            n.call(this, e);
          };
        return (
          (i.prototype = {
            type: "text",
            brush: function (e, n) {
              var i = this.style;
              if (
                (n &&
                  (i = this.getHighlightStyle(i, this.highlightStyle || {})),
                "undefined" != typeof i.text && i.text !== !1)
              ) {
                e.save(),
                  this.doClip(e),
                  this.setContext(e, i),
                  this.setTransform(e),
                  i.textFont && (e.font = i.textFont),
                  (e.textAlign = i.textAlign || "start"),
                  (e.textBaseline = i.textBaseline || "middle");
                var a,
                  o = (i.text + "").split("\n"),
                  s = t.getTextHeight("国", i.textFont),
                  r = this.getRect(i),
                  l = i.x;
                a =
                  "top" == i.textBaseline
                    ? r.y
                    : "bottom" == i.textBaseline
                    ? r.y + s
                    : r.y + s / 2;
                for (var h = 0, V = o.length; V > h; h++) {
                  if (i.maxWidth)
                    switch (i.brushType) {
                      case "fill":
                        e.fillText(o[h], l, a, i.maxWidth);
                        break;
                      case "stroke":
                        e.strokeText(o[h], l, a, i.maxWidth);
                        break;
                      case "both":
                        e.fillText(o[h], l, a, i.maxWidth),
                          e.strokeText(o[h], l, a, i.maxWidth);
                        break;
                      default:
                        e.fillText(o[h], l, a, i.maxWidth);
                    }
                  else
                    switch (i.brushType) {
                      case "fill":
                        e.fillText(o[h], l, a);
                        break;
                      case "stroke":
                        e.strokeText(o[h], l, a);
                        break;
                      case "both":
                        e.fillText(o[h], l, a), e.strokeText(o[h], l, a);
                        break;
                      default:
                        e.fillText(o[h], l, a);
                    }
                  a += s;
                }
                e.restore();
              }
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var n = t.getTextWidth(e.text, e.textFont),
                i = t.getTextHeight(e.text, e.textFont),
                a = e.x;
              "end" == e.textAlign || "right" == e.textAlign
                ? (a -= n)
                : "center" == e.textAlign && (a -= n / 2);
              var o;
              return (
                (o =
                  "top" == e.textBaseline
                    ? e.y
                    : "bottom" == e.textBaseline
                    ? e.y - i
                    : e.y - i / 2),
                (e.__rect = { x: a, y: o, width: n, height: i }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(i, n),
          i
        );
      }
    ),
    n(
      "zrender/shape/Rectangle",
      ["require", "./Base", "../tool/util"],
      function (e) {
        var t = e("./Base"),
          n = function (e) {
            t.call(this, e);
          };
        return (
          (n.prototype = {
            type: "rectangle",
            _buildRadiusPath: function (e, t) {
              var n,
                i,
                a,
                o,
                s = t.x,
                r = t.y,
                l = t.width,
                h = t.height,
                V = t.radius;
              "number" == typeof V
                ? (n = i = a = o = V)
                : V instanceof Array
                ? 1 === V.length
                  ? (n = i = a = o = V[0])
                  : 2 === V.length
                  ? ((n = a = V[0]), (i = o = V[1]))
                  : 3 === V.length
                  ? ((n = V[0]), (i = o = V[1]), (a = V[2]))
                  : ((n = V[0]), (i = V[1]), (a = V[2]), (o = V[3]))
                : (n = i = a = o = 0);
              var U;
              n + i > l && ((U = n + i), (n *= l / U), (i *= l / U)),
                a + o > l && ((U = a + o), (a *= l / U), (o *= l / U)),
                i + a > h && ((U = i + a), (i *= h / U), (a *= h / U)),
                n + o > h && ((U = n + o), (n *= h / U), (o *= h / U)),
                e.moveTo(s + n, r),
                e.lineTo(s + l - i, r),
                0 !== i && e.quadraticCurveTo(s + l, r, s + l, r + i),
                e.lineTo(s + l, r + h - a),
                0 !== a && e.quadraticCurveTo(s + l, r + h, s + l - a, r + h),
                e.lineTo(s + o, r + h),
                0 !== o && e.quadraticCurveTo(s, r + h, s, r + h - o),
                e.lineTo(s, r + n),
                0 !== n && e.quadraticCurveTo(s, r, s + n, r);
            },
            buildPath: function (e, t) {
              t.radius
                ? this._buildRadiusPath(e, t)
                : (e.moveTo(t.x, t.y),
                  e.lineTo(t.x + t.width, t.y),
                  e.lineTo(t.x + t.width, t.y + t.height),
                  e.lineTo(t.x, t.y + t.height),
                  e.lineTo(t.x, t.y)),
                e.closePath();
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t;
              return (
                (t =
                  "stroke" == e.brushType || "fill" == e.brushType
                    ? e.lineWidth || 1
                    : 0),
                (e.__rect = {
                  x: Math.round(e.x - t / 2),
                  y: Math.round(e.y - t / 2),
                  width: e.width + t,
                  height: e.height + t,
                }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(n, t),
          n
        );
      }
    ),
    n("zrender/tool/area", ["require", "./util"], function (e) {
      "use strict";
      function t(e, t, a, o) {
        if (!t || !e) return !1;
        h = h || V.getContext();
        var s = n(e, t, a, o);
        return "undefined" != typeof s ? s : i(e, h, t, a, o);
      }
      function n(e, t, n, i) {
        var a = e.type;
        switch (a) {
          case "line":
            return o(t.xStart, t.yStart, t.xEnd, t.yEnd, t.lineWidth, n, i);
          case "text":
            var r = t.__rect || e.getRect(t);
            return s(r.x, r.y, r.width, r.height, n, i);
          case "rectangle":
          case "image":
            return s(t.x, t.y, t.width, t.height, n, i);
        }
      }
      function i(e, t, n, i, a) {
        return (
          t.beginPath(), e.buildPath(t, n), t.closePath(), t.isPointInPath(i, a)
        );
      }
      function a(e, n, i, a) {
        return !t(e, n, i, a);
      }
      function o(e, t, n, i, a, o, s) {
        if (0 === a) return !1;
        var r = Math.max(a, 5),
          l = 0,
          h = e;
        if (
          (s > t + r && s > i + r) ||
          (t - r > s && i - r > s) ||
          (o > e + r && o > n + r) ||
          (e - r > o && n - r > o)
        )
          return !1;
        if (e === n) return Math.abs(o - e) <= r / 2;
        (l = (t - i) / (e - n)), (h = (e * i - n * t) / (e - n));
        var V = l * o - s + h,
          U = (V * V) / (l * l + 1);
        return ((r / 2) * r) / 2 >= U;
      }
      function s(e, t, n, i, a, o) {
        return a >= e && e + n >= a && o >= t && t + i >= o;
      }
      function r(e, t) {
        var n = e + ":" + t;
        if (U[n]) return U[n];
        (h = h || V.getContext()),
          h.save(),
          t && (h.font = t),
          (e = (e + "").split("\n"));
        for (var i = 0, a = 0, o = e.length; o > a; a++)
          i = Math.max(h.measureText(e[a]).width, i);
        return h.restore(), (U[n] = i), ++p > c && ((p = 0), (U = {})), i;
      }
      function l(e, t) {
        var n = e + ":" + t;
        if (m[n]) return m[n];
        (h = h || V.getContext()),
          h.save(),
          t && (h.font = t),
          (e = (e + "").split("\n"));
        var i = (h.measureText("国").width + 2) * e.length;
        return h.restore(), (m[n] = i), ++d > c && ((d = 0), (m = {})), i;
      }
      var h,
        V = e("./util"),
        U = {},
        m = {},
        p = 0,
        d = 0,
        c = 5e3;
      return {
        isInside: t,
        isOutside: a,
        getTextWidth: r,
        getTextHeight: l,
        isInsideRect: s,
      };
    }),
    n(
      "zrender/shape/Base",
      [
        "require",
        "../tool/matrix",
        "../tool/guid",
        "../tool/util",
        "../tool/log",
        "../mixin/Transformable",
        "../mixin/Eventful",
        "../tool/area",
        "../tool/color",
      ],
      function (e) {
        function t(t, i, a, o, s, r, l) {
          s && (t.font = s), (t.textAlign = r), (t.textBaseline = l);
          var h = n(i, a, o, s, r, l);
          i = (i + "").split("\n");
          var V = e("../tool/area").getTextHeight("国", s);
          switch (l) {
            case "top":
              o = h.y;
              break;
            case "bottom":
              o = h.y + V;
              break;
            default:
              o = h.y + V / 2;
          }
          for (var U = 0, m = i.length; m > U; U++)
            t.fillText(i[U], a, o), (o += V);
        }
        function n(t, n, i, a, o, s) {
          var r = e("../tool/area"),
            l = r.getTextWidth(t, a),
            h = r.getTextHeight("国", a);
          switch (((t = (t + "").split("\n")), o)) {
            case "end":
            case "right":
              n -= l;
              break;
            case "center":
              n -= l / 2;
          }
          switch (s) {
            case "top":
              break;
            case "bottom":
              i -= h * t.length;
              break;
            default:
              i -= (h * t.length) / 2;
          }
          return { x: n, y: i, width: l, height: h * t.length };
        }
        var i = window.G_vmlCanvasManager,
          a = e("../tool/matrix"),
          o = e("../tool/guid"),
          s = e("../tool/util"),
          r = e("../tool/log"),
          l = e("../mixin/Transformable"),
          h = e("../mixin/Eventful"),
          V = function (e) {
            (e = e || {}), (this.id = e.id || o());
            for (var t in e) this[t] = e[t];
            (this.style = this.style || {}),
              (this.highlightStyle = this.highlightStyle || null),
              (this.parent = null),
              (this.__dirty = !0),
              (this.__clipShapes = []),
              l.call(this),
              h.call(this);
          };
        (V.prototype.invisible = !1),
          (V.prototype.ignore = !1),
          (V.prototype.zlevel = 0),
          (V.prototype.draggable = !1),
          (V.prototype.clickable = !1),
          (V.prototype.hoverable = !0),
          (V.prototype.z = 0),
          (V.prototype.brush = function (e, t) {
            var n = this.beforeBrush(e, t);
            switch ((e.beginPath(), this.buildPath(e, n), n.brushType)) {
              case "both":
                e.fill();
              case "stroke":
                n.lineWidth > 0 && e.stroke();
                break;
              default:
                e.fill();
            }
            this.drawText(e, n, this.style), this.afterBrush(e);
          }),
          (V.prototype.beforeBrush = function (e, t) {
            var n = this.style;
            return (
              this.brushTypeOnly && (n.brushType = this.brushTypeOnly),
              t &&
                (n = this.getHighlightStyle(
                  n,
                  this.highlightStyle || {},
                  this.brushTypeOnly
                )),
              "stroke" == this.brushTypeOnly &&
                (n.strokeColor = n.strokeColor || n.color),
              e.save(),
              this.doClip(e),
              this.setContext(e, n),
              this.setTransform(e),
              n
            );
          }),
          (V.prototype.afterBrush = function (e) {
            e.restore();
          });
        var U = [
          ["color", "fillStyle"],
          ["strokeColor", "strokeStyle"],
          ["opacity", "globalAlpha"],
          ["lineCap", "lineCap"],
          ["lineJoin", "lineJoin"],
          ["miterLimit", "miterLimit"],
          ["lineWidth", "lineWidth"],
          ["shadowBlur", "shadowBlur"],
          ["shadowColor", "shadowColor"],
          ["shadowOffsetX", "shadowOffsetX"],
          ["shadowOffsetY", "shadowOffsetY"],
        ];
        V.prototype.setContext = function (e, t) {
          for (var n = 0, i = U.length; i > n; n++) {
            var a = U[n][0],
              o = t[a],
              s = U[n][1];
            "undefined" != typeof o && (e[s] = o);
          }
        };
        var m = a.create();
        return (
          (V.prototype.doClip = function (e) {
            if (this.__clipShapes && !i)
              for (var t = 0; t < this.__clipShapes.length; t++) {
                var n = this.__clipShapes[t];
                if (n.needTransform) {
                  var o = n.transform;
                  a.invert(m, o),
                    e.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
                }
                if (
                  (e.beginPath(),
                  n.buildPath(e, n.style),
                  e.clip(),
                  n.needTransform)
                ) {
                  var o = m;
                  e.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
                }
              }
          }),
          (V.prototype.getHighlightStyle = function (t, n, i) {
            var a = {};
            for (var o in t) a[o] = t[o];
            var s = e("../tool/color"),
              r = s.getHighlightColor();
            "stroke" != t.brushType
              ? ((a.strokeColor = r),
                (a.lineWidth = (t.lineWidth || 1) + this.getHighlightZoom()),
                (a.brushType = "both"))
              : "stroke" != i
              ? ((a.strokeColor = r),
                (a.lineWidth = (t.lineWidth || 1) + this.getHighlightZoom()))
              : (a.strokeColor =
                  n.strokeColor || s.mix(t.strokeColor, s.toRGB(r)));
            for (var o in n) "undefined" != typeof n[o] && (a[o] = n[o]);
            return a;
          }),
          (V.prototype.getHighlightZoom = function () {
            return "text" != this.type ? 6 : 2;
          }),
          (V.prototype.drift = function (e, t) {
            (this.position[0] += e), (this.position[1] += t);
          }),
          (V.prototype.getTansform = (function () {
            var e = [];
            return function (t, n) {
              var i = [t, n];
              return (
                this.needTransform &&
                  this.transform &&
                  (a.invert(e, this.transform),
                  a.mulVector(i, e, [t, n, 1]),
                  t == i[0] && n == i[1] && this.updateNeedTransform()),
                i
              );
            };
          })()),
          (V.prototype.buildPath = function () {
            r("buildPath not implemented in " + this.type);
          }),
          (V.prototype.getRect = function () {
            r("getRect not implemented in " + this.type);
          }),
          (V.prototype.isCover = function (t, n) {
            var i = this.getTansform(t, n);
            (t = i[0]), (n = i[1]);
            var a = this.style.__rect;
            return (
              a || (a = this.style.__rect = this.getRect(this.style)),
              t >= a.x && t <= a.x + a.width && n >= a.y && n <= a.y + a.height
                ? e("../tool/area").isInside(this, this.style, t, n)
                : !1
            );
          }),
          (V.prototype.drawText = function (e, n, i) {
            if ("undefined" != typeof n.text && n.text !== !1) {
              var a = n.textColor || n.color || n.strokeColor;
              e.fillStyle = a;
              var o,
                s,
                r,
                l,
                h = 10,
                V = n.textPosition || this.textPosition || "top";
              switch (V) {
                case "inside":
                case "top":
                case "bottom":
                case "left":
                case "right":
                  if (this.getRect) {
                    var U = (i || n).__rect || this.getRect(i || n);
                    switch (V) {
                      case "inside":
                        (r = U.x + U.width / 2),
                          (l = U.y + U.height / 2),
                          (o = "center"),
                          (s = "middle"),
                          "stroke" != n.brushType &&
                            a == n.color &&
                            (e.fillStyle = "#fff");
                        break;
                      case "left":
                        (r = U.x - h),
                          (l = U.y + U.height / 2),
                          (o = "end"),
                          (s = "middle");
                        break;
                      case "right":
                        (r = U.x + U.width + h),
                          (l = U.y + U.height / 2),
                          (o = "start"),
                          (s = "middle");
                        break;
                      case "top":
                        (r = U.x + U.width / 2),
                          (l = U.y - h),
                          (o = "center"),
                          (s = "bottom");
                        break;
                      case "bottom":
                        (r = U.x + U.width / 2),
                          (l = U.y + U.height + h),
                          (o = "center"),
                          (s = "top");
                    }
                  }
                  break;
                case "start":
                case "end":
                  var m = n.pointList || [
                      [n.xStart || 0, n.yStart || 0],
                      [n.xEnd || 0, n.yEnd || 0],
                    ],
                    p = m.length;
                  if (2 > p) return;
                  var d, c, u, y;
                  switch (V) {
                    case "start":
                      (d = m[1][0]),
                        (c = m[0][0]),
                        (u = m[1][1]),
                        (y = m[0][1]);
                      break;
                    case "end":
                      (d = m[p - 2][0]),
                        (c = m[p - 1][0]),
                        (u = m[p - 2][1]),
                        (y = m[p - 1][1]);
                  }
                  (r = c), (l = y);
                  var b = (Math.atan((u - y) / (c - d)) / Math.PI) * 180;
                  0 > c - d ? (b += 180) : 0 > u - y && (b += 360),
                    (h = 5),
                    b >= 30 && 150 >= b
                      ? ((o = "center"), (s = "bottom"), (l -= h))
                      : b > 150 && 210 > b
                      ? ((o = "right"), (s = "middle"), (r -= h))
                      : b >= 210 && 330 >= b
                      ? ((o = "center"), (s = "top"), (l += h))
                      : ((o = "left"), (s = "middle"), (r += h));
                  break;
                case "specific":
                  (r = n.textX || 0),
                    (l = n.textY || 0),
                    (o = "start"),
                    (s = "middle");
              }
              null != r &&
                null != l &&
                t(
                  e,
                  n.text,
                  r,
                  l,
                  n.textFont,
                  n.textAlign || o,
                  n.textBaseline || s
                );
            }
          }),
          (V.prototype.modSelf = function () {
            (this.__dirty = !0),
              this.style && (this.style.__rect = null),
              this.highlightStyle && (this.highlightStyle.__rect = null);
          }),
          (V.prototype.isSilent = function () {
            return !(
              this.hoverable ||
              this.draggable ||
              this.clickable ||
              this.onmousemove ||
              this.onmouseover ||
              this.onmouseout ||
              this.onmousedown ||
              this.onmouseup ||
              this.onclick ||
              this.ondragenter ||
              this.ondragover ||
              this.ondragleave ||
              this.ondrop
            );
          }),
          s.merge(V.prototype, l.prototype, !0),
          s.merge(V.prototype, h.prototype, !0),
          V
        );
      }
    ),
    n(
      "zrender/mixin/Transformable",
      ["require", "../tool/matrix", "../tool/vector"],
      function (e) {
        "use strict";
        function t(e) {
          return e > -s && s > e;
        }
        function n(e) {
          return e > s || -s > e;
        }
        var i = e("../tool/matrix"),
          a = e("../tool/vector"),
          o = [0, 0],
          s = 5e-5,
          r = function () {
            this.position || (this.position = [0, 0]),
              "undefined" == typeof this.rotation &&
                (this.rotation = [0, 0, 0]),
              this.scale || (this.scale = [1, 1, 0, 0]),
              (this.needLocalTransform = !1),
              (this.needTransform = !1);
          };
        return (
          (r.prototype = {
            constructor: r,
            updateNeedTransform: function () {
              this.needLocalTransform =
                n(this.rotation[0]) ||
                n(this.position[0]) ||
                n(this.position[1]) ||
                n(this.scale[0] - 1) ||
                n(this.scale[1] - 1);
            },
            updateTransform: function () {
              if (
                (this.updateNeedTransform(),
                (this.needTransform = this.parent
                  ? this.needLocalTransform || this.parent.needTransform
                  : this.needLocalTransform),
                this.needTransform)
              ) {
                var e = this.transform || i.create();
                if ((i.identity(e), this.needLocalTransform)) {
                  if (n(this.scale[0]) || n(this.scale[1])) {
                    (o[0] = -this.scale[2] || 0), (o[1] = -this.scale[3] || 0);
                    var t = n(o[0]) || n(o[1]);
                    t && i.translate(e, e, o),
                      i.scale(e, e, this.scale),
                      t &&
                        ((o[0] = -o[0]), (o[1] = -o[1]), i.translate(e, e, o));
                  }
                  if (this.rotation instanceof Array) {
                    if (0 !== this.rotation[0]) {
                      (o[0] = -this.rotation[1] || 0),
                        (o[1] = -this.rotation[2] || 0);
                      var t = n(o[0]) || n(o[1]);
                      t && i.translate(e, e, o),
                        i.rotate(e, e, this.rotation[0]),
                        t &&
                          ((o[0] = -o[0]),
                          (o[1] = -o[1]),
                          i.translate(e, e, o));
                    }
                  } else 0 !== this.rotation && i.rotate(e, e, this.rotation);
                  (n(this.position[0]) || n(this.position[1])) &&
                    i.translate(e, e, this.position);
                }
                (this.transform = e),
                  this.parent &&
                    this.parent.needTransform &&
                    (this.needLocalTransform
                      ? i.mul(
                          this.transform,
                          this.parent.transform,
                          this.transform
                        )
                      : i.copy(this.transform, this.parent.transform));
              }
            },
            setTransform: function (e) {
              if (this.needTransform) {
                var t = this.transform;
                e.transform(t[0], t[1], t[2], t[3], t[4], t[5]);
              }
            },
            lookAt: (function () {
              var e = a.create();
              return function (n) {
                this.transform || (this.transform = i.create());
                var o = this.transform;
                a.sub(e, n, this.position),
                  (t(e[0]) && t(e[1])) ||
                    (a.normalize(e, e),
                    (o[2] = e[0] * this.scale[1]),
                    (o[3] = e[1] * this.scale[1]),
                    (o[0] = e[1] * this.scale[0]),
                    (o[1] = -e[0] * this.scale[0]),
                    (o[4] = this.position[0]),
                    (o[5] = this.position[1]),
                    this.decomposeTransform());
              };
            })(),
            decomposeTransform: function () {
              if (this.transform) {
                var e = this.transform,
                  t = e[0] * e[0] + e[1] * e[1],
                  i = this.position,
                  a = this.scale,
                  o = this.rotation;
                n(t - 1) && (t = Math.sqrt(t));
                var s = e[2] * e[2] + e[3] * e[3];
                n(s - 1) && (s = Math.sqrt(s)),
                  (i[0] = e[4]),
                  (i[1] = e[5]),
                  (a[0] = t),
                  (a[1] = s),
                  (a[2] = a[3] = 0),
                  (o[0] = Math.atan2(-e[1] / s, e[0] / t)),
                  (o[1] = o[2] = 0);
              }
            },
          }),
          r
        );
      }
    ),
    n(
      "zrender/Group",
      [
        "require",
        "./tool/guid",
        "./tool/util",
        "./mixin/Transformable",
        "./mixin/Eventful",
      ],
      function (e) {
        var t = e("./tool/guid"),
          n = e("./tool/util"),
          i = e("./mixin/Transformable"),
          a = e("./mixin/Eventful"),
          o = function (e) {
            (e = e || {}), (this.id = e.id || t());
            for (var n in e) this[n] = e[n];
            (this.type = "group"),
              (this.clipShape = null),
              (this._children = []),
              (this._storage = null),
              (this.__dirty = !0),
              i.call(this),
              a.call(this);
          };
        return (
          (o.prototype.ignore = !1),
          (o.prototype.children = function () {
            return this._children.slice();
          }),
          (o.prototype.childAt = function (e) {
            return this._children[e];
          }),
          (o.prototype.addChild = function (e) {
            e != this &&
              e.parent != this &&
              (e.parent && e.parent.removeChild(e),
              this._children.push(e),
              (e.parent = this),
              this._storage &&
                this._storage !== e._storage &&
                (this._storage.addToMap(e),
                e instanceof o && e.addChildrenToStorage(this._storage)));
          }),
          (o.prototype.removeChild = function (e) {
            var t = n.indexOf(this._children, e);
            this._children.splice(t, 1),
              (e.parent = null),
              this._storage &&
                (this._storage.delFromMap(e.id),
                e instanceof o && e.delChildrenFromStorage(this._storage));
          }),
          (o.prototype.clearChildren = function () {
            for (var e = 0; e < this._children.length; e++) {
              var t = this._children[e];
              this._storage &&
                (this._storage.delFromMap(t.id),
                t instanceof o && t.delChildrenFromStorage(this._storage));
            }
            this._children.length = 0;
          }),
          (o.prototype.eachChild = function (e, t) {
            for (var n = !!t, i = 0; i < this._children.length; i++) {
              var a = this._children[i];
              n ? e.call(t, a) : e(a);
            }
          }),
          (o.prototype.traverse = function (e, t) {
            for (var n = !!t, i = 0; i < this._children.length; i++) {
              var a = this._children[i];
              n ? e.call(t, a) : e(a), "group" === a.type && a.traverse(e, t);
            }
          }),
          (o.prototype.addChildrenToStorage = function (e) {
            for (var t = 0; t < this._children.length; t++) {
              var n = this._children[t];
              e.addToMap(n), n instanceof o && n.addChildrenToStorage(e);
            }
          }),
          (o.prototype.delChildrenFromStorage = function (e) {
            for (var t = 0; t < this._children.length; t++) {
              var n = this._children[t];
              e.delFromMap(n.id), n instanceof o && n.delChildrenFromStorage(e);
            }
          }),
          (o.prototype.modSelf = function () {
            this.__dirty = !0;
          }),
          n.merge(o.prototype, i.prototype, !0),
          n.merge(o.prototype, a.prototype, !0),
          o
        );
      }
    ),
    n("zrender/animation/Clip", ["require", "./easing"], function (e) {
      function t(e) {
        (this._targetPool = e.target || {}),
          this._targetPool instanceof Array ||
            (this._targetPool = [this._targetPool]),
          (this._life = e.life || 1e3),
          (this._delay = e.delay || 0),
          (this._startTime = new Date().getTime() + this._delay),
          (this._endTime = this._startTime + 1e3 * this._life),
          (this.loop = "undefined" == typeof e.loop ? !1 : e.loop),
          (this.gap = e.gap || 0),
          (this.easing = e.easing || "Linear"),
          (this.onframe = e.onframe),
          (this.ondestroy = e.ondestroy),
          (this.onrestart = e.onrestart);
      }
      var n = e("./easing");
      return (
        (t.prototype = {
          step: function (e) {
            var t = (e - this._startTime) / this._life;
            if (!(0 > t)) {
              t = Math.min(t, 1);
              var i =
                  "string" == typeof this.easing ? n[this.easing] : this.easing,
                a = "function" == typeof i ? i(t) : t;
              return (
                this.fire("frame", a),
                1 == t
                  ? this.loop
                    ? (this.restart(), "restart")
                    : ((this._needsRemove = !0), "destroy")
                  : null
              );
            }
          },
          restart: function () {
            var e = new Date().getTime(),
              t = (e - this._startTime) % this._life;
            (this._startTime = new Date().getTime() - t + this.gap),
              (this._needsRemove = !1);
          },
          fire: function (e, t) {
            for (var n = 0, i = this._targetPool.length; i > n; n++)
              this["on" + e] && this["on" + e](this._targetPool[n], t);
          },
          constructor: t,
        }),
        t
      );
    }),
    n("zrender/animation/easing", [], function () {
      var e = {
        Linear: function (e) {
          return e;
        },
        QuadraticIn: function (e) {
          return e * e;
        },
        QuadraticOut: function (e) {
          return e * (2 - e);
        },
        QuadraticInOut: function (e) {
          return (e *= 2) < 1 ? 0.5 * e * e : -0.5 * (--e * (e - 2) - 1);
        },
        CubicIn: function (e) {
          return e * e * e;
        },
        CubicOut: function (e) {
          return --e * e * e + 1;
        },
        CubicInOut: function (e) {
          return (e *= 2) < 1 ? 0.5 * e * e * e : 0.5 * ((e -= 2) * e * e + 2);
        },
        QuarticIn: function (e) {
          return e * e * e * e;
        },
        QuarticOut: function (e) {
          return 1 - --e * e * e * e;
        },
        QuarticInOut: function (e) {
          return (e *= 2) < 1
            ? 0.5 * e * e * e * e
            : -0.5 * ((e -= 2) * e * e * e - 2);
        },
        QuinticIn: function (e) {
          return e * e * e * e * e;
        },
        QuinticOut: function (e) {
          return --e * e * e * e * e + 1;
        },
        QuinticInOut: function (e) {
          return (e *= 2) < 1
            ? 0.5 * e * e * e * e * e
            : 0.5 * ((e -= 2) * e * e * e * e + 2);
        },
        SinusoidalIn: function (e) {
          return 1 - Math.cos((e * Math.PI) / 2);
        },
        SinusoidalOut: function (e) {
          return Math.sin((e * Math.PI) / 2);
        },
        SinusoidalInOut: function (e) {
          return 0.5 * (1 - Math.cos(Math.PI * e));
        },
        ExponentialIn: function (e) {
          return 0 === e ? 0 : Math.pow(1024, e - 1);
        },
        ExponentialOut: function (e) {
          return 1 === e ? 1 : 1 - Math.pow(2, -10 * e);
        },
        ExponentialInOut: function (e) {
          return 0 === e
            ? 0
            : 1 === e
            ? 1
            : (e *= 2) < 1
            ? 0.5 * Math.pow(1024, e - 1)
            : 0.5 * (-Math.pow(2, -10 * (e - 1)) + 2);
        },
        CircularIn: function (e) {
          return 1 - Math.sqrt(1 - e * e);
        },
        CircularOut: function (e) {
          return Math.sqrt(1 - --e * e);
        },
        CircularInOut: function (e) {
          return (e *= 2) < 1
            ? -0.5 * (Math.sqrt(1 - e * e) - 1)
            : 0.5 * (Math.sqrt(1 - (e -= 2) * e) + 1);
        },
        ElasticIn: function (e) {
          var t,
            n = 0.1,
            i = 0.4;
          return 0 === e
            ? 0
            : 1 === e
            ? 1
            : (!n || 1 > n
                ? ((n = 1), (t = i / 4))
                : (t = (i * Math.asin(1 / n)) / (2 * Math.PI)),
              -(
                n *
                Math.pow(2, 10 * (e -= 1)) *
                Math.sin((2 * (e - t) * Math.PI) / i)
              ));
        },
        ElasticOut: function (e) {
          var t,
            n = 0.1,
            i = 0.4;
          return 0 === e
            ? 0
            : 1 === e
            ? 1
            : (!n || 1 > n
                ? ((n = 1), (t = i / 4))
                : (t = (i * Math.asin(1 / n)) / (2 * Math.PI)),
              n * Math.pow(2, -10 * e) * Math.sin((2 * (e - t) * Math.PI) / i) +
                1);
        },
        ElasticInOut: function (e) {
          var t,
            n = 0.1,
            i = 0.4;
          return 0 === e
            ? 0
            : 1 === e
            ? 1
            : (!n || 1 > n
                ? ((n = 1), (t = i / 4))
                : (t = (i * Math.asin(1 / n)) / (2 * Math.PI)),
              (e *= 2) < 1
                ? -0.5 *
                  n *
                  Math.pow(2, 10 * (e -= 1)) *
                  Math.sin((2 * (e - t) * Math.PI) / i)
                : n *
                    Math.pow(2, -10 * (e -= 1)) *
                    Math.sin((2 * (e - t) * Math.PI) / i) *
                    0.5 +
                  1);
        },
        BackIn: function (e) {
          var t = 1.70158;
          return e * e * ((t + 1) * e - t);
        },
        BackOut: function (e) {
          var t = 1.70158;
          return --e * e * ((t + 1) * e + t) + 1;
        },
        BackInOut: function (e) {
          var t = 2.5949095;
          return (e *= 2) < 1
            ? 0.5 * e * e * ((t + 1) * e - t)
            : 0.5 * ((e -= 2) * e * ((t + 1) * e + t) + 2);
        },
        BounceIn: function (t) {
          return 1 - e.BounceOut(1 - t);
        },
        BounceOut: function (e) {
          return 1 / 2.75 > e
            ? 7.5625 * e * e
            : 2 / 2.75 > e
            ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75
            : 2.5 / 2.75 > e
            ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375
            : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375;
        },
        BounceInOut: function (t) {
          return 0.5 > t
            ? 0.5 * e.BounceIn(2 * t)
            : 0.5 * e.BounceOut(2 * t - 1) + 0.5;
        },
      };
      return e;
    }),
    n(
      "echarts/chart/base",
      [
        "require",
        "zrender/shape/Image",
        "../util/shape/Icon",
        "../util/shape/MarkLine",
        "../util/shape/Symbol",
        "../config",
        "../util/ecData",
        "../util/ecAnimation",
        "../util/ecEffect",
        "../util/accMath",
        "../component/base",
        "zrender/tool/util",
        "zrender/tool/area",
      ],
      function (e) {
        function t(e, t, n, i, a) {
          U.call(this, e, t, n, i, a);
          var o = this;
          (this.selectedMap = {}),
            (this.lastShapeList = []),
            (this.shapeHandler = {
              onclick: function () {
                o.isClick = !0;
              },
              ondragover: function (e) {
                var t = e.target;
                t.highlightStyle = t.highlightStyle || {};
                var n = t.highlightStyle,
                  i = n.brushTyep,
                  a = n.strokeColor,
                  r = n.lineWidth;
                (n.brushType = "stroke"),
                  (n.strokeColor =
                    o.ecTheme.calculableColor || s.calculableColor),
                  (n.lineWidth = "icon" === t.type ? 30 : 10),
                  o.zr.addHoverShape(t),
                  setTimeout(function () {
                    n &&
                      ((n.brushType = i),
                      (n.strokeColor = a),
                      (n.lineWidth = r));
                  }, 20);
              },
              ondrop: function (e) {
                null != r.get(e.dragged, "data") && (o.isDrop = !0);
              },
              ondragend: function () {
                o.isDragend = !0;
              },
            });
        }
        var n = e("zrender/shape/Image"),
          i = e("../util/shape/Icon"),
          a = e("../util/shape/MarkLine"),
          o = e("../util/shape/Symbol"),
          s = e("../config"),
          r = e("../util/ecData"),
          l = e("../util/ecAnimation"),
          h = e("../util/ecEffect"),
          V = e("../util/accMath"),
          U = e("../component/base"),
          m = e("zrender/tool/util"),
          p = e("zrender/tool/area");
        return (
          (t.prototype = {
            setCalculable: function (e) {
              return (
                (e.dragEnableTime =
                  this.ecTheme.DRAG_ENABLE_TIME || s.DRAG_ENABLE_TIME),
                (e.ondragover = this.shapeHandler.ondragover),
                (e.ondragend = this.shapeHandler.ondragend),
                (e.ondrop = this.shapeHandler.ondrop),
                e
              );
            },
            ondrop: function (e, t) {
              if (this.isDrop && e.target && !t.dragIn) {
                var n,
                  i = e.target,
                  a = e.dragged,
                  o = r.get(i, "seriesIndex"),
                  l = r.get(i, "dataIndex"),
                  h = this.series,
                  U = this.component.legend;
                if (-1 === l) {
                  if (r.get(a, "seriesIndex") == o)
                    return (
                      (t.dragOut = t.dragIn = t.needRefresh = !0),
                      void (this.isDrop = !1)
                    );
                  (n = { value: r.get(a, "value"), name: r.get(a, "name") }),
                    this.type === s.CHART_TYPE_PIE &&
                      n.value < 0 &&
                      (n.value = 0);
                  for (
                    var m = !1, p = h[o].data, d = 0, c = p.length;
                    c > d;
                    d++
                  )
                    p[d].name === n.name &&
                      "-" === p[d].value &&
                      ((h[o].data[d].value = n.value), (m = !0));
                  !m && h[o].data.push(n),
                    U && U.add(n.name, a.style.color || a.style.strokeColor);
                } else
                  (n = h[o].data[l] || "-"),
                    null != n.value
                      ? ((h[o].data[l].value =
                          "-" != n.value
                            ? V.accAdd(h[o].data[l].value, r.get(a, "value"))
                            : r.get(a, "value")),
                        (this.type === s.CHART_TYPE_FUNNEL ||
                          this.type === s.CHART_TYPE_PIE) &&
                          (U &&
                            1 === U.getRelatedAmount(n.name) &&
                            this.component.legend.del(n.name),
                          (n.name +=
                            this.option.nameConnector + r.get(a, "name")),
                          U &&
                            U.add(
                              n.name,
                              a.style.color || a.style.strokeColor
                            )))
                      : (h[o].data[l] =
                          "-" != n
                            ? V.accAdd(h[o].data[l], r.get(a, "value"))
                            : r.get(a, "value"));
                (t.dragIn = t.dragIn || !0), (this.isDrop = !1);
                var u = this;
                setTimeout(function () {
                  u.zr.trigger("mousemove", e.event);
                }, 300);
              }
            },
            ondragend: function (e, t) {
              if (this.isDragend && e.target && !t.dragOut) {
                var n = e.target,
                  i = r.get(n, "seriesIndex"),
                  a = r.get(n, "dataIndex"),
                  o = this.series;
                if (null != o[i].data[a].value) {
                  o[i].data[a].value = "-";
                  var s = o[i].data[a].name,
                    l = this.component.legend;
                  l && 0 === l.getRelatedAmount(s) && l.del(s);
                } else o[i].data[a] = "-";
                (t.dragOut = !0), (t.needRefresh = !0), (this.isDragend = !1);
              }
            },
            onlegendSelected: function (e, t) {
              var n = e.selected;
              for (var i in this.selectedMap)
                this.selectedMap[i] != n[i] && (t.needRefresh = !0),
                  (this.selectedMap[i] = n[i]);
            },
            _buildPosition: function () {
              (this._symbol = this.option.symbolList),
                (this._sIndex2ShapeMap = {}),
                (this._sIndex2ColorMap = {}),
                (this.selectedMap = {}),
                (this.xMarkMap = {});
              for (
                var e,
                  t,
                  n,
                  i,
                  a = this.series,
                  o = { top: [], bottom: [], left: [], right: [], other: [] },
                  r = 0,
                  l = a.length;
                l > r;
                r++
              )
                a[r].type === this.type &&
                  ((a[r] = this.reformOption(a[r])),
                  (this.legendHoverLink =
                    a[r].legendHoverLink || this.legendHoverLink),
                  (e = a[r].xAxisIndex),
                  (t = a[r].yAxisIndex),
                  (n = this.component.xAxis.getAxis(e)),
                  (i = this.component.yAxis.getAxis(t)),
                  n.type === s.COMPONENT_TYPE_AXIS_CATEGORY
                    ? o[n.getPosition()].push(r)
                    : i.type === s.COMPONENT_TYPE_AXIS_CATEGORY
                    ? o[i.getPosition()].push(r)
                    : o.other.push(r));
              for (var h in o)
                o[h].length > 0 && this._buildSinglePosition(h, o[h]);
              this.addShapeList();
            },
            _buildSinglePosition: function (e, t) {
              var n = this._mapData(t),
                i = n.locationMap,
                a = n.maxDataLength;
              if (0 !== a && 0 !== i.length) {
                switch (e) {
                  case "bottom":
                  case "top":
                    this._buildHorizontal(t, a, i, this.xMarkMap);
                    break;
                  case "left":
                  case "right":
                    this._buildVertical(t, a, i, this.xMarkMap);
                    break;
                  case "other":
                    this._buildOther(t, a, i, this.xMarkMap);
                }
                for (var o = 0, s = t.length; s > o; o++) this.buildMark(t[o]);
              }
            },
            _mapData: function (e) {
              for (
                var t,
                  n,
                  i,
                  a,
                  o = this.series,
                  r = 0,
                  l = {},
                  h = "__kener__stack__",
                  V = this.component.legend,
                  U = [],
                  m = 0,
                  p = 0,
                  d = e.length;
                d > p;
                p++
              ) {
                if (
                  ((t = o[e[p]]),
                  (i = t.name),
                  (this._sIndex2ShapeMap[e[p]] =
                    this._sIndex2ShapeMap[e[p]] ||
                    this.query(t, "symbol") ||
                    this._symbol[p % this._symbol.length]),
                  V)
                ) {
                  if (
                    ((this.selectedMap[i] = V.isSelected(i)),
                    (this._sIndex2ColorMap[e[p]] = V.getColor(i)),
                    (a = V.getItemShape(i)))
                  ) {
                    var c = a.style;
                    if (this.type == s.CHART_TYPE_LINE)
                      (c.iconType = "legendLineIcon"),
                        (c.symbol = this._sIndex2ShapeMap[e[p]]);
                    else if (t.itemStyle.normal.barBorderWidth > 0) {
                      var u = a.highlightStyle;
                      (c.brushType = "both"),
                        (c.x += 1),
                        (c.y += 1),
                        (c.width -= 2),
                        (c.height -= 2),
                        (c.strokeColor = u.strokeColor =
                          t.itemStyle.normal.barBorderColor),
                        (u.lineWidth = 3);
                    }
                    V.setItemShape(i, a);
                  }
                } else
                  (this.selectedMap[i] = !0),
                    (this._sIndex2ColorMap[e[p]] = this.zr.getColor(e[p]));
                this.selectedMap[i] &&
                  ((n = t.stack || h + e[p]),
                  null == l[n]
                    ? ((l[n] = r), (U[r] = [e[p]]), r++)
                    : U[l[n]].push(e[p])),
                  (m = Math.max(m, t.data.length));
              }
              return { locationMap: U, maxDataLength: m };
            },
            _calculMarkMapXY: function (e, t, n) {
              for (var i = this.series, a = 0, o = t.length; o > a; a++)
                for (var s = 0, r = t[a].length; r > s; s++) {
                  var l = t[a][s],
                    h = "xy" == n ? 0 : "",
                    V = this.component.grid,
                    U = e[l];
                  if ("-1" != n.indexOf("x")) {
                    U["counter" + h] > 0 &&
                      (U["average" + h] = U["sum" + h] / U["counter" + h]);
                    var m = this.component.xAxis
                      .getAxis(i[l].xAxisIndex || 0)
                      .getCoord(U["average" + h]);
                    (U["averageLine" + h] = [
                      [m, V.getYend()],
                      [m, V.getY()],
                    ]),
                      (U["minLine" + h] = [
                        [U["minX" + h], V.getYend()],
                        [U["minX" + h], V.getY()],
                      ]),
                      (U["maxLine" + h] = [
                        [U["maxX" + h], V.getYend()],
                        [U["maxX" + h], V.getY()],
                      ]),
                      (U.isHorizontal = !1);
                  }
                  if (((h = "xy" == n ? 1 : ""), "-1" != n.indexOf("y"))) {
                    U["counter" + h] > 0 &&
                      (U["average" + h] = U["sum" + h] / U["counter" + h]);
                    var p = this.component.yAxis
                      .getAxis(i[l].yAxisIndex || 0)
                      .getCoord(U["average" + h]);
                    (U["averageLine" + h] = [
                      [V.getX(), p],
                      [V.getXend(), p],
                    ]),
                      (U["minLine" + h] = [
                        [V.getX(), U["minY" + h]],
                        [V.getXend(), U["minY" + h]],
                      ]),
                      (U["maxLine" + h] = [
                        [V.getX(), U["maxY" + h]],
                        [V.getXend(), U["maxY" + h]],
                      ]),
                      (U.isHorizontal = !0);
                  }
                }
            },
            addLabel: function (e, t, n, i, a) {
              var o = [n, t],
                s = this.deepMerge(o, "itemStyle.normal.label"),
                r = this.deepMerge(o, "itemStyle.emphasis.label"),
                l = s.textStyle || {},
                h = r.textStyle || {};
              if (s.show) {
                var V = e.style;
                (V.text = this._getLabelText(t, n, i, "normal")),
                  (V.textPosition =
                    null == s.position
                      ? "horizontal" === a
                        ? "right"
                        : "top"
                      : s.position),
                  (V.textColor = l.color),
                  (V.textFont = this.getFont(l)),
                  (V.textAlign = l.align),
                  (V.textBaseline = l.baseline);
              }
              if (r.show) {
                var U = e.highlightStyle;
                (U.text = this._getLabelText(t, n, i, "emphasis")),
                  (U.textPosition = s.show
                    ? e.style.textPosition
                    : null == r.position
                    ? "horizontal" === a
                      ? "right"
                      : "top"
                    : r.position),
                  (U.textColor = h.color),
                  (U.textFont = this.getFont(h)),
                  (U.textAlign = h.align),
                  (U.textBaseline = h.baseline);
              }
              return e;
            },
            _getLabelText: function (e, t, n, i) {
              var a = this.deepQuery(
                [t, e],
                "itemStyle." + i + ".label.formatter"
              );
              a ||
                "emphasis" !== i ||
                (a = this.deepQuery(
                  [t, e],
                  "itemStyle.normal.label.formatter"
                ));
              var o = this.getDataFromOption(t, "-");
              return a
                ? "function" == typeof a
                  ? a.call(this.myChart, {
                      seriesName: e.name,
                      series: e,
                      name: n,
                      value: o,
                      data: t,
                      status: i,
                    })
                  : "string" == typeof a
                  ? (a = a
                      .replace("{a}", "{a0}")
                      .replace("{b}", "{b0}")
                      .replace("{c}", "{c0}")
                      .replace("{a0}", e.name)
                      .replace("{b0}", n)
                      .replace("{c0}", this.numAddCommas(o)))
                  : void 0
                : o instanceof Array
                ? null != o[2]
                  ? this.numAddCommas(o[2])
                  : o[0] + " , " + o[1]
                : this.numAddCommas(o);
            },
            buildMark: function (e) {
              var t = this.series[e];
              this.selectedMap[t.name] &&
                (t.markLine && this._buildMarkLine(e),
                t.markPoint && this._buildMarkPoint(e));
            },
            _buildMarkPoint: function (e) {
              for (
                var t,
                  n,
                  i = (this.markAttachStyle || {})[e],
                  a = this.series[e],
                  o = m.clone(a.markPoint),
                  r = 0,
                  l = o.data.length;
                l > r;
                r++
              )
                (t = o.data[r]),
                  (n = this.getMarkCoord(e, t)),
                  (t.x = null != t.x ? t.x : n[0]),
                  (t.y = null != t.y ? t.y : n[1]),
                  !t.type ||
                    ("max" !== t.type && "min" !== t.type) ||
                    ((t.value = n[3]),
                    (t.name = t.name || t.type),
                    (t.symbolSize =
                      t.symbolSize ||
                      p.getTextWidth(n[3], this.getFont()) / 2 + 5));
              for (
                var h = this._markPoint(e, o), r = 0, l = h.length;
                l > r;
                r++
              ) {
                var V = h[r];
                (V.zlevel = this.getZlevelBase()), (V.z = this.getZBase() + 1);
                for (var U in i) V[U] = m.clone(i[U]);
                this.shapeList.push(V);
              }
              if (
                this.type === s.CHART_TYPE_FORCE ||
                this.type === s.CHART_TYPE_CHORD
              )
                for (var r = 0, l = h.length; l > r; r++)
                  this.zr.addShape(h[r]);
            },
            _buildMarkLine: function (e) {
              for (
                var t,
                  n = (this.markAttachStyle || {})[e],
                  i = this.series[e],
                  a = m.clone(i.markLine),
                  o = 0,
                  r = a.data.length;
                r > o;
                o++
              ) {
                var l = a.data[o];
                !l.type ||
                ("max" !== l.type && "min" !== l.type && "average" !== l.type)
                  ? (t = [
                      this.getMarkCoord(e, l[0]),
                      this.getMarkCoord(e, l[1]),
                    ])
                  : ((t = this.getMarkCoord(e, l)),
                    (a.data[o] = [m.clone(l), {}]),
                    (a.data[o][0].name = l.name || l.type),
                    (a.data[o][0].value =
                      "average" !== l.type
                        ? t[3]
                        : +t[3].toFixed(
                            null != a.precision
                              ? a.precision
                              : this.deepQuery(
                                  [this.ecTheme, s],
                                  "markLine.precision"
                                )
                          )),
                    (t = t[2]),
                    (l = [{}, {}])),
                  null != t &&
                    null != t[0] &&
                    null != t[1] &&
                    ((a.data[o][0].x = null != l[0].x ? l[0].x : t[0][0]),
                    (a.data[o][0].y = null != l[0].y ? l[0].y : t[0][1]),
                    (a.data[o][1].x = null != l[1].x ? l[1].x : t[1][0]),
                    (a.data[o][1].y = null != l[1].y ? l[1].y : t[1][1]));
              }
              for (
                var h = this._markLine(e, a), o = 0, r = h.length;
                r > o;
                o++
              ) {
                var V = h[o];
                (V.zlevel = this.getZlevelBase()), (V.z = this.getZBase() + 1);
                for (var U in n) V[U] = m.clone(n[U]);
                this.shapeList.push(V);
              }
              if (
                this.type === s.CHART_TYPE_FORCE ||
                this.type === s.CHART_TYPE_CHORD
              )
                for (var o = 0, r = h.length; r > o; o++)
                  this.zr.addShape(h[o]);
            },
            _markPoint: function (e, t) {
              var n = this.series[e],
                i = this.component;
              m.merge(
                m.merge(t, m.clone(this.ecTheme.markPoint || {})),
                m.clone(s.markPoint)
              ),
                (t.name = n.name);
              var a,
                o,
                l,
                h,
                V,
                U,
                p,
                d = [],
                c = t.data,
                u = i.dataRange,
                y = i.legend,
                b = this.zr.getWidth(),
                g = this.zr.getHeight();
              if (t.large)
                (a = this.getLargeMarkPoingShape(e, t)),
                  (a._mark = "largePoint"),
                  a && d.push(a);
              else
                for (var k = 0, f = c.length; f > k; k++)
                  null != c[k].x &&
                    null != c[k].y &&
                    ((l = null != c[k].value ? c[k].value : ""),
                    y && (o = y.getColor(n.name)),
                    (u &&
                      ((o = isNaN(l) ? o : u.getColor(l)),
                      (h = [c[k], t]),
                      (V = this.deepQuery(h, "itemStyle.normal.color") || o),
                      (U = this.deepQuery(h, "itemStyle.emphasis.color") || V),
                      null == V && null == U)) ||
                      ((o = null == o ? this.zr.getColor(e) : o),
                      (c[k].tooltip = c[k].tooltip ||
                        t.tooltip || { trigger: "item" }),
                      (c[k].name = null != c[k].name ? c[k].name : ""),
                      (c[k].value = l),
                      (a = this.getSymbolShape(
                        t,
                        e,
                        c[k],
                        k,
                        c[k].name,
                        this.parsePercent(c[k].x, b),
                        this.parsePercent(c[k].y, g),
                        "pin",
                        o,
                        "rgba(0,0,0,0)",
                        "horizontal"
                      )),
                      (a._mark = "point"),
                      (p = this.deepMerge([c[k], t], "effect")),
                      p.show && (a.effect = p),
                      n.type === s.CHART_TYPE_MAP &&
                        (a._geo = this.getMarkGeo(c[k])),
                      r.pack(a, n, e, c[k], k, c[k].name, l),
                      d.push(a)));
              return d;
            },
            _markLine: function (e, t) {
              var n = this.series[e],
                i = this.component;
              m.merge(
                m.merge(t, m.clone(this.ecTheme.markLine || {})),
                m.clone(s.markLine)
              ),
                (t.symbol =
                  t.symbol instanceof Array
                    ? t.symbol.length > 1
                      ? t.symbol
                      : [t.symbol[0], t.symbol[0]]
                    : [t.symbol, t.symbol]),
                (t.symbolSize =
                  t.symbolSize instanceof Array
                    ? t.symbolSize.length > 1
                      ? t.symbolSize
                      : [t.symbolSize[0], t.symbolSize[0]]
                    : [t.symbolSize, t.symbolSize]),
                (t.symbolRotate =
                  t.symbolRotate instanceof Array
                    ? t.symbolRotate.length > 1
                      ? t.symbolRotate
                      : [t.symbolRotate[0], t.symbolRotate[0]]
                    : [t.symbolRotate, t.symbolRotate]),
                (t.name = n.name);
              for (
                var a,
                  o,
                  l,
                  h,
                  V,
                  U,
                  p,
                  d,
                  c = [],
                  u = t.data,
                  y = i.dataRange,
                  b = i.legend,
                  g = this.zr.getWidth(),
                  k = this.zr.getHeight(),
                  f = 0,
                  L = u.length;
                L > f;
                f++
              ) {
                var x = u[f];
                null != x[0].x &&
                  null != x[0].y &&
                  null != x[1].x &&
                  null != x[1].y &&
                  ((o = b ? b.getColor(n.name) : this.zr.getColor(e)),
                  (d = this.deepMerge(x)),
                  (l = null != d.value ? d.value : ""),
                  (y &&
                    ((o = isNaN(l) ? o : y.getColor(l)),
                    (h = [d, t]),
                    (V = this.deepQuery(h, "itemStyle.normal.color") || o),
                    (U = this.deepQuery(h, "itemStyle.emphasis.color") || V),
                    null == V && null == U)) ||
                    ((x[0].tooltip = d.tooltip ||
                      t.tooltip || { trigger: "item" }),
                    (x[0].name = null != x[0].name ? x[0].name : ""),
                    (x[1].name = null != x[1].name ? x[1].name : ""),
                    (x[0].value = l),
                    (a = this.getLineMarkShape(
                      t,
                      e,
                      x,
                      f,
                      this.parsePercent(x[0].x, g),
                      this.parsePercent(x[0].y, k),
                      this.parsePercent(x[1].x, g),
                      this.parsePercent(x[1].y, k),
                      o
                    )),
                    (a._mark = "line"),
                    (p = this.deepMerge([d, t], "effect")),
                    p.show && (a.effect = p),
                    n.type === s.CHART_TYPE_MAP &&
                      (a._geo = [this.getMarkGeo(x[0]), this.getMarkGeo(x[1])]),
                    r.pack(
                      a,
                      n,
                      e,
                      x[0],
                      f,
                      x[0].name + ("" !== x[1].name ? " > " + x[1].name : ""),
                      l
                    ),
                    c.push(a)));
              }
              return c;
            },
            getMarkCoord: function () {
              return [0, 0];
            },
            getSymbolShape: function (e, t, a, o, s, l, h, V, U, m, p) {
              var d = [a, e],
                c = this.getDataFromOption(a, "-");
              V = this.deepQuery(d, "symbol") || V;
              var u = this.deepQuery(d, "symbolSize");
              u = "function" == typeof u ? u(c) : u;
              var y = this.deepQuery(d, "symbolRotate"),
                b = this.deepMerge(d, "itemStyle.normal"),
                g = this.deepMerge(d, "itemStyle.emphasis"),
                k =
                  null != b.borderWidth
                    ? b.borderWidth
                    : b.lineStyle && b.lineStyle.width;
              null == k && (k = V.match("empty") ? 2 : 0);
              var f =
                null != g.borderWidth
                  ? g.borderWidth
                  : g.lineStyle && g.lineStyle.width;
              null == f && (f = k + 2);
              var L = new i({
                style: {
                  iconType: V.replace("empty", "").toLowerCase(),
                  x: l - u,
                  y: h - u,
                  width: 2 * u,
                  height: 2 * u,
                  brushType: "both",
                  color: V.match("empty")
                    ? m
                    : this.getItemStyleColor(b.color, t, o, a) || U,
                  strokeColor:
                    b.borderColor ||
                    this.getItemStyleColor(b.color, t, o, a) ||
                    U,
                  lineWidth: k,
                },
                highlightStyle: {
                  color: V.match("empty")
                    ? m
                    : this.getItemStyleColor(g.color, t, o, a),
                  strokeColor:
                    g.borderColor ||
                    b.borderColor ||
                    this.getItemStyleColor(b.color, t, o, a) ||
                    U,
                  lineWidth: f,
                },
                clickable: this.deepQuery(d, "clickable"),
              });
              return (
                V.match("image") &&
                  ((L.style.image = V.replace(new RegExp("^image:\\/\\/"), "")),
                  (L = new n({
                    style: L.style,
                    highlightStyle: L.highlightStyle,
                    clickable: this.deepQuery(d, "clickable"),
                  }))),
                null != y && (L.rotation = [(y * Math.PI) / 180, l, h]),
                V.match("star") &&
                  ((L.style.iconType = "star"),
                  (L.style.n =
                    V.replace("empty", "").replace("star", "") - 0 || 5)),
                "none" === V && ((L.invisible = !0), (L.hoverable = !1)),
                (L = this.addLabel(L, e, a, s, p)),
                V.match("empty") &&
                  (null == L.style.textColor &&
                    (L.style.textColor = L.style.strokeColor),
                  null == L.highlightStyle.textColor &&
                    (L.highlightStyle.textColor =
                      L.highlightStyle.strokeColor)),
                r.pack(L, e, t, a, o, s),
                (L._x = l),
                (L._y = h),
                (L._dataIndex = o),
                (L._seriesIndex = t),
                L
              );
            },
            getLineMarkShape: function (e, t, n, i, o, s, r, l, h) {
              var V = null != n[0].value ? n[0].value : "-",
                U = null != n[1].value ? n[1].value : "-",
                m = [
                  this.query(n[0], "symbol") || e.symbol[0],
                  this.query(n[1], "symbol") || e.symbol[1],
                ],
                p = [
                  this.query(n[0], "symbolSize") || e.symbolSize[0],
                  this.query(n[1], "symbolSize") || e.symbolSize[1],
                ];
              (p[0] = "function" == typeof p[0] ? p[0](V) : p[0]),
                (p[1] = "function" == typeof p[1] ? p[1](U) : p[1]);
              var d = [
                  this.query(n[0], "symbolRotate") || e.symbolRotate[0],
                  this.query(n[1], "symbolRotate") || e.symbolRotate[1],
                ],
                c = [n[0], n[1], e],
                u = this.deepMerge(c, "itemStyle.normal");
              u.color = this.getItemStyleColor(u.color, t, i, n);
              var y = this.deepMerge(c, "itemStyle.emphasis");
              y.color = this.getItemStyleColor(y.color, t, i, n);
              var b = u.lineStyle,
                g = y.lineStyle,
                k = b.width;
              null == k && (k = u.borderWidth);
              var f = g.width;
              null == f && (f = null != y.borderWidth ? y.borderWidth : k + 2);
              var L = new a({
                style: {
                  smooth: this.deepQuery([n[0], n[1], e], "smooth")
                    ? "spline"
                    : !1,
                  smoothRadian: this.deepQuery([n[0], n[1], e], "smoothRadian"),
                  symbol: m,
                  symbolSize: p,
                  symbolRotate: d,
                  xStart: o,
                  yStart: s,
                  xEnd: r,
                  yEnd: l,
                  brushType: "both",
                  lineType: b.type,
                  shadowColor:
                    b.shadowColor || b.color || u.borderColor || u.color || h,
                  shadowBlur: b.shadowBlur,
                  shadowOffsetX: b.shadowOffsetX,
                  shadowOffsetY: b.shadowOffsetY,
                  color: u.color || h,
                  strokeColor: b.color || u.borderColor || u.color || h,
                  lineWidth: k,
                  symbolBorderColor: u.borderColor || u.color || h,
                  symbolBorder: u.borderWidth,
                },
                highlightStyle: {
                  shadowColor: g.shadowColor,
                  shadowBlur: g.shadowBlur,
                  shadowOffsetX: g.shadowOffsetX,
                  shadowOffsetY: g.shadowOffsetY,
                  color: y.color || u.color || h,
                  strokeColor:
                    g.color ||
                    b.color ||
                    y.borderColor ||
                    u.borderColor ||
                    y.color ||
                    u.color ||
                    h,
                  lineWidth: f,
                  symbolBorderColor:
                    y.borderColor || u.borderColor || y.color || u.color || h,
                  symbolBorder:
                    null == y.borderWidth ? u.borderWidth + 2 : y.borderWidth,
                },
                clickable: this.deepQuery(c, "clickable"),
              });
              return (
                (L = this.addLabel(L, e, n[0], n[0].name + " : " + n[1].name)),
                (L._x = r),
                (L._y = l),
                L
              );
            },
            getLargeMarkPoingShape: function (e, t) {
              var n,
                i,
                a,
                s,
                r,
                l,
                h = this.series[e],
                V = this.component,
                U = t.data,
                m = V.dataRange,
                p = V.legend,
                d = [U[0], t];
              if (
                (p && (i = p.getColor(h.name)),
                !m ||
                  ((a = null != U[0].value ? U[0].value : ""),
                  (i = isNaN(a) ? i : m.getColor(a)),
                  (s = this.deepQuery(d, "itemStyle.normal.color") || i),
                  (r = this.deepQuery(d, "itemStyle.emphasis.color") || s),
                  null != s || null != r))
              ) {
                i = this.deepMerge(d, "itemStyle.normal").color || i;
                var c = this.deepQuery(d, "symbol") || "circle";
                (c = c.replace("empty", "").replace(/\d/g, "")),
                  (l = this.deepMerge([U[0], t], "effect"));
                var u = window.devicePixelRatio || 1;
                return (
                  (n = new o({
                    style: {
                      pointList: U,
                      color: i,
                      strokeColor: i,
                      shadowColor: l.shadowColor || i,
                      shadowBlur: (null != l.shadowBlur ? l.shadowBlur : 8) * u,
                      size: this.deepQuery(d, "symbolSize"),
                      iconType: c,
                      brushType: "fill",
                      lineWidth: 1,
                    },
                    draggable: !1,
                    hoverable: !1,
                  })),
                  l.show && (n.effect = l),
                  n
                );
              }
            },
            backupShapeList: function () {
              this.shapeList && this.shapeList.length > 0
                ? ((this.lastShapeList = this.shapeList), (this.shapeList = []))
                : (this.lastShapeList = []);
            },
            addShapeList: function () {
              var e,
                t,
                n = this.option.animationThreshold / 2,
                i = this.lastShapeList,
                a = this.shapeList,
                o = i.length > 0,
                r = o
                  ? this.query(this.option, "animationDurationUpdate")
                  : this.query(this.option, "animationDuration"),
                l = this.query(this.option, "animationEasing"),
                h = {},
                V = {};
              if (
                this.option.animation &&
                !this.option.renderAsImage &&
                a.length < n &&
                !this.motionlessOnce
              ) {
                for (var U = 0, m = i.length; m > U; U++)
                  (t = this._getAnimationKey(i[U])),
                    t.match("undefined")
                      ? this.zr.delShape(i[U].id)
                      : ((t += i[U].type),
                        h[t] ? this.zr.delShape(i[U].id) : (h[t] = i[U]));
                for (var U = 0, m = a.length; m > U; U++)
                  (t = this._getAnimationKey(a[U])),
                    t.match("undefined")
                      ? this.zr.addShape(a[U])
                      : ((t += a[U].type), (V[t] = a[U]));
                for (t in h) V[t] || this.zr.delShape(h[t].id);
                for (t in V)
                  h[t]
                    ? (this.zr.delShape(h[t].id),
                      this._animateMod(h[t], V[t], r, l, 0, o))
                    : ((e =
                        (this.type != s.CHART_TYPE_LINE &&
                          this.type != s.CHART_TYPE_RADAR) ||
                        0 === t.indexOf("icon")
                          ? 0
                          : r / 2),
                      this._animateMod(!1, V[t], r, l, e, o));
                this.zr.refresh(), this.animationEffect();
              } else {
                (this.motionlessOnce = !1), this.zr.delShape(i);
                for (var U = 0, m = a.length; m > U; U++)
                  this.zr.addShape(a[U]);
              }
            },
            _getAnimationKey: function (e) {
              return this.type != s.CHART_TYPE_MAP
                ? r.get(e, "seriesIndex") +
                    "_" +
                    r.get(e, "dataIndex") +
                    (e._mark ? e._mark : "") +
                    (this.type === s.CHART_TYPE_RADAR
                      ? r.get(e, "special")
                      : "")
                : r.get(e, "seriesIndex") +
                    "_" +
                    r.get(e, "dataIndex") +
                    (e._mark ? e._mark : "undefined");
            },
            _animateMod: function (e, t, n, i, a, o) {
              switch (t.type) {
                case "polyline":
                case "half-smooth-polygon":
                  l.pointList(this.zr, e, t, n, i);
                  break;
                case "rectangle":
                  l.rectangle(this.zr, e, t, n, i);
                  break;
                case "image":
                case "icon":
                  l.icon(this.zr, e, t, n, i, a);
                  break;
                case "candle":
                  o ? this.zr.addShape(t) : l.candle(this.zr, e, t, n, i);
                  break;
                case "ring":
                case "sector":
                case "circle":
                  o
                    ? "sector" === t.type
                      ? l.sector(this.zr, e, t, n, i)
                      : this.zr.addShape(t)
                    : l.ring(
                        this.zr,
                        e,
                        t,
                        n + ((r.get(t, "dataIndex") || 0) % 20) * 100,
                        i
                      );
                  break;
                case "text":
                  l.text(this.zr, e, t, n, i);
                  break;
                case "polygon":
                  o
                    ? l.pointList(this.zr, e, t, n, i)
                    : l.polygon(this.zr, e, t, n, i);
                  break;
                case "ribbon":
                  l.ribbon(this.zr, e, t, n, i);
                  break;
                case "gauge-pointer":
                  l.gaugePointer(this.zr, e, t, n, i);
                  break;
                case "mark-line":
                  l.markline(this.zr, e, t, n, i);
                  break;
                case "bezier-curve":
                case "line":
                  l.line(this.zr, e, t, n, i);
                  break;
                default:
                  this.zr.addShape(t);
              }
            },
            animationMark: function (e, t, n) {
              for (var i = n || this.shapeList, a = 0, o = i.length; o > a; a++)
                i[a]._mark && this._animateMod(!1, i[a], e, t, 0, !0);
              this.animationEffect(n);
            },
            animationEffect: function (e) {
              !e && this.clearEffectShape();
              var t = e || this.shapeList;
              if (null != t) {
                var n = s.EFFECT_ZLEVEL;
                this.zr.modLayer(n, { motionBlur: !0, lastFrameAlpha: 0.95 });
                for (var i, a = 0, o = t.length; o > a; a++)
                  (i = t[a]),
                    i._mark &&
                      i.effect &&
                      i.effect.show &&
                      h[i._mark] &&
                      (h[i._mark](this.zr, this.effectList, i, n),
                      (this.effectList[this.effectList.length - 1]._mark =
                        i._mark));
              }
            },
            clearEffectShape: function (e) {
              this.zr &&
                this.effectList &&
                this.effectList.length > 0 &&
                (e && this.zr.modLayer(s.EFFECT_ZLEVEL, { motionBlur: !1 }),
                this.zr.delShape(this.effectList)),
                (this.effectList = []);
            },
            addMark: function (e, t, n) {
              var i = this.series[e];
              if (this.selectedMap[i.name]) {
                var a = this.query(this.option, "animationDurationUpdate"),
                  o = this.query(this.option, "animationEasing"),
                  s = i[n].data,
                  r = this.shapeList.length;
                if (
                  ((i[n].data = t.data),
                  this["_build" + n.replace("m", "M")](e),
                  this.option.animation && !this.option.renderAsImage)
                )
                  this.animationMark(a, o, this.shapeList.slice(r));
                else {
                  for (var l = r, h = this.shapeList.length; h > l; l++)
                    this.zr.addShape(this.shapeList[l]);
                  this.zr.refreshNextFrame();
                }
                i[n].data = s;
              }
            },
            delMark: function (e, t, n) {
              n = n.replace("mark", "").replace("large", "").toLowerCase();
              var i = this.series[e];
              if (this.selectedMap[i.name]) {
                for (
                  var a = !1, o = [this.shapeList, this.effectList], s = 2;
                  s--;

                )
                  for (var l = 0, h = o[s].length; h > l; l++)
                    if (
                      o[s][l]._mark == n &&
                      r.get(o[s][l], "seriesIndex") == e &&
                      r.get(o[s][l], "name") == t
                    ) {
                      this.zr.delShape(o[s][l].id), o[s].splice(l, 1), (a = !0);
                      break;
                    }
                a && this.zr.refreshNextFrame();
              }
            },
          }),
          m.inherits(t, U),
          t
        );
      }
    ),
    n("zrender/shape/Circle", ["require", "./Base", "../tool/util"], function (
      e
    ) {
      "use strict";
      var t = e("./Base"),
        n = function (e) {
          t.call(this, e);
        };
      return (
        (n.prototype = {
          type: "circle",
          buildPath: function (e, t) {
            e.arc(t.x, t.y, t.r, 0, 2 * Math.PI, !0);
          },
          getRect: function (e) {
            if (e.__rect) return e.__rect;
            var t;
            return (
              (t =
                "stroke" == e.brushType || "fill" == e.brushType
                  ? e.lineWidth || 1
                  : 0),
              (e.__rect = {
                x: Math.round(e.x - e.r - t / 2),
                y: Math.round(e.y - e.r - t / 2),
                width: 2 * e.r + t,
                height: 2 * e.r + t,
              }),
              e.__rect
            );
          },
        }),
        e("../tool/util").inherits(n, t),
        n
      );
    }),
    n("echarts/util/accMath", [], function () {
      function e(e, t) {
        var n = e.toString(),
          i = t.toString(),
          a = 0;
        try {
          a = i.split(".")[1].length;
        } catch (o) {}
        try {
          a -= n.split(".")[1].length;
        } catch (o) {}
        return (
          ((n.replace(".", "") - 0) / (i.replace(".", "") - 0)) *
          Math.pow(10, a)
        );
      }
      function t(e, t) {
        var n = e.toString(),
          i = t.toString(),
          a = 0;
        try {
          a += n.split(".")[1].length;
        } catch (o) {}
        try {
          a += i.split(".")[1].length;
        } catch (o) {}
        return (
          ((n.replace(".", "") - 0) * (i.replace(".", "") - 0)) /
          Math.pow(10, a)
        );
      }
      function n(e, t) {
        var n = 0,
          i = 0;
        try {
          n = e.toString().split(".")[1].length;
        } catch (a) {}
        try {
          i = t.toString().split(".")[1].length;
        } catch (a) {}
        var o = Math.pow(10, Math.max(n, i));
        return (Math.round(e * o) + Math.round(t * o)) / o;
      }
      function i(e, t) {
        return n(e, -t);
      }
      return { accDiv: e, accMul: t, accAdd: n, accSub: i };
    }),
    n(
      "echarts/util/shape/Icon",
      [
        "require",
        "zrender/tool/util",
        "zrender/shape/Star",
        "zrender/shape/Heart",
        "zrender/shape/Droplet",
        "zrender/shape/Image",
        "zrender/shape/Base",
      ],
      function (e) {
        function t(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n, i + t.height),
            e.lineTo(n + 5 * a, i + 14 * o),
            e.lineTo(n + t.width, i + 3 * o),
            e.lineTo(n + 13 * a, i),
            e.lineTo(n + 2 * a, i + 11 * o),
            e.lineTo(n, i + t.height),
            e.moveTo(n + 6 * a, i + 10 * o),
            e.lineTo(n + 14 * a, i + 2 * o),
            e.moveTo(n + 10 * a, i + 13 * o),
            e.lineTo(n + t.width, i + 13 * o),
            e.moveTo(n + 13 * a, i + 10 * o),
            e.lineTo(n + 13 * a, i + t.height);
        }
        function n(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n, i + t.height),
            e.lineTo(n + 5 * a, i + 14 * o),
            e.lineTo(n + t.width, i + 3 * o),
            e.lineTo(n + 13 * a, i),
            e.lineTo(n + 2 * a, i + 11 * o),
            e.lineTo(n, i + t.height),
            e.moveTo(n + 6 * a, i + 10 * o),
            e.lineTo(n + 14 * a, i + 2 * o),
            e.moveTo(n + 10 * a, i + 13 * o),
            e.lineTo(n + t.width, i + 13 * o);
        }
        function i(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n + 4 * a, i + 15 * o),
            e.lineTo(n + 9 * a, i + 13 * o),
            e.lineTo(n + 14 * a, i + 8 * o),
            e.lineTo(n + 11 * a, i + 5 * o),
            e.lineTo(n + 6 * a, i + 10 * o),
            e.lineTo(n + 4 * a, i + 15 * o),
            e.moveTo(n + 5 * a, i),
            e.lineTo(n + 11 * a, i),
            e.moveTo(n + 5 * a, i + o),
            e.lineTo(n + 11 * a, i + o),
            e.moveTo(n, i + 2 * o),
            e.lineTo(n + t.width, i + 2 * o),
            e.moveTo(n, i + 5 * o),
            e.lineTo(n + 3 * a, i + t.height),
            e.lineTo(n + 13 * a, i + t.height),
            e.lineTo(n + t.width, i + 5 * o);
        }
        function a(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n, i + 3 * o),
            e.lineTo(n + 6 * a, i + 3 * o),
            e.moveTo(n + 3 * a, i),
            e.lineTo(n + 3 * a, i + 6 * o),
            e.moveTo(n + 3 * a, i + 8 * o),
            e.lineTo(n + 3 * a, i + t.height),
            e.lineTo(n + t.width, i + t.height),
            e.lineTo(n + t.width, i + 3 * o),
            e.lineTo(n + 8 * a, i + 3 * o);
        }
        function o(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n + 6 * a, i),
            e.lineTo(n + 2 * a, i + 3 * o),
            e.lineTo(n + 6 * a, i + 6 * o),
            e.moveTo(n + 2 * a, i + 3 * o),
            e.lineTo(n + 14 * a, i + 3 * o),
            e.lineTo(n + 14 * a, i + 11 * o),
            e.moveTo(n + 2 * a, i + 5 * o),
            e.lineTo(n + 2 * a, i + 13 * o),
            e.lineTo(n + 14 * a, i + 13 * o),
            e.moveTo(n + 10 * a, i + 10 * o),
            e.lineTo(n + 14 * a, i + 13 * o),
            e.lineTo(n + 10 * a, i + t.height);
        }
        function s(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16,
            s = t.width / 2;
          (e.lineWidth = 1.5),
            e.arc(n + s, i + s, s - a, 0, (2 * Math.PI) / 3),
            e.moveTo(n + 3 * a, i + t.height),
            e.lineTo(n + 0 * a, i + 12 * o),
            e.lineTo(n + 5 * a, i + 11 * o),
            e.moveTo(n, i + 8 * o),
            e.arc(n + s, i + s, s - a, Math.PI, (5 * Math.PI) / 3),
            e.moveTo(n + 13 * a, i),
            e.lineTo(n + t.width, i + 4 * o),
            e.lineTo(n + 11 * a, i + 5 * o);
        }
        function r(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n, i),
            e.lineTo(n, i + t.height),
            e.lineTo(n + t.width, i + t.height),
            e.moveTo(n + 2 * a, i + 14 * o),
            e.lineTo(n + 7 * a, i + 6 * o),
            e.lineTo(n + 11 * a, i + 11 * o),
            e.lineTo(n + 15 * a, i + 2 * o);
        }
        function l(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n, i),
            e.lineTo(n, i + t.height),
            e.lineTo(n + t.width, i + t.height),
            e.moveTo(n + 3 * a, i + 14 * o),
            e.lineTo(n + 3 * a, i + 6 * o),
            e.lineTo(n + 4 * a, i + 6 * o),
            e.lineTo(n + 4 * a, i + 14 * o),
            e.moveTo(n + 7 * a, i + 14 * o),
            e.lineTo(n + 7 * a, i + 2 * o),
            e.lineTo(n + 8 * a, i + 2 * o),
            e.lineTo(n + 8 * a, i + 14 * o),
            e.moveTo(n + 11 * a, i + 14 * o),
            e.lineTo(n + 11 * a, i + 9 * o),
            e.lineTo(n + 12 * a, i + 9 * o),
            e.lineTo(n + 12 * a, i + 14 * o);
        }
        function h(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width - 2,
            o = t.height - 2,
            s = Math.min(a, o) / 2;
          (i += 2),
            e.moveTo(n + s + 3, i + s - 3),
            e.arc(n + s + 3, i + s - 3, s - 1, 0, -Math.PI / 2, !0),
            e.lineTo(n + s + 3, i + s - 3),
            e.moveTo(n + s, i),
            e.lineTo(n + s, i + s),
            e.arc(n + s, i + s, s, -Math.PI / 2, 2 * Math.PI, !0),
            e.lineTo(n + s, i + s),
            (e.lineWidth = 1.5);
        }
        function V(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          (i -= o),
            e.moveTo(n + 1 * a, i + 2 * o),
            e.lineTo(n + 15 * a, i + 2 * o),
            e.lineTo(n + 14 * a, i + 3 * o),
            e.lineTo(n + 2 * a, i + 3 * o),
            e.moveTo(n + 3 * a, i + 6 * o),
            e.lineTo(n + 13 * a, i + 6 * o),
            e.lineTo(n + 12 * a, i + 7 * o),
            e.lineTo(n + 4 * a, i + 7 * o),
            e.moveTo(n + 5 * a, i + 10 * o),
            e.lineTo(n + 11 * a, i + 10 * o),
            e.lineTo(n + 10 * a, i + 11 * o),
            e.lineTo(n + 6 * a, i + 11 * o),
            e.moveTo(n + 7 * a, i + 14 * o),
            e.lineTo(n + 9 * a, i + 14 * o),
            e.lineTo(n + 8 * a, i + 15 * o),
            e.lineTo(n + 7 * a, i + 15 * o);
        }
        function U(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width,
            o = t.height,
            s = a / 16,
            r = o / 16,
            l = 2 * Math.min(s, r);
          e.moveTo(n + s + l, i + r + l),
            e.arc(n + s, i + r, l, Math.PI / 4, 3 * Math.PI),
            e.lineTo(n + 7 * s - l, i + 6 * r - l),
            e.arc(n + 7 * s, i + 6 * r, l, (Math.PI / 4) * 5, 4 * Math.PI),
            e.arc(n + 7 * s, i + 6 * r, l / 2, (Math.PI / 4) * 5, 4 * Math.PI),
            e.moveTo(n + 7 * s - l / 2, i + 6 * r + l),
            e.lineTo(n + s + l, i + 14 * r - l),
            e.arc(n + s, i + 14 * r, l, -Math.PI / 4, 2 * Math.PI),
            e.moveTo(n + 7 * s + l / 2, i + 6 * r),
            e.lineTo(n + 14 * s - l, i + 10 * r - l / 2),
            e.moveTo(n + 16 * s, i + 10 * r),
            e.arc(n + 14 * s, i + 10 * r, l, 0, 3 * Math.PI),
            (e.lineWidth = 1.5);
        }
        function m(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width,
            o = t.height,
            s = Math.min(a, o) / 2;
          e.moveTo(n + a, i + o / 2),
            e.arc(n + s, i + s, s, 0, 2 * Math.PI),
            e.arc(n + s, i, s, Math.PI / 4, (Math.PI / 5) * 4),
            e.arc(n, i + s, s, -Math.PI / 3, Math.PI / 3),
            e.arc(n + a, i + o, s, Math.PI, (Math.PI / 2) * 3),
            (e.lineWidth = 1.5);
        }
        function p(e, t) {
          for (
            var n = t.x,
              i = t.y,
              a = t.width,
              o = t.height,
              s = Math.round(o / 3),
              r = Math.round((s - 2) / 2),
              l = 3;
            l--;

          )
            e.rect(n, i + s * l + r, a, 2);
        }
        function d(e, t) {
          for (
            var n = t.x,
              i = t.y,
              a = t.width,
              o = t.height,
              s = Math.round(a / 3),
              r = Math.round((s - 2) / 2),
              l = 3;
            l--;

          )
            e.rect(n + s * l + r, i, 2, o);
        }
        function c(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16;
          e.moveTo(n + a, i),
            e.lineTo(n + a, i + t.height),
            e.lineTo(n + 15 * a, i + t.height),
            e.lineTo(n + 15 * a, i),
            e.lineTo(n + a, i),
            e.moveTo(n + 3 * a, i + 3 * a),
            e.lineTo(n + 13 * a, i + 3 * a),
            e.moveTo(n + 3 * a, i + 6 * a),
            e.lineTo(n + 13 * a, i + 6 * a),
            e.moveTo(n + 3 * a, i + 9 * a),
            e.lineTo(n + 13 * a, i + 9 * a),
            e.moveTo(n + 3 * a, i + 12 * a),
            e.lineTo(n + 9 * a, i + 12 * a);
        }
        function u(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16,
            o = t.height / 16;
          e.moveTo(n, i),
            e.lineTo(n, i + t.height),
            e.lineTo(n + t.width, i + t.height),
            e.lineTo(n + t.width, i),
            e.lineTo(n, i),
            e.moveTo(n + 4 * a, i),
            e.lineTo(n + 4 * a, i + 8 * o),
            e.lineTo(n + 12 * a, i + 8 * o),
            e.lineTo(n + 12 * a, i),
            e.moveTo(n + 6 * a, i + 11 * o),
            e.lineTo(n + 6 * a, i + 13 * o),
            e.lineTo(n + 10 * a, i + 13 * o),
            e.lineTo(n + 10 * a, i + 11 * o),
            e.lineTo(n + 6 * a, i + 11 * o);
        }
        function y(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width,
            o = t.height;
          e.moveTo(n, i + o / 2),
            e.lineTo(n + a, i + o / 2),
            e.moveTo(n + a / 2, i),
            e.lineTo(n + a / 2, i + o);
        }
        function b(e, t) {
          var n = t.width / 2,
            i = t.height / 2,
            a = Math.min(n, i);
          e.moveTo(t.x + n + a, t.y + i),
            e.arc(t.x + n, t.y + i, a, 0, 2 * Math.PI),
            e.closePath();
        }
        function g(e, t) {
          e.rect(t.x, t.y, t.width, t.height), e.closePath();
        }
        function k(e, t) {
          var n = t.width / 2,
            i = t.height / 2,
            a = t.x + n,
            o = t.y + i,
            s = Math.min(n, i);
          e.moveTo(a, o - s),
            e.lineTo(a + s, o + s),
            e.lineTo(a - s, o + s),
            e.lineTo(a, o - s),
            e.closePath();
        }
        function f(e, t) {
          var n = t.width / 2,
            i = t.height / 2,
            a = t.x + n,
            o = t.y + i,
            s = Math.min(n, i);
          e.moveTo(a, o - s),
            e.lineTo(a + s, o),
            e.lineTo(a, o + s),
            e.lineTo(a - s, o),
            e.lineTo(a, o - s),
            e.closePath();
        }
        function L(e, t) {
          var n = t.x,
            i = t.y,
            a = t.width / 16;
          e.moveTo(n + 8 * a, i),
            e.lineTo(n + a, i + t.height),
            e.lineTo(n + 8 * a, i + (t.height / 4) * 3),
            e.lineTo(n + 15 * a, i + t.height),
            e.lineTo(n + 8 * a, i),
            e.closePath();
        }
        function x(t, n) {
          var i = e("zrender/shape/Star"),
            a = n.width / 2,
            o = n.height / 2;
          i.prototype.buildPath(t, {
            x: n.x + a,
            y: n.y + o,
            r: Math.min(a, o),
            n: n.n || 5,
          });
        }
        function _(t, n) {
          var i = e("zrender/shape/Heart");
          i.prototype.buildPath(t, {
            x: n.x + n.width / 2,
            y: n.y + 0.2 * n.height,
            a: n.width / 2,
            b: 0.8 * n.height,
          });
        }
        function W(t, n) {
          var i = e("zrender/shape/Droplet");
          i.prototype.buildPath(t, {
            x: n.x + 0.5 * n.width,
            y: n.y + 0.5 * n.height,
            a: 0.5 * n.width,
            b: 0.8 * n.height,
          });
        }
        function X(e, t) {
          var n = t.x,
            i = t.y - (t.height / 2) * 1.5,
            a = t.width / 2,
            o = t.height / 2,
            s = Math.min(a, o);
          e.arc(n + a, i + o, s, (Math.PI / 5) * 4, Math.PI / 5),
            e.lineTo(n + a, i + o + 1.5 * s),
            e.closePath();
        }
        function K(t, n, i) {
          var a = e("zrender/shape/Image");
          this._imageShape = this._imageShape || new a({ style: {} });
          for (var o in n) this._imageShape.style[o] = n[o];
          this._imageShape.brush(t, !1, i);
        }
        function I(e) {
          v.call(this, e);
        }
        var w = e("zrender/tool/util"),
          v = e("zrender/shape/Base");
        return (
          (I.prototype = {
            type: "icon",
            iconLibrary: {
              mark: t,
              markUndo: n,
              markClear: i,
              dataZoom: a,
              dataZoomReset: o,
              restore: s,
              lineChart: r,
              barChart: l,
              pieChart: h,
              funnelChart: V,
              forceChart: U,
              chordChart: m,
              stackChart: p,
              tiledChart: d,
              dataView: c,
              saveAsImage: u,
              cross: y,
              circle: b,
              rectangle: g,
              triangle: k,
              diamond: f,
              arrow: L,
              star: x,
              heart: _,
              droplet: W,
              pin: X,
              image: K,
            },
            brush: function (t, n, i) {
              var a = n ? this.highlightStyle : this.style;
              a = a || {};
              var o = a.iconType || this.style.iconType;
              if ("image" === o) {
                var s = e("zrender/shape/Image");
                s.prototype.brush.call(this, t, n, i);
              } else {
                var a = this.beforeBrush(t, n);
                switch ((t.beginPath(), this.buildPath(t, a, i), a.brushType)) {
                  case "both":
                    t.fill();
                  case "stroke":
                    a.lineWidth > 0 && t.stroke();
                    break;
                  default:
                    t.fill();
                }
                this.drawText(t, a, this.style), this.afterBrush(t);
              }
            },
            buildPath: function (e, t, n) {
              this.iconLibrary[t.iconType]
                ? this.iconLibrary[t.iconType].call(this, e, t, n)
                : (e.moveTo(t.x, t.y),
                  e.lineTo(t.x + t.width, t.y),
                  e.lineTo(t.x + t.width, t.y + t.height),
                  e.lineTo(t.x, t.y + t.height),
                  e.lineTo(t.x, t.y),
                  e.closePath());
            },
            getRect: function (e) {
              return e.__rect
                ? e.__rect
                : ((e.__rect = {
                    x: Math.round(e.x),
                    y: Math.round(
                      e.y - ("pin" == e.iconType ? (e.height / 2) * 1.5 : 0)
                    ),
                    width: e.width,
                    height: e.height * ("pin" === e.iconType ? 1.25 : 1),
                  }),
                  e.__rect);
            },
            isCover: function (e, t) {
              var n = this.getTansform(e, t);
              (e = n[0]), (t = n[1]);
              var i = this.style.__rect;
              i || (i = this.style.__rect = this.getRect(this.style));
              var a = i.height < 8 || i.width < 8 ? 4 : 0;
              return e >= i.x - a &&
                e <= i.x + i.width + a &&
                t >= i.y - a &&
                t <= i.y + i.height + a
                ? !0
                : !1;
            },
          }),
          w.inherits(I, v),
          I
        );
      }
    ),
    n(
      "echarts/util/shape/MarkLine",
      [
        "require",
        "zrender/shape/Base",
        "./Icon",
        "zrender/shape/Line",
        "zrender/shape/Polyline",
        "zrender/tool/matrix",
        "zrender/tool/area",
        "zrender/shape/util/dashedLineTo",
        "zrender/shape/util/smoothSpline",
        "zrender/tool/util",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("./Icon"),
          a = e("zrender/shape/Line"),
          o = new a({}),
          s = e("zrender/shape/Polyline"),
          r = new s({}),
          l = e("zrender/tool/matrix"),
          h = e("zrender/tool/area"),
          V = e("zrender/shape/util/dashedLineTo"),
          U = e("zrender/shape/util/smoothSpline"),
          m = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "mark-line",
            brush: function (e, t) {
              var n = this.style;
              t && (n = this.getHighlightStyle(n, this.highlightStyle || {})),
                e.save(),
                this.setContext(e, n),
                this.setTransform(e),
                e.save(),
                e.beginPath(),
                this.buildLinePath(e, n, this.style.lineWidth || 1),
                e.stroke(),
                e.restore(),
                this.brushSymbol(e, n, 0),
                this.brushSymbol(e, n, 1),
                this.drawText(e, n, this.style),
                e.restore();
            },
            buildLinePath: function (e, t, n) {
              var i = t.pointList || this.getPointList(t);
              t.pointList = i;
              var a = Math.min(
                t.pointList.length,
                Math.round(t.pointListLength || t.pointList.length)
              );
              if (t.lineType && "solid" != t.lineType) {
                if ("dashed" == t.lineType || "dotted" == t.lineType)
                  if ("spline" !== t.smooth) {
                    var o = n * ("dashed" == t.lineType ? 5 : 1);
                    e.moveTo(i[0][0], i[0][1]);
                    for (var s = 1; a > s; s++)
                      V(e, i[s - 1][0], i[s - 1][1], i[s][0], i[s][1], o);
                  } else
                    for (var s = 1; a > s; s += 2)
                      e.moveTo(i[s - 1][0], i[s - 1][1]),
                        e.lineTo(i[s][0], i[s][1]);
              } else {
                e.moveTo(i[0][0], i[0][1]);
                for (var s = 1; a > s; s++) e.lineTo(i[s][0], i[s][1]);
              }
            },
            brushSymbol: function (e, t, n) {
              if ("none" != t.symbol[n]) {
                e.save(),
                  e.beginPath(),
                  (e.lineWidth = t.symbolBorder),
                  (e.strokeStyle = t.symbolBorderColor),
                  (t.iconType = t.symbol[n].replace("empty", "").toLowerCase()),
                  t.symbol[n].match("empty") && (e.fillStyle = "#fff");
                var a,
                  o = Math.min(
                    t.pointList.length,
                    Math.round(t.pointListLength || t.pointList.length)
                  ),
                  s = 0 === n ? t.pointList[0][0] : t.pointList[o - 1][0],
                  r = 0 === n ? t.pointList[0][1] : t.pointList[o - 1][1],
                  h =
                    "undefined" != typeof t.symbolRotate[n]
                      ? t.symbolRotate[n] - 0
                      : 0;
                if (
                  (0 !== h &&
                    ((a = l.create()),
                    l.identity(a),
                    (s || r) && l.translate(a, a, [-s, -r]),
                    l.rotate(a, a, (h * Math.PI) / 180),
                    (s || r) && l.translate(a, a, [s, r]),
                    e.transform.apply(e, a)),
                  "arrow" == t.iconType && 0 === h)
                )
                  this.buildArrawPath(e, t, n);
                else {
                  var V = t.symbolSize[n];
                  (t.x = s - V),
                    (t.y = r - V),
                    (t.width = 2 * V),
                    (t.height = 2 * V),
                    i.prototype.buildPath(e, t);
                }
                e.closePath(), e.fill(), e.stroke(), e.restore();
              }
            },
            buildArrawPath: function (e, t, n) {
              var i = Math.min(
                  t.pointList.length,
                  Math.round(t.pointListLength || t.pointList.length)
                ),
                a = 2 * t.symbolSize[n],
                o = t.pointList[0][0],
                s = t.pointList[i - 1][0],
                r = t.pointList[0][1],
                l = t.pointList[i - 1][1],
                h = 0;
              "spline" === t.smooth && (h = t.smoothRadian * (s >= o ? 1 : -1));
              var V = Math.atan(Math.abs((l - r) / (o - s)));
              0 === n
                ? s > o
                  ? l > r
                    ? (V = 2 * Math.PI - V + h)
                    : (V += h)
                  : l > r
                  ? (V += Math.PI - h)
                  : (V = Math.PI - V - h)
                : o > s
                ? r > l
                  ? (V = 2 * Math.PI - V + h)
                  : (V += h)
                : r > l
                ? (V += Math.PI - h)
                : (V = Math.PI - V - h);
              var U = Math.PI / 8,
                m = 0 === n ? o : s,
                p = 0 === n ? r : l,
                d = [
                  [m + a * Math.cos(V - U), p - a * Math.sin(V - U)],
                  [m + 0.6 * a * Math.cos(V), p - 0.6 * a * Math.sin(V)],
                  [m + a * Math.cos(V + U), p - a * Math.sin(V + U)],
                ];
              e.moveTo(m, p);
              for (var c = 0, u = d.length; u > c; c++)
                e.lineTo(d[c][0], d[c][1]);
              e.lineTo(m, p);
            },
            getPointList: function (e) {
              var t = [
                [e.xStart, e.yStart],
                [e.xEnd, e.yEnd],
              ];
              if ("spline" === e.smooth) {
                var n = t[1][0],
                  i = t[1][1];
                if (e.smoothRadian <= 0.8) {
                  t[3] = [n, i];
                  var a = t[0][0] <= t[3][0];
                  (t[1] = this.getOffetPoint(t[0], t[3], a, e.smoothRadian)),
                    (t[2] = this.getOffetPoint(t[3], t[0], a, e.smoothRadian));
                } else
                  (t[2] = [n, i]),
                    (t[1] = this.getOffetPoint(
                      t[0],
                      t[2],
                      t[0][0] <= t[2][0],
                      e.smoothRadian
                    ));
                (t = U(t, !1)), (t[t.length - 1] = [n, i]);
              }
              return t;
            },
            getOffetPoint: function (e, t, n, i) {
              var a,
                o = (2 - Math.abs(i)) / 0.6,
                s =
                  Math.sqrt(
                    Math.round(
                      (e[0] - t[0]) * (e[0] - t[0]) +
                        (e[1] - t[1]) * (e[1] - t[1])
                    )
                  ) / o,
                r = [e[0], e[1]];
              if (e[0] != t[0] && e[1] != t[1]) {
                var l = (t[1] - e[1]) / (t[0] - e[0]);
                a = Math.atan(l);
              } else
                a = e[0] == t[0] ? ((e[1] <= t[1] ? 1 : -1) * Math.PI) / 2 : 0;
              var h, V;
              return (
                e[0] <= t[0]
                  ? ((a -= i * (n ? 1 : -1)),
                    (h = Math.round(Math.cos(a) * s)),
                    (V = Math.round(Math.sin(a) * s)),
                    (r[0] += h),
                    (r[1] += V))
                  : ((a += i * (n ? 1 : -1)),
                    (h = Math.round(Math.cos(a) * s)),
                    (V = Math.round(Math.sin(a) * s)),
                    (r[0] -= h),
                    (r[1] -= V)),
                r
              );
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t = e.lineWidth || 1;
              return (
                (e.__rect = {
                  x: Math.min(e.xStart, e.xEnd) - t,
                  y: Math.min(e.yStart, e.yEnd) - t,
                  width: Math.abs(e.xStart - e.xEnd) + t,
                  height: Math.abs(e.yStart - e.yEnd) + t,
                }),
                e.__rect
              );
            },
            isCover: function (e, t) {
              var n = this.getTansform(e, t);
              (e = n[0]), (t = n[1]);
              var i = this.style.__rect;
              return (
                i || (i = this.style.__rect = this.getRect(this.style)),
                e >= i.x &&
                e <= i.x + i.width &&
                t >= i.y &&
                t <= i.y + i.height
                  ? "spline" !== this.style.smooth
                    ? h.isInside(o, this.style, e, t)
                    : h.isInside(r, this.style, e, t)
                  : !1
              );
            },
          }),
          m.inherits(t, n),
          t
        );
      }
    ),
    n(
      "echarts/util/shape/Symbol",
      [
        "require",
        "zrender/shape/Base",
        "zrender/shape/Polygon",
        "zrender/tool/util",
        "./normalIsCover",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/shape/Polygon"),
          a = new i({}),
          o = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "symbol",
            buildPath: function (e, t) {
              var n = t.pointList,
                i = n.length;
              if (0 !== i)
                for (
                  var a,
                    o,
                    s,
                    r,
                    l,
                    h = 1e4,
                    V = Math.ceil(i / h),
                    U = n[0] instanceof Array,
                    m = t.size ? t.size : 2,
                    p = m,
                    d = m / 2,
                    c = 2 * Math.PI,
                    u = 0;
                  V > u;
                  u++
                ) {
                  e.beginPath(), (a = u * h), (o = a + h), (o = o > i ? i : o);
                  for (var y = a; o > y; y++)
                    if (
                      (t.random &&
                        ((s = t["randomMap" + (y % 20)] / 100),
                        (p = m * s * s),
                        (d = p / 2)),
                      U
                        ? ((r = n[y][0]), (l = n[y][1]))
                        : ((r = n[y].x), (l = n[y].y)),
                      3 > p)
                    )
                      e.rect(r - d, l - d, p, p);
                    else
                      switch (t.iconType) {
                        case "circle":
                          e.moveTo(r, l), e.arc(r, l, d, 0, c, !0);
                          break;
                        case "diamond":
                          e.moveTo(r, l - d),
                            e.lineTo(r + d / 3, l - d / 3),
                            e.lineTo(r + d, l),
                            e.lineTo(r + d / 3, l + d / 3),
                            e.lineTo(r, l + d),
                            e.lineTo(r - d / 3, l + d / 3),
                            e.lineTo(r - d, l),
                            e.lineTo(r - d / 3, l - d / 3),
                            e.lineTo(r, l - d);
                          break;
                        default:
                          e.rect(r - d, l - d, p, p);
                      }
                  if ((e.closePath(), V - 1 > u))
                    switch (t.brushType) {
                      case "both":
                        e.fill(), t.lineWidth > 0 && e.stroke();
                        break;
                      case "stroke":
                        t.lineWidth > 0 && e.stroke();
                        break;
                      default:
                        e.fill();
                    }
                }
            },
            getRect: function (e) {
              return e.__rect || a.getRect(e);
            },
            isCover: e("./normalIsCover"),
          }),
          o.inherits(t, n),
          t
        );
      }
    ),
    n(
      "echarts/util/ecAnimation",
      ["require", "zrender/tool/util", "zrender/shape/Polygon"],
      function (e) {
        function t(e, t, n, i, a) {
          var o,
            s = n.style.pointList,
            r = s.length;
          if (!t) {
            if (((o = []), "vertical" != n._orient))
              for (var l = s[0][1], h = 0; r > h; h++) o[h] = [s[h][0], l];
            else for (var V = s[0][0], h = 0; r > h; h++) o[h] = [V, s[h][1]];
            "half-smooth-polygon" == n.type &&
              ((o[r - 1] = d.clone(s[r - 1])), (o[r - 2] = d.clone(s[r - 2]))),
              (t = { style: { pointList: o } });
          }
          o = t.style.pointList;
          var U = o.length;
          (n.style.pointList =
            U == r ? o : r > U ? o.concat(s.slice(U)) : o.slice(0, r)),
            e.addShape(n),
            e.animate(n.id, "style").when(i, { pointList: s }).start(a);
        }
        function n(e, t) {
          for (var n = arguments.length, i = 2; n > i; i++) {
            var a = arguments[i];
            e.style[a] = t.style[a];
          }
        }
        function i(e, t, i, a, o) {
          var s = i.style;
          t ||
            (t = {
              position: i.position,
              style: {
                x: s.x,
                y: "vertical" == i._orient ? s.y + s.height : s.y,
                width: "vertical" == i._orient ? s.width : 0,
                height: "vertical" != i._orient ? s.height : 0,
              },
            });
          var r = s.x,
            l = s.y,
            h = s.width,
            V = s.height,
            U = [i.position[0], i.position[1]];
          n(i, t, "x", "y", "width", "height"),
            (i.position = t.position),
            e.addShape(i),
            (U[0] != t.position[0] || U[1] != t.position[1]) &&
              e.animate(i.id, "").when(a, { position: U }).start(o),
            e
              .animate(i.id, "style")
              .when(a, { x: r, y: l, width: h, height: V })
              .start(o);
        }
        function a(e, t, n, i, a) {
          if (!t) {
            var o = n.style.y;
            t = { style: { y: [o[0], o[0], o[0], o[0]] } };
          }
          var s = n.style.y;
          (n.style.y = t.style.y),
            e.addShape(n),
            e.animate(n.id, "style").when(i, { y: s }).start(a);
        }
        function o(e, t, n, i, a) {
          var o = n.style.x,
            s = n.style.y,
            r = n.style.r0,
            l = n.style.r;
          "r" != n._animationAdd
            ? ((n.style.r0 = 0),
              (n.style.r = 0),
              (n.rotation = [2 * Math.PI, o, s]),
              e.addShape(n),
              e.animate(n.id, "style").when(i, { r0: r, r: l }).start(a),
              e
                .animate(n.id, "")
                .when(Math.round((i / 3) * 2), { rotation: [0, o, s] })
                .start(a))
            : ((n.style.r0 = n.style.r),
              e.addShape(n),
              e.animate(n.id, "style").when(i, { r0: r }).start(a));
        }
        function s(e, t, i, a, o) {
          t ||
            (t =
              "r" != i._animationAdd
                ? {
                    style: {
                      startAngle: i.style.startAngle,
                      endAngle: i.style.startAngle,
                    },
                  }
                : { style: { r0: i.style.r } });
          var s = i.style.startAngle,
            r = i.style.endAngle;
          n(i, t, "startAngle", "endAngle"),
            e.addShape(i),
            e
              .animate(i.id, "style")
              .when(a, { startAngle: s, endAngle: r })
              .start(o);
        }
        function r(e, t, i, a, o) {
          t ||
            (t = {
              style: {
                x:
                  "left" == i.style.textAlign
                    ? i.style.x + 100
                    : i.style.x - 100,
                y: i.style.y,
              },
            });
          var s = i.style.x,
            r = i.style.y;
          n(i, t, "x", "y"),
            e.addShape(i),
            e.animate(i.id, "style").when(a, { x: s, y: r }).start(o);
        }
        function l(t, n, i, a, o) {
          var s = e("zrender/shape/Polygon").prototype.getRect(i.style),
            r = s.x + s.width / 2,
            l = s.y + s.height / 2;
          (i.scale = [0.1, 0.1, r, l]),
            t.addShape(i),
            t
              .animate(i.id, "")
              .when(a, { scale: [1, 1, r, l] })
              .start(o);
        }
        function h(e, t, i, a, o) {
          t ||
            (t = {
              style: {
                source0: 0,
                source1: i.style.source1 > 0 ? 360 : -360,
                target0: 0,
                target1: i.style.target1 > 0 ? 360 : -360,
              },
            });
          var s = i.style.source0,
            r = i.style.source1,
            l = i.style.target0,
            h = i.style.target1;
          t.style && n(i, t, "source0", "source1", "target0", "target1"),
            e.addShape(i),
            e
              .animate(i.id, "style")
              .when(a, { source0: s, source1: r, target0: l, target1: h })
              .start(o);
        }
        function V(e, t, n, i, a) {
          t || (t = { style: { angle: n.style.startAngle } });
          var o = n.style.angle;
          (n.style.angle = t.style.angle),
            e.addShape(n),
            e.animate(n.id, "style").when(i, { angle: o }).start(a);
        }
        function U(e, t, n, a, o, s) {
          if (
            ((n.style._x = n.style.x),
            (n.style._y = n.style.y),
            (n.style._width = n.style.width),
            (n.style._height = n.style.height),
            t)
          )
            i(e, t, n, a, o);
          else {
            var r = n._x || 0,
              l = n._y || 0;
            (n.scale = [0.01, 0.01, r, l]),
              e.addShape(n),
              e
                .animate(n.id, "")
                .delay(s)
                .when(a, { scale: [1, 1, r, l] })
                .start(o || "QuinticOut");
          }
        }
        function m(e, t, i, a, o) {
          t ||
            (t = {
              style: {
                xStart: i.style.xStart,
                yStart: i.style.yStart,
                xEnd: i.style.xStart,
                yEnd: i.style.yStart,
              },
            });
          var s = i.style.xStart,
            r = i.style.xEnd,
            l = i.style.yStart,
            h = i.style.yEnd;
          n(i, t, "xStart", "xEnd", "yStart", "yEnd"),
            e.addShape(i),
            e
              .animate(i.id, "style")
              .when(a, { xStart: s, xEnd: r, yStart: l, yEnd: h })
              .start(o);
        }
        function p(e, t, n, i, a) {
          n.style.smooth
            ? t
              ? e.addShape(n)
              : ((n.style.pointListLength = 1),
                e.addShape(n),
                (n.style.pointList =
                  n.style.pointList || n.getPointList(n.style)),
                e
                  .animate(n.id, "style")
                  .when(i, { pointListLength: n.style.pointList.length })
                  .start(a || "QuinticOut"))
            : ((n.style.pointList = t
                ? t.style.pointList
                : [
                    [n.style.xStart, n.style.yStart],
                    [n.style.xStart, n.style.yStart],
                  ]),
              e.addShape(n),
              e
                .animate(n.id, "style")
                .when(i, {
                  pointList: [
                    [n.style.xStart, n.style.yStart],
                    [n._x || 0, n._y || 0],
                  ],
                })
                .start(a || "QuinticOut"));
        }
        var d = e("zrender/tool/util");
        return {
          pointList: t,
          rectangle: i,
          candle: a,
          ring: o,
          sector: s,
          text: r,
          polygon: l,
          ribbon: h,
          gaugePointer: V,
          icon: U,
          line: m,
          markline: p,
        };
      }
    ),
    n(
      "echarts/util/ecEffect",
      [
        "require",
        "../util/ecData",
        "zrender/shape/Circle",
        "zrender/shape/Image",
        "../util/shape/Icon",
        "../util/shape/Symbol",
      ],
      function (e) {
        function t(e, t, n, i) {
          var o,
            l = n.effect,
            h = l.color || n.style.strokeColor || n.style.color,
            V = l.shadowColor || h,
            U = l.scaleSize,
            m = l.bounceDistance,
            p = "undefined" != typeof l.shadowBlur ? l.shadowBlur : U;
          "image" !== n.type
            ? ((o = new r({
                zlevel: i,
                style: {
                  brushType: "stroke",
                  iconType:
                    "droplet" != n.style.iconType ? n.style.iconType : "circle",
                  x: p + 1,
                  y: p + 1,
                  n: n.style.n,
                  width: n.style._width * U,
                  height: n.style._height * U,
                  lineWidth: 1,
                  strokeColor: h,
                  shadowColor: V,
                  shadowBlur: p,
                },
                draggable: !1,
                hoverable: !1,
              })),
              "pin" == n.style.iconType &&
                (o.style.y += (o.style.height / 2) * 1.5),
              (o.style.image = e.shapeToImage(
                o,
                o.style.width + 2 * p + 2,
                o.style.height + 2 * p + 2
              ).style.image),
              (o = new s({
                zlevel: o.zlevel,
                style: o.style,
                draggable: !1,
                hoverable: !1,
              })))
            : (o = new s({
                zlevel: i,
                style: n.style,
                draggable: !1,
                hoverable: !1,
              })),
            a.clone(n, o),
            (o.position = n.position),
            t.push(o),
            e.addShape(o);
          var d = "image" !== n.type ? window.devicePixelRatio || 1 : 1,
            c = (o.style.width / d - n.style._width) / 2;
          (o.style.x = n.style._x - c),
            (o.style.y = n.style._y - c),
            "pin" == n.style.iconType &&
              (o.style.y -= (n.style.height / 2) * 1.5);
          var u = 100 * (l.period + 10 * Math.random());
          e.modShape(n.id, { invisible: !0 });
          var y = o.style.x + o.style.width / 2 / d,
            b = o.style.y + o.style.height / 2 / d;
          "scale" === l.type
            ? (e.modShape(o.id, { scale: [0.1, 0.1, y, b] }),
              e
                .animate(o.id, "", l.loop)
                .when(u, { scale: [1, 1, y, b] })
                .done(function () {
                  (n.effect.show = !1), e.delShape(o.id);
                })
                .start())
            : e
                .animate(o.id, "style", l.loop)
                .when(u, { y: o.style.y - m })
                .when(2 * u, { y: o.style.y })
                .done(function () {
                  (n.effect.show = !1), e.delShape(o.id);
                })
                .start();
        }
        function n(e, t, n, i) {
          var a = n.effect,
            o = a.color || n.style.strokeColor || n.style.color,
            s = a.scaleSize,
            r = a.shadowColor || o,
            h = "undefined" != typeof a.shadowBlur ? a.shadowBlur : 2 * s,
            V = window.devicePixelRatio || 1,
            U = new l({
              zlevel: i,
              position: n.position,
              scale: n.scale,
              style: {
                pointList: n.style.pointList,
                iconType: n.style.iconType,
                color: o,
                strokeColor: o,
                shadowColor: r,
                shadowBlur: h * V,
                random: !0,
                brushType: "fill",
                lineWidth: 1,
                size: n.style.size,
              },
              draggable: !1,
              hoverable: !1,
            });
          t.push(U), e.addShape(U), e.modShape(n.id, { invisible: !0 });
          for (
            var m = Math.round(100 * a.period), p = {}, d = {}, c = 0;
            20 > c;
            c++
          )
            (U.style["randomMap" + c] = 0),
              (p = {}),
              (p["randomMap" + c] = 100),
              (d = {}),
              (d["randomMap" + c] = 0),
              (U.style["randomMap" + c] = 100 * Math.random()),
              e
                .animate(U.id, "style", !0)
                .when(m, p)
                .when(2 * m, d)
                .when(3 * m, p)
                .when(4 * m, p)
                .delay(Math.random() * m * c)
                .start();
        }
        function i(e, t, n, i) {
          var r,
            l = n.effect,
            h = l.color || n.style.strokeColor || n.style.color,
            V = l.shadowColor || n.style.strokeColor || h,
            U = n.style.lineWidth * l.scaleSize,
            m = "undefined" != typeof l.shadowBlur ? l.shadowBlur : U,
            p = new o({
              zlevel: i,
              style: {
                x: m,
                y: m,
                r: U,
                color: h,
                shadowColor: V,
                shadowBlur: m,
              },
              draggable: !1,
              hoverable: !1,
            });
          (p.style.image = e.shapeToImage(
            p,
            2 * (U + m),
            2 * (U + m)
          ).style.image),
            (p = new s({
              zlevel: p.zlevel,
              style: p.style,
              draggable: !1,
              hoverable: !1,
            })),
            (r = m),
            a.clone(n, p),
            (p.position = n.position),
            t.push(p),
            e.addShape(p),
            (p.style.x = n.style.xStart - r),
            (p.style.y = n.style.yStart - r);
          var d =
              (n.style.xStart - n.style.xEnd) *
                (n.style.xStart - n.style.xEnd) +
              (n.style.yStart - n.style.yEnd) * (n.style.yStart - n.style.yEnd),
            c = Math.round(Math.sqrt(Math.round(d * l.period * l.period)));
          if (n.style.smooth) {
            var u = n.style.pointList || n.getPointList(n.style),
              y = u.length;
            c = Math.round(c / y);
            for (
              var b = e.animate(p.id, "style", l.loop),
                g = Math.ceil(y / 8),
                k = 0;
              y - g > k;
              k += g
            )
              b.when(c * (k + 1), { x: u[k][0] - r, y: u[k][1] - r });
            b.when(c * y, { x: u[y - 1][0] - r, y: u[y - 1][1] - r }),
              b.done(function () {
                (n.effect.show = !1), e.delShape(p.id);
              }),
              b.start("spline");
          } else
            e.animate(p.id, "style", l.loop)
              .when(c, { x: n._x - r, y: n._y - r })
              .done(function () {
                (n.effect.show = !1), e.delShape(p.id);
              })
              .start();
        }
        var a = e("../util/ecData"),
          o = e("zrender/shape/Circle"),
          s = e("zrender/shape/Image"),
          r = e("../util/shape/Icon"),
          l = e("../util/shape/Symbol");
        return { point: t, largePoint: n, line: i };
      }
    ),
    n(
      "echarts/component/base",
      [
        "require",
        "../config",
        "../util/ecQuery",
        "../util/number",
        "zrender/tool/util",
      ],
      function (e) {
        function t(e, t, n, i, a) {
          (this.ecTheme = e),
            (this.messageCenter = t),
            (this.zr = n),
            (this.option = i),
            (this.series = i.series),
            (this.myChart = a),
            (this.component = a.component),
            (this.shapeList = []),
            (this.effectList = []);
        }
        var n = e("../config"),
          i = e("../util/ecQuery"),
          a = e("../util/number"),
          o = e("zrender/tool/util");
        return (
          (t.prototype = {
            canvasSupported: !0,
            _getZ: function (e) {
              var t = this.ecTheme[this.type];
              return t && null != t[e]
                ? t[e]
                : ((t = n[this.type]), t && null != t[e] ? t[e] : 0);
            },
            getZlevelBase: function () {
              return this._getZ("zlevel");
            },
            getZBase: function () {
              return this._getZ("z");
            },
            reformOption: function (e) {
              return o.merge(
                o.merge(e || {}, o.clone(this.ecTheme[this.type] || {})),
                o.clone(n[this.type] || {})
              );
            },
            reformCssArray: function (e) {
              if (!(e instanceof Array)) return [e, e, e, e];
              switch (e.length + "") {
                case "4":
                  return e;
                case "3":
                  return [e[0], e[1], e[2], e[1]];
                case "2":
                  return [e[0], e[1], e[0], e[1]];
                case "1":
                  return [e[0], e[0], e[0], e[0]];
                case "0":
                  return [0, 0, 0, 0];
              }
            },
            getShapeById: function (e) {
              for (var t = 0, n = this.shapeList.length; n > t; t++)
                if (this.shapeList[t].id === e) return this.shapeList[t];
              return null;
            },
            getFont: function (e) {
              var t = this.getTextStyle(o.clone(e));
              return (
                t.fontStyle +
                " " +
                t.fontWeight +
                " " +
                t.fontSize +
                "px " +
                t.fontFamily
              );
            },
            getTextStyle: function (e) {
              return o.merge(
                o.merge(e || {}, this.ecTheme.textStyle),
                n.textStyle
              );
            },
            getItemStyleColor: function (e, t, n, i) {
              return "function" == typeof e
                ? e.call(this.myChart, {
                    seriesIndex: t,
                    series: this.series[t],
                    dataIndex: n,
                    data: i,
                  })
                : e;
            },
            getDataFromOption: function (e, t) {
              return null != e ? (null != e.value ? e.value : e) : t;
            },
            subPixelOptimize: function (e, t) {
              return (e = t % 2 === 1 ? Math.floor(e) + 0.5 : Math.round(e));
            },
            resize: function () {
              this.refresh && this.refresh(),
                this.clearEffectShape && this.clearEffectShape(!0);
              var e = this;
              setTimeout(function () {
                e.animationEffect && e.animationEffect();
              }, 200);
            },
            clear: function () {
              this.clearEffectShape && this.clearEffectShape(),
                this.zr && this.zr.delShape(this.shapeList),
                (this.shapeList = []);
            },
            dispose: function () {
              this.onbeforDispose && this.onbeforDispose(),
                this.clear(),
                (this.shapeList = null),
                (this.effectList = null),
                this.onafterDispose && this.onafterDispose();
            },
            query: i.query,
            deepQuery: i.deepQuery,
            deepMerge: i.deepMerge,
            parsePercent: a.parsePercent,
            parseCenter: a.parseCenter,
            parseRadius: a.parseRadius,
            numAddCommas: a.addCommas,
          }),
          t
        );
      }
    ),
    n(
      "zrender/shape/Star",
      ["require", "../tool/math", "./Base", "../tool/util"],
      function (e) {
        var t = e("../tool/math"),
          n = t.sin,
          i = t.cos,
          a = Math.PI,
          o = e("./Base"),
          s = function (e) {
            o.call(this, e);
          };
        return (
          (s.prototype = {
            type: "star",
            buildPath: function (e, t) {
              var o = t.n;
              if (o && !(2 > o)) {
                var s = t.x,
                  r = t.y,
                  l = t.r,
                  h = t.r0;
                null == h &&
                  (h = o > 4 ? (l * i((2 * a) / o)) / i(a / o) : l / 3);
                var V = a / o,
                  U = -a / 2,
                  m = s + l * i(U),
                  p = r + l * n(U);
                U += V;
                var d = (t.pointList = []);
                d.push([m, p]);
                for (var c, u = 0, y = 2 * o - 1; y > u; u++)
                  (c = u % 2 === 0 ? h : l),
                    d.push([s + c * i(U), r + c * n(U)]),
                    (U += V);
                d.push([m, p]), e.moveTo(d[0][0], d[0][1]);
                for (var u = 0; u < d.length; u++) e.lineTo(d[u][0], d[u][1]);
                e.closePath();
              }
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t;
              return (
                (t =
                  "stroke" == e.brushType || "fill" == e.brushType
                    ? e.lineWidth || 1
                    : 0),
                (e.__rect = {
                  x: Math.round(e.x - e.r - t / 2),
                  y: Math.round(e.y - e.r - t / 2),
                  width: 2 * e.r + t,
                  height: 2 * e.r + t,
                }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(s, o),
          s
        );
      }
    ),
    n(
      "zrender/shape/Heart",
      ["require", "./Base", "./util/PathProxy", "../tool/util"],
      function (e) {
        "use strict";
        var t = e("./Base"),
          n = e("./util/PathProxy"),
          i = function (e) {
            t.call(this, e), (this._pathProxy = new n());
          };
        return (
          (i.prototype = {
            type: "heart",
            buildPath: function (e, t) {
              var i = this._pathProxy || new n();
              i.begin(e),
                i.moveTo(t.x, t.y),
                i.bezierCurveTo(
                  t.x + t.a / 2,
                  t.y - (2 * t.b) / 3,
                  t.x + 2 * t.a,
                  t.y + t.b / 3,
                  t.x,
                  t.y + t.b
                ),
                i.bezierCurveTo(
                  t.x - 2 * t.a,
                  t.y + t.b / 3,
                  t.x - t.a / 2,
                  t.y - (2 * t.b) / 3,
                  t.x,
                  t.y
                ),
                i.closePath();
            },
            getRect: function (e) {
              return e.__rect
                ? e.__rect
                : (this._pathProxy.isEmpty() || this.buildPath(null, e),
                  this._pathProxy.fastBoundingRect());
            },
          }),
          e("../tool/util").inherits(i, t),
          i
        );
      }
    ),
    n(
      "zrender/shape/Droplet",
      ["require", "./Base", "./util/PathProxy", "../tool/util"],
      function (e) {
        "use strict";
        var t = e("./Base"),
          n = e("./util/PathProxy"),
          i = function (e) {
            t.call(this, e), (this._pathProxy = new n());
          };
        return (
          (i.prototype = {
            type: "droplet",
            buildPath: function (e, t) {
              var i = this._pathProxy || new n();
              i.begin(e),
                i.moveTo(t.x, t.y + t.a),
                i.bezierCurveTo(
                  t.x + t.a,
                  t.y + t.a,
                  t.x + (3 * t.a) / 2,
                  t.y - t.a / 3,
                  t.x,
                  t.y - t.b
                ),
                i.bezierCurveTo(
                  t.x - (3 * t.a) / 2,
                  t.y - t.a / 3,
                  t.x - t.a,
                  t.y + t.a,
                  t.x,
                  t.y + t.a
                ),
                i.closePath();
            },
            getRect: function (e) {
              return e.__rect
                ? e.__rect
                : (this._pathProxy.isEmpty() || this.buildPath(null, e),
                  this._pathProxy.fastBoundingRect());
            },
          }),
          e("../tool/util").inherits(i, t),
          i
        );
      }
    ),
    n("zrender/tool/math", [], function () {
      function e(e, t) {
        return Math.sin(t ? e * a : e);
      }
      function t(e, t) {
        return Math.cos(t ? e * a : e);
      }
      function n(e) {
        return e * a;
      }
      function i(e) {
        return e / a;
      }
      var a = Math.PI / 180;
      return { sin: e, cos: t, degreeToRadian: n, radianToDegree: i };
    }),
    n(
      "zrender/shape/util/PathProxy",
      ["require", "../../tool/vector"],
      function (e) {
        var t = e("../../tool/vector"),
          n = function (e, t) {
            (this.command = e), (this.points = t || null);
          },
          i = function () {
            (this.pathCommands = []),
              (this._ctx = null),
              (this._min = []),
              (this._max = []);
          };
        return (
          (i.prototype.fastBoundingRect = function () {
            var e = this._min,
              n = this._max;
            (e[0] = e[1] = 1 / 0), (n[0] = n[1] = -1 / 0);
            for (var i = 0; i < this.pathCommands.length; i++) {
              var a = this.pathCommands[i],
                o = a.points;
              switch (a.command) {
                case "M":
                  t.min(e, e, o), t.max(n, n, o);
                  break;
                case "L":
                  t.min(e, e, o), t.max(n, n, o);
                  break;
                case "C":
                  for (var s = 0; 6 > s; s += 2)
                    (e[0] = Math.min(e[0], e[0], o[s])),
                      (e[1] = Math.min(e[1], e[1], o[s + 1])),
                      (n[0] = Math.max(n[0], n[0], o[s])),
                      (n[1] = Math.max(n[1], n[1], o[s + 1]));
                  break;
                case "Q":
                  for (var s = 0; 4 > s; s += 2)
                    (e[0] = Math.min(e[0], e[0], o[s])),
                      (e[1] = Math.min(e[1], e[1], o[s + 1])),
                      (n[0] = Math.max(n[0], n[0], o[s])),
                      (n[1] = Math.max(n[1], n[1], o[s + 1]));
                  break;
                case "A":
                  var r = o[0],
                    l = o[1],
                    h = o[2],
                    V = o[3];
                  (e[0] = Math.min(e[0], e[0], r - h)),
                    (e[1] = Math.min(e[1], e[1], l - V)),
                    (n[0] = Math.max(n[0], n[0], r + h)),
                    (n[1] = Math.max(n[1], n[1], l + V));
              }
            }
            return {
              x: e[0],
              y: e[1],
              width: n[0] - e[0],
              height: n[1] - e[1],
            };
          }),
          (i.prototype.begin = function (e) {
            return (
              (this._ctx = e || null), (this.pathCommands.length = 0), this
            );
          }),
          (i.prototype.moveTo = function (e, t) {
            return (
              this.pathCommands.push(new n("M", [e, t])),
              this._ctx && this._ctx.moveTo(e, t),
              this
            );
          }),
          (i.prototype.lineTo = function (e, t) {
            return (
              this.pathCommands.push(new n("L", [e, t])),
              this._ctx && this._ctx.lineTo(e, t),
              this
            );
          }),
          (i.prototype.bezierCurveTo = function (e, t, i, a, o, s) {
            return (
              this.pathCommands.push(new n("C", [e, t, i, a, o, s])),
              this._ctx && this._ctx.bezierCurveTo(e, t, i, a, o, s),
              this
            );
          }),
          (i.prototype.quadraticCurveTo = function (e, t, i, a) {
            return (
              this.pathCommands.push(new n("Q", [e, t, i, a])),
              this._ctx && this._ctx.quadraticCurveTo(e, t, i, a),
              this
            );
          }),
          (i.prototype.arc = function (e, t, i, a, o, s) {
            return (
              this.pathCommands.push(
                new n("A", [e, t, i, i, a, o - a, 0, s ? 0 : 1])
              ),
              this._ctx && this._ctx.arc(e, t, i, a, o, s),
              this
            );
          }),
          (i.prototype.arcTo = function (e, t, n, i, a) {
            return this._ctx && this._ctx.arcTo(e, t, n, i, a), this;
          }),
          (i.prototype.rect = function (e, t, n, i) {
            return this._ctx && this._ctx.rect(e, t, n, i), this;
          }),
          (i.prototype.closePath = function () {
            return (
              this.pathCommands.push(new n("z")),
              this._ctx && this._ctx.closePath(),
              this
            );
          }),
          (i.prototype.isEmpty = function () {
            return 0 === this.pathCommands.length;
          }),
          (i.PathSegment = n),
          i
        );
      }
    ),
    n(
      "zrender/shape/Line",
      ["require", "./Base", "./util/dashedLineTo", "../tool/util"],
      function (e) {
        var t = e("./Base"),
          n = e("./util/dashedLineTo"),
          i = function (e) {
            (this.brushTypeOnly = "stroke"),
              (this.textPosition = "end"),
              t.call(this, e);
          };
        return (
          (i.prototype = {
            type: "line",
            buildPath: function (e, t) {
              if (t.lineType && "solid" != t.lineType) {
                if ("dashed" == t.lineType || "dotted" == t.lineType) {
                  var i = (t.lineWidth || 1) * ("dashed" == t.lineType ? 5 : 1);
                  n(e, t.xStart, t.yStart, t.xEnd, t.yEnd, i);
                }
              } else e.moveTo(t.xStart, t.yStart), e.lineTo(t.xEnd, t.yEnd);
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t = e.lineWidth || 1;
              return (
                (e.__rect = {
                  x: Math.min(e.xStart, e.xEnd) - t,
                  y: Math.min(e.yStart, e.yEnd) - t,
                  width: Math.abs(e.xStart - e.xEnd) + t,
                  height: Math.abs(e.yStart - e.yEnd) + t,
                }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(i, t),
          i
        );
      }
    ),
    n(
      "zrender/shape/Polyline",
      [
        "require",
        "./Base",
        "./util/smoothSpline",
        "./util/smoothBezier",
        "./util/dashedLineTo",
        "./Polygon",
        "../tool/util",
      ],
      function (e) {
        var t = e("./Base"),
          n = e("./util/smoothSpline"),
          i = e("./util/smoothBezier"),
          a = e("./util/dashedLineTo"),
          o = function (e) {
            (this.brushTypeOnly = "stroke"),
              (this.textPosition = "end"),
              t.call(this, e);
          };
        return (
          (o.prototype = {
            type: "polyline",
            buildPath: function (e, t) {
              var o = t.pointList;
              if (!(o.length < 2)) {
                var s = Math.min(
                  t.pointList.length,
                  Math.round(t.pointListLength || t.pointList.length)
                );
                if (t.smooth && "spline" !== t.smooth) {
                  var r = i(o, t.smooth, !1, t.smoothConstraint);
                  e.moveTo(o[0][0], o[0][1]);
                  for (var l, h, V, U = 0; s - 1 > U; U++)
                    (l = r[2 * U]),
                      (h = r[2 * U + 1]),
                      (V = o[U + 1]),
                      e.bezierCurveTo(l[0], l[1], h[0], h[1], V[0], V[1]);
                } else if (
                  ("spline" === t.smooth && ((o = n(o)), (s = o.length)),
                  t.lineType && "solid" != t.lineType)
                ) {
                  if ("dashed" == t.lineType || "dotted" == t.lineType) {
                    var m =
                      (t.lineWidth || 1) * ("dashed" == t.lineType ? 5 : 1);
                    e.moveTo(o[0][0], o[0][1]);
                    for (var U = 1; s > U; U++)
                      a(e, o[U - 1][0], o[U - 1][1], o[U][0], o[U][1], m);
                  }
                } else {
                  e.moveTo(o[0][0], o[0][1]);
                  for (var U = 1; s > U; U++) e.lineTo(o[U][0], o[U][1]);
                }
              }
            },
            getRect: function (t) {
              return e("./Polygon").prototype.getRect(t);
            },
          }),
          e("../tool/util").inherits(o, t),
          o
        );
      }
    ),
    n("zrender/shape/util/dashedLineTo", [], function () {
      var e = [5, 5];
      return function (t, n, i, a, o, s) {
        if (t.setLineDash)
          return (
            (e[0] = e[1] = s),
            t.setLineDash(e),
            t.moveTo(n, i),
            void t.lineTo(a, o)
          );
        s = "number" != typeof s ? 5 : s;
        var r = a - n,
          l = o - i,
          h = Math.floor(Math.sqrt(r * r + l * l) / s);
        (r /= h), (l /= h);
        for (var V = !0, U = 0; h > U; ++U)
          V ? t.moveTo(n, i) : t.lineTo(n, i), (V = !V), (n += r), (i += l);
        t.lineTo(a, o);
      };
    }),
    n(
      "zrender/shape/util/smoothSpline",
      ["require", "../../tool/vector"],
      function (e) {
        function t(e, t, n, i, a, o, s) {
          var r = 0.5 * (n - e),
            l = 0.5 * (i - t);
          return (
            (2 * (t - n) + r + l) * s +
            (-3 * (t - n) - 2 * r - l) * o +
            r * a +
            t
          );
        }
        var n = e("../../tool/vector");
        return function (e, i) {
          for (var a = e.length, o = [], s = 0, r = 1; a > r; r++)
            s += n.distance(e[r - 1], e[r]);
          var l = s / 5;
          l = a > l ? a : l;
          for (var r = 0; l > r; r++) {
            var h,
              V,
              U,
              m = (r / (l - 1)) * (i ? a : a - 1),
              p = Math.floor(m),
              d = m - p,
              c = e[p % a];
            i
              ? ((h = e[(p - 1 + a) % a]),
                (V = e[(p + 1) % a]),
                (U = e[(p + 2) % a]))
              : ((h = e[0 === p ? p : p - 1]),
                (V = e[p > a - 2 ? a - 1 : p + 1]),
                (U = e[p > a - 3 ? a - 1 : p + 2]));
            var u = d * d,
              y = d * u;
            o.push([
              t(h[0], c[0], V[0], U[0], d, u, y),
              t(h[1], c[1], V[1], U[1], d, u, y),
            ]);
          }
          return o;
        };
      }
    ),
    n(
      "zrender/shape/util/smoothBezier",
      ["require", "../../tool/vector"],
      function (e) {
        var t = e("../../tool/vector");
        return function (e, n, i, a) {
          var o,
            s,
            r,
            l,
            h = [],
            V = [],
            U = [],
            m = [],
            p = !!a;
          if (p) {
            (r = [1 / 0, 1 / 0]), (l = [-1 / 0, -1 / 0]);
            for (var d = 0, c = e.length; c > d; d++)
              t.min(r, r, e[d]), t.max(l, l, e[d]);
            t.min(r, r, a[0]), t.max(l, l, a[1]);
          }
          for (var d = 0, c = e.length; c > d; d++) {
            var o,
              s,
              u = e[d];
            if (i) (o = e[d ? d - 1 : c - 1]), (s = e[(d + 1) % c]);
            else {
              if (0 === d || d === c - 1) {
                h.push(e[d]);
                continue;
              }
              (o = e[d - 1]), (s = e[d + 1]);
            }
            t.sub(V, s, o), t.scale(V, V, n);
            var y = t.distance(u, o),
              b = t.distance(u, s),
              g = y + b;
            0 !== g && ((y /= g), (b /= g)),
              t.scale(U, V, -y),
              t.scale(m, V, b);
            var k = t.add([], u, U),
              f = t.add([], u, m);
            p &&
              (t.max(k, k, r), t.min(k, k, l), t.max(f, f, r), t.min(f, f, l)),
              h.push(k),
              h.push(f);
          }
          return i && h.push(h.shift()), h;
        };
      }
    ),
    n(
      "zrender/shape/Polygon",
      [
        "require",
        "./Base",
        "./util/smoothSpline",
        "./util/smoothBezier",
        "./util/dashedLineTo",
        "../tool/util",
      ],
      function (e) {
        var t = e("./Base"),
          n = e("./util/smoothSpline"),
          i = e("./util/smoothBezier"),
          a = e("./util/dashedLineTo"),
          o = function (e) {
            t.call(this, e);
          };
        return (
          (o.prototype = {
            type: "polygon",
            buildPath: function (e, t) {
              var o = t.pointList;
              if (!(o.length < 2)) {
                if (t.smooth && "spline" !== t.smooth) {
                  var s = i(o, t.smooth, !0, t.smoothConstraint);
                  e.moveTo(o[0][0], o[0][1]);
                  for (var r, l, h, V = o.length, U = 0; V > U; U++)
                    (r = s[2 * U]),
                      (l = s[2 * U + 1]),
                      (h = o[(U + 1) % V]),
                      e.bezierCurveTo(r[0], r[1], l[0], l[1], h[0], h[1]);
                } else if (
                  ("spline" === t.smooth && (o = n(o, !0)),
                  t.lineType && "solid" != t.lineType)
                ) {
                  if ("dashed" == t.lineType || "dotted" == t.lineType) {
                    var m =
                      t._dashLength ||
                      (t.lineWidth || 1) * ("dashed" == t.lineType ? 5 : 1);
                    (t._dashLength = m), e.moveTo(o[0][0], o[0][1]);
                    for (var U = 1, p = o.length; p > U; U++)
                      a(e, o[U - 1][0], o[U - 1][1], o[U][0], o[U][1], m);
                    a(
                      e,
                      o[o.length - 1][0],
                      o[o.length - 1][1],
                      o[0][0],
                      o[0][1],
                      m
                    );
                  }
                } else {
                  e.moveTo(o[0][0], o[0][1]);
                  for (var U = 1, p = o.length; p > U; U++)
                    e.lineTo(o[U][0], o[U][1]);
                  e.lineTo(o[0][0], o[0][1]);
                }
                e.closePath();
              }
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              for (
                var t = Number.MAX_VALUE,
                  n = Number.MIN_VALUE,
                  i = Number.MAX_VALUE,
                  a = Number.MIN_VALUE,
                  o = e.pointList,
                  s = 0,
                  r = o.length;
                r > s;
                s++
              )
                o[s][0] < t && (t = o[s][0]),
                  o[s][0] > n && (n = o[s][0]),
                  o[s][1] < i && (i = o[s][1]),
                  o[s][1] > a && (a = o[s][1]);
              var l;
              return (
                (l =
                  "stroke" == e.brushType || "fill" == e.brushType
                    ? e.lineWidth || 1
                    : 0),
                (e.__rect = {
                  x: Math.round(t - l / 2),
                  y: Math.round(i - l / 2),
                  width: n - t + l,
                  height: a - i + l,
                }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(o, t),
          o
        );
      }
    ),
    n("echarts/util/shape/normalIsCover", [], function () {
      return function (e, t) {
        var n = this.getTansform(e, t);
        (e = n[0]), (t = n[1]);
        var i = this.style.__rect;
        return (
          i || (i = this.style.__rect = this.getRect(this.style)),
          e >= i.x && e <= i.x + i.width && t >= i.y && t <= i.y + i.height
        );
      };
    }),
    n("echarts/util/ecQuery", ["require", "zrender/tool/util"], function (e) {
      function t(e, t) {
        if ("undefined" != typeof e) {
          if (!t) return e;
          t = t.split(".");
          for (var n = t.length, i = 0; n > i; ) {
            if (((e = e[t[i]]), "undefined" == typeof e)) return;
            i++;
          }
          return e;
        }
      }
      function n(e, n) {
        for (var i, a = 0, o = e.length; o > a; a++)
          if (((i = t(e[a], n)), "undefined" != typeof i)) return i;
      }
      function i(e, n) {
        for (var i, o = e.length; o--; ) {
          var s = t(e[o], n);
          "undefined" != typeof s &&
            ("undefined" == typeof i ? (i = a.clone(s)) : a.merge(i, s, !0));
        }
        return i;
      }
      var a = e("zrender/tool/util");
      return { query: t, deepQuery: n, deepMerge: i };
    }),
    n("echarts/util/number", [], function () {
      function e(e) {
        return e.replace(/^\s+/, "").replace(/\s+$/, "");
      }
      function t(t, n) {
        return "string" == typeof t
          ? e(t).match(/%$/)
            ? (parseFloat(t) / 100) * n
            : parseFloat(t)
          : t;
      }
      function n(e, n) {
        return [t(n[0], e.getWidth()), t(n[1], e.getHeight())];
      }
      function i(e, n) {
        n instanceof Array || (n = [0, n]);
        var i = Math.min(e.getWidth(), e.getHeight()) / 2;
        return [t(n[0], i), t(n[1], i)];
      }
      function a(e) {
        return isNaN(e)
          ? "-"
          : ((e = (e + "").split(".")),
            e[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, "$1,") +
              (e.length > 1 ? "." + e[1] : ""));
      }
      return { parsePercent: t, parseCenter: n, parseRadius: i, addCommas: a };
    }),
    n(
      "echarts/util/shape/Cross",
      [
        "require",
        "zrender/shape/Base",
        "zrender/shape/Line",
        "zrender/tool/util",
        "./normalIsCover",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/shape/Line"),
          a = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "cross",
            buildPath: function (e, t) {
              var n = t.rect;
              (t.xStart = n.x),
                (t.xEnd = n.x + n.width),
                (t.yStart = t.yEnd = t.y),
                i.prototype.buildPath(e, t),
                (t.xStart = t.xEnd = t.x),
                (t.yStart = n.y),
                (t.yEnd = n.y + n.height),
                i.prototype.buildPath(e, t);
            },
            getRect: function (e) {
              return e.rect;
            },
            isCover: e("./normalIsCover"),
          }),
          a.inherits(t, n),
          t
        );
      }
    ),
    n(
      "zrender/shape/Sector",
      [
        "require",
        "../tool/math",
        "../tool/computeBoundingBox",
        "../tool/vector",
        "./Base",
        "../tool/util",
      ],
      function (e) {
        var t = e("../tool/math"),
          n = e("../tool/computeBoundingBox"),
          i = e("../tool/vector"),
          a = e("./Base"),
          o = i.create(),
          s = i.create(),
          r = i.create(),
          l = i.create(),
          h = function (e) {
            a.call(this, e);
          };
        return (
          (h.prototype = {
            type: "sector",
            buildPath: function (e, n) {
              var i = n.x,
                a = n.y,
                o = n.r0 || 0,
                s = n.r,
                r = n.startAngle,
                l = n.endAngle,
                h = n.clockWise || !1;
              (r = t.degreeToRadian(r)),
                (l = t.degreeToRadian(l)),
                h || ((r = -r), (l = -l));
              var V = t.cos(r),
                U = t.sin(r);
              e.moveTo(V * o + i, U * o + a),
                e.lineTo(V * s + i, U * s + a),
                e.arc(i, a, s, r, l, !h),
                e.lineTo(t.cos(l) * o + i, t.sin(l) * o + a),
                0 !== o && e.arc(i, a, o, l, r, h),
                e.closePath();
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var a = e.x,
                h = e.y,
                V = e.r0 || 0,
                U = e.r,
                m = t.degreeToRadian(e.startAngle),
                p = t.degreeToRadian(e.endAngle),
                d = e.clockWise;
              return (
                d || ((m = -m), (p = -p)),
                V > 1
                  ? n.arc(a, h, V, m, p, !d, o, r)
                  : ((o[0] = r[0] = a), (o[1] = r[1] = h)),
                n.arc(a, h, U, m, p, !d, s, l),
                i.min(o, o, s),
                i.max(r, r, l),
                (e.__rect = {
                  x: o[0],
                  y: o[1],
                  width: r[0] - o[0],
                  height: r[1] - o[1],
                }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(h, a),
          h
        );
      }
    ),
    n(
      "echarts/util/shape/Candle",
      ["require", "zrender/shape/Base", "zrender/tool/util", "./normalIsCover"],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "candle",
            _numberOrder: function (e, t) {
              return t - e;
            },
            buildPath: function (e, t) {
              var n = i.clone(t.y).sort(this._numberOrder);
              e.moveTo(t.x, n[3]),
                e.lineTo(t.x, n[2]),
                e.moveTo(t.x - t.width / 2, n[2]),
                e.rect(t.x - t.width / 2, n[2], t.width, n[1] - n[2]),
                e.moveTo(t.x, n[1]),
                e.lineTo(t.x, n[0]);
            },
            getRect: function (e) {
              if (!e.__rect) {
                var t = 0;
                ("stroke" == e.brushType || "fill" == e.brushType) &&
                  (t = e.lineWidth || 1);
                var n = i.clone(e.y).sort(this._numberOrder);
                e.__rect = {
                  x: Math.round(e.x - e.width / 2 - t / 2),
                  y: Math.round(n[3] - t / 2),
                  width: e.width + t,
                  height: n[0] - n[3] + t,
                };
              }
              return e.__rect;
            },
            isCover: e("./normalIsCover"),
          }),
          i.inherits(t, n),
          t
        );
      }
    ),
    n(
      "zrender/tool/computeBoundingBox",
      ["require", "./vector", "./curve"],
      function (e) {
        function t(e, t, n) {
          if (0 !== e.length) {
            for (
              var i = e[0][0], a = e[0][0], o = e[0][1], s = e[0][1], r = 1;
              r < e.length;
              r++
            ) {
              var l = e[r];
              l[0] < i && (i = l[0]),
                l[0] > a && (a = l[0]),
                l[1] < o && (o = l[1]),
                l[1] > s && (s = l[1]);
            }
            (t[0] = i), (t[1] = o), (n[0] = a), (n[1] = s);
          }
        }
        function n(e, t, n, i, a, s) {
          var r = [];
          o.cubicExtrema(e[0], t[0], n[0], i[0], r);
          for (var l = 0; l < r.length; l++)
            r[l] = o.cubicAt(e[0], t[0], n[0], i[0], r[l]);
          var h = [];
          o.cubicExtrema(e[1], t[1], n[1], i[1], h);
          for (var l = 0; l < h.length; l++)
            h[l] = o.cubicAt(e[1], t[1], n[1], i[1], h[l]);
          r.push(e[0], i[0]), h.push(e[1], i[1]);
          var V = Math.min.apply(null, r),
            U = Math.max.apply(null, r),
            m = Math.min.apply(null, h),
            p = Math.max.apply(null, h);
          (a[0] = V), (a[1] = m), (s[0] = U), (s[1] = p);
        }
        function i(e, t, n, i, a) {
          var s = o.quadraticExtremum(e[0], t[0], n[0]),
            r = o.quadraticExtremum(e[1], t[1], n[1]);
          (s = Math.max(Math.min(s, 1), 0)), (r = Math.max(Math.min(r, 1), 0));
          var l = 1 - s,
            h = 1 - r,
            V = l * l * e[0] + 2 * l * s * t[0] + s * s * n[0],
            U = l * l * e[1] + 2 * l * s * t[1] + s * s * n[1],
            m = h * h * e[0] + 2 * h * r * t[0] + r * r * n[0],
            p = h * h * e[1] + 2 * h * r * t[1] + r * r * n[1];
          (i[0] = Math.min(e[0], n[0], V, m)),
            (i[1] = Math.min(e[1], n[1], U, p)),
            (a[0] = Math.max(e[0], n[0], V, m)),
            (a[1] = Math.max(e[1], n[1], U, p));
        }
        var a = e("./vector"),
          o = e("./curve"),
          s = a.create(),
          r = a.create(),
          l = a.create(),
          h = function (e, t, n, i, o, h, V, U) {
            if (Math.abs(i - o) >= 2 * Math.PI)
              return (
                (V[0] = e - n),
                (V[1] = t - n),
                (U[0] = e + n),
                void (U[1] = t + n)
              );
            if (
              ((s[0] = Math.cos(i) * n + e),
              (s[1] = Math.sin(i) * n + t),
              (r[0] = Math.cos(o) * n + e),
              (r[1] = Math.sin(o) * n + t),
              a.min(V, s, r),
              a.max(U, s, r),
              (i %= 2 * Math.PI),
              0 > i && (i += 2 * Math.PI),
              (o %= 2 * Math.PI),
              0 > o && (o += 2 * Math.PI),
              i > o && !h
                ? (o += 2 * Math.PI)
                : o > i && h && (i += 2 * Math.PI),
              h)
            ) {
              var m = o;
              (o = i), (i = m);
            }
            for (var p = 0; o > p; p += Math.PI / 2)
              p > i &&
                ((l[0] = Math.cos(p) * n + e),
                (l[1] = Math.sin(p) * n + t),
                a.min(V, l, V),
                a.max(U, l, U));
          };
        return (t.cubeBezier = n), (t.quadraticBezier = i), (t.arc = h), t;
      }
    ),
    n("zrender/tool/curve", ["require", "./vector"], function (e) {
      function t(e) {
        return e > -c && c > e;
      }
      function n(e) {
        return e > c || -c > e;
      }
      function i(e, t, n, i, a) {
        var o = 1 - a;
        return o * o * (o * e + 3 * a * t) + a * a * (a * i + 3 * o * n);
      }
      function a(e, t, n, i, a) {
        var o = 1 - a;
        return 3 * (((t - e) * o + 2 * (n - t) * a) * o + (i - n) * a * a);
      }
      function o(e, n, i, a, o, s) {
        var r = a + 3 * (n - i) - e,
          l = 3 * (i - 2 * n + e),
          h = 3 * (n - e),
          V = e - o,
          U = l * l - 3 * r * h,
          m = l * h - 9 * r * V,
          p = h * h - 3 * l * V,
          d = 0;
        if (t(U) && t(m))
          if (t(l)) s[0] = 0;
          else {
            var c = -h / l;
            c >= 0 && 1 >= c && (s[d++] = c);
          }
        else {
          var b = m * m - 4 * U * p;
          if (t(b)) {
            var g = m / U,
              c = -l / r + g,
              k = -g / 2;
            c >= 0 && 1 >= c && (s[d++] = c), k >= 0 && 1 >= k && (s[d++] = k);
          } else if (b > 0) {
            var f = Math.sqrt(b),
              L = U * l + 1.5 * r * (-m + f),
              x = U * l + 1.5 * r * (-m - f);
            (L = 0 > L ? -Math.pow(-L, y) : Math.pow(L, y)),
              (x = 0 > x ? -Math.pow(-x, y) : Math.pow(x, y));
            var c = (-l - (L + x)) / (3 * r);
            c >= 0 && 1 >= c && (s[d++] = c);
          } else {
            var _ = (2 * U * l - 3 * r * m) / (2 * Math.sqrt(U * U * U)),
              W = Math.acos(_) / 3,
              X = Math.sqrt(U),
              K = Math.cos(W),
              c = (-l - 2 * X * K) / (3 * r),
              k = (-l + X * (K + u * Math.sin(W))) / (3 * r),
              I = (-l + X * (K - u * Math.sin(W))) / (3 * r);
            c >= 0 && 1 >= c && (s[d++] = c),
              k >= 0 && 1 >= k && (s[d++] = k),
              I >= 0 && 1 >= I && (s[d++] = I);
          }
        }
        return d;
      }
      function s(e, i, a, o, s) {
        var r = 6 * a - 12 * i + 6 * e,
          l = 9 * i + 3 * o - 3 * e - 9 * a,
          h = 3 * i - 3 * e,
          V = 0;
        if (t(l)) {
          if (n(r)) {
            var U = -h / r;
            U >= 0 && 1 >= U && (s[V++] = U);
          }
        } else {
          var m = r * r - 4 * l * h;
          if (t(m)) s[0] = -r / (2 * l);
          else if (m > 0) {
            var p = Math.sqrt(m),
              U = (-r + p) / (2 * l),
              d = (-r - p) / (2 * l);
            U >= 0 && 1 >= U && (s[V++] = U), d >= 0 && 1 >= d && (s[V++] = d);
          }
        }
        return V;
      }
      function r(e, t, n, i, a, o) {
        var s = (t - e) * a + e,
          r = (n - t) * a + t,
          l = (i - n) * a + n,
          h = (r - s) * a + s,
          V = (l - r) * a + r,
          U = (V - h) * a + h;
        (o[0] = e),
          (o[1] = s),
          (o[2] = h),
          (o[3] = U),
          (o[4] = U),
          (o[5] = V),
          (o[6] = l),
          (o[7] = i);
      }
      function l(e, t, n, a, o, s, r, l, h, V, U) {
        var m,
          p = 0.005,
          u = 1 / 0;
        (b[0] = h), (b[1] = V);
        for (var y = 0; 1 > y; y += 0.05) {
          (g[0] = i(e, n, o, r, y)), (g[1] = i(t, a, s, l, y));
          var f = d.distSquare(b, g);
          u > f && ((m = y), (u = f));
        }
        u = 1 / 0;
        for (var L = 0; 32 > L && !(c > p); L++) {
          var x = m - p,
            _ = m + p;
          (g[0] = i(e, n, o, r, x)), (g[1] = i(t, a, s, l, x));
          var f = d.distSquare(g, b);
          if (x >= 0 && u > f) (m = x), (u = f);
          else {
            (k[0] = i(e, n, o, r, _)), (k[1] = i(t, a, s, l, _));
            var W = d.distSquare(k, b);
            1 >= _ && u > W ? ((m = _), (u = W)) : (p *= 0.5);
          }
        }
        return (
          U && ((U[0] = i(e, n, o, r, m)), (U[1] = i(t, a, s, l, m))),
          Math.sqrt(u)
        );
      }
      function h(e, t, n, i) {
        var a = 1 - i;
        return a * (a * e + 2 * i * t) + i * i * n;
      }
      function V(e, t, n, i) {
        return 2 * ((1 - i) * (t - e) + i * (n - t));
      }
      function U(e, i, a, o, s) {
        var r = e - 2 * i + a,
          l = 2 * (i - e),
          h = e - o,
          V = 0;
        if (t(r)) {
          if (n(l)) {
            var U = -h / l;
            U >= 0 && 1 >= U && (s[V++] = U);
          }
        } else {
          var m = l * l - 4 * r * h;
          if (t(m)) {
            var U = -l / (2 * r);
            U >= 0 && 1 >= U && (s[V++] = U);
          } else if (m > 0) {
            var p = Math.sqrt(m),
              U = (-l + p) / (2 * r),
              d = (-l - p) / (2 * r);
            U >= 0 && 1 >= U && (s[V++] = U), d >= 0 && 1 >= d && (s[V++] = d);
          }
        }
        return V;
      }
      function m(e, t, n) {
        var i = e + n - 2 * t;
        return 0 === i ? 0.5 : (e - t) / i;
      }
      function p(e, t, n, i, a, o, s, r, l) {
        var V,
          U = 0.005,
          m = 1 / 0;
        (b[0] = s), (b[1] = r);
        for (var p = 0; 1 > p; p += 0.05) {
          (g[0] = h(e, n, a, p)), (g[1] = h(t, i, o, p));
          var u = d.distSquare(b, g);
          m > u && ((V = p), (m = u));
        }
        m = 1 / 0;
        for (var y = 0; 32 > y && !(c > U); y++) {
          var f = V - U,
            L = V + U;
          (g[0] = h(e, n, a, f)), (g[1] = h(t, i, o, f));
          var u = d.distSquare(g, b);
          if (f >= 0 && m > u) (V = f), (m = u);
          else {
            (k[0] = h(e, n, a, L)), (k[1] = h(t, i, o, L));
            var x = d.distSquare(k, b);
            1 >= L && m > x ? ((V = L), (m = x)) : (U *= 0.5);
          }
        }
        return (
          l && ((l[0] = h(e, n, a, V)), (l[1] = h(t, i, o, V))), Math.sqrt(m)
        );
      }
      var d = e("./vector"),
        c = 1e-4,
        u = Math.sqrt(3),
        y = 1 / 3,
        b = d.create(),
        g = d.create(),
        k = d.create();
      return {
        cubicAt: i,
        cubicDerivativeAt: a,
        cubicRootAt: o,
        cubicExtrema: s,
        cubicSubdivide: r,
        cubicProjectPoint: l,
        quadraticAt: h,
        quadraticDerivativeAt: V,
        quadraticRootAt: U,
        quadraticExtremum: m,
        quadraticProjectPoint: p,
      };
    }),
    n(
      "echarts/util/shape/Chain",
      [
        "require",
        "zrender/shape/Base",
        "./Icon",
        "zrender/shape/util/dashedLineTo",
        "zrender/tool/util",
        "zrender/tool/matrix",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("./Icon"),
          a = e("zrender/shape/util/dashedLineTo"),
          o = e("zrender/tool/util"),
          s = e("zrender/tool/matrix");
        return (
          (t.prototype = {
            type: "chain",
            brush: function (e, t) {
              var n = this.style;
              t && (n = this.getHighlightStyle(n, this.highlightStyle || {})),
                e.save(),
                this.setContext(e, n),
                this.setTransform(e),
                e.save(),
                e.beginPath(),
                this.buildLinePath(e, n),
                e.stroke(),
                e.restore(),
                this.brushSymbol(e, n),
                e.restore();
            },
            buildLinePath: function (e, t) {
              var n = t.x,
                i = t.y + 5,
                o = t.width,
                s = t.height / 2 - 10;
              if (
                (e.moveTo(n, i),
                e.lineTo(n, i + s),
                e.moveTo(n + o, i),
                e.lineTo(n + o, i + s),
                e.moveTo(n, i + s / 2),
                t.lineType && "solid" != t.lineType)
              ) {
                if ("dashed" == t.lineType || "dotted" == t.lineType) {
                  var r = (t.lineWidth || 1) * ("dashed" == t.lineType ? 5 : 1);
                  a(e, n, i + s / 2, n + o, i + s / 2, r);
                }
              } else e.lineTo(n + o, i + s / 2);
            },
            brushSymbol: function (e, t) {
              var n = t.y + t.height / 4;
              e.save();
              for (var a, o = t.chainPoint, s = 0, r = o.length; r > s; s++) {
                if (((a = o[s]), "none" != a.symbol)) {
                  e.beginPath();
                  var l = a.symbolSize;
                  i.prototype.buildPath(e, {
                    iconType: a.symbol,
                    x: a.x - l,
                    y: n - l,
                    width: 2 * l,
                    height: 2 * l,
                    n: a.n,
                  }),
                    (e.fillStyle = a.isEmpty ? "#fff" : t.strokeColor),
                    e.closePath(),
                    e.fill(),
                    e.stroke();
                }
                a.showLabel &&
                  ((e.font = a.textFont),
                  (e.fillStyle = a.textColor),
                  (e.textAlign = a.textAlign),
                  (e.textBaseline = a.textBaseline),
                  a.rotation
                    ? (e.save(),
                      this._updateTextTransform(e, a.rotation),
                      e.fillText(a.name, a.textX, a.textY),
                      e.restore())
                    : e.fillText(a.name, a.textX, a.textY));
              }
              e.restore();
            },
            _updateTextTransform: function (e, t) {
              var n = s.create();
              if ((s.identity(n), 0 !== t[0])) {
                var i = t[1] || 0,
                  a = t[2] || 0;
                (i || a) && s.translate(n, n, [-i, -a]),
                  s.rotate(n, n, t[0]),
                  (i || a) && s.translate(n, n, [i, a]);
              }
              e.transform.apply(e, n);
            },
            isCover: function (e, t) {
              var n = this.style;
              return e >= n.x &&
                e <= n.x + n.width &&
                t >= n.y &&
                t <= n.y + n.height
                ? !0
                : !1;
            },
          }),
          o.inherits(t, n),
          t
        );
      }
    ),
    n(
      "echarts/chart/line",
      [
        "require",
        "./base",
        "zrender/shape/Polyline",
        "../util/shape/Icon",
        "../util/shape/HalfSmoothPolygon",
        "../component/axis",
        "../component/grid",
        "../component/dataZoom",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/color",
        "../chart",
      ],
      function (e) {
        function t(e, t, n, a, o) {
          i.call(this, e, t, n, a, o), this.refresh(a);
        }
        function n(e, t, n) {
          var i = t.x,
            a = t.y,
            s = t.width,
            r = t.height,
            l = r / 2;
          t.symbol.match("empty") && (e.fillStyle = "#fff"),
            (t.brushType = "both");
          var h = t.symbol.replace("empty", "").toLowerCase();
          h.match("star")
            ? ((l = h.replace("star", "") - 0 || 5), (a -= 1), (h = "star"))
            : ("rectangle" === h || "arrow" === h) &&
              ((i += (s - r) / 2), (s = r));
          var V = "";
          if (
            (h.match("image") &&
              ((V = h.replace(new RegExp("^image:\\/\\/"), "")),
              (h = "image"),
              (i += Math.round((s - r) / 2) - 1),
              (s = r += 2)),
            (h = o.prototype.iconLibrary[h]))
          ) {
            var U = t.x,
              m = t.y;
            e.moveTo(U, m + l),
              e.lineTo(U + 5, m + l),
              e.moveTo(U + t.width - 5, m + l),
              e.lineTo(U + t.width, m + l);
            var p = this;
            h(
              e,
              {
                x: i + 4,
                y: a + 4,
                width: s - 8,
                height: r - 8,
                n: l,
                image: V,
              },
              function () {
                p.modSelf(), n();
              }
            );
          } else e.moveTo(i, a + l), e.lineTo(i + s, a + l);
        }
        var i = e("./base"),
          a = e("zrender/shape/Polyline"),
          o = e("../util/shape/Icon"),
          s = e("../util/shape/HalfSmoothPolygon");
        e("../component/axis"),
          e("../component/grid"),
          e("../component/dataZoom");
        var r = e("../config");
        r.line = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          xAxisIndex: 0,
          yAxisIndex: 0,
          itemStyle: {
            normal: {
              label: { show: !1 },
              lineStyle: {
                width: 1.5,
                type: "solid",
                shadowColor: "rgba(0,0,0,0)",
                shadowBlur: 0,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
              },
            },
            emphasis: { label: { show: !1 } },
          },
          symbolSize: 2,
          showAllSymbol: !1,
        };
        var l = e("../util/ecData"),
          h = e("zrender/tool/util"),
          V = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: r.CHART_TYPE_LINE,
            _buildShape: function () {
              (this.finalPLMap = {}), this._buildPosition();
            },
            _buildHorizontal: function (e, t, n, i) {
              for (
                var a,
                  o,
                  s,
                  r,
                  l,
                  h,
                  V,
                  U,
                  m,
                  p = this.series,
                  d = n[0][0],
                  c = p[d],
                  u = this.component.xAxis.getAxis(c.xAxisIndex || 0),
                  y = {},
                  b = 0,
                  g = t;
                g > b && null != u.getNameByIndex(b);
                b++
              ) {
                o = u.getCoordByIndex(b);
                for (var k = 0, f = n.length; f > k; k++) {
                  (a = this.component.yAxis.getAxis(
                    p[n[k][0]].yAxisIndex || 0
                  )),
                    (l = r = V = h = a.getCoord(0));
                  for (var L = 0, x = n[k].length; x > L; L++)
                    (d = n[k][L]),
                      (c = p[d]),
                      (U = c.data[b]),
                      (m = this.getDataFromOption(U, "-")),
                      (y[d] = y[d] || []),
                      (i[d] = i[d] || {
                        min: Number.POSITIVE_INFINITY,
                        max: Number.NEGATIVE_INFINITY,
                        sum: 0,
                        counter: 0,
                        average: 0,
                      }),
                      "-" !== m
                        ? (m >= 0
                            ? ((r -=
                                L > 0 ? a.getCoordSize(m) : l - a.getCoord(m)),
                              (s = r))
                            : 0 > m &&
                              ((h +=
                                L > 0 ? a.getCoordSize(m) : a.getCoord(m) - V),
                              (s = h)),
                          y[d].push([o, s, b, u.getNameByIndex(b), o, l]),
                          i[d].min > m &&
                            ((i[d].min = m), (i[d].minY = s), (i[d].minX = o)),
                          i[d].max < m &&
                            ((i[d].max = m), (i[d].maxY = s), (i[d].maxX = o)),
                          (i[d].sum += m),
                          i[d].counter++)
                        : y[d].length > 0 &&
                          ((this.finalPLMap[d] = this.finalPLMap[d] || []),
                          this.finalPLMap[d].push(y[d]),
                          (y[d] = []));
                }
                r = this.component.grid.getY();
                for (var _, k = 0, f = n.length; f > k; k++)
                  for (var L = 0, x = n[k].length; x > L; L++)
                    (d = n[k][L]),
                      (c = p[d]),
                      (U = c.data[b]),
                      (m = this.getDataFromOption(U, "-")),
                      "-" == m &&
                        this.deepQuery([U, c, this.option], "calculable") &&
                        ((_ = this.deepQuery([U, c], "symbolSize")),
                        (r += 2 * _ + 5),
                        (s = r),
                        this.shapeList.push(
                          this._getCalculableItem(
                            d,
                            b,
                            u.getNameByIndex(b),
                            o,
                            s,
                            "horizontal"
                          )
                        ));
              }
              for (var W in y)
                y[W].length > 0 &&
                  ((this.finalPLMap[W] = this.finalPLMap[W] || []),
                  this.finalPLMap[W].push(y[W]),
                  (y[W] = []));
              this._calculMarkMapXY(i, n, "y"),
                this._buildBorkenLine(e, this.finalPLMap, u, "horizontal");
            },
            _buildVertical: function (e, t, n, i) {
              for (
                var a,
                  o,
                  s,
                  r,
                  l,
                  h,
                  V,
                  U,
                  m,
                  p = this.series,
                  d = n[0][0],
                  c = p[d],
                  u = this.component.yAxis.getAxis(c.yAxisIndex || 0),
                  y = {},
                  b = 0,
                  g = t;
                g > b && null != u.getNameByIndex(b);
                b++
              ) {
                s = u.getCoordByIndex(b);
                for (var k = 0, f = n.length; f > k; k++) {
                  (a = this.component.xAxis.getAxis(
                    p[n[k][0]].xAxisIndex || 0
                  )),
                    (l = r = V = h = a.getCoord(0));
                  for (var L = 0, x = n[k].length; x > L; L++)
                    (d = n[k][L]),
                      (c = p[d]),
                      (U = c.data[b]),
                      (m = this.getDataFromOption(U, "-")),
                      (y[d] = y[d] || []),
                      (i[d] = i[d] || {
                        min: Number.POSITIVE_INFINITY,
                        max: Number.NEGATIVE_INFINITY,
                        sum: 0,
                        counter: 0,
                        average: 0,
                      }),
                      "-" !== m
                        ? (m >= 0
                            ? ((r +=
                                L > 0 ? a.getCoordSize(m) : a.getCoord(m) - l),
                              (o = r))
                            : 0 > m &&
                              ((h -=
                                L > 0 ? a.getCoordSize(m) : V - a.getCoord(m)),
                              (o = h)),
                          y[d].push([o, s, b, u.getNameByIndex(b), l, s]),
                          i[d].min > m &&
                            ((i[d].min = m), (i[d].minX = o), (i[d].minY = s)),
                          i[d].max < m &&
                            ((i[d].max = m), (i[d].maxX = o), (i[d].maxY = s)),
                          (i[d].sum += m),
                          i[d].counter++)
                        : y[d].length > 0 &&
                          ((this.finalPLMap[d] = this.finalPLMap[d] || []),
                          this.finalPLMap[d].push(y[d]),
                          (y[d] = []));
                }
                r = this.component.grid.getXend();
                for (var _, k = 0, f = n.length; f > k; k++)
                  for (var L = 0, x = n[k].length; x > L; L++)
                    (d = n[k][L]),
                      (c = p[d]),
                      (U = c.data[b]),
                      (m = this.getDataFromOption(U, "-")),
                      "-" == m &&
                        this.deepQuery([U, c, this.option], "calculable") &&
                        ((_ = this.deepQuery([U, c], "symbolSize")),
                        (r -= 2 * _ + 5),
                        (o = r),
                        this.shapeList.push(
                          this._getCalculableItem(
                            d,
                            b,
                            u.getNameByIndex(b),
                            o,
                            s,
                            "vertical"
                          )
                        ));
              }
              for (var W in y)
                y[W].length > 0 &&
                  ((this.finalPLMap[W] = this.finalPLMap[W] || []),
                  this.finalPLMap[W].push(y[W]),
                  (y[W] = []));
              this._calculMarkMapXY(i, n, "x"),
                this._buildBorkenLine(e, this.finalPLMap, u, "vertical");
            },
            _buildOther: function (e, t, n, i) {
              for (
                var a, o = this.series, s = {}, r = 0, l = n.length;
                l > r;
                r++
              )
                for (var h = 0, V = n[r].length; V > h; h++) {
                  var U = n[r][h],
                    m = o[U];
                  a = this.component.xAxis.getAxis(m.xAxisIndex || 0);
                  var p = this.component.yAxis.getAxis(m.yAxisIndex || 0),
                    d = p.getCoord(0);
                  (s[U] = s[U] || []),
                    (i[U] = i[U] || {
                      min0: Number.POSITIVE_INFINITY,
                      min1: Number.POSITIVE_INFINITY,
                      max0: Number.NEGATIVE_INFINITY,
                      max1: Number.NEGATIVE_INFINITY,
                      sum0: 0,
                      sum1: 0,
                      counter0: 0,
                      counter1: 0,
                      average0: 0,
                      average1: 0,
                    });
                  for (var c = 0, u = m.data.length; u > c; c++) {
                    var y = m.data[c],
                      b = this.getDataFromOption(y, "-");
                    if (b instanceof Array) {
                      var g = a.getCoord(b[0]),
                        k = p.getCoord(b[1]);
                      s[U].push([g, k, c, b[0], g, d]),
                        i[U].min0 > b[0] &&
                          ((i[U].min0 = b[0]),
                          (i[U].minY0 = k),
                          (i[U].minX0 = g)),
                        i[U].max0 < b[0] &&
                          ((i[U].max0 = b[0]),
                          (i[U].maxY0 = k),
                          (i[U].maxX0 = g)),
                        (i[U].sum0 += b[0]),
                        i[U].counter0++,
                        i[U].min1 > b[1] &&
                          ((i[U].min1 = b[1]),
                          (i[U].minY1 = k),
                          (i[U].minX1 = g)),
                        i[U].max1 < b[1] &&
                          ((i[U].max1 = b[1]),
                          (i[U].maxY1 = k),
                          (i[U].maxX1 = g)),
                        (i[U].sum1 += b[1]),
                        i[U].counter1++;
                    }
                  }
                }
              for (var f in s)
                s[f].length > 0 &&
                  ((this.finalPLMap[f] = this.finalPLMap[f] || []),
                  this.finalPLMap[f].push(s[f]),
                  (s[f] = []));
              this._calculMarkMapXY(i, n, "xy"),
                this._buildBorkenLine(e, this.finalPLMap, a, "other");
            },
            _buildBorkenLine: function (e, t, n, i) {
              for (
                var o,
                  r = "other" == i ? "horizontal" : i,
                  U = this.series,
                  m = e.length - 1;
                m >= 0;
                m--
              ) {
                var p = e[m],
                  d = U[p],
                  c = t[p];
                if (d.type === this.type && null != c)
                  for (
                    var u = this._getBbox(p, r),
                      y = this._sIndex2ColorMap[p],
                      b = this.query(d, "itemStyle.normal.lineStyle.width"),
                      g = this.query(d, "itemStyle.normal.lineStyle.type"),
                      k = this.query(d, "itemStyle.normal.lineStyle.color"),
                      f = this.getItemStyleColor(
                        this.query(d, "itemStyle.normal.color"),
                        p,
                        -1
                      ),
                      L = null != this.query(d, "itemStyle.normal.areaStyle"),
                      x = this.query(d, "itemStyle.normal.areaStyle.color"),
                      _ = 0,
                      W = c.length;
                    W > _;
                    _++
                  ) {
                    var X = c[_],
                      K = "other" != i && this._isLarge(r, X);
                    if (K) X = this._getLargePointList(r, X);
                    else
                      for (var I = 0, w = X.length; w > I; I++)
                        (o = d.data[X[I][2]]),
                          (this.deepQuery([o, d, this.option], "calculable") ||
                            this.deepQuery([o, d], "showAllSymbol") ||
                            ("categoryAxis" === n.type &&
                              n.isMainAxis(X[I][2]) &&
                              "none" != this.deepQuery([o, d], "symbol"))) &&
                            this.shapeList.push(
                              this._getSymbol(
                                p,
                                X[I][2],
                                X[I][3],
                                X[I][0],
                                X[I][1],
                                r
                              )
                            );
                    var v = new a({
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      style: {
                        miterLimit: b,
                        pointList: X,
                        strokeColor: k || f || y,
                        lineWidth: b,
                        lineType: g,
                        smooth: this._getSmooth(d.smooth),
                        smoothConstraint: u,
                        shadowColor: this.query(
                          d,
                          "itemStyle.normal.lineStyle.shadowColor"
                        ),
                        shadowBlur: this.query(
                          d,
                          "itemStyle.normal.lineStyle.shadowBlur"
                        ),
                        shadowOffsetX: this.query(
                          d,
                          "itemStyle.normal.lineStyle.shadowOffsetX"
                        ),
                        shadowOffsetY: this.query(
                          d,
                          "itemStyle.normal.lineStyle.shadowOffsetY"
                        ),
                      },
                      hoverable: !1,
                      _main: !0,
                      _seriesIndex: p,
                      _orient: r,
                    });
                    if (
                      (l.pack(v, U[p], p, 0, _, U[p].name),
                      this.shapeList.push(v),
                      L)
                    ) {
                      var J = new s({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: {
                          miterLimit: b,
                          pointList: h.clone(X).concat([
                            [X[X.length - 1][4], X[X.length - 1][5]],
                            [X[0][4], X[0][5]],
                          ]),
                          brushType: "fill",
                          smooth: this._getSmooth(d.smooth),
                          smoothConstraint: u,
                          color: x ? x : V.alpha(y, 0.5),
                        },
                        highlightStyle: { brushType: "fill" },
                        hoverable: !1,
                        _main: !0,
                        _seriesIndex: p,
                        _orient: r,
                      });
                      l.pack(J, U[p], p, 0, _, U[p].name),
                        this.shapeList.push(J);
                    }
                  }
              }
            },
            _getBbox: function (e, t) {
              var n = this.component.grid.getBbox(),
                i = this.xMarkMap[e];
              return null != i.minX0
                ? [
                    [
                      Math.min(i.minX0, i.maxX0, i.minX1, i.maxX1),
                      Math.min(i.minY0, i.maxY0, i.minY1, i.maxY1),
                    ],
                    [
                      Math.max(i.minX0, i.maxX0, i.minX1, i.maxX1),
                      Math.max(i.minY0, i.maxY0, i.minY1, i.maxY1),
                    ],
                  ]
                : ("horizontal" === t
                    ? ((n[0][1] = Math.min(i.minY, i.maxY)),
                      (n[1][1] = Math.max(i.minY, i.maxY)))
                    : ((n[0][0] = Math.min(i.minX, i.maxX)),
                      (n[1][0] = Math.max(i.minX, i.maxX))),
                  n);
            },
            _isLarge: function (e, t) {
              return t.length < 2
                ? !1
                : "horizontal" === e
                ? Math.abs(t[0][0] - t[1][0]) < 0.5
                : Math.abs(t[0][1] - t[1][1]) < 0.5;
            },
            _getLargePointList: function (e, t) {
              var n;
              n =
                "horizontal" === e
                  ? this.component.grid.getWidth()
                  : this.component.grid.getHeight();
              for (var i = t.length, a = [], o = 0; n > o; o++)
                a[o] = t[Math.floor((i / n) * o)];
              return a;
            },
            _getSmooth: function (e) {
              return e ? 0.3 : 0;
            },
            _getCalculableItem: function (e, t, n, i, a, o) {
              var s = this.series,
                l =
                  s[e].calculableHolderColor ||
                  this.ecTheme.calculableHolderColor ||
                  r.calculableHolderColor,
                h = this._getSymbol(e, t, n, i, a, o);
              return (
                (h.style.color = l),
                (h.style.strokeColor = l),
                (h.rotation = [0, 0]),
                (h.hoverable = !1),
                (h.draggable = !1),
                (h.style.text = void 0),
                h
              );
            },
            _getSymbol: function (e, t, n, i, a, o) {
              var s = this.series,
                r = s[e],
                l = r.data[t],
                h = this.getSymbolShape(
                  r,
                  e,
                  l,
                  t,
                  n,
                  i,
                  a,
                  this._sIndex2ShapeMap[e],
                  this._sIndex2ColorMap[e],
                  "#fff",
                  "vertical" === o ? "horizontal" : "vertical"
                );
              return (
                (h.zlevel = this.getZlevelBase()),
                (h.z = this.getZBase() + 1),
                this.deepQuery([l, r, this.option], "calculable") &&
                  (this.setCalculable(h), (h.draggable = !0)),
                h
              );
            },
            getMarkCoord: function (e, t) {
              var n = this.series[e],
                i = this.xMarkMap[e],
                a = this.component.xAxis.getAxis(n.xAxisIndex),
                o = this.component.yAxis.getAxis(n.yAxisIndex);
              if (
                t.type &&
                ("max" === t.type || "min" === t.type || "average" === t.type)
              ) {
                var s =
                  null != t.valueIndex
                    ? t.valueIndex
                    : null != i.maxX0
                    ? "1"
                    : "";
                return [
                  i[t.type + "X" + s],
                  i[t.type + "Y" + s],
                  i[t.type + "Line" + s],
                  i[t.type + s],
                ];
              }
              return [
                "string" != typeof t.xAxis && a.getCoordByIndex
                  ? a.getCoordByIndex(t.xAxis || 0)
                  : a.getCoord(t.xAxis || 0),
                "string" != typeof t.yAxis && o.getCoordByIndex
                  ? o.getCoordByIndex(t.yAxis || 0)
                  : o.getCoord(t.yAxis || 0),
              ];
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
            ontooltipHover: function (e, t) {
              for (
                var n, i, a = e.seriesIndex, o = e.dataIndex, s = a.length;
                s--;

              )
                if ((n = this.finalPLMap[a[s]]))
                  for (var r = 0, l = n.length; l > r; r++) {
                    i = n[r];
                    for (var h = 0, V = i.length; V > h; h++)
                      o === i[h][2] &&
                        t.push(
                          this._getSymbol(
                            a[s],
                            i[h][2],
                            i[h][3],
                            i[h][0],
                            i[h][1],
                            "horizontal"
                          )
                        );
                  }
            },
            addDataAnimation: function (e) {
              for (var t = this.series, n = {}, i = 0, a = e.length; a > i; i++)
                n[e[i][0]] = e[i];
              for (
                var o, s, r, l, h, V, U, i = this.shapeList.length - 1;
                i >= 0;
                i--
              )
                if (((h = this.shapeList[i]._seriesIndex), n[h] && !n[h][3])) {
                  if (
                    this.shapeList[i]._main &&
                    this.shapeList[i].style.pointList.length > 1
                  ) {
                    if (
                      ((V = this.shapeList[i].style.pointList),
                      (s = Math.abs(V[0][0] - V[1][0])),
                      (l = Math.abs(V[0][1] - V[1][1])),
                      (U = "horizontal" === this.shapeList[i]._orient),
                      n[h][2])
                    ) {
                      if ("half-smooth-polygon" === this.shapeList[i].type) {
                        var m = V.length;
                        (this.shapeList[i].style.pointList[m - 3] = V[m - 2]),
                          (this.shapeList[i].style.pointList[m - 3][U ? 0 : 1] =
                            V[m - 4][U ? 0 : 1]),
                          (this.shapeList[i].style.pointList[m - 2] = V[m - 1]);
                      }
                      this.shapeList[i].style.pointList.pop(),
                        U ? ((o = s), (r = 0)) : ((o = 0), (r = -l));
                    } else {
                      if (
                        (this.shapeList[i].style.pointList.shift(),
                        "half-smooth-polygon" === this.shapeList[i].type)
                      ) {
                        var p = this.shapeList[i].style.pointList.pop();
                        U ? (p[0] = V[0][0]) : (p[1] = V[0][1]),
                          this.shapeList[i].style.pointList.push(p);
                      }
                      U ? ((o = -s), (r = 0)) : ((o = 0), (r = l));
                    }
                    this.zr.modShape(
                      this.shapeList[i].id,
                      {
                        style: { pointList: this.shapeList[i].style.pointList },
                      },
                      !0
                    );
                  } else {
                    if (
                      n[h][2] &&
                      this.shapeList[i]._dataIndex === t[h].data.length - 1
                    ) {
                      this.zr.delShape(this.shapeList[i].id);
                      continue;
                    }
                    if (!n[h][2] && 0 === this.shapeList[i]._dataIndex) {
                      this.zr.delShape(this.shapeList[i].id);
                      continue;
                    }
                  }
                  (this.shapeList[i].position = [0, 0]),
                    this.zr
                      .animate(this.shapeList[i].id, "")
                      .when(
                        this.query(this.option, "animationDurationUpdate"),
                        { position: [o, r] }
                      )
                      .start();
                }
            },
          }),
          (o.prototype.iconLibrary.legendLineIcon = n),
          h.inherits(t, i),
          e("../chart").define("line", t),
          t
        );
      }
    ),
    n(
      "echarts/util/shape/HalfSmoothPolygon",
      [
        "require",
        "zrender/shape/Base",
        "zrender/shape/util/smoothBezier",
        "zrender/tool/util",
        "zrender/shape/Polygon",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/shape/util/smoothBezier"),
          a = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "half-smooth-polygon",
            buildPath: function (t, n) {
              var a = n.pointList;
              if (!(a.length < 2))
                if (n.smooth) {
                  var o = i(a.slice(0, -2), n.smooth, !1, n.smoothConstraint);
                  t.moveTo(a[0][0], a[0][1]);
                  for (var s, r, l, h = a.length, V = 0; h - 3 > V; V++)
                    (s = o[2 * V]),
                      (r = o[2 * V + 1]),
                      (l = a[V + 1]),
                      t.bezierCurveTo(s[0], s[1], r[0], r[1], l[0], l[1]);
                  t.lineTo(a[h - 2][0], a[h - 2][1]),
                    t.lineTo(a[h - 1][0], a[h - 1][1]),
                    t.lineTo(a[0][0], a[0][1]);
                } else e("zrender/shape/Polygon").prototype.buildPath(t, n);
            },
          }),
          a.inherits(t, n),
          t
        );
      }
    ),
    n(
      "echarts/component/axis",
      [
        "require",
        "./base",
        "zrender/shape/Line",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/color",
        "./categoryAxis",
        "./valueAxis",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o, s) {
          n.call(this, e, t, i, a, o),
            (this.axisType = s),
            (this._axisList = []),
            this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Line"),
          a = e("../config"),
          o = e("../util/ecData"),
          s = e("zrender/tool/util"),
          r = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: a.COMPONENT_TYPE_AXIS,
            axisBase: {
              _buildAxisLine: function () {
                var e = this.option.axisLine.lineStyle.width,
                  t = e / 2,
                  n = {
                    _axisShape: "axisLine",
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() + 3,
                    hoverable: !1,
                  },
                  a = this.grid;
                switch (this.option.position) {
                  case "left":
                    n.style = {
                      xStart: a.getX() - t,
                      yStart: a.getYend(),
                      xEnd: a.getX() - t,
                      yEnd: a.getY(),
                      lineCap: "round",
                    };
                    break;
                  case "right":
                    n.style = {
                      xStart: a.getXend() + t,
                      yStart: a.getYend(),
                      xEnd: a.getXend() + t,
                      yEnd: a.getY(),
                      lineCap: "round",
                    };
                    break;
                  case "bottom":
                    n.style = {
                      xStart: a.getX(),
                      yStart: a.getYend() + t,
                      xEnd: a.getXend(),
                      yEnd: a.getYend() + t,
                      lineCap: "round",
                    };
                    break;
                  case "top":
                    n.style = {
                      xStart: a.getX(),
                      yStart: a.getY() - t,
                      xEnd: a.getXend(),
                      yEnd: a.getY() - t,
                      lineCap: "round",
                    };
                }
                var o = n.style;
                "" !== this.option.name &&
                  ((o.text = this.option.name),
                  (o.textPosition = this.option.nameLocation),
                  (o.textFont = this.getFont(this.option.nameTextStyle)),
                  this.option.nameTextStyle.align &&
                    (o.textAlign = this.option.nameTextStyle.align),
                  this.option.nameTextStyle.baseline &&
                    (o.textBaseline = this.option.nameTextStyle.baseline),
                  this.option.nameTextStyle.color &&
                    (o.textColor = this.option.nameTextStyle.color)),
                  (o.strokeColor = this.option.axisLine.lineStyle.color),
                  (o.lineWidth = e),
                  this.isHorizontal()
                    ? (o.yStart = o.yEnd = this.subPixelOptimize(o.yEnd, e))
                    : (o.xStart = o.xEnd = this.subPixelOptimize(o.xEnd, e)),
                  (o.lineType = this.option.axisLine.lineStyle.type),
                  (n = new i(n)),
                  this.shapeList.push(n);
              },
              _axisLabelClickable: function (e, t) {
                return e
                  ? (o.pack(t, void 0, -1, void 0, -1, t.style.text),
                    (t.hoverable = !0),
                    (t.clickable = !0),
                    (t.highlightStyle = {
                      color: r.lift(t.style.color, 1),
                      brushType: "fill",
                    }),
                    t)
                  : t;
              },
              refixAxisShape: function (e, t) {
                if (this.option.axisLine.onZero) {
                  var n;
                  if (this.isHorizontal() && null != t)
                    for (var i = 0, a = this.shapeList.length; a > i; i++)
                      "axisLine" === this.shapeList[i]._axisShape
                        ? ((this.shapeList[i].style.yStart = this.shapeList[
                            i
                          ].style.yEnd = this.subPixelOptimize(
                            t,
                            this.shapeList[i].stylelineWidth
                          )),
                          this.zr.modShape(this.shapeList[i].id))
                        : "axisTick" === this.shapeList[i]._axisShape &&
                          ((n =
                            this.shapeList[i].style.yEnd -
                            this.shapeList[i].style.yStart),
                          (this.shapeList[i].style.yStart = t - n),
                          (this.shapeList[i].style.yEnd = t),
                          this.zr.modShape(this.shapeList[i].id));
                  if (!this.isHorizontal() && null != e)
                    for (var i = 0, a = this.shapeList.length; a > i; i++)
                      "axisLine" === this.shapeList[i]._axisShape
                        ? ((this.shapeList[i].style.xStart = this.shapeList[
                            i
                          ].style.xEnd = this.subPixelOptimize(
                            e,
                            this.shapeList[i].stylelineWidth
                          )),
                          this.zr.modShape(this.shapeList[i].id))
                        : "axisTick" === this.shapeList[i]._axisShape &&
                          ((n =
                            this.shapeList[i].style.xEnd -
                            this.shapeList[i].style.xStart),
                          (this.shapeList[i].style.xStart = e),
                          (this.shapeList[i].style.xEnd = e + n),
                          this.zr.modShape(this.shapeList[i].id));
                }
              },
              getPosition: function () {
                return this.option.position;
              },
              isHorizontal: function () {
                return (
                  "bottom" === this.option.position ||
                  "top" === this.option.position
                );
              },
            },
            reformOption: function (e) {
              if (
                (!e || (e instanceof Array && 0 === e.length)
                  ? (e = [{ type: a.COMPONENT_TYPE_AXIS_VALUE }])
                  : e instanceof Array || (e = [e]),
                e.length > 2 && (e = [e[0], e[1]]),
                "xAxis" === this.axisType)
              ) {
                (!e[0].position ||
                  ("bottom" != e[0].position && "top" != e[0].position)) &&
                  (e[0].position = "bottom"),
                  e.length > 1 &&
                    (e[1].position =
                      "bottom" === e[0].position ? "top" : "bottom");
                for (var t = 0, n = e.length; n > t; t++)
                  (e[t].type = e[t].type || "category"),
                    (e[t].xAxisIndex = t),
                    (e[t].yAxisIndex = -1);
              } else {
                (!e[0].position ||
                  ("left" != e[0].position && "right" != e[0].position)) &&
                  (e[0].position = "left"),
                  e.length > 1 &&
                    (e[1].position =
                      "left" === e[0].position ? "right" : "left");
                for (var t = 0, n = e.length; n > t; t++)
                  (e[t].type = e[t].type || "value"),
                    (e[t].xAxisIndex = -1),
                    (e[t].yAxisIndex = t);
              }
              return e;
            },
            refresh: function (t) {
              var n;
              t &&
                ((this.option = t),
                "xAxis" === this.axisType
                  ? ((this.option.xAxis = this.reformOption(t.xAxis)),
                    (n = this.option.xAxis))
                  : ((this.option.yAxis = this.reformOption(t.yAxis)),
                    (n = this.option.yAxis)),
                (this.series = t.series));
              for (
                var i = e("./categoryAxis"),
                  a = e("./valueAxis"),
                  o = Math.max((n && n.length) || 0, this._axisList.length),
                  s = 0;
                o > s;
                s++
              )
                !this._axisList[s] ||
                  !t ||
                  (n[s] && this._axisList[s].type == n[s].type) ||
                  (this._axisList[s].dispose && this._axisList[s].dispose(),
                  (this._axisList[s] = !1)),
                  this._axisList[s]
                    ? this._axisList[s].refresh &&
                      this._axisList[s].refresh(n ? n[s] : !1, this.series)
                    : n &&
                      n[s] &&
                      (this._axisList[s] =
                        "category" === n[s].type
                          ? new i(
                              this.ecTheme,
                              this.messageCenter,
                              this.zr,
                              n[s],
                              this.myChart,
                              this.axisBase
                            )
                          : new a(
                              this.ecTheme,
                              this.messageCenter,
                              this.zr,
                              n[s],
                              this.myChart,
                              this.axisBase,
                              this.series
                            ));
            },
            getAxis: function (e) {
              return this._axisList[e];
            },
            clear: function () {
              for (var e = 0, t = this._axisList.length; t > e; e++)
                this._axisList[e].dispose && this._axisList[e].dispose();
              this._axisList = [];
            },
          }),
          s.inherits(t, n),
          e("../component").define("axis", t),
          t
        );
      }
    ),
    n(
      "echarts/component/grid",
      [
        "require",
        "./base",
        "zrender/shape/Rectangle",
        "../config",
        "zrender/tool/util",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Rectangle"),
          a = e("../config");
        a.grid = {
          zlevel: 0,
          z: 0,
          x: 12,
          y: 60,
          x2: 12,
          y2: 60,
          backgroundColor: "rgba(0,0,0,0)",
          borderWidth: 0,
          borderColor: "#ccc",
        };
        var o = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: a.COMPONENT_TYPE_GRID,
            getX: function () {
              return this._x;
            },
            getY: function () {
              return this._y;
            },
            getWidth: function () {
              return this._width;
            },
            getHeight: function () {
              return this._height;
            },
            getXend: function () {
              return this._x + this._width;
            },
            getYend: function () {
              return this._y + this._height;
            },
            getArea: function () {
              return {
                x: this._x,
                y: this._y,
                width: this._width,
                height: this._height,
              };
            },
            getBbox: function () {
              return [
                [this._x, this._y],
                [this.getXend(), this.getYend()],
              ];
            },
            refixAxisShape: function (e) {
              for (
                var t,
                  n,
                  i,
                  o = e.xAxis._axisList.concat(
                    e.yAxis ? e.yAxis._axisList : []
                  ),
                  s = o.length;
                s--;

              )
                (i = o[s]),
                  i.type == a.COMPONENT_TYPE_AXIS_VALUE &&
                    i._min < 0 &&
                    i._max >= 0 &&
                    (i.isHorizontal()
                      ? (t = i.getCoord(0))
                      : (n = i.getCoord(0)));
              if ("undefined" != typeof t || "undefined" != typeof n)
                for (s = o.length; s--; ) o[s].refixAxisShape(t, n);
            },
            refresh: function (e) {
              if (
                e ||
                this._zrWidth != this.zr.getWidth() ||
                this._zrHeight != this.zr.getHeight()
              ) {
                this.clear(),
                  (this.option = e || this.option),
                  (this.option.grid = this.reformOption(this.option.grid));
                var t = this.option.grid;
                (this._zrWidth = this.zr.getWidth()),
                  (this._zrHeight = this.zr.getHeight()),
                  (this._x = this.parsePercent(t.x, this._zrWidth)),
                  (this._y = this.parsePercent(t.y, this._zrHeight));
                var n = this.parsePercent(t.x2, this._zrWidth),
                  a = this.parsePercent(t.y2, this._zrHeight);
                (this._width =
                  "undefined" == typeof t.width
                    ? this._zrWidth - this._x - n
                    : this.parsePercent(t.width, this._zrWidth)),
                  (this._width = this._width <= 0 ? 10 : this._width),
                  (this._height =
                    "undefined" == typeof t.height
                      ? this._zrHeight - this._y - a
                      : this.parsePercent(t.height, this._zrHeight)),
                  (this._height = this._height <= 0 ? 10 : this._height),
                  (this._x = this.subPixelOptimize(this._x, t.borderWidth)),
                  (this._y = this.subPixelOptimize(this._y, t.borderWidth)),
                  this.shapeList.push(
                    new i({
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        x: this._x,
                        y: this._y,
                        width: this._width,
                        height: this._height,
                        brushType: t.borderWidth > 0 ? "both" : "fill",
                        color: t.backgroundColor,
                        strokeColor: t.borderColor,
                        lineWidth: t.borderWidth,
                      },
                    })
                  ),
                  this.zr.addShape(this.shapeList[0]);
              }
            },
          }),
          o.inherits(t, n),
          e("../component").define("grid", t),
          t
        );
      }
    ),
    n(
      "echarts/component/dataZoom",
      [
        "require",
        "./base",
        "zrender/shape/Rectangle",
        "zrender/shape/Polygon",
        "../util/shape/Icon",
        "../config",
        "../util/date",
        "zrender/tool/util",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o);
          var s = this;
          (s._ondrift = function (e, t) {
            return s.__ondrift(this, e, t);
          }),
            (s._ondragend = function () {
              return s.__ondragend();
            }),
            (this._fillerSize = 30),
            (this._isSilence = !1),
            (this._zoom = {}),
            (this.option.dataZoom = this.reformOption(this.option.dataZoom)),
            (this.zoomOption = this.option.dataZoom),
            (this._handleSize = this.zoomOption.handleSize),
            (this._location = this._getLocation()),
            (this._zoom = this._getZoom()),
            this._backupData(),
            this.option.dataZoom.show && this._buildShape(),
            this._syncData();
        }
        var n = e("./base"),
          i = e("zrender/shape/Rectangle"),
          a = e("zrender/shape/Polygon"),
          o = e("../util/shape/Icon"),
          s = e("../config");
        s.dataZoom = {
          zlevel: 0,
          z: 4,
          show: !1,
          orient: "horizontal",
          backgroundColor: "rgba(0,0,0,0)",
          dataBackgroundColor: "#eee",
          fillerColor: "rgba(144,197,237,0.2)",
          handleColor: "rgba(70,130,180,0.8)",
          handleSize: 20,
          showDetail: !0,
          realtime: !1,
        };
        var r = e("../util/date"),
          l = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: s.COMPONENT_TYPE_DATAZOOM,
            _buildShape: function () {
              this._buildBackground(),
                this._buildFiller(),
                this._buildHandle(),
                this._buildFrame();
              for (var e = 0, t = this.shapeList.length; t > e; e++)
                this.zr.addShape(this.shapeList[e]);
              this._syncFrameShape();
            },
            _getLocation: function () {
              var e,
                t,
                n,
                i,
                a = this.component.grid;
              return (
                "horizontal" == this.zoomOption.orient
                  ? ((n = this.zoomOption.width || a.getWidth()),
                    (i = this.zoomOption.height || this._fillerSize),
                    (e =
                      null != this.zoomOption.x ? this.zoomOption.x : a.getX()),
                    (t =
                      null != this.zoomOption.y
                        ? this.zoomOption.y
                        : this.zr.getHeight() - i - 2))
                  : ((n = this.zoomOption.width || this._fillerSize),
                    (i = this.zoomOption.height || a.getHeight()),
                    (e = null != this.zoomOption.x ? this.zoomOption.x : 2),
                    (t =
                      null != this.zoomOption.y
                        ? this.zoomOption.y
                        : a.getY())),
                { x: e, y: t, width: n, height: i }
              );
            },
            _getZoom: function () {
              var e = this.option.series,
                t = this.option.xAxis;
              !t || t instanceof Array || ((t = [t]), (this.option.xAxis = t));
              var n = this.option.yAxis;
              !n || n instanceof Array || ((n = [n]), (this.option.yAxis = n));
              var i,
                a,
                o = [],
                r = this.zoomOption.xAxisIndex;
              if (t && null == r) {
                i = [];
                for (var l = 0, h = t.length; h > l; l++)
                  ("category" == t[l].type || null == t[l].type) && i.push(l);
              } else i = r instanceof Array ? r : null != r ? [r] : [];
              if (((r = this.zoomOption.yAxisIndex), n && null == r)) {
                a = [];
                for (var l = 0, h = n.length; h > l; l++)
                  "category" == n[l].type && a.push(l);
              } else a = r instanceof Array ? r : null != r ? [r] : [];
              for (var V, l = 0, h = e.length; h > l; l++)
                if (
                  ((V = e[l]),
                  V.type == s.CHART_TYPE_LINE ||
                    V.type == s.CHART_TYPE_BAR ||
                    V.type == s.CHART_TYPE_SCATTER ||
                    V.type == s.CHART_TYPE_K)
                ) {
                  for (var U = 0, m = i.length; m > U; U++)
                    if (i[U] == (V.xAxisIndex || 0)) {
                      o.push(l);
                      break;
                    }
                  for (var U = 0, m = a.length; m > U; U++)
                    if (a[U] == (V.yAxisIndex || 0)) {
                      o.push(l);
                      break;
                    }
                  null == this.zoomOption.xAxisIndex &&
                    null == this.zoomOption.yAxisIndex &&
                    V.data &&
                    this.getDataFromOption(V.data[0]) instanceof Array &&
                    (V.type == s.CHART_TYPE_SCATTER ||
                      V.type == s.CHART_TYPE_LINE ||
                      V.type == s.CHART_TYPE_BAR) &&
                    o.push(l);
                }
              var p =
                  null != this._zoom.start
                    ? this._zoom.start
                    : null != this.zoomOption.start
                    ? this.zoomOption.start
                    : 0,
                d =
                  null != this._zoom.end
                    ? this._zoom.end
                    : null != this.zoomOption.end
                    ? this.zoomOption.end
                    : 100;
              p > d && ((p += d), (d = p - d), (p -= d));
              var c = Math.round(
                ((d - p) / 100) *
                  ("horizontal" == this.zoomOption.orient
                    ? this._location.width
                    : this._location.height)
              );
              return {
                start: p,
                end: d,
                start2: 0,
                end2: 100,
                size: c,
                xAxisIndex: i,
                yAxisIndex: a,
                seriesIndex: o,
                scatterMap: this._zoom.scatterMap || {},
              };
            },
            _backupData: function () {
              this._originalData = { xAxis: {}, yAxis: {}, series: {} };
              for (
                var e = this.option.xAxis,
                  t = this._zoom.xAxisIndex,
                  n = 0,
                  i = t.length;
                i > n;
                n++
              )
                this._originalData.xAxis[t[n]] = e[t[n]].data;
              for (
                var a = this.option.yAxis,
                  o = this._zoom.yAxisIndex,
                  n = 0,
                  i = o.length;
                i > n;
                n++
              )
                this._originalData.yAxis[o[n]] = a[o[n]].data;
              for (
                var r,
                  l = this.option.series,
                  h = this._zoom.seriesIndex,
                  n = 0,
                  i = h.length;
                i > n;
                n++
              )
                (r = l[h[n]]),
                  (this._originalData.series[h[n]] = r.data),
                  r.data &&
                    this.getDataFromOption(r.data[0]) instanceof Array &&
                    (r.type == s.CHART_TYPE_SCATTER ||
                      r.type == s.CHART_TYPE_LINE ||
                      r.type == s.CHART_TYPE_BAR) &&
                    (this._backupScale(), this._calculScatterMap(h[n]));
            },
            _calculScatterMap: function (t) {
              (this._zoom.scatterMap = this._zoom.scatterMap || {}),
                (this._zoom.scatterMap[t] = this._zoom.scatterMap[t] || {});
              var n = e("../component"),
                i = n.get("axis"),
                a = l.clone(this.option.xAxis);
              "category" == a[0].type && (a[0].type = "value"),
                a[1] && "category" == a[1].type && (a[1].type = "value");
              var o = new i(
                  this.ecTheme,
                  null,
                  !1,
                  { xAxis: a, series: this.option.series },
                  this,
                  "xAxis"
                ),
                s = this.option.series[t].xAxisIndex || 0;
              (this._zoom.scatterMap[t].x = o.getAxis(s).getExtremum()),
                o.dispose(),
                (a = l.clone(this.option.yAxis)),
                "category" == a[0].type && (a[0].type = "value"),
                a[1] && "category" == a[1].type && (a[1].type = "value"),
                (o = new i(
                  this.ecTheme,
                  null,
                  !1,
                  { yAxis: a, series: this.option.series },
                  this,
                  "yAxis"
                )),
                (s = this.option.series[t].yAxisIndex || 0),
                (this._zoom.scatterMap[t].y = o.getAxis(s).getExtremum()),
                o.dispose();
            },
            _buildBackground: function () {
              var e = this._location.width,
                t = this._location.height;
              this.shapeList.push(
                new i({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this._location.x,
                    y: this._location.y,
                    width: e,
                    height: t,
                    color: this.zoomOption.backgroundColor,
                  },
                })
              );
              for (
                var n = 0,
                  o = this._originalData.xAxis,
                  r = this._zoom.xAxisIndex,
                  l = 0,
                  h = r.length;
                h > l;
                l++
              )
                n = Math.max(n, o[r[l]].length);
              for (
                var V = this._originalData.yAxis,
                  U = this._zoom.yAxisIndex,
                  l = 0,
                  h = U.length;
                h > l;
                l++
              )
                n = Math.max(n, V[U[l]].length);
              for (
                var m,
                  p = this._zoom.seriesIndex[0],
                  d = this._originalData.series[p],
                  c = Number.MIN_VALUE,
                  u = Number.MAX_VALUE,
                  l = 0,
                  h = d.length;
                h > l;
                l++
              )
                (m = this.getDataFromOption(d[l], 0)),
                  this.option.series[p].type == s.CHART_TYPE_K && (m = m[1]),
                  isNaN(m) && (m = 0),
                  (c = Math.max(c, m)),
                  (u = Math.min(u, m));
              var y = c - u,
                b = [],
                g = e / (n - (n > 1 ? 1 : 0)),
                k = t / (n - (n > 1 ? 1 : 0)),
                f = 1;
              "horizontal" == this.zoomOption.orient && 1 > g
                ? (f = Math.floor((3 * n) / e))
                : "vertical" == this.zoomOption.orient &&
                  1 > k &&
                  (f = Math.floor((3 * n) / t));
              for (var l = 0, h = n; h > l; l += f)
                (m = this.getDataFromOption(d[l], 0)),
                  this.option.series[p].type == s.CHART_TYPE_K && (m = m[1]),
                  isNaN(m) && (m = 0),
                  b.push(
                    "horizontal" == this.zoomOption.orient
                      ? [
                          this._location.x + g * l,
                          this._location.y +
                            t -
                            1 -
                            Math.round(((m - u) / y) * (t - 10)),
                        ]
                      : [
                          this._location.x +
                            1 +
                            Math.round(((m - u) / y) * (e - 10)),
                          this._location.y + k * (h - l - 1),
                        ]
                  );
              "horizontal" == this.zoomOption.orient
                ? (b.push([this._location.x + e, this._location.y + t]),
                  b.push([this._location.x, this._location.y + t]))
                : (b.push([this._location.x, this._location.y]),
                  b.push([this._location.x, this._location.y + t])),
                this.shapeList.push(
                  new a({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      pointList: b,
                      color: this.zoomOption.dataBackgroundColor,
                    },
                    hoverable: !1,
                  })
                );
            },
            _buildFiller: function () {
              (this._fillerShae = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                draggable: !0,
                ondrift: this._ondrift,
                ondragend: this._ondragend,
                _type: "filler",
              }),
                (this._fillerShae.style =
                  "horizontal" == this.zoomOption.orient
                    ? {
                        x:
                          this._location.x +
                          Math.round(
                            (this._zoom.start / 100) * this._location.width
                          ) +
                          this._handleSize,
                        y: this._location.y,
                        width: this._zoom.size - 2 * this._handleSize,
                        height: this._location.height,
                        color: this.zoomOption.fillerColor,
                        text: ":::",
                        textPosition: "inside",
                      }
                    : {
                        x: this._location.x,
                        y:
                          this._location.y +
                          Math.round(
                            (this._zoom.start / 100) * this._location.height
                          ) +
                          this._handleSize,
                        width: this._location.width,
                        height: this._zoom.size - 2 * this._handleSize,
                        color: this.zoomOption.fillerColor,
                        text: "::",
                        textPosition: "inside",
                      }),
                (this._fillerShae.highlightStyle = {
                  brushType: "fill",
                  color: "rgba(0,0,0,0)",
                }),
                (this._fillerShae = new i(this._fillerShae)),
                this.shapeList.push(this._fillerShae);
            },
            _buildHandle: function () {
              var e = this.zoomOption.showDetail
                ? this._getDetail()
                : { start: "", end: "" };
              (this._startShape = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                draggable: !0,
                style: {
                  iconType: "rectangle",
                  x: this._location.x,
                  y: this._location.y,
                  width: this._handleSize,
                  height: this._handleSize,
                  color: this.zoomOption.handleColor,
                  text: "=",
                  textPosition: "inside",
                },
                highlightStyle: {
                  text: e.start,
                  brushType: "fill",
                  textPosition: "left",
                },
                ondrift: this._ondrift,
                ondragend: this._ondragend,
              }),
                "horizontal" == this.zoomOption.orient
                  ? ((this._startShape.style.height = this._location.height),
                    (this._endShape = l.clone(this._startShape)),
                    (this._startShape.style.x =
                      this._fillerShae.style.x - this._handleSize),
                    (this._endShape.style.x =
                      this._fillerShae.style.x + this._fillerShae.style.width),
                    (this._endShape.highlightStyle.text = e.end),
                    (this._endShape.highlightStyle.textPosition = "right"))
                  : ((this._startShape.style.width = this._location.width),
                    (this._endShape = l.clone(this._startShape)),
                    (this._startShape.style.y =
                      this._fillerShae.style.y + this._fillerShae.style.height),
                    (this._startShape.highlightStyle.textPosition = "bottom"),
                    (this._endShape.style.y =
                      this._fillerShae.style.y - this._handleSize),
                    (this._endShape.highlightStyle.text = e.end),
                    (this._endShape.highlightStyle.textPosition = "top")),
                (this._startShape = new o(this._startShape)),
                (this._endShape = new o(this._endShape)),
                this.shapeList.push(this._startShape),
                this.shapeList.push(this._endShape);
            },
            _buildFrame: function () {
              var e = this.subPixelOptimize(this._location.x, 1),
                t = this.subPixelOptimize(this._location.y, 1);
              (this._startFrameShape = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                hoverable: !1,
                style: {
                  x: e,
                  y: t,
                  width: this._location.width - (e > this._location.x ? 1 : 0),
                  height:
                    this._location.height - (t > this._location.y ? 1 : 0),
                  lineWidth: 1,
                  brushType: "stroke",
                  strokeColor: this.zoomOption.handleColor,
                },
              }),
                (this._endFrameShape = l.clone(this._startFrameShape)),
                (this._startFrameShape = new i(this._startFrameShape)),
                (this._endFrameShape = new i(this._endFrameShape)),
                this.shapeList.push(this._startFrameShape),
                this.shapeList.push(this._endFrameShape);
            },
            _syncHandleShape: function () {
              "horizontal" == this.zoomOption.orient
                ? ((this._startShape.style.x =
                    this._fillerShae.style.x - this._handleSize),
                  (this._endShape.style.x =
                    this._fillerShae.style.x + this._fillerShae.style.width),
                  (this._zoom.start =
                    ((this._startShape.style.x - this._location.x) /
                      this._location.width) *
                    100),
                  (this._zoom.end =
                    ((this._endShape.style.x +
                      this._handleSize -
                      this._location.x) /
                      this._location.width) *
                    100))
                : ((this._startShape.style.y =
                    this._fillerShae.style.y + this._fillerShae.style.height),
                  (this._endShape.style.y =
                    this._fillerShae.style.y - this._handleSize),
                  (this._zoom.start =
                    ((this._location.y +
                      this._location.height -
                      this._startShape.style.y) /
                      this._location.height) *
                    100),
                  (this._zoom.end =
                    ((this._location.y +
                      this._location.height -
                      this._endShape.style.y -
                      this._handleSize) /
                      this._location.height) *
                    100)),
                this.zr.modShape(this._startShape.id),
                this.zr.modShape(this._endShape.id),
                this._syncFrameShape(),
                this.zr.refreshNextFrame();
            },
            _syncFillerShape: function () {
              var e, t;
              "horizontal" == this.zoomOption.orient
                ? ((e = this._startShape.style.x),
                  (t = this._endShape.style.x),
                  (this._fillerShae.style.x =
                    Math.min(e, t) + this._handleSize),
                  (this._fillerShae.style.width =
                    Math.abs(e - t) - this._handleSize),
                  (this._zoom.start =
                    ((Math.min(e, t) - this._location.x) /
                      this._location.width) *
                    100),
                  (this._zoom.end =
                    ((Math.max(e, t) + this._handleSize - this._location.x) /
                      this._location.width) *
                    100))
                : ((e = this._startShape.style.y),
                  (t = this._endShape.style.y),
                  (this._fillerShae.style.y =
                    Math.min(e, t) + this._handleSize),
                  (this._fillerShae.style.height =
                    Math.abs(e - t) - this._handleSize),
                  (this._zoom.start =
                    ((this._location.y +
                      this._location.height -
                      Math.max(e, t)) /
                      this._location.height) *
                    100),
                  (this._zoom.end =
                    ((this._location.y +
                      this._location.height -
                      Math.min(e, t) -
                      this._handleSize) /
                      this._location.height) *
                    100)),
                this.zr.modShape(this._fillerShae.id),
                this._syncFrameShape(),
                this.zr.refreshNextFrame();
            },
            _syncFrameShape: function () {
              "horizontal" == this.zoomOption.orient
                ? ((this._startFrameShape.style.width =
                    this._fillerShae.style.x - this._location.x),
                  (this._endFrameShape.style.x =
                    this._fillerShae.style.x + this._fillerShae.style.width),
                  (this._endFrameShape.style.width =
                    this._location.x +
                    this._location.width -
                    this._endFrameShape.style.x))
                : ((this._startFrameShape.style.y =
                    this._fillerShae.style.y + this._fillerShae.style.height),
                  (this._startFrameShape.style.height =
                    this._location.y +
                    this._location.height -
                    this._startFrameShape.style.y),
                  (this._endFrameShape.style.height =
                    this._fillerShae.style.y - this._location.y)),
                this.zr.modShape(this._startFrameShape.id),
                this.zr.modShape(this._endFrameShape.id);
            },
            _syncShape: function () {
              this.zoomOption.show &&
                ("horizontal" == this.zoomOption.orient
                  ? ((this._startShape.style.x =
                      this._location.x +
                      (this._zoom.start / 100) * this._location.width),
                    (this._endShape.style.x =
                      this._location.x +
                      (this._zoom.end / 100) * this._location.width -
                      this._handleSize),
                    (this._fillerShae.style.x =
                      this._startShape.style.x + this._handleSize),
                    (this._fillerShae.style.width =
                      this._endShape.style.x -
                      this._startShape.style.x -
                      this._handleSize))
                  : ((this._startShape.style.y =
                      this._location.y +
                      this._location.height -
                      (this._zoom.start / 100) * this._location.height),
                    (this._endShape.style.y =
                      this._location.y +
                      this._location.height -
                      (this._zoom.end / 100) * this._location.height -
                      this._handleSize),
                    (this._fillerShae.style.y =
                      this._endShape.style.y + this._handleSize),
                    (this._fillerShae.style.height =
                      this._startShape.style.y -
                      this._endShape.style.y -
                      this._handleSize)),
                this.zr.modShape(this._startShape.id),
                this.zr.modShape(this._endShape.id),
                this.zr.modShape(this._fillerShae.id),
                this._syncFrameShape(),
                this.zr.refresh());
            },
            _syncData: function (e) {
              var t, n, i, a, o;
              for (var r in this._originalData) {
                t = this._originalData[r];
                for (var l in t)
                  (o = t[l]),
                    null != o &&
                      ((a = o.length),
                      (n = Math.floor((this._zoom.start / 100) * a)),
                      (i = Math.ceil((this._zoom.end / 100) * a)),
                      this.getDataFromOption(o[0]) instanceof Array &&
                      this.option[r][l].type != s.CHART_TYPE_K
                        ? (this._setScale(),
                          (this.option[r][l].data = this._synScatterData(l, o)))
                        : (this.option[r][l].data = o.slice(n, i)));
              }
              this._isSilence ||
                (!this.zoomOption.realtime && !e) ||
                this.messageCenter.dispatch(
                  s.EVENT.DATA_ZOOM,
                  null,
                  { zoom: this._zoom },
                  this.myChart
                );
            },
            _synScatterData: function (e, t) {
              if (
                0 === this._zoom.start &&
                100 == this._zoom.end &&
                0 === this._zoom.start2 &&
                100 == this._zoom.end2
              )
                return t;
              var n,
                i,
                a,
                o,
                s,
                r = [],
                l = this._zoom.scatterMap[e];
              "horizontal" == this.zoomOption.orient
                ? ((n = l.x.max - l.x.min),
                  (i = (this._zoom.start / 100) * n + l.x.min),
                  (a = (this._zoom.end / 100) * n + l.x.min),
                  (n = l.y.max - l.y.min),
                  (o = (this._zoom.start2 / 100) * n + l.y.min),
                  (s = (this._zoom.end2 / 100) * n + l.y.min))
                : ((n = l.x.max - l.x.min),
                  (i = (this._zoom.start2 / 100) * n + l.x.min),
                  (a = (this._zoom.end2 / 100) * n + l.x.min),
                  (n = l.y.max - l.y.min),
                  (o = (this._zoom.start / 100) * n + l.y.min),
                  (s = (this._zoom.end / 100) * n + l.y.min));
              for (var h, V = 0, U = t.length; U > V; V++)
                (h = t[V].value || t[V]),
                  h[0] >= i &&
                    h[0] <= a &&
                    h[1] >= o &&
                    h[1] <= s &&
                    r.push(t[V]);
              return r;
            },
            _setScale: function () {
              var e =
                  0 !== this._zoom.start ||
                  100 !== this._zoom.end ||
                  0 !== this._zoom.start2 ||
                  100 !== this._zoom.end2,
                t = { xAxis: this.option.xAxis, yAxis: this.option.yAxis };
              for (var n in t)
                for (var i = 0, a = t[n].length; a > i; i++)
                  t[n][i].scale = e || t[n][i]._scale;
            },
            _backupScale: function () {
              var e = { xAxis: this.option.xAxis, yAxis: this.option.yAxis };
              for (var t in e)
                for (var n = 0, i = e[t].length; i > n; n++)
                  e[t][n]._scale = e[t][n].scale;
            },
            _getDetail: function () {
              var e =
                  "horizontal" == this.zoomOption.orient ? "xAxis" : "yAxis",
                t = this._originalData[e];
              for (var n in t) {
                var i = t[n];
                if (null != i) {
                  var a = i.length,
                    o = Math.floor((this._zoom.start / 100) * a),
                    s = Math.ceil((this._zoom.end / 100) * a);
                  return (
                    (s -= s > 0 ? 1 : 0),
                    {
                      start: this.getDataFromOption(i[o]),
                      end: this.getDataFromOption(i[s]),
                    }
                  );
                }
              }
              var l = this._zoom.seriesIndex[0],
                h = this.option.series[l][e + "Index"] || 0,
                V = this.option[e][h].type,
                U = this._zoom.scatterMap[l][e.charAt(0)].min,
                m = this._zoom.scatterMap[l][e.charAt(0)].max,
                p = m - U;
              if ("value" == V)
                return {
                  start: U + (p * this._zoom.start) / 100,
                  end: U + (p * this._zoom.end) / 100,
                };
              if ("time" == V) {
                (m = U + (p * this._zoom.end) / 100),
                  (U += (p * this._zoom.start) / 100);
                var d = r.getAutoFormatter(U, m).formatter;
                return { start: r.format(d, U), end: r.format(d, m) };
              }
              return { start: "", end: "" };
            },
            __ondrift: function (e, t, n) {
              this.zoomOption.zoomLock && (e = this._fillerShae);
              var i = "filler" == e._type ? this._handleSize : 0;
              if (
                ("horizontal" == this.zoomOption.orient
                  ? e.style.x + t - i <= this._location.x
                    ? (e.style.x = this._location.x + i)
                    : e.style.x + t + e.style.width + i >=
                      this._location.x + this._location.width
                    ? (e.style.x =
                        this._location.x +
                        this._location.width -
                        e.style.width -
                        i)
                    : (e.style.x += t)
                  : e.style.y + n - i <= this._location.y
                  ? (e.style.y = this._location.y + i)
                  : e.style.y + n + e.style.height + i >=
                    this._location.y + this._location.height
                  ? (e.style.y =
                      this._location.y +
                      this._location.height -
                      e.style.height -
                      i)
                  : (e.style.y += n),
                "filler" == e._type
                  ? this._syncHandleShape()
                  : this._syncFillerShape(),
                this.zoomOption.realtime && this._syncData(),
                this.zoomOption.showDetail)
              ) {
                var a = this._getDetail();
                (this._startShape.style.text = this._startShape.highlightStyle.text =
                  a.start),
                  (this._endShape.style.text = this._endShape.highlightStyle.text =
                    a.end),
                  (this._startShape.style.textPosition = this._startShape.highlightStyle.textPosition),
                  (this._endShape.style.textPosition = this._endShape.highlightStyle.textPosition);
              }
              return !0;
            },
            __ondragend: function () {
              this.zoomOption.showDetail &&
                ((this._startShape.style.text = this._endShape.style.text =
                  "="),
                (this._startShape.style.textPosition = this._endShape.style.textPosition =
                  "inside"),
                this.zr.modShape(this._startShape.id),
                this.zr.modShape(this._endShape.id),
                this.zr.refreshNextFrame()),
                (this.isDragend = !0);
            },
            ondragend: function (e, t) {
              this.isDragend &&
                e.target &&
                (!this.zoomOption.realtime && this._syncData(),
                (t.dragOut = !0),
                (t.dragIn = !0),
                this._isSilence ||
                  this.zoomOption.realtime ||
                  this.messageCenter.dispatch(
                    s.EVENT.DATA_ZOOM,
                    null,
                    { zoom: this._zoom },
                    this.myChart
                  ),
                (t.needRefresh = !1),
                (this.isDragend = !1));
            },
            ondataZoom: function (e, t) {
              t.needRefresh = !0;
            },
            absoluteZoom: function (e) {
              (this._zoom.start = e.start),
                (this._zoom.end = e.end),
                (this._zoom.start2 = e.start2),
                (this._zoom.end2 = e.end2),
                this._syncShape(),
                this._syncData(!0);
            },
            rectZoom: function (e) {
              if (!e)
                return (
                  (this._zoom.start = this._zoom.start2 = 0),
                  (this._zoom.end = this._zoom.end2 = 100),
                  this._syncShape(),
                  this._syncData(!0),
                  this._zoom
                );
              var t = this.component.grid.getArea(),
                n = { x: e.x, y: e.y, width: e.width, height: e.height };
              if (
                (n.width < 0 && ((n.x += n.width), (n.width = -n.width)),
                n.height < 0 && ((n.y += n.height), (n.height = -n.height)),
                n.x > t.x + t.width || n.y > t.y + t.height)
              )
                return !1;
              n.x < t.x && (n.x = t.x),
                n.x + n.width > t.x + t.width &&
                  (n.width = t.x + t.width - n.x),
                n.y + n.height > t.y + t.height &&
                  (n.height = t.y + t.height - n.y);
              var i,
                a = (n.x - t.x) / t.width,
                o = 1 - (n.x + n.width - t.x) / t.width,
                s = 1 - (n.y + n.height - t.y) / t.height,
                r = (n.y - t.y) / t.height;
              return (
                "horizontal" == this.zoomOption.orient
                  ? ((i = this._zoom.end - this._zoom.start),
                    (this._zoom.start += i * a),
                    (this._zoom.end -= i * o),
                    (i = this._zoom.end2 - this._zoom.start2),
                    (this._zoom.start2 += i * s),
                    (this._zoom.end2 -= i * r))
                  : ((i = this._zoom.end - this._zoom.start),
                    (this._zoom.start += i * s),
                    (this._zoom.end -= i * r),
                    (i = this._zoom.end2 - this._zoom.start2),
                    (this._zoom.start2 += i * a),
                    (this._zoom.end2 -= i * o)),
                this._syncShape(),
                this._syncData(!0),
                this._zoom
              );
            },
            syncBackupData: function (e) {
              for (
                var t,
                  n,
                  i = this._originalData.series,
                  a = e.series,
                  o = 0,
                  s = a.length;
                s > o;
                o++
              ) {
                (n = a[o].data || a[o].eventList),
                  (t = i[o]
                    ? Math.floor((this._zoom.start / 100) * i[o].length)
                    : 0);
                for (var r = 0, l = n.length; l > r; r++)
                  i[o] && (i[o][r + t] = n[r]);
              }
            },
            syncOption: function (e) {
              this.silence(!0),
                (this.option = e),
                (this.option.dataZoom = this.reformOption(
                  this.option.dataZoom
                )),
                (this.zoomOption = this.option.dataZoom),
                this.clear(),
                (this._location = this._getLocation()),
                (this._zoom = this._getZoom()),
                this._backupData(),
                this.option.dataZoom &&
                  this.option.dataZoom.show &&
                  this._buildShape(),
                this._syncData(),
                this.silence(!1);
            },
            silence: function (e) {
              this._isSilence = e;
            },
            getRealDataIndex: function (e, t) {
              if (
                !this._originalData ||
                (0 === this._zoom.start && 100 == this._zoom.end)
              )
                return t;
              var n = this._originalData.series;
              return n[e]
                ? Math.floor((this._zoom.start / 100) * n[e].length) + t
                : -1;
            },
            resize: function () {
              this.clear(),
                (this._location = this._getLocation()),
                (this._zoom = this._getZoom()),
                this.option.dataZoom.show && this._buildShape();
            },
          }),
          l.inherits(t, n),
          e("../component").define("dataZoom", t),
          t
        );
      }
    ),
    n(
      "echarts/component/categoryAxis",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Line",
        "zrender/shape/Rectangle",
        "../config",
        "zrender/tool/util",
        "zrender/tool/area",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o, s) {
          if (a.data.length < 1)
            return void console.error("option.data.length < 1.");
          n.call(this, e, t, i, a, o), (this.grid = this.component.grid);
          for (var r in s) this[r] = s[r];
          this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Line"),
          o = e("zrender/shape/Rectangle"),
          s = e("../config");
        s.categoryAxis = {
          zlevel: 0,
          z: 0,
          show: !0,
          position: "bottom",
          name: "",
          nameLocation: "end",
          nameTextStyle: {},
          boundaryGap: !0,
          axisLine: {
            show: !0,
            onZero: !0,
            lineStyle: { color: "#48b", width: 2, type: "solid" },
          },
          axisTick: {
            show: !0,
            interval: "auto",
            inside: !1,
            length: 5,
            lineStyle: { color: "#333", width: 1 },
          },
          axisLabel: {
            show: !0,
            interval: "auto",
            rotate: 0,
            margin: 8,
            textStyle: { color: "#333" },
          },
          splitLine: {
            show: !1,
            lineStyle: { color: ["#ccc"], width: 1, type: "solid" },
          },
          splitArea: {
            show: !1,
            areaStyle: {
              color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"],
            },
          },
        };
        var r = e("zrender/tool/util"),
          l = e("zrender/tool/area");
        return (
          (t.prototype = {
            type: s.COMPONENT_TYPE_AXIS_CATEGORY,
            _getReformedLabel: function (e) {
              var t = this.getDataFromOption(this.option.data[e]),
                n =
                  this.option.data[e].formatter ||
                  this.option.axisLabel.formatter;
              return (
                n &&
                  ("function" == typeof n
                    ? (t = n.call(this.myChart, t))
                    : "string" == typeof n && (t = n.replace("{value}", t))),
                t
              );
            },
            _getInterval: function () {
              var e = this.option.axisLabel.interval;
              if ("auto" == e) {
                var t = this.option.axisLabel.textStyle.fontSize,
                  n = this.option.data,
                  i = this.option.data.length;
                if (this.isHorizontal())
                  if (i > 3) {
                    var a,
                      o,
                      s = this.getGap(),
                      h = !1,
                      V = Math.floor(0.5 / s);
                    for (
                      V = 1 > V ? 1 : V, e = Math.floor(15 / s);
                      !h && i > e;

                    ) {
                      (e += V), (h = !0), (a = Math.floor(s * e));
                      for (
                        var U = Math.floor((i - 1) / e) * e;
                        U >= 0;
                        U -= e
                      ) {
                        if (0 !== this.option.axisLabel.rotate) o = t;
                        else if (n[U].textStyle)
                          o = l.getTextWidth(
                            this._getReformedLabel(U),
                            this.getFont(
                              r.merge(
                                n[U].textStyle,
                                this.option.axisLabel.textStyle
                              )
                            )
                          );
                        else {
                          var m = this._getReformedLabel(U) + "",
                            p = (m.match(/\w/g) || "").length,
                            d = m.length - p;
                          o = (p * t * 2) / 3 + d * t;
                        }
                        if (o > a) {
                          h = !1;
                          break;
                        }
                      }
                    }
                  } else e = 1;
                else if (i > 3) {
                  var s = this.getGap();
                  for (e = Math.floor(11 / s); t > s * e - 6 && i > e; ) e++;
                } else e = 1;
              } else e = "function" == typeof e ? 1 : e - 0 + 1;
              return e;
            },
            _buildShape: function () {
              if (((this._interval = this._getInterval()), this.option.show)) {
                this.option.splitArea.show && this._buildSplitArea(),
                  this.option.splitLine.show && this._buildSplitLine(),
                  this.option.axisLine.show && this._buildAxisLine(),
                  this.option.axisTick.show && this._buildAxisTick(),
                  this.option.axisLabel.show && this._buildAxisLabel();
                for (var e = 0, t = this.shapeList.length; t > e; e++)
                  this.zr.addShape(this.shapeList[e]);
              }
            },
            _buildAxisTick: function () {
              var e,
                t = this.option.data,
                n = this.option.data.length,
                i = this.option.axisTick,
                o = i.length,
                s = i.lineStyle.color,
                r = i.lineStyle.width,
                l =
                  "function" == typeof i.interval
                    ? i.interval
                    : "auto" == i.interval &&
                      "function" == typeof this.option.axisLabel.interval
                    ? this.option.axisLabel.interval
                    : !1,
                h = l
                  ? 1
                  : "auto" == i.interval
                  ? this._interval
                  : i.interval - 0 + 1,
                V = i.onGap,
                U = V
                  ? this.getGap() / 2
                  : "undefined" == typeof V && this.option.boundaryGap
                  ? this.getGap() / 2
                  : 0,
                m = U > 0 ? -h : 0;
              if (this.isHorizontal())
                for (
                  var p,
                    d =
                      "bottom" == this.option.position
                        ? i.inside
                          ? this.grid.getYend() - o - 1
                          : this.grid.getYend() + 1
                        : i.inside
                        ? this.grid.getY() + 1
                        : this.grid.getY() - o - 1,
                    c = m;
                  n > c;
                  c += h
                )
                  (!l || l(c, t[c])) &&
                    ((p = this.subPixelOptimize(
                      this.getCoordByIndex(c) + (c >= 0 ? U : 0),
                      r
                    )),
                    (e = {
                      _axisShape: "axisTick",
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: p,
                        yStart: d,
                        xEnd: p,
                        yEnd: d + o,
                        strokeColor: s,
                        lineWidth: r,
                      },
                    }),
                    this.shapeList.push(new a(e)));
              else
                for (
                  var u,
                    y =
                      "left" == this.option.position
                        ? i.inside
                          ? this.grid.getX() + 1
                          : this.grid.getX() - o - 1
                        : i.inside
                        ? this.grid.getXend() - o - 1
                        : this.grid.getXend() + 1,
                    c = m;
                  n > c;
                  c += h
                )
                  (!l || l(c, t[c])) &&
                    ((u = this.subPixelOptimize(
                      this.getCoordByIndex(c) - (c >= 0 ? U : 0),
                      r
                    )),
                    (e = {
                      _axisShape: "axisTick",
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: y,
                        yStart: u,
                        xEnd: y + o,
                        yEnd: u,
                        strokeColor: s,
                        lineWidth: r,
                      },
                    }),
                    this.shapeList.push(new a(e)));
            },
            _buildAxisLabel: function () {
              var e,
                t,
                n = this.option.data,
                a = this.option.data.length,
                o = this.option.axisLabel,
                s = o.rotate,
                l = o.margin,
                h = o.clickable,
                V = o.textStyle,
                U = "function" == typeof o.interval ? o.interval : !1;
              if (this.isHorizontal()) {
                var m, p;
                "bottom" == this.option.position
                  ? ((m = this.grid.getYend() + l), (p = "top"))
                  : ((m = this.grid.getY() - l), (p = "bottom"));
                for (var d = 0; a > d; d += this._interval)
                  (U && !U(d, n[d])) ||
                    "" === this._getReformedLabel(d) ||
                    ((t = r.merge(n[d].textStyle || {}, V)),
                    (e = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase() + 3,
                      hoverable: !1,
                      style: {
                        x: this.getCoordByIndex(d),
                        y: m,
                        color: t.color,
                        text: this._getReformedLabel(d),
                        textFont: this.getFont(t),
                        textAlign: t.align || "center",
                        textBaseline: t.baseline || p,
                      },
                    }),
                    s &&
                      ((e.style.textAlign =
                        s > 0
                          ? "bottom" == this.option.position
                            ? "right"
                            : "left"
                          : "bottom" == this.option.position
                          ? "left"
                          : "right"),
                      (e.rotation = [
                        (s * Math.PI) / 180,
                        e.style.x,
                        e.style.y,
                      ])),
                    this.shapeList.push(new i(this._axisLabelClickable(h, e))));
              } else {
                var c, u;
                "left" == this.option.position
                  ? ((c = this.grid.getX() - l), (u = "right"))
                  : ((c = this.grid.getXend() + l), (u = "left"));
                for (var d = 0; a > d; d += this._interval)
                  (U && !U(d, n[d])) ||
                    "" === this._getReformedLabel(d) ||
                    ((t = r.merge(n[d].textStyle || {}, V)),
                    (e = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase() + 3,
                      hoverable: !1,
                      style: {
                        x: c,
                        y: this.getCoordByIndex(d),
                        color: t.color,
                        text: this._getReformedLabel(d),
                        textFont: this.getFont(t),
                        textAlign: t.align || u,
                        textBaseline:
                          t.baseline || (0 === d && "" !== this.option.name)
                            ? "bottom"
                            : d == a - 1 && "" !== this.option.name
                            ? "top"
                            : "middle",
                      },
                    }),
                    s &&
                      (e.rotation = [
                        (s * Math.PI) / 180,
                        e.style.x,
                        e.style.y,
                      ]),
                    this.shapeList.push(new i(this._axisLabelClickable(h, e))));
              }
            },
            _buildSplitLine: function () {
              var e,
                t = this.option.data,
                n = this.option.data.length,
                i = this.option.splitLine,
                o = i.lineStyle.type,
                s = i.lineStyle.width,
                r = i.lineStyle.color;
              r = r instanceof Array ? r : [r];
              var l = r.length,
                h =
                  "function" == typeof this.option.axisLabel.interval
                    ? this.option.axisLabel.interval
                    : !1,
                V = i.onGap,
                U = V
                  ? this.getGap() / 2
                  : "undefined" == typeof V && this.option.boundaryGap
                  ? this.getGap() / 2
                  : 0;
              if (
                ((n -=
                  V || ("undefined" == typeof V && this.option.boundaryGap)
                    ? 1
                    : 0),
                this.isHorizontal())
              )
                for (
                  var m, p = this.grid.getY(), d = this.grid.getYend(), c = 0;
                  n > c;
                  c += this._interval
                )
                  (!h || h(c, t[c])) &&
                    ((m = this.subPixelOptimize(
                      this.getCoordByIndex(c) + U,
                      s
                    )),
                    (e = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: m,
                        yStart: p,
                        xEnd: m,
                        yEnd: d,
                        strokeColor: r[(c / this._interval) % l],
                        lineType: o,
                        lineWidth: s,
                      },
                    }),
                    this.shapeList.push(new a(e)));
              else
                for (
                  var u, y = this.grid.getX(), b = this.grid.getXend(), c = 0;
                  n > c;
                  c += this._interval
                )
                  (!h || h(c, t[c])) &&
                    ((u = this.subPixelOptimize(
                      this.getCoordByIndex(c) - U,
                      s
                    )),
                    (e = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: y,
                        yStart: u,
                        xEnd: b,
                        yEnd: u,
                        strokeColor: r[(c / this._interval) % l],
                        lineType: o,
                        lineWidth: s,
                      },
                    }),
                    this.shapeList.push(new a(e)));
            },
            _buildSplitArea: function () {
              var e,
                t = this.option.data,
                n = this.option.splitArea,
                i = n.areaStyle.color;
              if (i instanceof Array) {
                var a = i.length,
                  s = this.option.data.length,
                  r =
                    "function" == typeof this.option.axisLabel.interval
                      ? this.option.axisLabel.interval
                      : !1,
                  l = n.onGap,
                  h = l
                    ? this.getGap() / 2
                    : "undefined" == typeof l && this.option.boundaryGap
                    ? this.getGap() / 2
                    : 0;
                if (this.isHorizontal())
                  for (
                    var V,
                      U = this.grid.getY(),
                      m = this.grid.getHeight(),
                      p = this.grid.getX(),
                      d = 0;
                    s >= d;
                    d += this._interval
                  )
                    (r && !r(d, t[d]) && s > d) ||
                      ((V =
                        s > d
                          ? this.getCoordByIndex(d) + h
                          : this.grid.getXend()),
                      (e = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                          x: p,
                          y: U,
                          width: V - p,
                          height: m,
                          color: i[(d / this._interval) % a],
                        },
                      }),
                      this.shapeList.push(new o(e)),
                      (p = V));
                else
                  for (
                    var c,
                      u = this.grid.getX(),
                      y = this.grid.getWidth(),
                      b = this.grid.getYend(),
                      d = 0;
                    s >= d;
                    d += this._interval
                  )
                    (r && !r(d, t[d]) && s > d) ||
                      ((c =
                        s > d ? this.getCoordByIndex(d) - h : this.grid.getY()),
                      (e = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                          x: u,
                          y: c,
                          width: y,
                          height: b - c,
                          color: i[(d / this._interval) % a],
                        },
                      }),
                      this.shapeList.push(new o(e)),
                      (b = c));
              } else
                (e = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this.grid.getX(),
                    y: this.grid.getY(),
                    width: this.grid.getWidth(),
                    height: this.grid.getHeight(),
                    color: i,
                  },
                }),
                  this.shapeList.push(new o(e));
            },
            refresh: function (e) {
              e &&
                ((this.option = this.reformOption(e)),
                (this.option.axisLabel.textStyle = this.getTextStyle(
                  this.option.axisLabel.textStyle
                ))),
                this.clear(),
                this._buildShape();
            },
            getGap: function () {
              var e = this.option.data.length,
                t = this.isHorizontal()
                  ? this.grid.getWidth()
                  : this.grid.getHeight();
              return this.option.boundaryGap ? t / e : t / (e > 1 ? e - 1 : 1);
            },
            getCoord: function (e) {
              for (
                var t = this.option.data,
                  n = t.length,
                  i = this.getGap(),
                  a = this.option.boundaryGap ? i / 2 : 0,
                  o = 0;
                n > o;
                o++
              ) {
                if (this.getDataFromOption(t[o]) == e)
                  return (a = this.isHorizontal()
                    ? this.grid.getX() + a
                    : this.grid.getYend() - a);
                a += i;
              }
            },
            getCoordByIndex: function (e) {
              if (0 > e)
                return this.isHorizontal()
                  ? this.grid.getX()
                  : this.grid.getYend();
              if (e > this.option.data.length - 1)
                return this.isHorizontal()
                  ? this.grid.getXend()
                  : this.grid.getY();
              var t = this.getGap(),
                n = this.option.boundaryGap ? t / 2 : 0;
              return (
                (n += e * t),
                (n = this.isHorizontal()
                  ? this.grid.getX() + n
                  : this.grid.getYend() - n)
              );
            },
            getNameByIndex: function (e) {
              return this.getDataFromOption(this.option.data[e]);
            },
            getIndexByName: function (e) {
              for (var t = this.option.data, n = t.length, i = 0; n > i; i++)
                if (this.getDataFromOption(t[i]) == e) return i;
              return -1;
            },
            getValueFromCoord: function () {
              return "";
            },
            isMainAxis: function (e) {
              return e % this._interval === 0;
            },
          }),
          r.inherits(t, n),
          e("../component").define("categoryAxis", t),
          t
        );
      }
    ),
    n(
      "echarts/component/valueAxis",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Line",
        "zrender/shape/Rectangle",
        "../config",
        "../util/date",
        "zrender/tool/util",
        "../util/smartSteps",
        "../util/accMath",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o, s, r) {
          if (!r || 0 === r.length)
            return void console.err("option.series.length == 0.");
          n.call(this, e, t, i, a, o),
            (this.series = r),
            (this.grid = this.component.grid);
          for (var l in s) this[l] = s[l];
          this.refresh(a, r);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Line"),
          o = e("zrender/shape/Rectangle"),
          s = e("../config");
        s.valueAxis = {
          zlevel: 0,
          z: 0,
          show: !0,
          position: "left",
          name: "",
          nameLocation: "end",
          nameTextStyle: {},
          boundaryGap: [0, 0],
          axisLine: {
            show: !1,
            onZero: !0,
            lineStyle: { color: "#48b", width: 2, type: "solid" },
          },
          axisTick: {
            show: !1,
            inside: !1,
            length: 5,
            lineStyle: { color: "#333", width: 1 },
          },
          axisLabel: {
            show: !0,
            rotate: 0,
            margin: -1,
            textStyle: { align: "left", baseline: "bottom", color: "#333" },
          },
          splitLine: {
            show: !0,
            lineStyle: { color: ["#ccc"], width: 1, type: "solid" },
          },
          splitArea: {
            show: !1,
            areaStyle: {
              color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"],
            },
          },
        };
        var r = e("../util/date"),
          l = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: s.COMPONENT_TYPE_AXIS_VALUE,
            _buildShape: function () {
              if (
                ((this._hasData = !1),
                this._calculateValue(),
                this._hasData && this.option.show)
              ) {
                this.option.splitArea.show && this._buildSplitArea(),
                  this.option.splitLine.show && this._buildSplitLine(),
                  this.option.axisLine.show && this._buildAxisLine(),
                  this.option.axisTick.show && this._buildAxisTick(),
                  this.option.axisLabel.show && this._buildAxisLabel();
                for (var e = 0, t = this.shapeList.length; t > e; e++)
                  this.zr.addShape(this.shapeList[e]);
              }
            },
            _buildAxisTick: function () {
              var e,
                t = this._valueList,
                n = this._valueList.length,
                i = this.option.axisTick,
                o = i.length,
                s = i.lineStyle.color,
                r = i.lineStyle.width;
              if (this.isHorizontal())
                for (
                  var l,
                    h =
                      "bottom" === this.option.position
                        ? i.inside
                          ? this.grid.getYend() - o - 1
                          : this.grid.getYend() + 1
                        : i.inside
                        ? this.grid.getY() + 1
                        : this.grid.getY() - o - 1,
                    V = 0;
                  n > V;
                  V++
                )
                  (l = this.subPixelOptimize(this.getCoord(t[V]), r)),
                    (e = {
                      _axisShape: "axisTick",
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: l,
                        yStart: h,
                        xEnd: l,
                        yEnd: h + o,
                        strokeColor: s,
                        lineWidth: r,
                      },
                    }),
                    this.shapeList.push(new a(e));
              else
                for (
                  var U,
                    m =
                      "left" === this.option.position
                        ? i.inside
                          ? this.grid.getX() + 1
                          : this.grid.getX() - o - 1
                        : i.inside
                        ? this.grid.getXend() - o - 1
                        : this.grid.getXend() + 1,
                    V = 0;
                  n > V;
                  V++
                )
                  (U = this.subPixelOptimize(this.getCoord(t[V]), r)),
                    (e = {
                      _axisShape: "axisTick",
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: m,
                        yStart: U,
                        xEnd: m + o,
                        yEnd: U,
                        strokeColor: s,
                        lineWidth: r,
                      },
                    }),
                    this.shapeList.push(new a(e));
            },
            _buildAxisLabel: function () {
              var e,
                t = this._valueList,
                n = this._valueList.length,
                a = this.option.axisLabel.rotate,
                o = this.option.axisLabel.margin,
                s = this.option.axisLabel.clickable,
                r = this.option.axisLabel.textStyle;
              if (this.isHorizontal()) {
                var l, h;
                "bottom" === this.option.position
                  ? ((l = this.grid.getYend() + o), (h = "top"))
                  : ((l = this.grid.getY() - o), (h = "bottom"));
                for (var V = 0; n > V; V++)
                  (e = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() + 3,
                    hoverable: !1,
                    style: {
                      x: this.getCoord(t[V]),
                      y: l,
                      color:
                        "function" == typeof r.color ? r.color(t[V]) : r.color,
                      text: this._valueLabel[V],
                      textFont: this.getFont(r),
                      textAlign: r.align || "center",
                      textBaseline: r.baseline || h,
                    },
                  }),
                    a &&
                      ((e.style.textAlign =
                        a > 0
                          ? "bottom" === this.option.position
                            ? "right"
                            : "left"
                          : "bottom" === this.option.position
                          ? "left"
                          : "right"),
                      (e.rotation = [
                        (a * Math.PI) / 180,
                        e.style.x,
                        e.style.y,
                      ])),
                    this.shapeList.push(new i(this._axisLabelClickable(s, e)));
              } else {
                var U, m;
                "left" === this.option.position
                  ? ((U = this.grid.getX() - o), (m = "right"))
                  : ((U = this.grid.getXend() + o), (m = "left"));
                for (var V = 0; n > V; V++)
                  (e = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() + 3,
                    hoverable: !1,
                    style: {
                      x: U,
                      y: this.getCoord(t[V]),
                      color:
                        "function" == typeof r.color ? r.color(t[V]) : r.color,
                      text: this._valueLabel[V],
                      textFont: this.getFont(r),
                      textAlign: r.align || m,
                      textBaseline:
                        r.baseline ||
                        (0 === V && "" !== this.option.name
                          ? "bottom"
                          : V === n - 1 && "" !== this.option.name
                          ? "top"
                          : "middle"),
                    },
                  }),
                    a &&
                      (e.rotation = [
                        (a * Math.PI) / 180,
                        e.style.x,
                        e.style.y,
                      ]),
                    this.shapeList.push(new i(this._axisLabelClickable(s, e)));
              }
            },
            _buildSplitLine: function () {
              var e,
                t = this._valueList,
                n = this._valueList.length,
                i = this.option.splitLine,
                o = i.lineStyle.type,
                s = i.lineStyle.width,
                r = i.lineStyle.color;
              r = r instanceof Array ? r : [r];
              var l = r.length;
              if (this.isHorizontal())
                for (
                  var h, V = this.grid.getY(), U = this.grid.getYend(), m = 0;
                  n > m;
                  m++
                )
                  (h = this.subPixelOptimize(this.getCoord(t[m]), s)),
                    (e = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: h,
                        yStart: V,
                        xEnd: h,
                        yEnd: U,
                        strokeColor: r[m % l],
                        lineType: o,
                        lineWidth: s,
                      },
                    }),
                    this.shapeList.push(new a(e));
              else
                for (
                  var p, d = this.grid.getX(), c = this.grid.getXend(), m = 0;
                  n > m;
                  m++
                )
                  (p = this.subPixelOptimize(this.getCoord(t[m]), s)),
                    (e = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      hoverable: !1,
                      style: {
                        xStart: d,
                        yStart: p,
                        xEnd: c,
                        yEnd: p,
                        strokeColor: r[m % l],
                        lineType: o,
                        lineWidth: s,
                      },
                    }),
                    this.shapeList.push(new a(e));
            },
            _buildSplitArea: function () {
              var e,
                t = this.option.splitArea.areaStyle.color;
              if (t instanceof Array) {
                var n = t.length,
                  i = this._valueList,
                  a = this._valueList.length;
                if (this.isHorizontal())
                  for (
                    var s,
                      r = this.grid.getY(),
                      l = this.grid.getHeight(),
                      h = this.grid.getX(),
                      V = 0;
                    a >= V;
                    V++
                  )
                    (s = a > V ? this.getCoord(i[V]) : this.grid.getXend()),
                      (e = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                          x: h,
                          y: r,
                          width: s - h,
                          height: l,
                          color: t[V % n],
                        },
                      }),
                      this.shapeList.push(new o(e)),
                      (h = s);
                else
                  for (
                    var U,
                      m = this.grid.getX(),
                      p = this.grid.getWidth(),
                      d = this.grid.getYend(),
                      V = 0;
                    a >= V;
                    V++
                  )
                    (U = a > V ? this.getCoord(i[V]) : this.grid.getY()),
                      (e = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                          x: m,
                          y: U,
                          width: p,
                          height: d - U,
                          color: t[V % n],
                        },
                      }),
                      this.shapeList.push(new o(e)),
                      (d = U);
              } else
                (e = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this.grid.getX(),
                    y: this.grid.getY(),
                    width: this.grid.getWidth(),
                    height: this.grid.getHeight(),
                    color: t,
                  },
                }),
                  this.shapeList.push(new o(e));
            },
            _calculateValue: function () {
              if (isNaN(this.option.min - 0) || isNaN(this.option.max - 0)) {
                for (
                  var e,
                    t,
                    n = {},
                    i = this.component.legend,
                    a = 0,
                    o = this.series.length;
                  o > a;
                  a++
                )
                  !(
                    (this.series[a].type != s.CHART_TYPE_LINE &&
                      this.series[a].type != s.CHART_TYPE_BAR &&
                      this.series[a].type != s.CHART_TYPE_SCATTER &&
                      this.series[a].type != s.CHART_TYPE_K &&
                      this.series[a].type != s.CHART_TYPE_EVENTRIVER) ||
                    (i && !i.isSelected(this.series[a].name)) ||
                    ((e = this.series[a].xAxisIndex || 0),
                    (t = this.series[a].yAxisIndex || 0),
                    (this.option.xAxisIndex != e &&
                      this.option.yAxisIndex != t) ||
                      !this._calculSum(n, a))
                  );
                var r;
                for (var a in n) {
                  r = n[a];
                  for (var l = 0, h = r.length; h > l; l++)
                    if (!isNaN(r[l])) {
                      (this._hasData = !0),
                        (this._min = r[l]),
                        (this._max = r[l]);
                      break;
                    }
                  if (this._hasData) break;
                }
                for (var a in n) {
                  r = n[a];
                  for (var l = 0, h = r.length; h > l; l++)
                    isNaN(r[l]) ||
                      ((this._min = Math.min(this._min, r[l])),
                      (this._max = Math.max(this._max, r[l])));
                }
                var V = Math.abs(this._max - this._min);
                (this._min = isNaN(this.option.min - 0)
                  ? this._min - Math.abs(V * this.option.boundaryGap[0])
                  : this.option.min - 0),
                  (this._max = isNaN(this.option.max - 0)
                    ? this._max + Math.abs(V * this.option.boundaryGap[1])
                    : this.option.max - 0),
                  this._min === this._max &&
                    (0 === this._max
                      ? (this._max = 1)
                      : this._max > 0
                      ? (this._min =
                          this._max / this.option.splitNumber != null
                            ? this.option.splitNumber
                            : 5)
                      : (this._max =
                          this._max / this.option.splitNumber != null
                            ? this.option.splitNumber
                            : 5)),
                  "time" != this.option.type
                    ? this._reformValue(this.option.scale)
                    : this._reformTimeValue();
              } else
                (this._hasData = !0),
                  (this._min = this.option.min - 0),
                  (this._max = this.option.max - 0),
                  "time" != this.option.type
                    ? this._customerValue()
                    : this._reformTimeValue();
            },
            _calculSum: function (e, t) {
              var n,
                i,
                a = this.series[t].name || "kener";
              if (this.series[t].stack) {
                var o = "__Magic_Key_Positive__" + this.series[t].stack,
                  l = "__Magic_Key_Negative__" + this.series[t].stack;
                (e[o] = e[o] || []),
                  (e[l] = e[l] || []),
                  (e[a] = e[a] || []),
                  (i = this.series[t].data);
                for (var h = 0, V = i.length; V > h; h++)
                  (n = this.getDataFromOption(i[h])),
                    "-" !== n &&
                      ((n -= 0),
                      n >= 0
                        ? null != e[o][h]
                          ? (e[o][h] += n)
                          : (e[o][h] = n)
                        : null != e[l][h]
                        ? (e[l][h] += n)
                        : (e[l][h] = n),
                      this.option.scale && e[a].push(n));
              } else if (
                ((e[a] = e[a] || []),
                this.series[t].type != s.CHART_TYPE_EVENTRIVER)
              ) {
                i = this.series[t].data;
                for (var h = 0, V = i.length; V > h; h++)
                  (n = this.getDataFromOption(i[h])),
                    this.series[t].type === s.CHART_TYPE_K
                      ? (e[a].push(n[0]),
                        e[a].push(n[1]),
                        e[a].push(n[2]),
                        e[a].push(n[3]))
                      : n instanceof Array
                      ? (-1 != this.option.xAxisIndex &&
                          e[a].push(
                            "time" != this.option.type
                              ? n[0]
                              : r.getNewDate(n[0])
                          ),
                        -1 != this.option.yAxisIndex &&
                          e[a].push(
                            "time" != this.option.type
                              ? n[1]
                              : r.getNewDate(n[1])
                          ))
                      : e[a].push(n);
              } else {
                i = this.series[t].eventList;
                for (var h = 0, V = i.length; V > h; h++)
                  for (var U = i[h].evolution, m = 0, p = U.length; p > m; m++)
                    e[a].push(r.getNewDate(U[m].time));
              }
            },
            _reformValue: function (t) {
              var n = e("../util/smartSteps"),
                i = this.option.splitNumber;
              !t && this._min >= 0 && this._max >= 0 && (this._min = 0),
                !t && this._min <= 0 && this._max <= 0 && (this._max = 0);
              var a = n(this._min, this._max, i);
              (i = null != i ? i : a.secs),
                (this._min = a.min),
                (this._max = a.max),
                (this._valueList = a.pnts),
                this._reformLabelData();
            },
            _reformTimeValue: function () {
              var e =
                  null != this.option.splitNumber ? this.option.splitNumber : 5,
                t = r.getAutoFormatter(this._min, this._max, e),
                n = t.formatter,
                i = t.gapValue;
              this._valueList = [r.getNewDate(this._min)];
              var a;
              switch (n) {
                case "week":
                  a = r.nextMonday(this._min);
                  break;
                case "month":
                  a = r.nextNthOnMonth(this._min, 1);
                  break;
                case "quarter":
                  a = r.nextNthOnQuarterYear(this._min, 1);
                  break;
                case "half-year":
                  a = r.nextNthOnHalfYear(this._min, 1);
                  break;
                case "year":
                  a = r.nextNthOnYear(this._min, 1);
                  break;
                default:
                  72e5 >= i
                    ? (a = (Math.floor(this._min / i) + 1) * i)
                    : ((a = r.getNewDate(this._min - -i)),
                      a.setHours(6 * Math.round(a.getHours() / 6)),
                      a.setMinutes(0),
                      a.setSeconds(0));
              }
              for (
                a - this._min < i / 2 && (a -= -i),
                  t = r.getNewDate(a),
                  e *= 1.5;
                e-- >= 0 &&
                (("month" == n ||
                  "quarter" == n ||
                  "half-year" == n ||
                  "year" == n) &&
                  t.setDate(1),
                !(this._max - t < i / 2));

              )
                this._valueList.push(t), (t = r.getNewDate(t - -i));
              this._valueList.push(r.getNewDate(this._max)),
                this._reformLabelData(n);
            },
            _customerValue: function () {
              var t = e("../util/accMath"),
                n =
                  null != this.option.splitNumber ? this.option.splitNumber : 5,
                i = (this._max - this._min) / n;
              this._valueList = [];
              for (var a = 0; n >= a; a++)
                this._valueList.push(t.accAdd(this._min, t.accMul(i, a)));
              this._reformLabelData();
            },
            _reformLabelData: function (e) {
              this._valueLabel = [];
              var t = this.option.axisLabel.formatter;
              if (t)
                for (var n = 0, i = this._valueList.length; i > n; n++)
                  "function" == typeof t
                    ? this._valueLabel.push(
                        e
                          ? t.call(this.myChart, this._valueList[n], e)
                          : t.call(this.myChart, this._valueList[n])
                      )
                    : "string" == typeof t &&
                      this._valueLabel.push(
                        e
                          ? r.format(t, this._valueList[n])
                          : t.replace("{value}", this._valueList[n])
                      );
              else if (e)
                for (var n = 0, i = this._valueList.length; i > n; n++)
                  this._valueLabel.push(r.format(e, this._valueList[n]));
              else
                for (var n = 0, i = this._valueList.length; i > n; n++)
                  this._valueLabel.push(this.numAddCommas(this._valueList[n]));
            },
            getExtremum: function () {
              return this._calculateValue(), { min: this._min, max: this._max };
            },
            refresh: function (e, t) {
              e &&
                ((this.option = this.reformOption(e)),
                (this.option.axisLabel.textStyle = l.merge(
                  this.option.axisLabel.textStyle || {},
                  this.ecTheme.textStyle
                )),
                (this.series = t)),
                this.zr && (this.clear(), this._buildShape());
            },
            getCoord: function (e) {
              (e = e < this._min ? this._min : e),
                (e = e > this._max ? this._max : e);
              var t;
              return (t = this.isHorizontal()
                ? this.grid.getX() +
                  ((e - this._min) / (this._max - this._min)) *
                    this.grid.getWidth()
                : this.grid.getYend() -
                  ((e - this._min) / (this._max - this._min)) *
                    this.grid.getHeight());
            },
            getCoordSize: function (e) {
              return Math.abs(
                this.isHorizontal()
                  ? (e / (this._max - this._min)) * this.grid.getWidth()
                  : (e / (this._max - this._min)) * this.grid.getHeight()
              );
            },
            getValueFromCoord: function (e) {
              var t;
              return (
                this.isHorizontal()
                  ? ((e = e < this.grid.getX() ? this.grid.getX() : e),
                    (e = e > this.grid.getXend() ? this.grid.getXend() : e),
                    (t =
                      this._min +
                      ((e - this.grid.getX()) / this.grid.getWidth()) *
                        (this._max - this._min)))
                  : ((e = e < this.grid.getY() ? this.grid.getY() : e),
                    (e = e > this.grid.getYend() ? this.grid.getYend() : e),
                    (t =
                      this._max -
                      ((e - this.grid.getY()) / this.grid.getHeight()) *
                        (this._max - this._min))),
                t.toFixed(2) - 0
              );
            },
            isMaindAxis: function (e) {
              for (var t = 0, n = this._valueList.length; n > t; t++)
                if (this._valueList[t] === e) return !0;
              return !1;
            },
          }),
          l.inherits(t, n),
          e("../component").define("valueAxis", t),
          t
        );
      }
    ),
    n("echarts/util/date", [], function () {
      function e(e, t, n) {
        n = n > 1 ? n : 2;
        for (var i, a, o, s, r = 0, l = V.length; l > r; r++)
          if (
            ((i = V[r].value),
            (a = Math.ceil(t / i) * i - Math.floor(e / i) * i),
            Math.round(a / i) <= 1.2 * n)
          ) {
            (o = V[r].formatter), (s = V[r].value);
            break;
          }
        return (
          null == o &&
            ((o = "year"),
            (i = 317088e5),
            (a = Math.ceil(t / i) * i - Math.floor(e / i) * i),
            (s = Math.round(a / (n - 1) / i) * i)),
          { formatter: o, gapValue: s }
        );
      }
      function t(e) {
        return 10 > e ? "0" + e : e;
      }
      function n(e, n) {
        ("week" == e ||
          "month" == e ||
          "quarter" == e ||
          "half-year" == e ||
          "year" == e) &&
          (e = "MM - dd\nyyyy");
        var i = h(n),
          a = i.getFullYear(),
          o = i.getMonth() + 1,
          s = i.getDate(),
          r = i.getHours(),
          l = i.getMinutes(),
          V = i.getSeconds();
        return (
          (e = e.replace("MM", t(o))),
          (e = e.toLowerCase()),
          (e = e.replace("yyyy", a)),
          (e = e.replace("yy", a % 100)),
          (e = e.replace("dd", t(s))),
          (e = e.replace("d", s)),
          (e = e.replace("hh", t(r))),
          (e = e.replace("h", r)),
          (e = e.replace("mm", t(l))),
          (e = e.replace("m", l)),
          (e = e.replace("ss", t(V))),
          (e = e.replace("s", V))
        );
      }
      function i(e) {
        return (e = h(e)), e.setDate(e.getDate() + 8 - e.getDay()), e;
      }
      function a(e, t, n) {
        return (
          (e = h(e)),
          e.setMonth(Math.ceil((e.getMonth() + 1) / n) * n),
          e.setDate(t),
          e
        );
      }
      function o(e, t) {
        return a(e, t, 1);
      }
      function s(e, t) {
        return a(e, t, 3);
      }
      function r(e, t) {
        return a(e, t, 6);
      }
      function l(e, t) {
        return a(e, t, 12);
      }
      function h(e) {
        return e instanceof Date
          ? e
          : new Date("string" == typeof e ? e.replace(/-/g, "/") : e);
      }
      var V = [
        { formatter: "hh : mm : ss", value: 1e3 },
        { formatter: "hh : mm : ss", value: 5e3 },
        { formatter: "hh : mm : ss", value: 1e4 },
        { formatter: "hh : mm : ss", value: 15e3 },
        { formatter: "hh : mm : ss", value: 3e4 },
        { formatter: "hh : mm\nMM - dd", value: 6e4 },
        { formatter: "hh : mm\nMM - dd", value: 3e5 },
        { formatter: "hh : mm\nMM - dd", value: 6e5 },
        { formatter: "hh : mm\nMM - dd", value: 9e5 },
        { formatter: "hh : mm\nMM - dd", value: 18e5 },
        { formatter: "hh : mm\nMM - dd", value: 36e5 },
        { formatter: "hh : mm\nMM - dd", value: 72e5 },
        { formatter: "hh : mm\nMM - dd", value: 216e5 },
        { formatter: "hh : mm\nMM - dd", value: 432e5 },
        { formatter: "MM - dd\nyyyy", value: 864e5 },
        { formatter: "week", value: 6048e5 },
        { formatter: "month", value: 26784e5 },
        { formatter: "quarter", value: 8208e6 },
        { formatter: "half-year", value: 16416e6 },
        { formatter: "year", value: 32832e6 },
      ];
      return {
        getAutoFormatter: e,
        getNewDate: h,
        format: n,
        nextMonday: i,
        nextNthPerNmonth: a,
        nextNthOnMonth: o,
        nextNthOnQuarterYear: s,
        nextNthOnHalfYear: r,
        nextNthOnYear: l,
      };
    }),
    n("echarts/util/smartSteps", [], function () {
      function e(e) {
        return X.log(v(e)) / X.LN10;
      }
      function t(e) {
        return X.pow(10, e);
      }
      function n(e) {
        return e === I(e);
      }
      function i(e, t, i, a) {
        (g = a || {}),
          (k = g.steps || _),
          (f = g.secs || W),
          (i = K(+i || 0) % 99),
          (e = +e || 0),
          (t = +t || 0),
          (L = x = 0),
          "min" in g && ((e = +g.min || 0), (L = 1)),
          "max" in g && ((t = +g.max || 0), (x = 1)),
          e > t && (t = [e, (e = t)][0]);
        var o = t - e;
        if (L && x) return b(e, t, i);
        if ((i || 5) > o) {
          if (n(e) && n(t)) return p(e, t, i);
          if (0 === o) return d(e, t, i);
        }
        return h(e, t, i);
      }
      function a(e, n, i, a) {
        a = a || 0;
        var r = o((n - e) / i, -1),
          l = o(e, -1, 1),
          h = o(n, -1),
          V = X.min(r.e, l.e, h.e);
        0 === l.c ? (V = X.min(r.e, h.e)) : 0 === h.c && (V = X.min(r.e, l.e)),
          s(r, { c: 0, e: V }),
          s(l, r, 1),
          s(h, r),
          (a += V),
          (e = l.c),
          (n = h.c);
        for (var U = (n - e) / i, m = t(a), p = 0, d = [], c = i + 1; c--; )
          d[c] = (e + U * c) * m;
        if (0 > a) {
          (p = u(m)),
            (U = +(U * m).toFixed(p)),
            (e = +(e * m).toFixed(p)),
            (n = +(n * m).toFixed(p));
          for (var c = d.length; c--; )
            (d[c] = d[c].toFixed(p)), 0 === +d[c] && (d[c] = "0");
        } else (e *= m), (n *= m), (U *= m);
        return (
          (f = 0),
          (k = 0),
          (g = 0),
          { min: e, max: n, secs: i, step: U, fix: p, exp: a, pnts: d }
        );
      }
      function o(i, a, o) {
        (a = K(a % 10) || 2),
          0 > a &&
            (n(i)
              ? (a = ("" + v(i)).replace(/0+$/, "").length || 1)
              : ((i = i.toFixed(15).replace(/0+$/, "")),
                (a = i.replace(".", "").replace(/^[-0]+/, "").length),
                (i = +i)));
        var s = I(e(i)) - a + 1,
          r = +(i * t(-s)).toFixed(15) || 0;
        return (
          (r = o ? I(r) : w(r)),
          !r && (s = 0),
          ("" + v(r)).length > a && ((s += 1), (r /= 10)),
          { c: r, e: s }
        );
      }
      function s(e, n, i) {
        var a = n.e - e.e;
        a && ((e.e += a), (e.c *= t(-a)), (e.c = i ? I(e.c) : w(e.c)));
      }
      function r(e, t, n) {
        e.e < t.e ? s(t, e, n) : s(e, t, n);
      }
      function l(e, t) {
        (t = t || _), (e = o(e));
        for (var n = e.c, i = 0; n > t[i]; ) i++;
        if (!t[i]) for (n /= 10, e.e += 1, i = 0; n > t[i]; ) i++;
        return (e.c = t[i]), e;
      }
      function h(e, t, i) {
        var r,
          h = i || +f.slice(-1),
          d = l((t - e) / h, k),
          u = o(t - e),
          b = o(e, -1, 1),
          g = o(t, -1);
        if (
          (s(u, d),
          s(b, d, 1),
          s(g, d),
          i ? (r = U(b, g, h)) : (h = V(b, g)),
          n(e) && n(t) && e * t >= 0)
        ) {
          if (h > t - e) return p(e, t, h);
          h = m(e, t, i, b, g, h);
        }
        var _ = c(e, t, b.c, g.c);
        return (
          (b.c = _[0]),
          (g.c = _[1]),
          (L || x) && y(e, t, b, g),
          a(b.c, g.c, h, g.e)
        );
      }
      function V(e, n) {
        for (var i, a, o, s, r = [], h = f.length; h--; )
          (i = f[h]),
            (a = l((n.c - e.c) / i, k)),
            (a = a.c * t(a.e)),
            (o = I(e.c / a) * a),
            (s = w(n.c / a) * a),
            (r[h] = { min: o, max: s, step: a, span: s - o });
        return (
          r.sort(function (e, t) {
            var n = e.span - t.span;
            return 0 === n && (n = e.step - t.step), n;
          }),
          (r = r[0]),
          (i = r.span / r.step),
          (e.c = r.min),
          (n.c = r.max),
          3 > i ? 2 * i : i
        );
      }
      function U(e, n, i) {
        for (var a, o, s = n.c, r = (n.c - e.c) / i - 1; s > e.c; )
          (r = l(r + 1, k)),
            (r = r.c * t(r.e)),
            (a = r * i),
            (o = w(n.c / r) * r),
            (s = o - a);
        var h = e.c - s,
          V = o - n.c,
          U = h - V;
        return (
          U > 1.1 * r && ((U = K(U / r / 2) * r), (s += U), (o += U)),
          (e.c = s),
          (n.c = o),
          r
        );
      }
      function m(e, i, a, o, s, r) {
        var l = s.c - o.c,
          h = (l / r) * t(s.e);
        if (
          !n(h) &&
          ((h = I(h)),
          (l = h * r),
          i - e > l &&
            ((h += 1),
            (l = h * r),
            !a && h * (r - 1) >= i - e && ((r -= 1), (l = h * r))),
          l >= i - e)
        ) {
          var V = l - (i - e);
          (o.c = K(e - V / 2)), (s.c = K(i + V / 2)), (o.e = 0), (s.e = 0);
        }
        return r;
      }
      function p(e, t, n) {
        if (((n = n || 5), L)) t = e + n;
        else if (x) e = t - n;
        else {
          var i = n - (t - e),
            o = K(e - i / 2),
            s = K(t + i / 2),
            r = c(e, t, o, s);
          (e = r[0]), (t = r[1]);
        }
        return a(e, t, n);
      }
      function d(e, t, n) {
        n = n || 5;
        var i = X.min(v(t / n), n) / 2.1;
        return (
          L ? (t = e + i) : x ? (e = t - i) : ((e -= i), (t += i)), h(e, t, n)
        );
      }
      function c(e, t, n, i) {
        return (
          e >= 0 && 0 > n
            ? ((i -= n), (n = 0))
            : 0 >= t && i > 0 && ((n -= i), (i = 0)),
          [n, i]
        );
      }
      function u(e) {
        return (
          (e = (+e).toFixed(15).split(".")), e.pop().replace(/0+$/, "").length
        );
      }
      function y(e, t, n, i) {
        if (L) {
          var a = o(e, 4, 1);
          n.e - a.e > 6 && (a = { c: 0, e: n.e }),
            r(n, a),
            r(i, a),
            (i.c += a.c - n.c),
            (n.c = a.c);
        } else if (x) {
          var s = o(t, 4);
          i.e - s.e > 6 && (s = { c: 0, e: i.e }),
            r(n, s),
            r(i, s),
            (n.c += s.c - i.c),
            (i.c = s.c);
        }
      }
      function b(e, t, n) {
        var i = n ? [n] : f,
          r = t - e;
        if (0 === r)
          return (
            (t = o(t, 3)),
            (n = i[0]),
            (t.c = K(t.c + n / 2)),
            a(t.c - n, t.c, n, t.e)
          );
        v(t / r) < 1e-6 && (t = 0), v(e / r) < 1e-6 && (e = 0);
        var l,
          h,
          V,
          U = [
            [5, 10],
            [10, 2],
            [50, 10],
            [100, 2],
          ],
          m = [],
          p = [],
          d = o(t - e, 3),
          c = o(e, -1, 1),
          u = o(t, -1);
        s(c, d, 1), s(u, d), (r = u.c - c.c), (d.c = r);
        for (var y = i.length; y--; ) {
          (n = i[y]),
            (l = w(r / n)),
            (h = l * n - r),
            (V = 3 * (h + 3)),
            (V += 2 * (n - i[0] + 2)),
            n % 5 === 0 && (V -= 10);
          for (var b = U.length; b--; ) l % U[b][0] === 0 && (V /= U[b][1]);
          (p[y] = [n, l, h, V].join()),
            (m[y] = { secs: n, step: l, delta: h, score: V });
        }
        return (
          m.sort(function (e, t) {
            return e.score - t.score;
          }),
          (m = m[0]),
          (c.c = K(c.c - m.delta / 2)),
          (u.c = K(u.c + m.delta / 2)),
          a(c.c, u.c, m.secs, d.e)
        );
      }
      var g,
        k,
        f,
        L,
        x,
        _ = [10, 20, 25, 50],
        W = [4, 5, 6],
        X = Math,
        K = X.round,
        I = X.floor,
        w = X.ceil,
        v = X.abs;
      return i;
    }),
    n(
      "echarts/chart/bar",
      [
        "require",
        "./base",
        "zrender/shape/Rectangle",
        "../component/axis",
        "../component/grid",
        "../component/dataZoom",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/color",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Rectangle");
        e("../component/axis"),
          e("../component/grid"),
          e("../component/dataZoom");
        var a = e("../config");
        a.bar = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          xAxisIndex: 0,
          yAxisIndex: 0,
          barMinHeight: 0,
          barGap: "30%",
          barCategoryGap: "20%",
          itemStyle: {
            normal: {
              barBorderColor: "#fff",
              barBorderRadius: 0,
              barBorderWidth: 0,
              label: { show: !1 },
            },
            emphasis: {
              barBorderColor: "#fff",
              barBorderRadius: 0,
              barBorderWidth: 0,
              label: { show: !1 },
            },
          },
        };
        var o = e("../util/ecData"),
          s = e("zrender/tool/util"),
          r = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: a.CHART_TYPE_BAR,
            _buildShape: function () {
              this._buildPosition();
            },
            _buildNormal: function (e, t, n, o, s) {
              for (
                var r,
                  l,
                  h,
                  V,
                  U,
                  m,
                  p,
                  d,
                  c,
                  u,
                  y,
                  b,
                  g = this.series,
                  k = n[0][0],
                  f = g[k],
                  L = "horizontal" == s,
                  x = this.component.xAxis,
                  _ = this.component.yAxis,
                  W = L ? x.getAxis(f.xAxisIndex) : _.getAxis(f.yAxisIndex),
                  X = this._mapSize(W, n),
                  K = X.gap,
                  I = X.barGap,
                  w = X.barWidthMap,
                  v = X.barMaxWidthMap,
                  J = X.barWidth,
                  C = X.barMinHeightMap,
                  S = X.interval,
                  F = this.deepQuery([this.ecTheme, a], "island.r"),
                  E = 0,
                  T = t;
                T > E && null != W.getNameByIndex(E);
                E++
              ) {
                L
                  ? (V = W.getCoordByIndex(E) - K / 2)
                  : (U = W.getCoordByIndex(E) + K / 2);
                for (var A = 0, M = n.length; M > A; A++) {
                  var z = g[n[A][0]].yAxisIndex || 0,
                    O = g[n[A][0]].xAxisIndex || 0;
                  (r = L ? _.getAxis(z) : x.getAxis(O)),
                    (p = m = c = d = r.getCoord(0));
                  for (var P = 0, D = n[A].length; D > P; P++)
                    (k = n[A][P]),
                      (f = g[k]),
                      (y = f.data[E]),
                      (b = this.getDataFromOption(y, "-")),
                      (o[k] = o[k] || {
                        min: Number.POSITIVE_INFINITY,
                        max: Number.NEGATIVE_INFINITY,
                        sum: 0,
                        counter: 0,
                        average: 0,
                      }),
                      (h = Math.min(v[k] || Number.MAX_VALUE, w[k] || J)),
                      "-" !== b &&
                        (b > 0
                          ? ((l =
                              P > 0
                                ? r.getCoordSize(b)
                                : L
                                ? p - r.getCoord(b)
                                : r.getCoord(b) - p),
                            1 === D && C[k] > l && (l = C[k]),
                            L ? ((m -= l), (U = m)) : ((V = m), (m += l)))
                          : 0 > b
                          ? ((l =
                              P > 0
                                ? r.getCoordSize(b)
                                : L
                                ? r.getCoord(b) - c
                                : c - r.getCoord(b)),
                            1 === D && C[k] > l && (l = C[k]),
                            L ? ((U = d), (d += l)) : ((d -= l), (V = d)))
                          : ((l = 0),
                            L ? ((m -= l), (U = m)) : ((V = m), (m += l))),
                        (o[k][E] = L ? V + h / 2 : U - h / 2),
                        o[k].min > b &&
                          ((o[k].min = b),
                          L
                            ? ((o[k].minY = U), (o[k].minX = o[k][E]))
                            : ((o[k].minX = V + l), (o[k].minY = o[k][E]))),
                        o[k].max < b &&
                          ((o[k].max = b),
                          L
                            ? ((o[k].maxY = U), (o[k].maxX = o[k][E]))
                            : ((o[k].maxX = V + l), (o[k].maxY = o[k][E]))),
                        (o[k].sum += b),
                        o[k].counter++,
                        E % S === 0 &&
                          ((u = this._getBarItem(
                            k,
                            E,
                            W.getNameByIndex(E),
                            V,
                            U - (L ? 0 : h),
                            L ? h : l,
                            L ? l : h,
                            L ? "vertical" : "horizontal"
                          )),
                          this.shapeList.push(new i(u))));
                  for (var P = 0, D = n[A].length; D > P; P++)
                    (k = n[A][P]),
                      (f = g[k]),
                      (y = f.data[E]),
                      (b = this.getDataFromOption(y, "-")),
                      (h = Math.min(v[k] || Number.MAX_VALUE, w[k] || J)),
                      "-" == b &&
                        this.deepQuery([y, f, this.option], "calculable") &&
                        (L ? ((m -= F), (U = m)) : ((V = m), (m += F)),
                        (u = this._getBarItem(
                          k,
                          E,
                          W.getNameByIndex(E),
                          V,
                          U - (L ? 0 : h),
                          L ? h : F,
                          L ? F : h,
                          L ? "vertical" : "horizontal"
                        )),
                        (u.hoverable = !1),
                        (u.draggable = !1),
                        (u.style.lineWidth = 1),
                        (u.style.brushType = "stroke"),
                        (u.style.strokeColor =
                          f.calculableHolderColor ||
                          this.ecTheme.calculableHolderColor ||
                          a.calculableHolderColor),
                        this.shapeList.push(new i(u)));
                  L ? (V += h + I) : (U -= h + I);
                }
              }
              this._calculMarkMapXY(o, n, L ? "y" : "x");
            },
            _buildHorizontal: function (e, t, n, i) {
              return this._buildNormal(e, t, n, i, "horizontal");
            },
            _buildVertical: function (e, t, n, i) {
              return this._buildNormal(e, t, n, i, "vertical");
            },
            _buildOther: function (e, t, n, a) {
              for (var o = this.series, s = 0, r = n.length; r > s; s++)
                for (var l = 0, h = n[s].length; h > l; l++) {
                  var V = n[s][l],
                    U = o[V],
                    m = U.xAxisIndex || 0,
                    p = this.component.xAxis.getAxis(m),
                    d = p.getCoord(0),
                    c = U.yAxisIndex || 0,
                    u = this.component.yAxis.getAxis(c),
                    y = u.getCoord(0);
                  a[V] = a[V] || {
                    min0: Number.POSITIVE_INFINITY,
                    min1: Number.POSITIVE_INFINITY,
                    max0: Number.NEGATIVE_INFINITY,
                    max1: Number.NEGATIVE_INFINITY,
                    sum0: 0,
                    sum1: 0,
                    counter0: 0,
                    counter1: 0,
                    average0: 0,
                    average1: 0,
                  };
                  for (var b = 0, g = U.data.length; g > b; b++) {
                    var k = U.data[b],
                      f = this.getDataFromOption(k, "-");
                    if (f instanceof Array) {
                      var L,
                        x,
                        _ = p.getCoord(f[0]),
                        W = u.getCoord(f[1]),
                        X = [k, U],
                        K = this.deepQuery(X, "barWidth") || 10,
                        I = this.deepQuery(X, "barHeight");
                      null != I
                        ? ((L = "horizontal"),
                          f[0] > 0
                            ? ((K = _ - d), (_ -= K))
                            : (K = f[0] < 0 ? d - _ : 0),
                          (x = this._getBarItem(
                            V,
                            b,
                            f[0],
                            _,
                            W - I / 2,
                            K,
                            I,
                            L
                          )))
                        : ((L = "vertical"),
                          f[1] > 0
                            ? (I = y - W)
                            : f[1] < 0
                            ? ((I = W - y), (W -= I))
                            : (I = 0),
                          (x = this._getBarItem(
                            V,
                            b,
                            f[0],
                            _ - K / 2,
                            W,
                            K,
                            I,
                            L
                          ))),
                        this.shapeList.push(new i(x)),
                        (_ = p.getCoord(f[0])),
                        (W = u.getCoord(f[1])),
                        a[V].min0 > f[0] &&
                          ((a[V].min0 = f[0]),
                          (a[V].minY0 = W),
                          (a[V].minX0 = _)),
                        a[V].max0 < f[0] &&
                          ((a[V].max0 = f[0]),
                          (a[V].maxY0 = W),
                          (a[V].maxX0 = _)),
                        (a[V].sum0 += f[0]),
                        a[V].counter0++,
                        a[V].min1 > f[1] &&
                          ((a[V].min1 = f[1]),
                          (a[V].minY1 = W),
                          (a[V].minX1 = _)),
                        a[V].max1 < f[1] &&
                          ((a[V].max1 = f[1]),
                          (a[V].maxY1 = W),
                          (a[V].maxX1 = _)),
                        (a[V].sum1 += f[1]),
                        a[V].counter1++;
                    }
                  }
                }
              this._calculMarkMapXY(a, n, "xy");
            },
            _mapSize: function (e, t, n) {
              var i,
                a,
                o = this._findSpecialBarSzie(t, n),
                s = o.barWidthMap,
                r = o.barMaxWidthMap,
                l = o.barMinHeightMap,
                h = o.sBarWidthCounter,
                V = o.sBarWidthTotal,
                U = o.barGap,
                m = o.barCategoryGap,
                p = 1;
              if (t.length != h) {
                if (n)
                  (i = e.getGap()),
                    (U = 0),
                    (a = +(i / t.length).toFixed(2)),
                    0 >= a && ((p = Math.floor(t.length / i)), (a = 1));
                else if (
                  ((i =
                    "string" == typeof m && m.match(/%$/)
                      ? ((e.getGap() * (100 - parseFloat(m))) / 100).toFixed(
                          2
                        ) - 0
                      : e.getGap() - m),
                  "string" == typeof U && U.match(/%$/)
                    ? ((U = parseFloat(U) / 100),
                      (a = +(
                        (i - V) /
                        ((t.length - 1) * U + t.length - h)
                      ).toFixed(2)),
                      (U = a * U))
                    : ((U = parseFloat(U)),
                      (a = +(
                        (i - V - U * (t.length - 1)) /
                        (t.length - h)
                      ).toFixed(2))),
                  0 >= a)
                )
                  return this._mapSize(e, t, !0);
              } else if (
                ((i =
                  h > 1
                    ? "string" == typeof m && m.match(/%$/)
                      ? +((e.getGap() * (100 - parseFloat(m))) / 100).toFixed(2)
                      : e.getGap() - m
                    : V),
                (a = 0),
                (U = h > 1 ? +((i - V) / (h - 1)).toFixed(2) : 0),
                0 > U)
              )
                return this._mapSize(e, t, !0);
              return this._recheckBarMaxWidth(t, s, r, l, i, a, U, p);
            },
            _findSpecialBarSzie: function (e, t) {
              for (
                var n,
                  i,
                  a,
                  o,
                  s = this.series,
                  r = {},
                  l = {},
                  h = {},
                  V = 0,
                  U = 0,
                  m = 0,
                  p = e.length;
                p > m;
                m++
              )
                for (
                  var d = { barWidth: !1, barMaxWidth: !1 },
                    c = 0,
                    u = e[m].length;
                  u > c;
                  c++
                ) {
                  var y = e[m][c],
                    b = s[y];
                  if (!t) {
                    if (d.barWidth) r[y] = n;
                    else if (((n = this.query(b, "barWidth")), null != n)) {
                      (r[y] = n), (U += n), V++, (d.barWidth = !0);
                      for (var g = 0, k = c; k > g; g++) {
                        var f = e[m][g];
                        r[f] = n;
                      }
                    }
                    if (d.barMaxWidth) l[y] = i;
                    else if (((i = this.query(b, "barMaxWidth")), null != i)) {
                      (l[y] = i), (d.barMaxWidth = !0);
                      for (var g = 0, k = c; k > g; g++) {
                        var f = e[m][g];
                        l[f] = i;
                      }
                    }
                  }
                  (h[y] = this.query(b, "barMinHeight")),
                    (a = null != a ? a : this.query(b, "barGap")),
                    (o = null != o ? o : this.query(b, "barCategoryGap"));
                }
              return {
                barWidthMap: r,
                barMaxWidthMap: l,
                barMinHeightMap: h,
                sBarWidth: n,
                sBarMaxWidth: i,
                sBarWidthCounter: V,
                sBarWidthTotal: U,
                barGap: a,
                barCategoryGap: o,
              };
            },
            _recheckBarMaxWidth: function (e, t, n, i, a, o, s, r) {
              for (var l = 0, h = e.length; h > l; l++) {
                var V = e[l][0];
                n[V] && n[V] < o && (a -= o - n[V]);
              }
              return {
                barWidthMap: t,
                barMaxWidthMap: n,
                barMinHeightMap: i,
                gap: a,
                barWidth: o,
                barGap: s,
                interval: r,
              };
            },
            _getBarItem: function (e, t, n, i, a, s, l, h) {
              var V,
                U = this.series,
                m = U[e],
                p = m.data[t],
                d = this._sIndex2ColorMap[e],
                c = [p, m],
                u = this.deepMerge(c, "itemStyle.normal"),
                y = this.deepMerge(c, "itemStyle.emphasis"),
                b = u.barBorderWidth;
              V = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                clickable: this.deepQuery(c, "clickable"),
                style: {
                  x: i,
                  y: a,
                  width: s,
                  height: l,
                  brushType: "both",
                  color: this.getItemStyleColor(
                    this.deepQuery(c, "itemStyle.normal.color") || d,
                    e,
                    t,
                    p
                  ),
                  radius: u.barBorderRadius,
                  lineWidth: b,
                  strokeColor: u.barBorderColor,
                },
                highlightStyle: {
                  color: this.getItemStyleColor(
                    this.deepQuery(c, "itemStyle.emphasis.color"),
                    e,
                    t,
                    p
                  ),
                  radius: y.barBorderRadius,
                  lineWidth: y.barBorderWidth,
                  strokeColor: y.barBorderColor,
                },
                _orient: h,
              };
              var g = V.style;
              (V.highlightStyle.color =
                V.highlightStyle.color ||
                ("string" == typeof g.color ? r.lift(g.color, -0.3) : g.color)),
                (g.x = Math.floor(g.x)),
                (g.y = Math.floor(g.y)),
                (g.height = Math.ceil(g.height)),
                (g.width = Math.ceil(g.width)),
                b > 0 && g.height > b && g.width > b
                  ? ((g.y += b / 2),
                    (g.height -= b),
                    (g.x += b / 2),
                    (g.width -= b))
                  : (g.brushType = "fill"),
                (V.highlightStyle.textColor = V.highlightStyle.color),
                (V = this.addLabel(V, m, p, n, h));
              var k = g.textPosition;
              if (
                "insideLeft" === k ||
                "insideRight" === k ||
                "insideTop" === k ||
                "insideBottom" === k
              ) {
                var f = 5;
                switch (k) {
                  case "insideLeft":
                    (g.textX = g.x + f),
                      (g.textY = g.y + g.height / 2),
                      (g.textAlign = "left"),
                      (g.textBaseline = "middle");
                    break;
                  case "insideRight":
                    (g.textX = g.x + g.width - f),
                      (g.textY = g.y + g.height / 2),
                      (g.textAlign = "right"),
                      (g.textBaseline = "middle");
                    break;
                  case "insideTop":
                    (g.textX = g.x + g.width / 2),
                      (g.textY = g.y + f / 2),
                      (g.textAlign = "center"),
                      (g.textBaseline = "top");
                    break;
                  case "insideBottom":
                    (g.textX = g.x + g.width / 2),
                      (g.textY = g.y + g.height - f / 2),
                      (g.textAlign = "center"),
                      (g.textBaseline = "bottom");
                }
                (g.textPosition = "specific"),
                  (g.textColor = g.textColor || "#fff");
              }
              return (
                this.deepQuery([p, m, this.option], "calculable") &&
                  (this.setCalculable(V), (V.draggable = !0)),
                o.pack(V, U[e], e, U[e].data[t], t, n),
                V
              );
            },
            getMarkCoord: function (e, t) {
              var n,
                i,
                a = this.series[e],
                o = this.xMarkMap[e],
                s = this.component.xAxis.getAxis(a.xAxisIndex),
                r = this.component.yAxis.getAxis(a.yAxisIndex);
              if (
                !t.type ||
                ("max" !== t.type && "min" !== t.type && "average" !== t.type)
              )
                if (o.isHorizontal) {
                  n =
                    "string" == typeof t.xAxis && s.getIndexByName
                      ? s.getIndexByName(t.xAxis)
                      : t.xAxis || 0;
                  var l = o[n];
                  (l =
                    null != l
                      ? l
                      : "string" != typeof t.xAxis && s.getCoordByIndex
                      ? s.getCoordByIndex(t.xAxis || 0)
                      : s.getCoord(t.xAxis || 0)),
                    (i = [l, r.getCoord(t.yAxis || 0)]);
                } else {
                  n =
                    "string" == typeof t.yAxis && r.getIndexByName
                      ? r.getIndexByName(t.yAxis)
                      : t.yAxis || 0;
                  var h = o[n];
                  (h =
                    null != h
                      ? h
                      : "string" != typeof t.yAxis && r.getCoordByIndex
                      ? r.getCoordByIndex(t.yAxis || 0)
                      : r.getCoord(t.yAxis || 0)),
                    (i = [s.getCoord(t.xAxis || 0), h]);
                }
              else {
                var V =
                  null != t.valueIndex
                    ? t.valueIndex
                    : null != o.maxX0
                    ? "1"
                    : "";
                i = [
                  o[t.type + "X" + V],
                  o[t.type + "Y" + V],
                  o[t.type + "Line" + V],
                  o[t.type + V],
                ];
              }
              return i;
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
            addDataAnimation: function (e) {
              for (var t = this.series, n = {}, i = 0, a = e.length; a > i; i++)
                n[e[i][0]] = e[i];
              for (
                var s, r, l, h, V, U, m, i = this.shapeList.length - 1;
                i >= 0;
                i--
              )
                if (
                  ((U = o.get(this.shapeList[i], "seriesIndex")),
                  n[U] && !n[U][3] && "rectangle" === this.shapeList[i].type)
                ) {
                  if (
                    ((m = o.get(this.shapeList[i], "dataIndex")),
                    (V = t[U]),
                    n[U][2] && m === V.data.length - 1)
                  ) {
                    this.zr.delShape(this.shapeList[i].id);
                    continue;
                  }
                  if (!n[U][2] && 0 === m) {
                    this.zr.delShape(this.shapeList[i].id);
                    continue;
                  }
                  "horizontal" === this.shapeList[i]._orient
                    ? ((h = this.component.yAxis
                        .getAxis(V.yAxisIndex || 0)
                        .getGap()),
                      (l = n[U][2] ? -h : h),
                      (s = 0))
                    : ((r = this.component.xAxis
                        .getAxis(V.xAxisIndex || 0)
                        .getGap()),
                      (s = n[U][2] ? r : -r),
                      (l = 0)),
                    (this.shapeList[i].position = [0, 0]),
                    this.zr
                      .animate(this.shapeList[i].id, "")
                      .when(
                        this.query(this.option, "animationDurationUpdate"),
                        { position: [s, l] }
                      )
                      .start();
                }
            },
          }),
          s.inherits(t, n),
          e("../chart").define("bar", t),
          t
        );
      }
    ),
    n(
      "echarts/chart/scatter",
      [
        "require",
        "./base",
        "../util/shape/Symbol",
        "../component/axis",
        "../component/grid",
        "../component/dataZoom",
        "../component/dataRange",
        "../config",
        "zrender/tool/util",
        "zrender/tool/color",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("../util/shape/Symbol");
        e("../component/axis"),
          e("../component/grid"),
          e("../component/dataZoom"),
          e("../component/dataRange");
        var a = e("../config");
        a.scatter = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          xAxisIndex: 0,
          yAxisIndex: 0,
          symbolSize: 4,
          large: !1,
          largeThreshold: 2e3,
          itemStyle: {
            normal: { label: { show: !1 } },
            emphasis: { label: { show: !1 } },
          },
        };
        var o = e("zrender/tool/util"),
          s = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: a.CHART_TYPE_SCATTER,
            _buildShape: function () {
              var e = this.series;
              (this._sIndex2ColorMap = {}),
                (this._symbol = this.option.symbolList),
                (this._sIndex2ShapeMap = {}),
                (this.selectedMap = {}),
                (this.xMarkMap = {});
              for (
                var t,
                  n,
                  i,
                  o,
                  r = this.component.legend,
                  l = [],
                  h = 0,
                  V = e.length;
                V > h;
                h++
              )
                if (
                  ((t = e[h]), (n = t.name), t.type === a.CHART_TYPE_SCATTER)
                ) {
                  if (
                    ((e[h] = this.reformOption(e[h])),
                    (this.legendHoverLink =
                      e[h].legendHoverLink || this.legendHoverLink),
                    (this._sIndex2ShapeMap[h] =
                      this.query(t, "symbol") ||
                      this._symbol[h % this._symbol.length]),
                    r)
                  ) {
                    if (
                      ((this.selectedMap[n] = r.isSelected(n)),
                      (this._sIndex2ColorMap[h] = s.alpha(r.getColor(n), 0.5)),
                      (i = r.getItemShape(n)))
                    ) {
                      var o = this._sIndex2ShapeMap[h];
                      (i.style.brushType = o.match("empty")
                        ? "stroke"
                        : "both"),
                        (o = o.replace("empty", "").toLowerCase()),
                        o.match("rectangle") &&
                          ((i.style.x += Math.round(
                            (i.style.width - i.style.height) / 2
                          )),
                          (i.style.width = i.style.height)),
                        o.match("star") &&
                          ((i.style.n = o.replace("star", "") - 0 || 5),
                          (o = "star")),
                        o.match("image") &&
                          ((i.style.image = o.replace(
                            new RegExp("^image:\\/\\/"),
                            ""
                          )),
                          (i.style.x += Math.round(
                            (i.style.width - i.style.height) / 2
                          )),
                          (i.style.width = i.style.height),
                          (o = "image")),
                        (i.style.iconType = o),
                        r.setItemShape(n, i);
                    }
                  } else
                    (this.selectedMap[n] = !0),
                      (this._sIndex2ColorMap[h] = s.alpha(
                        this.zr.getColor(h),
                        0.5
                      ));
                  this.selectedMap[n] && l.push(h);
                }
              this._buildSeries(l), this.addShapeList();
            },
            _buildSeries: function (e) {
              if (0 !== e.length) {
                for (
                  var t,
                    n,
                    i,
                    a,
                    o,
                    s,
                    r,
                    l,
                    h = this.series,
                    V = {},
                    U = 0,
                    m = e.length;
                  m > U;
                  U++
                )
                  if (((t = e[U]), (n = h[t]), 0 !== n.data.length)) {
                    (o = this.component.xAxis.getAxis(n.xAxisIndex || 0)),
                      (s = this.component.yAxis.getAxis(n.yAxisIndex || 0)),
                      (V[t] = []);
                    for (var p = 0, d = n.data.length; d > p; p++)
                      (i = n.data[p]),
                        (a = this.getDataFromOption(i, "-")),
                        "-" === a ||
                          a.length < 2 ||
                          ((r = o.getCoord(a[0])),
                          (l = s.getCoord(a[1])),
                          V[t].push([r, l, p, i.name || ""]));
                    (this.xMarkMap[t] = this._markMap(o, s, n.data, V[t])),
                      this.buildMark(t);
                  }
                this._buildPointList(V);
              }
            },
            _markMap: function (e, t, n, i) {
              for (
                var a,
                  o = {
                    min0: Number.POSITIVE_INFINITY,
                    max0: Number.NEGATIVE_INFINITY,
                    sum0: 0,
                    counter0: 0,
                    average0: 0,
                    min1: Number.POSITIVE_INFINITY,
                    max1: Number.NEGATIVE_INFINITY,
                    sum1: 0,
                    counter1: 0,
                    average1: 0,
                  },
                  s = 0,
                  r = i.length;
                r > s;
                s++
              )
                (a = n[i[s][2]].value || n[i[s][2]]),
                  o.min0 > a[0] &&
                    ((o.min0 = a[0]), (o.minY0 = i[s][1]), (o.minX0 = i[s][0])),
                  o.max0 < a[0] &&
                    ((o.max0 = a[0]), (o.maxY0 = i[s][1]), (o.maxX0 = i[s][0])),
                  (o.sum0 += a[0]),
                  o.counter0++,
                  o.min1 > a[1] &&
                    ((o.min1 = a[1]), (o.minY1 = i[s][1]), (o.minX1 = i[s][0])),
                  o.max1 < a[1] &&
                    ((o.max1 = a[1]), (o.maxY1 = i[s][1]), (o.maxX1 = i[s][0])),
                  (o.sum1 += a[1]),
                  o.counter1++;
              var l = this.component.grid.getX(),
                h = this.component.grid.getXend(),
                V = this.component.grid.getY(),
                U = this.component.grid.getYend();
              o.average0 = o.sum0 / o.counter0;
              var m = e.getCoord(o.average0);
              (o.averageLine0 = [
                [m, U],
                [m, V],
              ]),
                (o.minLine0 = [
                  [o.minX0, U],
                  [o.minX0, V],
                ]),
                (o.maxLine0 = [
                  [o.maxX0, U],
                  [o.maxX0, V],
                ]),
                (o.average1 = o.sum1 / o.counter1);
              var p = t.getCoord(o.average1);
              return (
                (o.averageLine1 = [
                  [l, p],
                  [h, p],
                ]),
                (o.minLine1 = [
                  [l, o.minY1],
                  [h, o.minY1],
                ]),
                (o.maxLine1 = [
                  [l, o.maxY1],
                  [h, o.maxY1],
                ]),
                o
              );
            },
            _buildPointList: function (e) {
              var t,
                n,
                i,
                a,
                o = this.series;
              for (var s in e)
                if (
                  ((t = o[s]),
                  (n = e[s]),
                  t.large && t.data.length > t.largeThreshold)
                )
                  this.shapeList.push(
                    this._getLargeSymbol(
                      n,
                      this.getItemStyleColor(
                        this.query(t, "itemStyle.normal.color"),
                        s,
                        -1
                      ) || this._sIndex2ColorMap[s]
                    )
                  );
                else
                  for (var r = 0, l = n.length; l > r; r++)
                    (i = n[r]),
                      (a = this._getSymbol(s, i[2], i[3], i[0], i[1])),
                      a && this.shapeList.push(a);
            },
            _getSymbol: function (e, t, n, i, a) {
              var o,
                s = this.series,
                r = s[e],
                l = r.data[t],
                h = this.component.dataRange;
              if (h) {
                if (
                  ((o = isNaN(l[2])
                    ? this._sIndex2ColorMap[e]
                    : h.getColor(l[2])),
                  !o)
                )
                  return null;
              } else o = this._sIndex2ColorMap[e];
              var V = this.getSymbolShape(
                r,
                e,
                l,
                t,
                n,
                i,
                a,
                this._sIndex2ShapeMap[e],
                o,
                "rgba(0,0,0,0)",
                "vertical"
              );
              return (
                (V.zlevel = this.getZlevelBase()),
                (V.z = this.getZBase()),
                (V._main = !0),
                V
              );
            },
            _getLargeSymbol: function (e, t) {
              return new i({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                _main: !0,
                hoverable: !1,
                style: { pointList: e, color: t, strokeColor: t },
                highlightStyle: { pointList: [] },
              });
            },
            getMarkCoord: function (e, t) {
              var n,
                i = this.series[e],
                a = this.xMarkMap[e],
                o = this.component.xAxis.getAxis(i.xAxisIndex),
                s = this.component.yAxis.getAxis(i.yAxisIndex);
              if (
                !t.type ||
                ("max" !== t.type && "min" !== t.type && "average" !== t.type)
              )
                n = [
                  "string" != typeof t.xAxis && o.getCoordByIndex
                    ? o.getCoordByIndex(t.xAxis || 0)
                    : o.getCoord(t.xAxis || 0),
                  "string" != typeof t.yAxis && s.getCoordByIndex
                    ? s.getCoordByIndex(t.yAxis || 0)
                    : s.getCoord(t.yAxis || 0),
                ];
              else {
                var r = null != t.valueIndex ? t.valueIndex : 1;
                n = [
                  a[t.type + "X" + r],
                  a[t.type + "Y" + r],
                  a[t.type + "Line" + r],
                  a[t.type + r],
                ];
              }
              return n;
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
            ondataRange: function (e, t) {
              this.component.dataRange &&
                (this.refresh(), (t.needRefresh = !0));
            },
          }),
          o.inherits(t, n),
          e("../chart").define("scatter", t),
          t
        );
      }
    ),
    n(
      "echarts/component/dataRange",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Rectangle",
        "../util/shape/HandlePolygon",
        "../config",
        "zrender/tool/util",
        "zrender/tool/event",
        "zrender/tool/area",
        "zrender/tool/color",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          if (
            "undefined" == typeof this.query(a, "dataRange.min") ||
            "undefined" == typeof this.query(a, "dataRange.max")
          )
            return void console.error(
              "option.dataRange.min or option.dataRange.max has not been defined."
            );
          n.call(this, e, t, i, a, o);
          var r = this;
          (r._ondrift = function (e, t) {
            return r.__ondrift(this, e, t);
          }),
            (r._ondragend = function () {
              return r.__ondragend();
            }),
            (r._dataRangeSelected = function (e) {
              return r.__dataRangeSelected(e);
            }),
            (r._dispatchHoverLink = function (e) {
              return r.__dispatchHoverLink(e);
            }),
            (r._onhoverlink = function (e) {
              return r.__onhoverlink(e);
            }),
            (this._selectedMap = {}),
            (this._range = {}),
            this.refresh(a),
            t.bind(s.EVENT.HOVER, this._onhoverlink);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Rectangle"),
          o = e("../util/shape/HandlePolygon"),
          s = e("../config");
        s.dataRange = {
          zlevel: 0,
          z: 4,
          show: !0,
          orient: "vertical",
          x: "left",
          y: "bottom",
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "#ccc",
          borderWidth: 0,
          padding: 1,
          itemGap: 15,
          itemWidth: 25,
          itemHeight: 25,
          precision: 0,
          splitNumber: 5,
          calculable: !1,
          selectedMode: !0,
          hoverLink: !0,
          realtime: !0,
          color: ["#006edd", "#e0ffff"],
          textStyle: { fontSize: 18, color: "#333" },
        };
        var r = e("zrender/tool/util"),
          l = e("zrender/tool/event"),
          h = e("zrender/tool/area"),
          V = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: s.COMPONENT_TYPE_DATARANGE,
            _textGap: 10,
            _buildShape: function () {
              if (
                ((this._itemGroupLocation = this._getItemGroupLocation()),
                this._buildBackground(),
                this.dataRangeOption.splitNumber <= 0 ||
                this.dataRangeOption.calculable
                  ? this._buildGradient()
                  : this._buildItem(),
                this.dataRangeOption.show)
              )
                for (var e = 0, t = this.shapeList.length; t > e; e++)
                  this.zr.addShape(this.shapeList[e]);
              this._syncShapeFromRange();
            },
            _buildItem: function () {
              var e,
                t,
                n,
                o,
                s = this._valueTextList,
                r = s.length,
                l = this.getFont(this.dataRangeOption.textStyle),
                V = this._itemGroupLocation.x,
                U = this._itemGroupLocation.y,
                m = this.dataRangeOption.itemWidth,
                p = this.dataRangeOption.itemHeight,
                d = this.dataRangeOption.itemGap,
                c = h.getTextHeight("国", l);
              "vertical" == this.dataRangeOption.orient &&
                "right" == this.dataRangeOption.x &&
                (V =
                  this._itemGroupLocation.x +
                  this._itemGroupLocation.width -
                  m);
              var u = !0;
              this.dataRangeOption.text &&
                ((u = !1),
                this.dataRangeOption.text[0] &&
                  ((n = this._getTextShape(V, U, this.dataRangeOption.text[0])),
                  "horizontal" == this.dataRangeOption.orient
                    ? (V +=
                        h.getTextWidth(this.dataRangeOption.text[0], l) +
                        this._textGap)
                    : ((U += c + this._textGap),
                      (n.style.y += c / 2 + this._textGap),
                      (n.style.textBaseline = "bottom")),
                  this.shapeList.push(new i(n))));
              for (var y = 0; r > y; y++)
                (e = s[y]),
                  (o = this.getColorByIndex(y)),
                  (t = this._getItemShape(
                    V,
                    U,
                    m,
                    p,
                    this._selectedMap[y] ? o : "#ccc"
                  )),
                  (t._idx = y),
                  (t.onmousemove = this._dispatchHoverLink),
                  this.dataRangeOption.selectedMode &&
                    ((t.clickable = !0), (t.onclick = this._dataRangeSelected)),
                  this.shapeList.push(new a(t)),
                  u &&
                    ((n = {
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      style: {
                        x: V + m + 5,
                        y: U,
                        color: this._selectedMap[y]
                          ? this.dataRangeOption.textStyle.color
                          : "#ccc",
                        text: s[y],
                        textFont: l,
                        textBaseline: "top",
                      },
                      highlightStyle: { brushType: "fill" },
                    }),
                    "vertical" == this.dataRangeOption.orient &&
                      "right" == this.dataRangeOption.x &&
                      ((n.style.x -= m + 10), (n.style.textAlign = "right")),
                    (n._idx = y),
                    (n.onmousemove = this._dispatchHoverLink),
                    this.dataRangeOption.selectedMode &&
                      ((n.clickable = !0),
                      (n.onclick = this._dataRangeSelected)),
                    this.shapeList.push(new i(n))),
                  "horizontal" == this.dataRangeOption.orient
                    ? (V +=
                        m + (u ? 5 : 0) + (u ? h.getTextWidth(e, l) : 0) + d)
                    : (U += p + d);
              !u &&
                this.dataRangeOption.text[1] &&
                ("horizontal" == this.dataRangeOption.orient
                  ? (V = V - d + this._textGap)
                  : (U = U - d + this._textGap),
                (n = this._getTextShape(V, U, this.dataRangeOption.text[1])),
                "horizontal" != this.dataRangeOption.orient &&
                  ((n.style.y -= 5), (n.style.textBaseline = "top")),
                this.shapeList.push(new i(n)));
            },
            _buildGradient: function () {
              var t,
                n,
                o = this.getFont(this.dataRangeOption.textStyle),
                s = this._itemGroupLocation.x,
                r = this._itemGroupLocation.y,
                l = this.dataRangeOption.itemWidth,
                V = this.dataRangeOption.itemHeight,
                U = h.getTextHeight("国", o),
                m = 6,
                p = !0;
              this.dataRangeOption.text &&
                ((p = !1),
                this.dataRangeOption.text[0] &&
                  ((n = this._getTextShape(s, r, this.dataRangeOption.text[0])),
                  "horizontal" == this.dataRangeOption.orient
                    ? (s +=
                        h.getTextWidth(this.dataRangeOption.text[0], o) +
                        this._textGap)
                    : ((r += U + this._textGap),
                      (n.style.y += U / 2 + this._textGap),
                      (n.style.textBaseline = "bottom")),
                  this.shapeList.push(new i(n))));
              for (
                var d = e("zrender/tool/color"),
                  c = 1 / (this.dataRangeOption.color.length - 1),
                  u = [],
                  y = 0,
                  b = this.dataRangeOption.color.length;
                b > y;
                y++
              )
                u.push([y * c, this.dataRangeOption.color[y]]);
              "horizontal" == this.dataRangeOption.orient
                ? ((t = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      x: s,
                      y: r,
                      width: l * m,
                      height: V,
                      color: d.getLinearGradient(s, r, s + l * m, r, u),
                    },
                    hoverable: !1,
                  }),
                  (s += l * m + this._textGap))
                : ((t = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      x: s,
                      y: r,
                      width: l,
                      height: V * m,
                      color: d.getLinearGradient(s, r, s, r + V * m, u),
                    },
                    hoverable: !1,
                  }),
                  (r += V * m + this._textGap)),
                this.shapeList.push(new a(t)),
                (this._calculableLocation = t.style),
                this.dataRangeOption.calculable &&
                  (this._buildFiller(), this._bulidMask(), this._bulidHandle()),
                this._buildIndicator(),
                !p &&
                  this.dataRangeOption.text[1] &&
                  ((n = this._getTextShape(s, r, this.dataRangeOption.text[1])),
                  this.shapeList.push(new i(n)));
            },
            _buildIndicator: function () {
              var e,
                t,
                n = this._calculableLocation.x,
                i = this._calculableLocation.y,
                a = this._calculableLocation.width,
                s = this._calculableLocation.height,
                r = 5;
              "horizontal" == this.dataRangeOption.orient
                ? "bottom" != this.dataRangeOption.y
                  ? ((e = [
                      [n, i + s],
                      [n - r, i + s + r],
                      [n + r, i + s + r],
                    ]),
                    (t = "bottom"))
                  : ((e = [
                      [n, i],
                      [n - r, i - r],
                      [n + r, i - r],
                    ]),
                    (t = "top"))
                : "right" != this.dataRangeOption.x
                ? ((e = [
                    [n + a, i],
                    [n + a + r, i - r],
                    [n + a + r, i + r],
                  ]),
                  (t = "right"))
                : ((e = [
                    [n, i],
                    [n - r, i - r],
                    [n - r, i + r],
                  ]),
                  (t = "left")),
                (this._indicatorShape = {
                  style: {
                    pointList: e,
                    color: "#fff",
                    __rect: {
                      x: Math.min(e[0][0], e[1][0]),
                      y: Math.min(e[0][1], e[1][1]),
                      width:
                        r *
                        ("horizontal" == this.dataRangeOption.orient ? 2 : 1),
                      height:
                        r *
                        ("horizontal" == this.dataRangeOption.orient ? 1 : 2),
                    },
                  },
                  highlightStyle: {
                    brushType: "fill",
                    textPosition: t,
                    textColor: this.dataRangeOption.textStyle.color,
                  },
                  hoverable: !1,
                }),
                (this._indicatorShape = new o(this._indicatorShape));
            },
            _buildFiller: function () {
              (this._fillerShape = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase() + 1,
                style: {
                  x: this._calculableLocation.x,
                  y: this._calculableLocation.y,
                  width: this._calculableLocation.width,
                  height: this._calculableLocation.height,
                  color: "rgba(255,255,255,0)",
                },
                highlightStyle: {
                  strokeColor: "rgba(255,255,255,0.5)",
                  lineWidth: 1,
                },
                draggable: !0,
                ondrift: this._ondrift,
                ondragend: this._ondragend,
                onmousemove: this._dispatchHoverLink,
                _type: "filler",
              }),
                (this._fillerShape = new a(this._fillerShape)),
                this.shapeList.push(this._fillerShape);
            },
            _bulidHandle: function () {
              var e,
                t,
                n,
                i,
                a,
                s,
                r,
                l,
                V = this._calculableLocation.x,
                U = this._calculableLocation.y,
                m = this._calculableLocation.width,
                p = this._calculableLocation.height,
                d = this.getFont(this.dataRangeOption.textStyle),
                c = h.getTextHeight("国", d),
                u =
                  Math.max(
                    h.getTextWidth(
                      this._textFormat(this.dataRangeOption.max),
                      d
                    ),
                    h.getTextWidth(
                      this._textFormat(this.dataRangeOption.min),
                      d
                    )
                  ) + 2;
              "horizontal" == this.dataRangeOption.orient
                ? "bottom" != this.dataRangeOption.y
                  ? ((e = [
                      [V, U],
                      [V, U + p + c],
                      [V - c, U + p + c],
                      [V - 1, U + p],
                      [V - 1, U],
                    ]),
                    (t = V - u / 2 - c),
                    (n = U + p + c / 2 + 2),
                    (i = { x: V - u - c, y: U + p, width: u + c, height: c }),
                    (a = [
                      [V + m, U],
                      [V + m, U + p + c],
                      [V + m + c, U + p + c],
                      [V + m + 1, U + p],
                      [V + m + 1, U],
                    ]),
                    (s = V + m + u / 2 + c),
                    (r = n),
                    (l = { x: V + m, y: U + p, width: u + c, height: c }))
                  : ((e = [
                      [V, U + p],
                      [V, U - c],
                      [V - c, U - c],
                      [V - 1, U],
                      [V - 1, U + p],
                    ]),
                    (t = V - u / 2 - c),
                    (n = U - c / 2 - 2),
                    (i = { x: V - u - c, y: U - c, width: u + c, height: c }),
                    (a = [
                      [V + m, U + p],
                      [V + m, U - c],
                      [V + m + c, U - c],
                      [V + m + 1, U],
                      [V + m + 1, U + p],
                    ]),
                    (s = V + m + u / 2 + c),
                    (r = n),
                    (l = { x: V + m, y: U - c, width: u + c, height: c }))
                : ((u += c),
                  "right" != this.dataRangeOption.x
                    ? ((e = [
                        [V, U],
                        [V + m + c, U],
                        [V + m + c, U - c],
                        [V + m, U - 1],
                        [V, U - 1],
                      ]),
                      (t = V + m + u / 2 + c / 2),
                      (n = U - c / 2),
                      (i = { x: V + m, y: U - c, width: u + c, height: c }),
                      (a = [
                        [V, U + p],
                        [V + m + c, U + p],
                        [V + m + c, U + c + p],
                        [V + m, U + 1 + p],
                        [V, U + p + 1],
                      ]),
                      (s = t),
                      (r = U + p + c / 2),
                      (l = { x: V + m, y: U + p, width: u + c, height: c }))
                    : ((e = [
                        [V + m, U],
                        [V - c, U],
                        [V - c, U - c],
                        [V, U - 1],
                        [V + m, U - 1],
                      ]),
                      (t = V - u / 2 - c / 2),
                      (n = U - c / 2),
                      (i = { x: V - u - c, y: U - c, width: u + c, height: c }),
                      (a = [
                        [V + m, U + p],
                        [V - c, U + p],
                        [V - c, U + c + p],
                        [V, U + 1 + p],
                        [V + m, U + p + 1],
                      ]),
                      (s = t),
                      (r = U + p + c / 2),
                      (l = {
                        x: V - u - c,
                        y: U + p,
                        width: u + c,
                        height: c,
                      }))),
                (this._startShape = {
                  style: {
                    pointList: e,
                    text: this._textFormat(this.dataRangeOption.max),
                    textX: t,
                    textY: n,
                    textFont: d,
                    color: this.getColor(this.dataRangeOption.max),
                    rect: i,
                    x: e[0][0],
                    y: e[0][1],
                    _x: e[0][0],
                    _y: e[0][1],
                  },
                }),
                (this._startShape.highlightStyle = {
                  strokeColor: this._startShape.style.color,
                  lineWidth: 1,
                }),
                (this._endShape = {
                  style: {
                    pointList: a,
                    text: this._textFormat(this.dataRangeOption.min),
                    textX: s,
                    textY: r,
                    textFont: d,
                    color: this.getColor(this.dataRangeOption.min),
                    rect: l,
                    x: a[0][0],
                    y: a[0][1],
                    _x: a[0][0],
                    _y: a[0][1],
                  },
                }),
                (this._endShape.highlightStyle = {
                  strokeColor: this._endShape.style.color,
                  lineWidth: 1,
                }),
                (this._startShape.zlevel = this._endShape.zlevel = this.getZlevelBase()),
                (this._startShape.z = this._endShape.z = this.getZBase() + 1),
                (this._startShape.draggable = this._endShape.draggable = !0),
                (this._startShape.ondrift = this._endShape.ondrift = this._ondrift),
                (this._startShape.ondragend = this._endShape.ondragend = this._ondragend),
                (this._startShape.style.textColor = this._endShape.style.textColor = this.dataRangeOption.textStyle.color),
                (this._startShape.style.textAlign = this._endShape.style.textAlign =
                  "center"),
                (this._startShape.style.textPosition = this._endShape.style.textPosition =
                  "specific"),
                (this._startShape.style.textBaseline = this._endShape.style.textBaseline =
                  "middle"),
                (this._startShape.style.width = this._endShape.style.width = 0),
                (this._startShape.style.height = this._endShape.style.height = 0),
                (this._startShape.style.textPosition = this._endShape.style.textPosition =
                  "specific"),
                (this._startShape = new o(this._startShape)),
                (this._endShape = new o(this._endShape)),
                this.shapeList.push(this._startShape),
                this.shapeList.push(this._endShape);
            },
            _bulidMask: function () {
              var e = this._calculableLocation.x,
                t = this._calculableLocation.y,
                n = this._calculableLocation.width,
                i = this._calculableLocation.height;
              (this._startMask = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase() + 1,
                style: {
                  x: e,
                  y: t,
                  width: "horizontal" == this.dataRangeOption.orient ? 0 : n,
                  height: "horizontal" == this.dataRangeOption.orient ? i : 0,
                  color: "#ccc",
                },
                hoverable: !1,
              }),
                (this._endMask = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase() + 1,
                  style: {
                    x: "horizontal" == this.dataRangeOption.orient ? e + n : e,
                    y: "horizontal" == this.dataRangeOption.orient ? t : t + i,
                    width: "horizontal" == this.dataRangeOption.orient ? 0 : n,
                    height: "horizontal" == this.dataRangeOption.orient ? i : 0,
                    color: "#ccc",
                  },
                  hoverable: !1,
                }),
                (this._startMask = new a(this._startMask)),
                (this._endMask = new a(this._endMask)),
                this.shapeList.push(this._startMask),
                this.shapeList.push(this._endMask);
            },
            _buildBackground: function () {
              var e = this.reformCssArray(this.dataRangeOption.padding);
              this.shapeList.push(
                new a({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this._itemGroupLocation.x - e[3],
                    y: this._itemGroupLocation.y - e[0],
                    width: this._itemGroupLocation.width + e[3] + e[1],
                    height: this._itemGroupLocation.height + e[0] + e[2],
                    brushType:
                      0 === this.dataRangeOption.borderWidth ? "fill" : "both",
                    color: this.dataRangeOption.backgroundColor,
                    strokeColor: this.dataRangeOption.borderColor,
                    lineWidth: this.dataRangeOption.borderWidth,
                  },
                })
              );
            },
            _getItemGroupLocation: function () {
              var e = this._valueTextList,
                t = e.length,
                n = this.dataRangeOption.itemGap,
                i = this.dataRangeOption.itemWidth,
                a = this.dataRangeOption.itemHeight,
                o = 0,
                s = 0,
                r = this.getFont(this.dataRangeOption.textStyle),
                l = h.getTextHeight("国", r),
                V = 6;
              if ("horizontal" == this.dataRangeOption.orient) {
                if (
                  this.dataRangeOption.text ||
                  this.dataRangeOption.splitNumber <= 0 ||
                  this.dataRangeOption.calculable
                )
                  o =
                    (this.dataRangeOption.splitNumber <= 0 ||
                    this.dataRangeOption.calculable
                      ? i * V + n
                      : t * (i + n)) +
                    (this.dataRangeOption.text &&
                    "undefined" != typeof this.dataRangeOption.text[0]
                      ? h.getTextWidth(this.dataRangeOption.text[0], r) +
                        this._textGap
                      : 0) +
                    (this.dataRangeOption.text &&
                    "undefined" != typeof this.dataRangeOption.text[1]
                      ? h.getTextWidth(this.dataRangeOption.text[1], r) +
                        this._textGap
                      : 0);
                else {
                  i += 5;
                  for (var U = 0; t > U; U++)
                    o += i + h.getTextWidth(e[U], r) + n;
                }
                (o -= n), (s = Math.max(l, a));
              } else {
                var m;
                if (
                  this.dataRangeOption.text ||
                  this.dataRangeOption.splitNumber <= 0 ||
                  this.dataRangeOption.calculable
                )
                  (s =
                    (this.dataRangeOption.splitNumber <= 0 ||
                    this.dataRangeOption.calculable
                      ? a * V + n
                      : t * (a + n)) +
                    (this.dataRangeOption.text &&
                    "undefined" != typeof this.dataRangeOption.text[0]
                      ? this._textGap + l
                      : 0) +
                    (this.dataRangeOption.text &&
                    "undefined" != typeof this.dataRangeOption.text[1]
                      ? this._textGap + l
                      : 0)),
                    (m = Math.max(
                      h.getTextWidth(
                        (this.dataRangeOption.text &&
                          this.dataRangeOption.text[0]) ||
                          "",
                        r
                      ),
                      h.getTextWidth(
                        (this.dataRangeOption.text &&
                          this.dataRangeOption.text[1]) ||
                          "",
                        r
                      )
                    )),
                    (o = Math.max(i, m));
                else {
                  (s = (a + n) * t), (i += 5), (m = 0);
                  for (var U = 0; t > U; U++)
                    m = Math.max(m, h.getTextWidth(e[U], r));
                  o = i + m;
                }
                s -= n;
              }
              var p,
                d = this.reformCssArray(this.dataRangeOption.padding),
                c = this.zr.getWidth();
              switch (this.dataRangeOption.x) {
                case "center":
                  p = Math.floor((c - o) / 2);
                  break;
                case "left":
                  p = d[3] + this.dataRangeOption.borderWidth;
                  break;
                case "right":
                  p = c - o - d[1] - this.dataRangeOption.borderWidth;
                  break;
                default:
                  (p = this.parsePercent(this.dataRangeOption.x, c)),
                    (p = isNaN(p) ? 0 : p);
              }
              var u,
                y = this.zr.getHeight();
              switch (this.dataRangeOption.y) {
                case "top":
                  u = d[0] + this.dataRangeOption.borderWidth;
                  break;
                case "bottom":
                  u = y - s - d[2] - this.dataRangeOption.borderWidth;
                  break;
                case "center":
                  u = Math.floor((y - s) / 2);
                  break;
                default:
                  (u = this.parsePercent(this.dataRangeOption.y, y)),
                    (u = isNaN(u) ? 0 : u);
              }
              if (this.dataRangeOption.calculable) {
                var b =
                  Math.max(
                    h.getTextWidth(this.dataRangeOption.max, r),
                    h.getTextWidth(this.dataRangeOption.min, r)
                  ) + l;
                "horizontal" == this.dataRangeOption.orient
                  ? (b > p && (p = b), p + o + b > c && (p -= b))
                  : (l > u && (u = l), u + s + l > y && (u -= l));
              }
              return { x: p, y: u, width: o, height: s };
            },
            _getTextShape: function (e, t, n) {
              return {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  x:
                    "horizontal" == this.dataRangeOption.orient
                      ? e
                      : this._itemGroupLocation.x +
                        this._itemGroupLocation.width / 2,
                  y:
                    "horizontal" == this.dataRangeOption.orient
                      ? this._itemGroupLocation.y +
                        this._itemGroupLocation.height / 2
                      : t,
                  color: this.dataRangeOption.textStyle.color,
                  text: n,
                  textFont: this.getFont(this.dataRangeOption.textStyle),
                  textBaseline:
                    "horizontal" == this.dataRangeOption.orient
                      ? "middle"
                      : "top",
                  textAlign:
                    "horizontal" == this.dataRangeOption.orient
                      ? "left"
                      : "center",
                },
                hoverable: !1,
              };
            },
            _getItemShape: function (e, t, n, i, a) {
              return {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: { x: e, y: t + 1, width: n, height: i - 2, color: a },
                highlightStyle: { strokeColor: a, lineWidth: 1 },
              };
            },
            __ondrift: function (e, t, n) {
              var i = this._calculableLocation.x,
                a = this._calculableLocation.y,
                o = this._calculableLocation.width,
                s = this._calculableLocation.height;
              return (
                "horizontal" == this.dataRangeOption.orient
                  ? e.style.x + t <= i
                    ? (e.style.x = i)
                    : e.style.x + t + e.style.width >= i + o
                    ? (e.style.x = i + o - e.style.width)
                    : (e.style.x += t)
                  : e.style.y + n <= a
                  ? (e.style.y = a)
                  : e.style.y + n + e.style.height >= a + s
                  ? (e.style.y = a + s - e.style.height)
                  : (e.style.y += n),
                "filler" == e._type
                  ? this._syncHandleShape()
                  : this._syncFillerShape(e),
                this.dataRangeOption.realtime && this._dispatchDataRange(),
                !0
              );
            },
            __ondragend: function () {
              this.isDragend = !0;
            },
            ondragend: function (e, t) {
              this.isDragend &&
                e.target &&
                ((t.dragOut = !0),
                (t.dragIn = !0),
                this.dataRangeOption.realtime || this._dispatchDataRange(),
                (t.needRefresh = !1),
                (this.isDragend = !1));
            },
            _syncShapeFromRange: function () {
              var e = this.dataRangeOption.range || {};
              if (
                ((this._range.end =
                  "undefined" != typeof this._range.end
                    ? this._range.end
                    : "undefined" != typeof e.start
                    ? e.start
                    : 0),
                (this._range.start =
                  "undefined" != typeof this._range.start
                    ? this._range.start
                    : "undefined" != typeof e.end
                    ? e.end
                    : 100),
                100 != this._range.start || 0 !== this._range.end)
              ) {
                if ("horizontal" == this.dataRangeOption.orient) {
                  var t = this._fillerShape.style.width;
                  (this._fillerShape.style.x +=
                    (t * (100 - this._range.start)) / 100),
                    (this._fillerShape.style.width =
                      (t * (this._range.start - this._range.end)) / 100);
                } else {
                  var n = this._fillerShape.style.height;
                  (this._fillerShape.style.y +=
                    (n * (100 - this._range.start)) / 100),
                    (this._fillerShape.style.height =
                      (n * (this._range.start - this._range.end)) / 100);
                }
                this.zr.modShape(this._fillerShape.id), this._syncHandleShape();
              }
            },
            _syncHandleShape: function () {
              var e = this._calculableLocation.x,
                t = this._calculableLocation.y,
                n = this._calculableLocation.width,
                i = this._calculableLocation.height;
              "horizontal" == this.dataRangeOption.orient
                ? ((this._startShape.style.x = this._fillerShape.style.x),
                  (this._startMask.style.width = this._startShape.style.x - e),
                  (this._endShape.style.x =
                    this._fillerShape.style.x + this._fillerShape.style.width),
                  (this._endMask.style.x = this._endShape.style.x),
                  (this._endMask.style.width = e + n - this._endShape.style.x),
                  (this._range.start = Math.ceil(
                    100 - ((this._startShape.style.x - e) / n) * 100
                  )),
                  (this._range.end = Math.floor(
                    100 - ((this._endShape.style.x - e) / n) * 100
                  )))
                : ((this._startShape.style.y = this._fillerShape.style.y),
                  (this._startMask.style.height = this._startShape.style.y - t),
                  (this._endShape.style.y =
                    this._fillerShape.style.y + this._fillerShape.style.height),
                  (this._endMask.style.y = this._endShape.style.y),
                  (this._endMask.style.height = t + i - this._endShape.style.y),
                  (this._range.start = Math.ceil(
                    100 - ((this._startShape.style.y - t) / i) * 100
                  )),
                  (this._range.end = Math.floor(
                    100 - ((this._endShape.style.y - t) / i) * 100
                  ))),
                this._syncShape();
            },
            _syncFillerShape: function (e) {
              var t,
                n,
                i = this._calculableLocation.x,
                a = this._calculableLocation.y,
                o = this._calculableLocation.width,
                s = this._calculableLocation.height;
              "horizontal" == this.dataRangeOption.orient
                ? ((t = this._startShape.style.x),
                  (n = this._endShape.style.x),
                  e.id == this._startShape.id && t >= n
                    ? ((n = t), (this._endShape.style.x = t))
                    : e.id == this._endShape.id &&
                      t >= n &&
                      ((t = n), (this._startShape.style.x = t)),
                  (this._fillerShape.style.x = t),
                  (this._fillerShape.style.width = n - t),
                  (this._startMask.style.width = t - i),
                  (this._endMask.style.x = n),
                  (this._endMask.style.width = i + o - n),
                  (this._range.start = Math.ceil(100 - ((t - i) / o) * 100)),
                  (this._range.end = Math.floor(100 - ((n - i) / o) * 100)))
                : ((t = this._startShape.style.y),
                  (n = this._endShape.style.y),
                  e.id == this._startShape.id && t >= n
                    ? ((n = t), (this._endShape.style.y = t))
                    : e.id == this._endShape.id &&
                      t >= n &&
                      ((t = n), (this._startShape.style.y = t)),
                  (this._fillerShape.style.y = t),
                  (this._fillerShape.style.height = n - t),
                  (this._startMask.style.height = t - a),
                  (this._endMask.style.y = n),
                  (this._endMask.style.height = a + s - n),
                  (this._range.start = Math.ceil(100 - ((t - a) / s) * 100)),
                  (this._range.end = Math.floor(100 - ((n - a) / s) * 100))),
                this._syncShape();
            },
            _syncShape: function () {
              (this._startShape.position = [
                this._startShape.style.x - this._startShape.style._x,
                this._startShape.style.y - this._startShape.style._y,
              ]),
                (this._startShape.style.text = this._textFormat(
                  this._gap * this._range.start + this.dataRangeOption.min
                )),
                (this._startShape.style.color = this._startShape.highlightStyle.strokeColor = this.getColor(
                  this._gap * this._range.start + this.dataRangeOption.min
                )),
                (this._endShape.position = [
                  this._endShape.style.x - this._endShape.style._x,
                  this._endShape.style.y - this._endShape.style._y,
                ]),
                (this._endShape.style.text = this._textFormat(
                  this._gap * this._range.end + this.dataRangeOption.min
                )),
                (this._endShape.style.color = this._endShape.highlightStyle.strokeColor = this.getColor(
                  this._gap * this._range.end + this.dataRangeOption.min
                )),
                this.zr.modShape(this._startShape.id),
                this.zr.modShape(this._endShape.id),
                this.zr.modShape(this._startMask.id),
                this.zr.modShape(this._endMask.id),
                this.zr.modShape(this._fillerShape.id),
                this.zr.refreshNextFrame();
            },
            _dispatchDataRange: function () {
              this.messageCenter.dispatch(
                s.EVENT.DATA_RANGE,
                null,
                { range: { start: this._range.end, end: this._range.start } },
                this.myChart
              );
            },
            __dataRangeSelected: function (e) {
              if ("single" === this.dataRangeOption.selectedMode)
                for (var t in this._selectedMap) this._selectedMap[t] = !1;
              var n = e.target._idx;
              this._selectedMap[n] = !this._selectedMap[n];
              var i =
                (this._colorList.length - n) * this._gap +
                this.dataRangeOption.min;
              this.messageCenter.dispatch(
                s.EVENT.DATA_RANGE_SELECTED,
                e.event,
                {
                  selected: this._selectedMap,
                  target: n,
                  valueMax: i,
                  valueMin: i - this._gap,
                },
                this.myChart
              ),
                this.messageCenter.dispatch(
                  s.EVENT.REFRESH,
                  null,
                  null,
                  this.myChart
                );
            },
            __dispatchHoverLink: function (e) {
              var t, n;
              if (this.dataRangeOption.calculable) {
                var i,
                  a = this.dataRangeOption.max - this.dataRangeOption.min;
                (i =
                  "horizontal" == this.dataRangeOption.orient
                    ? (1 -
                        (l.getX(e.event) - this._calculableLocation.x) /
                          this._calculableLocation.width) *
                      a
                    : (1 -
                        (l.getY(e.event) - this._calculableLocation.y) /
                          this._calculableLocation.height) *
                      a),
                  (t = i - 0.05 * a),
                  (n = i + 0.05 * a);
              } else {
                var o = e.target._idx;
                (n =
                  (this._colorList.length - o) * this._gap +
                  this.dataRangeOption.min),
                  (t = n - this._gap);
              }
              this.messageCenter.dispatch(
                s.EVENT.DATA_RANGE_HOVERLINK,
                e.event,
                { valueMin: t, valueMax: n },
                this.myChart
              );
            },
            __onhoverlink: function (e) {
              if (
                this.dataRangeOption.show &&
                this.dataRangeOption.hoverLink &&
                this._indicatorShape &&
                e &&
                null != e.seriesIndex &&
                null != e.dataIndex
              ) {
                var t = e.value;
                if ("" === t || isNaN(t)) return;
                t < this.dataRangeOption.min
                  ? (t = this.dataRangeOption.min)
                  : t > this.dataRangeOption.max &&
                    (t = this.dataRangeOption.max),
                  (this._indicatorShape.position =
                    "horizontal" == this.dataRangeOption.orient
                      ? [
                          ((this.dataRangeOption.max - t) /
                            (this.dataRangeOption.max -
                              this.dataRangeOption.min)) *
                            this._calculableLocation.width,
                          0,
                        ]
                      : [
                          0,
                          ((this.dataRangeOption.max - t) /
                            (this.dataRangeOption.max -
                              this.dataRangeOption.min)) *
                            this._calculableLocation.height,
                        ]),
                  (this._indicatorShape.style.text = this._textFormat(e.value)),
                  (this._indicatorShape.style.color = this.getColor(t)),
                  this.zr.addHoverShape(this._indicatorShape);
              }
            },
            _textFormat: function (e, t) {
              if (
                ((e = e.toFixed(this.dataRangeOption.precision)),
                (t =
                  null != t ? t.toFixed(this.dataRangeOption.precision) : ""),
                this.dataRangeOption.formatter)
              ) {
                if ("string" == typeof this.dataRangeOption.formatter)
                  return this.dataRangeOption.formatter
                    .replace("{value}", e)
                    .replace("{value2}", t);
                if ("function" == typeof this.dataRangeOption.formatter)
                  return this.dataRangeOption.formatter.call(
                    this.myChart,
                    e,
                    t
                  );
              }
              return "" !== t ? e + " - " + t : e;
            },
            refresh: function (e) {
              if (e) {
                (this.option = e),
                  (this.option.dataRange = this.reformOption(
                    this.option.dataRange
                  )),
                  (this.dataRangeOption = this.option.dataRange);
                var t =
                  this.dataRangeOption.splitNumber <= 0 ||
                  this.dataRangeOption.calculable
                    ? 100
                    : this.dataRangeOption.splitNumber;
                if (
                  ((this._colorList = V.getGradientColors(
                    this.dataRangeOption.color,
                    Math.max(
                      (t - this.dataRangeOption.color.length) /
                        (this.dataRangeOption.color.length - 1),
                      0
                    ) + 1
                  )),
                  this._colorList.length > t)
                ) {
                  for (
                    var n = this._colorList.length,
                      i = [this._colorList[0]],
                      a = n / (t - 1),
                      o = 1;
                    t - 1 > o;
                    o++
                  )
                    i.push(this._colorList[Math.floor(o * a)]);
                  i.push(this._colorList[n - 1]), (this._colorList = i);
                }
                var s = this.dataRangeOption.precision;
                for (
                  this._gap =
                    (this.dataRangeOption.max - this.dataRangeOption.min) / t;
                  this._gap.toFixed(s) - 0 != this._gap && 5 > s;

                )
                  s++;
                (this.dataRangeOption.precision = s),
                  (this._gap =
                    (
                      (this.dataRangeOption.max - this.dataRangeOption.min) /
                      t
                    ).toFixed(s) - 0),
                  (this._valueTextList = []);
                for (var o = 0; t > o; o++)
                  (this._selectedMap[o] = !0),
                    this._valueTextList.unshift(
                      this._textFormat(
                        o * this._gap + this.dataRangeOption.min,
                        (o + 1) * this._gap + this.dataRangeOption.min
                      )
                    );
              }
              this.clear(), this._buildShape();
            },
            getColor: function (e) {
              if (isNaN(e)) return null;
              if (this.dataRangeOption.min == this.dataRangeOption.max)
                return this._colorList[0];
              if (
                (e < this.dataRangeOption.min
                  ? (e = this.dataRangeOption.min)
                  : e > this.dataRangeOption.max &&
                    (e = this.dataRangeOption.max),
                this.dataRangeOption.calculable &&
                  (e -
                    (this._gap * this._range.start + this.dataRangeOption.min) >
                    5e-5 ||
                    e -
                      (this._gap * this._range.end + this.dataRangeOption.min) <
                      -5e-5))
              )
                return null;
              var t =
                this._colorList.length -
                Math.ceil(
                  ((e - this.dataRangeOption.min) /
                    (this.dataRangeOption.max - this.dataRangeOption.min)) *
                    this._colorList.length
                );
              return (
                t == this._colorList.length && t--,
                this._selectedMap[t] ? this._colorList[t] : null
              );
            },
            getColorByIndex: function (e) {
              return (
                e >= this._colorList.length
                  ? (e = this._colorList.length - 1)
                  : 0 > e && (e = 0),
                this._colorList[e]
              );
            },
            onbeforDispose: function () {
              this.messageCenter.unbind(s.EVENT.HOVER, this._onhoverlink);
            },
          }),
          r.inherits(t, n),
          e("../component").define("dataRange", t),
          t
        );
      }
    ),
    n(
      "echarts/util/shape/HandlePolygon",
      [
        "require",
        "zrender/shape/Base",
        "zrender/shape/Polygon",
        "zrender/tool/util",
      ],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/shape/Polygon"),
          a = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "handle-polygon",
            buildPath: function (e, t) {
              i.prototype.buildPath(e, t);
            },
            isCover: function (e, t) {
              var n = this.getTansform(e, t);
              (e = n[0]), (t = n[1]);
              var i = this.style.rect;
              return e >= i.x &&
                e <= i.x + i.width &&
                t >= i.y &&
                t <= i.y + i.height
                ? !0
                : !1;
            },
          }),
          a.inherits(t, n),
          t
        );
      }
    ),
    n(
      "echarts/chart/k",
      [
        "require",
        "./base",
        "../util/shape/Candle",
        "../component/axis",
        "../component/grid",
        "../component/dataZoom",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("../util/shape/Candle");
        e("../component/axis"),
          e("../component/grid"),
          e("../component/dataZoom");
        var a = e("../config");
        a.k = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          hoverable: !0,
          legendHoverLink: !1,
          xAxisIndex: 0,
          yAxisIndex: 0,
          itemStyle: {
            normal: {
              color: "#fff",
              color0: "#00aa11",
              lineStyle: { width: 1, color: "#ff3200", color0: "#00aa11" },
            },
            emphasis: {},
          },
        };
        var o = e("../util/ecData"),
          s = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: a.CHART_TYPE_K,
            _buildShape: function () {
              var e = this.series;
              this.selectedMap = {};
              for (
                var t, n = { top: [], bottom: [] }, i = 0, o = e.length;
                o > i;
                i++
              )
                e[i].type === a.CHART_TYPE_K &&
                  ((e[i] = this.reformOption(e[i])),
                  (this.legendHoverLink =
                    e[i].legendHoverLink || this.legendHoverLink),
                  (t = this.component.xAxis.getAxis(e[i].xAxisIndex)),
                  t.type === a.COMPONENT_TYPE_AXIS_CATEGORY &&
                    n[t.getPosition()].push(i));
              for (var s in n)
                n[s].length > 0 && this._buildSinglePosition(s, n[s]);
              this.addShapeList();
            },
            _buildSinglePosition: function (e, t) {
              var n = this._mapData(t),
                i = n.locationMap,
                a = n.maxDataLength;
              if (0 !== a && 0 !== i.length) {
                this._buildHorizontal(t, a, i);
                for (var o = 0, s = t.length; s > o; o++) this.buildMark(t[o]);
              }
            },
            _mapData: function (e) {
              for (
                var t,
                  n,
                  i = this.series,
                  a = this.component.legend,
                  o = [],
                  s = 0,
                  r = 0,
                  l = e.length;
                l > r;
                r++
              )
                (t = i[e[r]]),
                  (n = t.name),
                  (this.selectedMap[n] = a ? a.isSelected(n) : !0),
                  this.selectedMap[n] && o.push(e[r]),
                  (s = Math.max(s, t.data.length));
              return { locationMap: o, maxDataLength: s };
            },
            _buildHorizontal: function (e, t, n) {
              for (
                var i,
                  a,
                  o,
                  s,
                  r,
                  l,
                  h,
                  V,
                  U,
                  m,
                  p = this.series,
                  d = {},
                  c = 0,
                  u = n.length;
                u > c;
                c++
              ) {
                (i = n[c]),
                  (a = p[i]),
                  (o = a.xAxisIndex || 0),
                  (s = this.component.xAxis.getAxis(o)),
                  (h = a.barWidth || Math.floor(s.getGap() / 2)),
                  (m = a.barMaxWidth),
                  m && h > m && (h = m),
                  (r = a.yAxisIndex || 0),
                  (l = this.component.yAxis.getAxis(r)),
                  (d[i] = []);
                for (
                  var y = 0, b = t;
                  b > y && null != s.getNameByIndex(y);
                  y++
                )
                  (V = a.data[y]),
                    (U = this.getDataFromOption(V, "-")),
                    "-" !== U &&
                      4 == U.length &&
                      d[i].push([
                        s.getCoordByIndex(y),
                        h,
                        l.getCoord(U[0]),
                        l.getCoord(U[1]),
                        l.getCoord(U[2]),
                        l.getCoord(U[3]),
                        y,
                        s.getNameByIndex(y),
                      ]);
              }
              this._buildKLine(e, d);
            },
            _buildKLine: function (e, t) {
              for (
                var n,
                  i,
                  o,
                  s,
                  r,
                  l,
                  h,
                  V,
                  U,
                  m,
                  p,
                  d,
                  c,
                  u,
                  y,
                  b,
                  g,
                  k = this.series,
                  f = 0,
                  L = e.length;
                L > f;
                f++
              )
                if (
                  ((g = e[f]),
                  (p = k[g]),
                  (u = t[g]),
                  this._isLarge(u) && (u = this._getLargePointList(u)),
                  p.type === a.CHART_TYPE_K && null != u)
                ) {
                  (d = p),
                    (n = this.query(d, "itemStyle.normal.lineStyle.width")),
                    (i = this.query(d, "itemStyle.normal.lineStyle.color")),
                    (o = this.query(d, "itemStyle.normal.lineStyle.color0")),
                    (s = this.query(d, "itemStyle.normal.color")),
                    (r = this.query(d, "itemStyle.normal.color0")),
                    (l = this.query(d, "itemStyle.emphasis.lineStyle.width")),
                    (h = this.query(d, "itemStyle.emphasis.lineStyle.color")),
                    (V = this.query(d, "itemStyle.emphasis.lineStyle.color0")),
                    (U = this.query(d, "itemStyle.emphasis.color")),
                    (m = this.query(d, "itemStyle.emphasis.color0"));
                  for (var x = 0, _ = u.length; _ > x; x++)
                    (y = u[x]),
                      (c = p.data[y[6]]),
                      (d = c),
                      (b = y[3] < y[2]),
                      this.shapeList.push(
                        this._getCandle(
                          g,
                          y[6],
                          y[7],
                          y[0],
                          y[1],
                          y[2],
                          y[3],
                          y[4],
                          y[5],
                          b
                            ? this.query(d, "itemStyle.normal.color") || s
                            : this.query(d, "itemStyle.normal.color0") || r,
                          this.query(d, "itemStyle.normal.lineStyle.width") ||
                            n,
                          b
                            ? this.query(
                                d,
                                "itemStyle.normal.lineStyle.color"
                              ) || i
                            : this.query(
                                d,
                                "itemStyle.normal.lineStyle.color0"
                              ) || o,
                          b
                            ? this.query(d, "itemStyle.emphasis.color") ||
                                U ||
                                s
                            : this.query(d, "itemStyle.emphasis.color0") ||
                                m ||
                                r,
                          this.query(d, "itemStyle.emphasis.lineStyle.width") ||
                            l ||
                            n,
                          b
                            ? this.query(
                                d,
                                "itemStyle.emphasis.lineStyle.color"
                              ) ||
                                h ||
                                i
                            : this.query(
                                d,
                                "itemStyle.emphasis.lineStyle.color0"
                              ) ||
                                V ||
                                o
                        )
                      );
                }
            },
            _isLarge: function (e) {
              return e[0][1] < 0.5;
            },
            _getLargePointList: function (e) {
              for (
                var t = this.component.grid.getWidth(),
                  n = e.length,
                  i = [],
                  a = 0;
                t > a;
                a++
              )
                i[a] = e[Math.floor((n / t) * a)];
              return i;
            },
            _getCandle: function (e, t, n, a, s, r, l, h, V, U, m, p, d, c, u) {
              var y = this.series,
                b = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  clickable: this.deepQuery([y[e].data[t], y[e]], "clickable"),
                  hoverable: this.deepQuery([y[e].data[t], y[e]], "hoverable"),
                  style: {
                    x: a,
                    y: [r, l, h, V],
                    width: s,
                    color: U,
                    strokeColor: p,
                    lineWidth: m,
                    brushType: "both",
                  },
                  highlightStyle: { color: d, strokeColor: u, lineWidth: c },
                  _seriesIndex: e,
                };
              return o.pack(b, y[e], e, y[e].data[t], t, n), (b = new i(b));
            },
            getMarkCoord: function (e, t) {
              var n = this.series[e],
                i = this.component.xAxis.getAxis(n.xAxisIndex),
                a = this.component.yAxis.getAxis(n.yAxisIndex);
              return [
                "string" != typeof t.xAxis && i.getCoordByIndex
                  ? i.getCoordByIndex(t.xAxis || 0)
                  : i.getCoord(t.xAxis || 0),
                "string" != typeof t.yAxis && a.getCoordByIndex
                  ? a.getCoordByIndex(t.yAxis || 0)
                  : a.getCoord(t.yAxis || 0),
              ];
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
            addDataAnimation: function (e) {
              for (var t = this.series, n = {}, i = 0, a = e.length; a > i; i++)
                n[e[i][0]] = e[i];
              for (
                var s, r, l, h, V, U, i = 0, a = this.shapeList.length;
                a > i;
                i++
              )
                if (
                  ((V = this.shapeList[i]._seriesIndex),
                  n[V] && !n[V][3] && "candle" === this.shapeList[i].type)
                ) {
                  if (
                    ((U = o.get(this.shapeList[i], "dataIndex")),
                    (h = t[V]),
                    n[V][2] && U === h.data.length - 1)
                  ) {
                    this.zr.delShape(this.shapeList[i].id);
                    continue;
                  }
                  if (!n[V][2] && 0 === U) {
                    this.zr.delShape(this.shapeList[i].id);
                    continue;
                  }
                  (r = this.component.xAxis
                    .getAxis(h.xAxisIndex || 0)
                    .getGap()),
                    (s = n[V][2] ? r : -r),
                    (l = 0),
                    this.zr
                      .animate(this.shapeList[i].id, "")
                      .when(
                        this.query(this.option, "animationDurationUpdate"),
                        { position: [s, l] }
                      )
                      .start();
                }
            },
          }),
          s.inherits(t, n),
          e("../chart").define("k", t),
          t
        );
      }
    ),
    n(
      "echarts/chart/pie",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Ring",
        "zrender/shape/Circle",
        "zrender/shape/Sector",
        "zrender/shape/Polyline",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/math",
        "zrender/tool/color",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o);
          var s = this;
          (s.shapeHandler.onmouseover = function (e) {
            var t = e.target,
              n = h.get(t, "seriesIndex"),
              i = h.get(t, "dataIndex"),
              a = h.get(t, "special"),
              o = [t.style.x, t.style.y],
              r = t.style.startAngle,
              l = t.style.endAngle,
              V = ((l + r) / 2 + 360) % 360,
              U = t.highlightStyle.color,
              m = s.getLabel(n, i, a, o, V, U, !0);
            m && s.zr.addHoverShape(m);
            var p = s.getLabelLine(n, i, o, t.style.r0, t.style.r, V, U, !0);
            p && s.zr.addHoverShape(p);
          }),
            this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Ring"),
          o = e("zrender/shape/Circle"),
          s = e("zrender/shape/Sector"),
          r = e("zrender/shape/Polyline"),
          l = e("../config");
        l.pie = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          center: ["50%", "50%"],
          radius: [0, "55%"],
          clockWise: !0,
          startAngle: 90,
          minAngle: 0,
          selectedOffset: 10,
          itemStyle: {
            normal: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              label: { show: !0, position: "outer" },
              labelLine: {
                show: !0,
                length: 10,
                lineStyle: { width: 1, type: "solid" },
              },
            },
            emphasis: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              label: { show: !1 },
              labelLine: {
                show: !1,
                length: 10,
                lineStyle: { width: 1, type: "solid" },
              },
            },
          },
        };
        var h = e("../util/ecData"),
          V = e("zrender/tool/util"),
          U = e("zrender/tool/math"),
          m = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: l.CHART_TYPE_PIE,
            _buildShape: function () {
              var e = this.series,
                t = this.component.legend;
              (this.selectedMap = {}), (this._selected = {});
              var n, i, s;
              this._selectedMode = !1;
              for (var r, V = 0, U = e.length; U > V; V++)
                if (e[V].type === l.CHART_TYPE_PIE) {
                  if (
                    ((e[V] = this.reformOption(e[V])),
                    (this.legendHoverLink =
                      e[V].legendHoverLink || this.legendHoverLink),
                    (r = e[V].name || ""),
                    (this.selectedMap[r] = t ? t.isSelected(r) : !0),
                    !this.selectedMap[r])
                  )
                    continue;
                  (n = this.parseCenter(this.zr, e[V].center)),
                    (i = this.parseRadius(this.zr, e[V].radius)),
                    (this._selectedMode =
                      this._selectedMode || e[V].selectedMode),
                    (this._selected[V] = []),
                    this.deepQuery([e[V], this.option], "calculable") &&
                      ((s = {
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        hoverable: !1,
                        style: {
                          x: n[0],
                          y: n[1],
                          r0: i[0] <= 10 ? 0 : i[0] - 10,
                          r: i[1] + 10,
                          brushType: "stroke",
                          lineWidth: 1,
                          strokeColor:
                            e[V].calculableHolderColor ||
                            this.ecTheme.calculableHolderColor ||
                            l.calculableHolderColor,
                        },
                      }),
                      h.pack(s, e[V], V, void 0, -1),
                      this.setCalculable(s),
                      (s = i[0] <= 10 ? new o(s) : new a(s)),
                      this.shapeList.push(s)),
                    this._buildSinglePie(V),
                    this.buildMark(V);
                }
              this.addShapeList();
            },
            _buildSinglePie: function (e) {
              for (
                var t,
                  n = this.series,
                  i = n[e],
                  a = i.data,
                  o = this.component.legend,
                  s = 0,
                  r = 0,
                  l = 0,
                  h = Number.NEGATIVE_INFINITY,
                  V = [],
                  U = 0,
                  m = a.length;
                m > U;
                U++
              )
                (t = a[U].name),
                  (this.selectedMap[t] = o ? o.isSelected(t) : !0),
                  this.selectedMap[t] &&
                    !isNaN(a[U].value) &&
                    (0 !== +a[U].value ? s++ : r++,
                    (l += +a[U].value),
                    (h = Math.max(h, +a[U].value)));
              if (0 !== l) {
                for (
                  var p,
                    d,
                    c,
                    u,
                    y,
                    b,
                    g = 100,
                    k = i.clockWise,
                    f = (i.startAngle.toFixed(2) - 0 + 360) % 360,
                    L = i.minAngle || 0.01,
                    x = 360 - L * s - 0.01 * r,
                    _ = i.roseType,
                    U = 0,
                    m = a.length;
                  m > U;
                  U++
                )
                  if (
                    ((t = a[U].name), this.selectedMap[t] && !isNaN(a[U].value))
                  ) {
                    if (
                      ((d = o ? o.getColor(t) : this.zr.getColor(U)),
                      (g = a[U].value / l),
                      (p =
                        "area" != _
                          ? k
                            ? f - g * x - (0 !== g ? L : 0.01)
                            : g * x + f + (0 !== g ? L : 0.01)
                          : k
                          ? f - 360 / m
                          : 360 / m + f),
                      (p = p.toFixed(2) - 0),
                      (g = (100 * g).toFixed(2)),
                      (c = this.parseCenter(this.zr, i.center)),
                      (u = this.parseRadius(this.zr, i.radius)),
                      (y = +u[0]),
                      (b = +u[1]),
                      "radius" === _
                        ? (b =
                            (a[U].value / h) * (b - y) * 0.8 +
                            0.2 * (b - y) +
                            y)
                        : "area" === _ &&
                          (b = Math.sqrt(a[U].value / h) * (b - y) + y),
                      k)
                    ) {
                      var W;
                      (W = f), (f = p), (p = W);
                    }
                    this._buildItem(
                      V,
                      e,
                      U,
                      g,
                      a[U].selected,
                      c,
                      y,
                      b,
                      f,
                      p,
                      d
                    ),
                      k || (f = p);
                  }
                this._autoLabelLayout(V, c, b);
                for (var U = 0, m = V.length; m > U; U++)
                  this.shapeList.push(V[U]);
                V = null;
              }
            },
            _buildItem: function (e, t, n, i, a, o, s, r, l, V, U) {
              var m = this.series,
                p = ((V + l) / 2 + 360) % 360,
                d = this.getSector(t, n, i, a, o, s, r, l, V, U);
              h.pack(d, m[t], t, m[t].data[n], n, m[t].data[n].name, i),
                e.push(d);
              var c = this.getLabel(t, n, i, o, p, U, !1),
                u = this.getLabelLine(t, n, o, s, r, p, U, !1);
              u &&
                (h.pack(u, m[t], t, m[t].data[n], n, m[t].data[n].name, i),
                e.push(u)),
                c &&
                  (h.pack(c, m[t], t, m[t].data[n], n, m[t].data[n].name, i),
                  (c._labelLine = u),
                  e.push(c));
            },
            getSector: function (e, t, n, i, a, o, r, l, h, V) {
              var p = this.series,
                d = p[e],
                c = d.data[t],
                u = [c, d],
                y = this.deepMerge(u, "itemStyle.normal") || {},
                b = this.deepMerge(u, "itemStyle.emphasis") || {},
                g = this.getItemStyleColor(y.color, e, t, c) || V,
                k =
                  this.getItemStyleColor(b.color, e, t, c) ||
                  ("string" == typeof g ? m.lift(g, -0.2) : g),
                f = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  clickable: this.deepQuery(u, "clickable"),
                  style: {
                    x: a[0],
                    y: a[1],
                    r0: o,
                    r: r,
                    startAngle: l,
                    endAngle: h,
                    brushType: "both",
                    color: g,
                    lineWidth: y.borderWidth,
                    strokeColor: y.borderColor,
                    lineJoin: "round",
                  },
                  highlightStyle: {
                    color: k,
                    lineWidth: b.borderWidth,
                    strokeColor: b.borderColor,
                    lineJoin: "round",
                  },
                  _seriesIndex: e,
                  _dataIndex: t,
                };
              if (i) {
                var L =
                  ((f.style.startAngle + f.style.endAngle) / 2).toFixed(2) - 0;
                (f.style._hasSelected = !0),
                  (f.style._x = f.style.x),
                  (f.style._y = f.style.y);
                var x = this.query(d, "selectedOffset");
                (f.style.x += U.cos(L, !0) * x),
                  (f.style.y -= U.sin(L, !0) * x),
                  (this._selected[e][t] = !0);
              } else this._selected[e][t] = !1;
              return (
                this._selectedMode && (f.onclick = this.shapeHandler.onclick),
                this.deepQuery([c, d, this.option], "calculable") &&
                  (this.setCalculable(f), (f.draggable = !0)),
                (this._needLabel(d, c, !0) || this._needLabelLine(d, c, !0)) &&
                  (f.onmouseover = this.shapeHandler.onmouseover),
                (f = new s(f))
              );
            },
            getLabel: function (e, t, n, a, o, s, r) {
              var l = this.series,
                h = l[e],
                m = h.data[t];
              if (this._needLabel(h, m, r)) {
                var p,
                  d,
                  c,
                  u = r ? "emphasis" : "normal",
                  y = V.merge(V.clone(m.itemStyle) || {}, h.itemStyle),
                  b = y[u].label,
                  g = b.textStyle || {},
                  k = a[0],
                  f = a[1],
                  L = this.parseRadius(this.zr, h.radius),
                  x = "middle";
                (b.position = b.position || y.normal.label.position),
                  "center" === b.position
                    ? ((p = k), (d = f), (c = "center"))
                    : "inner" === b.position || "inside" === b.position
                    ? ((L = (L[0] + L[1]) * (b.distance || 0.5)),
                      (p = Math.round(k + L * U.cos(o, !0))),
                      (d = Math.round(f - L * U.sin(o, !0))),
                      (s = "#fff"),
                      (c = "center"))
                    : ((L = L[1] - -y[u].labelLine.length),
                      (p = Math.round(k + L * U.cos(o, !0))),
                      (d = Math.round(f - L * U.sin(o, !0))),
                      (c = o >= 90 && 270 >= o ? "right" : "left")),
                  "center" != b.position &&
                    "inner" != b.position &&
                    "inside" != b.position &&
                    (p += "left" === c ? 20 : -20),
                  (m.__labelX = p - ("left" === c ? 5 : -5)),
                  (m.__labelY = d);
                var _ = new i({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase() + 1,
                  hoverable: !1,
                  style: {
                    x: p,
                    y: d,
                    color: g.color || s,
                    text: this.getLabelText(e, t, n, u),
                    textAlign: g.align || c,
                    textBaseline: g.baseline || x,
                    textFont: this.getFont(g),
                  },
                  highlightStyle: { brushType: "fill" },
                });
                return (
                  (_._radius = L),
                  (_._labelPosition = b.position || "outer"),
                  (_._rect = _.getRect(_.style)),
                  (_._seriesIndex = e),
                  (_._dataIndex = t),
                  _
                );
              }
            },
            getLabelText: function (e, t, n, i) {
              var a = this.series,
                o = a[e],
                s = o.data[t],
                r = this.deepQuery(
                  [s, o],
                  "itemStyle." + i + ".label.formatter"
                );
              return r
                ? "function" == typeof r
                  ? r.call(this.myChart, {
                      seriesIndex: e,
                      seriesName: o.name || "",
                      series: o,
                      dataIndex: t,
                      data: s,
                      name: s.name,
                      value: s.value,
                      percent: n,
                    })
                  : "string" == typeof r
                  ? ((r = r
                      .replace("{a}", "{a0}")
                      .replace("{b}", "{b0}")
                      .replace("{c}", "{c0}")
                      .replace("{d}", "{d0}")),
                    (r = r
                      .replace("{a0}", o.name)
                      .replace("{b0}", s.name)
                      .replace("{c0}", s.value)
                      .replace("{d0}", n)))
                  : void 0
                : s.name;
            },
            getLabelLine: function (e, t, n, i, a, o, s, l) {
              var h = this.series,
                m = h[e],
                p = m.data[t];
              if (this._needLabelLine(m, p, l)) {
                var d = l ? "emphasis" : "normal",
                  c = V.merge(V.clone(p.itemStyle) || {}, m.itemStyle),
                  u = c[d].labelLine,
                  y = u.lineStyle || {},
                  b = n[0],
                  g = n[1],
                  k = a,
                  f = this.parseRadius(this.zr, m.radius)[1] - -u.length,
                  L = U.cos(o, !0),
                  x = U.sin(o, !0);
                return new r({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase() + 1,
                  hoverable: !1,
                  style: {
                    pointList: [
                      [b + k * L, g - k * x],
                      [b + f * L, g - f * x],
                      [p.__labelX, p.__labelY],
                    ],
                    strokeColor: y.color || s,
                    lineType: y.type,
                    lineWidth: y.width,
                  },
                  _seriesIndex: e,
                  _dataIndex: t,
                });
              }
            },
            _needLabel: function (e, t, n) {
              return this.deepQuery(
                [t, e],
                "itemStyle." + (n ? "emphasis" : "normal") + ".label.show"
              );
            },
            _needLabelLine: function (e, t, n) {
              return this.deepQuery(
                [t, e],
                "itemStyle." + (n ? "emphasis" : "normal") + ".labelLine.show"
              );
            },
            _autoLabelLayout: function (e, t, n) {
              for (var i = [], a = [], o = 0, s = e.length; s > o; o++)
                ("outer" === e[o]._labelPosition ||
                  "outside" === e[o]._labelPosition) &&
                  ((e[o]._rect._y = e[o]._rect.y),
                  e[o]._rect.x < t[0] ? i.push(e[o]) : a.push(e[o]));
              this._layoutCalculate(i, t, n, -1),
                this._layoutCalculate(a, t, n, 1);
            },
            _layoutCalculate: function (e, t, n, i) {
              function a(t, n, i) {
                for (var a = t; n > a; a++)
                  if (
                    ((e[a]._rect.y += i),
                    (e[a].style.y += i),
                    e[a]._labelLine &&
                      ((e[a]._labelLine.style.pointList[1][1] += i),
                      (e[a]._labelLine.style.pointList[2][1] += i)),
                    a > t &&
                      n > a + 1 &&
                      e[a + 1]._rect.y > e[a]._rect.y + e[a]._rect.height)
                  )
                    return void o(a, i / 2);
                o(n - 1, i / 2);
              }
              function o(t, n) {
                for (
                  var i = t;
                  i >= 0 &&
                  ((e[i]._rect.y -= n),
                  (e[i].style.y -= n),
                  e[i]._labelLine &&
                    ((e[i]._labelLine.style.pointList[1][1] -= n),
                    (e[i]._labelLine.style.pointList[2][1] -= n)),
                  !(
                    i > 0 &&
                    e[i]._rect.y > e[i - 1]._rect.y + e[i - 1]._rect.height
                  ));
                  i--
                );
              }
              function s(e, t, n, i, a) {
                for (
                  var o,
                    s,
                    r,
                    l = n[0],
                    h = n[1],
                    V =
                      a > 0
                        ? t
                          ? Number.MAX_VALUE
                          : 0
                        : t
                        ? Number.MAX_VALUE
                        : 0,
                    U = 0,
                    m = e.length;
                  m > U;
                  U++
                )
                  (s = Math.abs(e[U]._rect.y - h)),
                    (r = e[U]._radius - i),
                    (o =
                      i + r > s
                        ? Math.sqrt(
                            (i + r + 20) * (i + r + 20) -
                              Math.pow(e[U]._rect.y - h, 2)
                          )
                        : Math.abs(
                            e[U]._rect.x + (a > 0 ? 0 : e[U]._rect.width) - l
                          )),
                    t && o >= V && (o = V - 10),
                    !t && V >= o && (o = V + 10),
                    (e[U]._rect.x = e[U].style.x = l + o * a),
                    e[U]._labelLine &&
                      ((e[U]._labelLine.style.pointList[2][0] =
                        l + (o - 5) * a),
                      (e[U]._labelLine.style.pointList[1][0] =
                        l + (o - 20) * a)),
                    (V = o);
              }
              e.sort(function (e, t) {
                return e._rect.y - t._rect.y;
              });
              for (
                var r, l = 0, h = e.length, V = [], U = [], m = 0;
                h > m;
                m++
              )
                (r = e[m]._rect.y - l),
                  0 > r && a(m, h, -r, i),
                  (l = e[m]._rect.y + e[m]._rect.height);
              this.zr.getHeight() - l < 0 && o(h - 1, l - this.zr.getHeight());
              for (var m = 0; h > m; m++)
                e[m]._rect.y >= t[1] ? U.push(e[m]) : V.push(e[m]);
              s(U, !0, t, n, i), s(V, !1, t, n, i);
            },
            reformOption: function (e) {
              var t = V.merge;
              return (
                (e = t(
                  t(e || {}, V.clone(this.ecTheme.pie || {})),
                  V.clone(l.pie)
                )),
                (e.itemStyle.normal.label.textStyle = this.getTextStyle(
                  e.itemStyle.normal.label.textStyle
                )),
                (e.itemStyle.emphasis.label.textStyle = this.getTextStyle(
                  e.itemStyle.emphasis.label.textStyle
                )),
                e
              );
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
            addDataAnimation: function (e) {
              for (var t = this.series, n = {}, i = 0, a = e.length; a > i; i++)
                n[e[i][0]] = e[i];
              var o = {},
                s = {},
                r = {},
                h = this.shapeList;
              this.shapeList = [];
              for (var V, U, m, p = {}, i = 0, a = e.length; a > i; i++)
                (V = e[i][0]),
                  (U = e[i][2]),
                  (m = e[i][3]),
                  t[V] &&
                    t[V].type === l.CHART_TYPE_PIE &&
                    (U
                      ? (m || (o[V + "_" + t[V].data.length] = "delete"),
                        (p[V] = 1))
                      : m
                      ? (p[V] = 0)
                      : ((o[V + "_-1"] = "delete"), (p[V] = -1)),
                    this._buildSinglePie(V));
              for (var d, c, i = 0, a = this.shapeList.length; a > i; i++)
                switch (
                  ((V = this.shapeList[i]._seriesIndex),
                  (d = this.shapeList[i]._dataIndex),
                  (c = V + "_" + d),
                  this.shapeList[i].type)
                ) {
                  case "sector":
                    o[c] = this.shapeList[i];
                    break;
                  case "text":
                    s[c] = this.shapeList[i];
                    break;
                  case "polyline":
                    r[c] = this.shapeList[i];
                }
              this.shapeList = [];
              for (var u, i = 0, a = h.length; a > i; i++)
                if (((V = h[i]._seriesIndex), n[V])) {
                  if (
                    ((d = h[i]._dataIndex + p[V]),
                    (c = V + "_" + d),
                    (u = o[c]),
                    !u)
                  )
                    continue;
                  if ("sector" === h[i].type)
                    "delete" != u
                      ? this.zr
                          .animate(h[i].id, "style")
                          .when(400, {
                            startAngle: u.style.startAngle,
                            endAngle: u.style.endAngle,
                          })
                          .start()
                      : this.zr
                          .animate(h[i].id, "style")
                          .when(
                            400,
                            p[V] < 0
                              ? { startAngle: h[i].style.startAngle }
                              : { endAngle: h[i].style.endAngle }
                          )
                          .start();
                  else if ("text" === h[i].type || "polyline" === h[i].type)
                    if ("delete" === u) this.zr.delShape(h[i].id);
                    else
                      switch (h[i].type) {
                        case "text":
                          (u = s[c]),
                            this.zr
                              .animate(h[i].id, "style")
                              .when(400, { x: u.style.x, y: u.style.y })
                              .start();
                          break;
                        case "polyline":
                          (u = r[c]),
                            this.zr
                              .animate(h[i].id, "style")
                              .when(400, { pointList: u.style.pointList })
                              .start();
                      }
                }
              this.shapeList = h;
            },
            onclick: function (e) {
              var t = this.series;
              if (this.isClick && e.target) {
                this.isClick = !1;
                for (
                  var n,
                    i = e.target,
                    a = i.style,
                    o = h.get(i, "seriesIndex"),
                    s = h.get(i, "dataIndex"),
                    r = 0,
                    V = this.shapeList.length;
                  V > r;
                  r++
                )
                  if (this.shapeList[r].id === i.id) {
                    if (
                      ((o = h.get(i, "seriesIndex")),
                      (s = h.get(i, "dataIndex")),
                      a._hasSelected)
                    )
                      (i.style.x = i.style._x),
                        (i.style.y = i.style._y),
                        (i.style._hasSelected = !1),
                        (this._selected[o][s] = !1);
                    else {
                      var m = ((a.startAngle + a.endAngle) / 2).toFixed(2) - 0;
                      (i.style._hasSelected = !0),
                        (this._selected[o][s] = !0),
                        (i.style._x = i.style.x),
                        (i.style._y = i.style.y),
                        (n = this.query(t[o], "selectedOffset")),
                        (i.style.x += U.cos(m, !0) * n),
                        (i.style.y -= U.sin(m, !0) * n);
                    }
                    this.zr.modShape(i.id, i);
                  } else
                    this.shapeList[r].style._hasSelected &&
                      "single" === this._selectedMode &&
                      ((o = h.get(this.shapeList[r], "seriesIndex")),
                      (s = h.get(this.shapeList[r], "dataIndex")),
                      (this.shapeList[r].style.x = this.shapeList[r].style._x),
                      (this.shapeList[r].style.y = this.shapeList[r].style._y),
                      (this.shapeList[r].style._hasSelected = !1),
                      (this._selected[o][s] = !1),
                      this.zr.modShape(
                        this.shapeList[r].id,
                        this.shapeList[r]
                      ));
                this.messageCenter.dispatch(
                  l.EVENT.PIE_SELECTED,
                  e.event,
                  { selected: this._selected, target: h.get(i, "name") },
                  this.myChart
                ),
                  this.zr.refreshNextFrame();
              }
            },
          }),
          V.inherits(t, n),
          e("../chart").define("pie", t),
          t
        );
      }
    ),
    n("zrender/shape/Ring", ["require", "./Base", "../tool/util"], function (
      e
    ) {
      var t = e("./Base"),
        n = function (e) {
          t.call(this, e);
        };
      return (
        (n.prototype = {
          type: "ring",
          buildPath: function (e, t) {
            e.arc(t.x, t.y, t.r, 0, 2 * Math.PI, !1),
              e.moveTo(t.x + t.r0, t.y),
              e.arc(t.x, t.y, t.r0, 0, 2 * Math.PI, !0);
          },
          getRect: function (e) {
            if (e.__rect) return e.__rect;
            var t;
            return (
              (t =
                "stroke" == e.brushType || "fill" == e.brushType
                  ? e.lineWidth || 1
                  : 0),
              (e.__rect = {
                x: Math.round(e.x - e.r - t / 2),
                y: Math.round(e.y - e.r - t / 2),
                width: 2 * e.r + t,
                height: 2 * e.r + t,
              }),
              e.__rect
            );
          },
        }),
        e("../tool/util").inherits(n, t),
        n
      );
    }),
    n(
      "echarts/chart/radar",
      [
        "require",
        "./base",
        "zrender/shape/Polygon",
        "../component/polar",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/color",
        "../util/accMath",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Polygon");
        e("../component/polar");
        var a = e("../config");
        a.radar = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          polarIndex: 0,
          itemStyle: {
            normal: {
              label: { show: !1 },
              lineStyle: { width: 2, type: "solid" },
            },
            emphasis: { label: { show: !1 } },
          },
          symbolSize: 2,
        };
        var o = e("../util/ecData"),
          s = e("zrender/tool/util"),
          r = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: a.CHART_TYPE_RADAR,
            _buildShape: function () {
              (this.selectedMap = {}),
                (this._symbol = this.option.symbolList),
                this._queryTarget,
                (this._dropBoxList = []),
                (this._radarDataCounter = 0);
              for (
                var e,
                  t = this.series,
                  n = this.component.legend,
                  i = 0,
                  o = t.length;
                o > i;
                i++
              )
                t[i].type === a.CHART_TYPE_RADAR &&
                  ((this.serie = this.reformOption(t[i])),
                  (this.legendHoverLink =
                    t[i].legendHoverLink || this.legendHoverLink),
                  (e = this.serie.name || ""),
                  (this.selectedMap[e] = n ? n.isSelected(e) : !0),
                  this.selectedMap[e] &&
                    ((this._queryTarget = [this.serie, this.option]),
                    this.deepQuery(this._queryTarget, "calculable") &&
                      this._addDropBox(i),
                    this._buildSingleRadar(i),
                    this.buildMark(i)));
              this.addShapeList();
            },
            _buildSingleRadar: function (e) {
              for (
                var t,
                  n,
                  i,
                  a,
                  o = this.component.legend,
                  s = this.serie.data,
                  r = this.deepQuery(this._queryTarget, "calculable"),
                  l = 0;
                l < s.length;
                l++
              )
                (i = s[l].name || ""),
                  (this.selectedMap[i] = o ? o.isSelected(i) : !0),
                  this.selectedMap[i] &&
                    (o
                      ? ((n = o.getColor(i)),
                        (t = o.getItemShape(i)),
                        t &&
                          ((t.style.brushType = this.deepQuery(
                            [s[l], this.serie],
                            "itemStyle.normal.areaStyle"
                          )
                            ? "both"
                            : "stroke"),
                          o.setItemShape(i, t)))
                      : (n = this.zr.getColor(l)),
                    (a = this._getPointList(this.serie.polarIndex, s[l])),
                    this._addSymbol(a, n, l, e, this.serie.polarIndex),
                    this._addDataShape(a, n, s[l], e, l, r),
                    this._radarDataCounter++);
            },
            _getPointList: function (e, t) {
              for (
                var n,
                  i,
                  a = [],
                  o = this.component.polar,
                  s = 0,
                  r = t.value.length;
                r > s;
                s++
              )
                (i = this.getDataFromOption(t.value[s])),
                  (n = "-" != i ? o.getVector(e, s, i) : !1),
                  n && a.push(n);
              return a;
            },
            _addSymbol: function (e, t, n, i, a) {
              for (
                var s,
                  r = this.series,
                  l = this.component.polar,
                  h = 0,
                  V = e.length;
                V > h;
                h++
              )
                (s = this.getSymbolShape(
                  this.deepMerge([r[i].data[n], r[i]]),
                  i,
                  r[i].data[n].value[h],
                  h,
                  l.getIndicatorText(a, h),
                  e[h][0],
                  e[h][1],
                  this._symbol[this._radarDataCounter % this._symbol.length],
                  t,
                  "#fff",
                  "vertical"
                )),
                  (s.zlevel = this.getZlevelBase()),
                  (s.z = this.getZBase() + 1),
                  o.set(s, "data", r[i].data[n]),
                  o.set(s, "value", r[i].data[n].value),
                  o.set(s, "dataIndex", n),
                  o.set(s, "special", h),
                  this.shapeList.push(s);
            },
            _addDataShape: function (e, t, n, a, s, l) {
              var h = this.series,
                V = [n, this.serie],
                U = this.getItemStyleColor(
                  this.deepQuery(V, "itemStyle.normal.color"),
                  a,
                  s,
                  n
                ),
                m = this.deepQuery(V, "itemStyle.normal.lineStyle.width"),
                p = this.deepQuery(V, "itemStyle.normal.lineStyle.type"),
                d = this.deepQuery(V, "itemStyle.normal.areaStyle.color"),
                c = this.deepQuery(V, "itemStyle.normal.areaStyle"),
                u = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  style: {
                    pointList: e,
                    brushType: c ? "both" : "stroke",
                    color:
                      d || U || ("string" == typeof t ? r.alpha(t, 0.5) : t),
                    strokeColor: U || t,
                    lineWidth: m,
                    lineType: p,
                  },
                  highlightStyle: {
                    brushType:
                      this.deepQuery(V, "itemStyle.emphasis.areaStyle") || c
                        ? "both"
                        : "stroke",
                    color:
                      this.deepQuery(V, "itemStyle.emphasis.areaStyle.color") ||
                      d ||
                      U ||
                      ("string" == typeof t ? r.alpha(t, 0.5) : t),
                    strokeColor:
                      this.getItemStyleColor(
                        this.deepQuery(V, "itemStyle.emphasis.color"),
                        a,
                        s,
                        n
                      ) ||
                      U ||
                      t,
                    lineWidth:
                      this.deepQuery(V, "itemStyle.emphasis.lineStyle.width") ||
                      m,
                    lineType:
                      this.deepQuery(V, "itemStyle.emphasis.lineStyle.type") ||
                      p,
                  },
                };
              o.pack(
                u,
                h[a],
                a,
                n,
                s,
                n.name,
                this.component.polar.getIndicator(h[a].polarIndex)
              ),
                l && ((u.draggable = !0), this.setCalculable(u)),
                (u = new i(u)),
                this.shapeList.push(u);
            },
            _addDropBox: function (e) {
              var t = this.series,
                n = this.deepQuery(this._queryTarget, "polarIndex");
              if (!this._dropBoxList[n]) {
                var i = this.component.polar.getDropBox(n);
                (i.zlevel = this.getZlevelBase()),
                  (i.z = this.getZBase()),
                  this.setCalculable(i),
                  o.pack(i, t, e, void 0, -1),
                  this.shapeList.push(i),
                  (this._dropBoxList[n] = !0);
              }
            },
            ondragend: function (e, t) {
              var n = this.series;
              if (this.isDragend && e.target) {
                var i = e.target,
                  a = o.get(i, "seriesIndex"),
                  s = o.get(i, "dataIndex");
                this.component.legend &&
                  this.component.legend.del(n[a].data[s].name),
                  n[a].data.splice(s, 1),
                  (t.dragOut = !0),
                  (t.needRefresh = !0),
                  (this.isDragend = !1);
              }
            },
            ondrop: function (t, n) {
              var i = this.series;
              if (this.isDrop && t.target) {
                var a,
                  s,
                  r = t.target,
                  l = t.dragged,
                  h = o.get(r, "seriesIndex"),
                  V = o.get(r, "dataIndex"),
                  U = this.component.legend;
                if (-1 === V)
                  (a = { value: o.get(l, "value"), name: o.get(l, "name") }),
                    i[h].data.push(a),
                    U && U.add(a.name, l.style.color || l.style.strokeColor);
                else {
                  var m = e("../util/accMath");
                  (a = i[h].data[V]),
                    U && U.del(a.name),
                    (a.name += this.option.nameConnector + o.get(l, "name")),
                    (s = o.get(l, "value"));
                  for (var p = 0; p < s.length; p++)
                    a.value[p] = m.accAdd(a.value[p], s[p]);
                  U && U.add(a.name, l.style.color || l.style.strokeColor);
                }
                (n.dragIn = n.dragIn || !0), (this.isDrop = !1);
              }
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
          }),
          s.inherits(t, n),
          e("../chart").define("radar", t),
          t
        );
      }
    ),
    n(
      "echarts/component/polar",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Line",
        "zrender/shape/Polygon",
        "zrender/shape/Circle",
        "zrender/shape/Ring",
        "../config",
        "zrender/tool/util",
        "../util/coordinates",
        "../util/accMath",
        "../util/smartSteps",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Line"),
          o = e("zrender/shape/Polygon"),
          s = e("zrender/shape/Circle"),
          r = e("zrender/shape/Ring"),
          l = e("../config");
        l.polar = {
          zlevel: 0,
          z: 0,
          center: ["50%", "50%"],
          radius: "75%",
          startAngle: 90,
          boundaryGap: [0, 0],
          splitNumber: 5,
          name: { show: !0, textStyle: { color: "#333" } },
          axisLine: {
            show: !0,
            lineStyle: { color: "#ccc", width: 1, type: "solid" },
          },
          axisLabel: { show: !1, textStyle: { color: "#333" } },
          splitArea: {
            show: !0,
            areaStyle: {
              color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"],
            },
          },
          splitLine: { show: !0, lineStyle: { width: 1, color: "#ccc" } },
          type: "polygon",
        };
        var h = e("zrender/tool/util"),
          V = e("../util/coordinates");
        return (
          (t.prototype = {
            type: l.COMPONENT_TYPE_POLAR,
            _buildShape: function () {
              for (var e = 0; e < this.polar.length; e++)
                (this._index = e),
                  this.reformOption(this.polar[e]),
                  (this._queryTarget = [this.polar[e], this.option]),
                  this._createVector(e),
                  this._buildSpiderWeb(e),
                  this._buildText(e),
                  this._adjustIndicatorValue(e),
                  this._addAxisLabel(e);
              for (var e = 0; e < this.shapeList.length; e++)
                this.zr.addShape(this.shapeList[e]);
            },
            _createVector: function (e) {
              for (
                var t,
                  n = this.polar[e],
                  i = this.deepQuery(this._queryTarget, "indicator"),
                  a = i.length,
                  o = n.startAngle,
                  s = (2 * Math.PI) / a,
                  r = this._getRadius(),
                  l = (n.__ecIndicator = []),
                  h = 0;
                a > h;
                h++
              )
                (t = V.polar2cartesian(r, (o * Math.PI) / 180 + s * h)),
                  l.push({ vector: [t[1], -t[0]] });
            },
            _getRadius: function () {
              var e = this.polar[this._index];
              return this.parsePercent(
                e.radius,
                Math.min(this.zr.getWidth(), this.zr.getHeight()) / 2
              );
            },
            _buildSpiderWeb: function (e) {
              var t = this.polar[e],
                n = t.__ecIndicator,
                i = t.splitArea,
                a = t.splitLine,
                o = this.getCenter(e),
                s = t.splitNumber,
                r = a.lineStyle.color,
                l = a.lineStyle.width,
                h = a.show,
                V = this.deepQuery(this._queryTarget, "axisLine");
              this._addArea(n, s, o, i, r, l, h),
                V.show && this._addLine(n, o, V);
            },
            _addAxisLabel: function (t) {
              for (
                var n,
                  a,
                  o,
                  s,
                  a,
                  r,
                  l,
                  V,
                  U,
                  m,
                  p = e("../util/accMath"),
                  d = this.polar[t],
                  c = this.deepQuery(this._queryTarget, "indicator"),
                  u = d.__ecIndicator,
                  y = this.deepQuery(this._queryTarget, "splitNumber"),
                  b = this.getCenter(t),
                  g = 0;
                g < c.length;
                g++
              )
                if (
                  ((n = this.deepQuery([c[g], d, this.option], "axisLabel")),
                  n.show)
                ) {
                  var k = this.deepQuery([n, d, this.option], "textStyle");
                  if (
                    ((o = {}),
                    (o.textFont = this.getFont(k)),
                    (o.color = k.color),
                    (o = h.merge(o, n)),
                    (o.lineWidth = o.width),
                    (a = u[g].vector),
                    (r = u[g].value),
                    (V = (g / c.length) * 2 * Math.PI),
                    (U = n.offset || 10),
                    (m = n.interval || 0),
                    !r)
                  )
                    return;
                  for (var f = 1; y >= f; f += m + 1)
                    (s = h.merge({}, o)),
                      (l = p.accAdd(r.min, p.accMul(r.step, f))),
                      (s.text = this.numAddCommas(l)),
                      (s.x = (f * a[0]) / y + Math.cos(V) * U + b[0]),
                      (s.y = (f * a[1]) / y + Math.sin(V) * U + b[1]),
                      this.shapeList.push(
                        new i({
                          zlevel: this.getZlevelBase(),
                          z: this.getZBase(),
                          style: s,
                          draggable: !1,
                          hoverable: !1,
                        })
                      );
                }
            },
            _buildText: function (e) {
              for (
                var t,
                  n,
                  a,
                  o,
                  s,
                  r,
                  l,
                  h = this.polar[e],
                  V = h.__ecIndicator,
                  U = this.deepQuery(this._queryTarget, "indicator"),
                  m = this.getCenter(e),
                  p = 0,
                  d = 0,
                  c = 0;
                c < U.length;
                c++
              )
                (o = this.deepQuery([U[c], h, this.option], "name")),
                  o.show &&
                    ((l = this.deepQuery([o, h, this.option], "textStyle")),
                    (n = {}),
                    (n.textFont = this.getFont(l)),
                    (n.color = l.color),
                    (n.text =
                      "function" == typeof o.formatter
                        ? o.formatter.call(this.myChart, U[c].text, c)
                        : "string" == typeof o.formatter
                        ? o.formatter.replace("{value}", U[c].text)
                        : U[c].text),
                    (V[c].text = n.text),
                    (t = V[c].vector),
                    (a =
                      Math.round(t[0]) > 0
                        ? "left"
                        : Math.round(t[0]) < 0
                        ? "right"
                        : "center"),
                    null == o.margin
                      ? (t = this._mapVector(t, m, 1.1))
                      : ((r = o.margin),
                        (p = t[0] > 0 ? r : -r),
                        (d = t[1] > 0 ? r : -r),
                        (p = 0 === t[0] ? 0 : p),
                        (d = 0 === t[1] ? 0 : d),
                        (t = this._mapVector(t, m, 1))),
                    (n.textAlign = a),
                    (n.x = t[0] + p),
                    (n.y = t[1] + d),
                    (s = o.rotate
                      ? [(o.rotate / 180) * Math.PI, t[0], t[1]]
                      : [0, 0, 0]),
                    this.shapeList.push(
                      new i({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase(),
                        style: n,
                        draggable: !1,
                        hoverable: !1,
                        rotation: s,
                      })
                    ));
            },
            getIndicatorText: function (e, t) {
              return (
                this.polar[e] &&
                this.polar[e].__ecIndicator[t] &&
                this.polar[e].__ecIndicator[t].text
              );
            },
            getDropBox: function (e) {
              var t,
                n,
                e = e || 0,
                i = this.polar[e],
                a = this.getCenter(e),
                o = i.__ecIndicator,
                s = o.length,
                r = [],
                l = i.type;
              if ("polygon" == l) {
                for (var h = 0; s > h; h++)
                  (t = o[h].vector), r.push(this._mapVector(t, a, 1.2));
                n = this._getShape(r, "fill", "rgba(0,0,0,0)", "", 1);
              } else
                "circle" == l &&
                  (n = this._getCircle("", 1, 1.2, a, "fill", "rgba(0,0,0,0)"));
              return n;
            },
            _addArea: function (e, t, n, i, a, o, s) {
              for (
                var r,
                  l,
                  h,
                  V,
                  U = this.deepQuery(this._queryTarget, "type"),
                  m = 0;
                t > m;
                m++
              )
                (l = (t - m) / t),
                  s &&
                    ("polygon" == U
                      ? ((V = this._getPointList(e, l, n)),
                        (r = this._getShape(V, "stroke", "", a, o)))
                      : "circle" == U &&
                        (r = this._getCircle(a, o, l, n, "stroke")),
                    this.shapeList.push(r)),
                  i.show &&
                    ((h = (t - m - 1) / t),
                    this._addSplitArea(e, i, l, h, n, m));
            },
            _getCircle: function (e, t, n, i, a, o) {
              var r = this._getRadius();
              return new s({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  x: i[0],
                  y: i[1],
                  r: r * n,
                  brushType: a,
                  strokeColor: e,
                  lineWidth: t,
                  color: o,
                },
                hoverable: !1,
                draggable: !1,
              });
            },
            _getRing: function (e, t, n, i) {
              var a = this._getRadius();
              return new r({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  x: i[0],
                  y: i[1],
                  r: t * a,
                  r0: n * a,
                  color: e,
                  brushType: "fill",
                },
                hoverable: !1,
                draggable: !1,
              });
            },
            _getPointList: function (e, t, n) {
              for (var i, a = [], o = e.length, s = 0; o > s; s++)
                (i = e[s].vector), a.push(this._mapVector(i, n, t));
              return a;
            },
            _getShape: function (e, t, n, i, a) {
              return new o({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  pointList: e,
                  brushType: t,
                  color: n,
                  strokeColor: i,
                  lineWidth: a,
                },
                hoverable: !1,
                draggable: !1,
              });
            },
            _addSplitArea: function (e, t, n, i, a, o) {
              var s,
                r,
                l,
                h,
                V,
                U = e.length,
                m = t.areaStyle.color,
                p = [],
                U = e.length,
                d = this.deepQuery(this._queryTarget, "type");
              if (
                ("string" == typeof m && (m = [m]),
                (r = m.length),
                (s = m[o % r]),
                "polygon" == d)
              )
                for (var c = 0; U > c; c++)
                  (p = []),
                    (l = e[c].vector),
                    (h = e[(c + 1) % U].vector),
                    p.push(this._mapVector(l, a, n)),
                    p.push(this._mapVector(l, a, i)),
                    p.push(this._mapVector(h, a, i)),
                    p.push(this._mapVector(h, a, n)),
                    (V = this._getShape(p, "fill", s, "", 1)),
                    this.shapeList.push(V);
              else
                "circle" == d &&
                  ((V = this._getRing(s, n, i, a)), this.shapeList.push(V));
            },
            _mapVector: function (e, t, n) {
              return [e[0] * n + t[0], e[1] * n + t[1]];
            },
            getCenter: function (e) {
              var e = e || 0;
              return this.parseCenter(this.zr, this.polar[e].center);
            },
            _addLine: function (e, t, n) {
              for (
                var i,
                  a,
                  o = e.length,
                  s = n.lineStyle,
                  r = s.color,
                  l = s.width,
                  h = s.type,
                  V = 0;
                o > V;
                V++
              )
                (a = e[V].vector),
                  (i = this._getLine(
                    t[0],
                    t[1],
                    a[0] + t[0],
                    a[1] + t[1],
                    r,
                    l,
                    h
                  )),
                  this.shapeList.push(i);
            },
            _getLine: function (e, t, n, i, o, s, r) {
              return new a({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                style: {
                  xStart: e,
                  yStart: t,
                  xEnd: n,
                  yEnd: i,
                  strokeColor: o,
                  lineWidth: s,
                  lineType: r,
                },
                hoverable: !1,
              });
            },
            _adjustIndicatorValue: function (t) {
              for (
                var n,
                  i,
                  a = this.polar[t],
                  o = this.deepQuery(this._queryTarget, "indicator"),
                  s = o.length,
                  r = a.__ecIndicator,
                  l = this._getSeriesData(t),
                  h = a.boundaryGap,
                  V = a.splitNumber,
                  U = a.scale,
                  m = e("../util/smartSteps"),
                  p = 0;
                s > p;
                p++
              ) {
                if ("number" == typeof o[p].max)
                  (n = o[p].max), (i = o[p].min || 0);
                else {
                  var d = this._findValue(l, p, V, h);
                  (i = d.min), (n = d.max);
                }
                !U && i >= 0 && n >= 0 && (i = 0),
                  !U && 0 >= i && 0 >= n && (n = 0);
                var c = m(i, n, V);
                r[p].value = { min: c.min, max: c.max, step: c.step };
              }
            },
            _getSeriesData: function (e) {
              for (
                var t, n, i, a = [], o = this.component.legend, s = 0;
                s < this.series.length;
                s++
              )
                if (((t = this.series[s]), t.type == l.CHART_TYPE_RADAR)) {
                  n = t.data || [];
                  for (var r = 0; r < n.length; r++)
                    (i =
                      this.deepQuery([n[r], t, this.option], "polarIndex") ||
                      0),
                      i != e || (o && !o.isSelected(n[r].name)) || a.push(n[r]);
                }
              return a;
            },
            _findValue: function (e, t, n, i) {
              function a(e) {
                (e > o || void 0 === o) && (o = e),
                  (s > e || void 0 === s) && (s = e);
              }
              var o, s, r;
              if (e && 0 !== e.length) {
                if ((1 == e.length && (s = 0), 1 != e.length))
                  for (var l = 0; l < e.length; l++)
                    a(this.getDataFromOption(e[l].value[t]));
                else {
                  r = e[0];
                  for (var l = 0; l < r.value.length; l++)
                    a(this.getDataFromOption(r.value[l]));
                }
                var h = Math.abs(o - s);
                return (
                  (s -= Math.abs(h * i[0])),
                  (o += Math.abs(h * i[1])),
                  s === o &&
                    (0 === o ? (o = 1) : o > 0 ? (s = o / n) : (o /= n)),
                  { max: o, min: s }
                );
              }
            },
            getVector: function (e, t, n) {
              (e = e || 0), (t = t || 0);
              var i = this.polar[e].__ecIndicator;
              if (!(t >= i.length)) {
                var a,
                  o = this.polar[e].__ecIndicator[t],
                  s = this.getCenter(e),
                  r = o.vector,
                  l = o.value.max,
                  h = o.value.min;
                if ("undefined" == typeof n) return s;
                switch (n) {
                  case "min":
                    n = h;
                    break;
                  case "max":
                    n = l;
                    break;
                  case "center":
                    n = (l + h) / 2;
                }
                return (
                  (a = l != h ? (n - h) / (l - h) : 0.5),
                  this._mapVector(r, s, a)
                );
              }
            },
            isInside: function (e) {
              var t = this.getNearestIndex(e);
              return t ? t.polarIndex : -1;
            },
            getNearestIndex: function (e) {
              for (
                var t, n, i, a, o, s, r, l, h, U = 0;
                U < this.polar.length;
                U++
              ) {
                if (
                  ((t = this.polar[U]),
                  (n = this.getCenter(U)),
                  e[0] == n[0] && e[1] == n[1])
                )
                  return { polarIndex: U, valueIndex: 0 };
                if (
                  ((i = this._getRadius()),
                  (o = t.startAngle),
                  (s = t.indicator),
                  (r = s.length),
                  (l = (2 * Math.PI) / r),
                  (a = V.cartesian2polar(e[0] - n[0], n[1] - e[1])),
                  e[0] - n[0] < 0 && (a[1] += Math.PI),
                  a[1] < 0 && (a[1] += 2 * Math.PI),
                  (h = a[1] - (o / 180) * Math.PI + 2 * Math.PI),
                  Math.abs(Math.cos(h % (l / 2))) * i > a[0])
                )
                  return {
                    polarIndex: U,
                    valueIndex: Math.floor((h + l / 2) / l) % r,
                  };
              }
            },
            getIndicator: function (e) {
              var e = e || 0;
              return this.polar[e].indicator;
            },
            refresh: function (e) {
              e &&
                ((this.option = e),
                (this.polar = this.option.polar),
                (this.series = this.option.series)),
                this.clear(),
                this._buildShape();
            },
          }),
          h.inherits(t, n),
          e("../component").define("polar", t),
          t
        );
      }
    ),
    n("echarts/util/coordinates", ["require", "zrender/tool/math"], function (
      e
    ) {
      function t(e, t) {
        return [e * i.sin(t), e * i.cos(t)];
      }
      function n(e, t) {
        return [Math.sqrt(e * e + t * t), Math.atan(t / e)];
      }
      var i = e("zrender/tool/math");
      return { polar2cartesian: t, cartesian2polar: n };
    }),
    n(
      "echarts/chart/chord",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Line",
        "zrender/shape/Sector",
        "../util/shape/Ribbon",
        "../util/shape/Icon",
        "zrender/shape/BezierCurve",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/tool/vector",
        "../data/Graph",
        "../layout/Chord",
        "../chart",
      ],
      function (e) {
        "use strict";
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o),
            (this.scaleLineLength = 4),
            (this.scaleUnitAngle = 4),
            this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Line"),
          o = e("zrender/shape/Sector"),
          s = e("../util/shape/Ribbon"),
          r = e("../util/shape/Icon"),
          l = e("zrender/shape/BezierCurve"),
          h = e("../config");
        h.chord = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          radius: ["60%", "70%"],
          center: ["50%", "50%"],
          padding: 2,
          sort: "none",
          sortSub: "none",
          startAngle: 90,
          clockWise: !0,
          ribbonType: !0,
          minRadius: 10,
          maxRadius: 20,
          symbol: "circle",
          showScale: !1,
          showScaleText: !1,
          itemStyle: {
            normal: {
              borderWidth: 0,
              borderColor: "#000",
              label: { show: !0, rotate: !1, distance: 5 },
              chordStyle: {
                width: 1,
                color: "black",
                borderWidth: 1,
                borderColor: "#999",
                opacity: 0.5,
              },
            },
            emphasis: {
              borderWidth: 0,
              borderColor: "#000",
              chordStyle: {
                width: 1,
                color: "black",
                borderWidth: 1,
                borderColor: "#999",
              },
            },
          },
        };
        var V = e("../util/ecData"),
          U = e("zrender/tool/util"),
          m = e("zrender/tool/vector"),
          p = e("../data/Graph"),
          d = e("../layout/Chord");
        return (
          (t.prototype = {
            type: h.CHART_TYPE_CHORD,
            _init: function () {
              var e = this.series;
              this.selectedMap = {};
              for (var t = {}, n = {}, i = 0, a = e.length; a > i; i++)
                if (e[i].type === this.type) {
                  var o = this.isSelected(e[i].name);
                  (this.selectedMap[e[i].name] = o),
                    o && this.buildMark(i),
                    this.reformOption(e[i]),
                    (t[e[i].name] = e[i]);
                }
              for (var i = 0, a = e.length; a > i; i++)
                if (e[i].type === this.type)
                  if (e[i].insertToSerie) {
                    var s = t[e[i].insertToSerie];
                    e[i]._referenceSerie = s;
                  } else n[e[i].name] = [e[i]];
              for (var i = 0, a = e.length; a > i; i++)
                if (e[i].type === this.type && e[i].insertToSerie) {
                  for (var r = e[i]._referenceSerie; r && r._referenceSerie; )
                    r = r._referenceSerie;
                  n[r.name] &&
                    this.selectedMap[e[i].name] &&
                    n[r.name].push(e[i]);
                }
              for (var l in n) this._buildChords(n[l]);
              this.addShapeList();
            },
            _getNodeCategory: function (e, t) {
              return e.categories && e.categories[t.category || 0];
            },
            _getNodeQueryTarget: function (e, t) {
              var n = this._getNodeCategory(e, t);
              return [t, n, e];
            },
            _getEdgeQueryTarget: function (e, t, n) {
              return (
                (n = n || "normal"),
                [t.itemStyle && t.itemStyle[n], e.itemStyle[n].chordStyle]
              );
            },
            _buildChords: function (e) {
              for (
                var t = [],
                  n = e[0],
                  i = function (e) {
                    return e.layout.size > 0;
                  },
                  a = function (e) {
                    return function (t) {
                      return e.getEdge(t.node2, t.node1);
                    };
                  },
                  o = 0;
                o < e.length;
                o++
              ) {
                var s = e[o];
                if (this.selectedMap[s.name]) {
                  var r;
                  s.data && s.matrix
                    ? (r = this._getSerieGraphFromDataMatrix(s, n))
                    : s.nodes &&
                      s.links &&
                      (r = this._getSerieGraphFromNodeLinks(s, n)),
                    r.filterNode(i, this),
                    s.ribbonType && r.filterEdge(a(r)),
                    t.push(r),
                    (r.__serie = s);
                }
              }
              if (t.length) {
                var l = t[0];
                if (!n.ribbonType) {
                  var h = n.minRadius,
                    V = n.maxRadius,
                    U = 1 / 0,
                    m = -1 / 0;
                  l.eachNode(function (e) {
                    (m = Math.max(e.layout.size, m)),
                      (U = Math.min(e.layout.size, U));
                  });
                  var p = (V - h) / (m - U);
                  l.eachNode(function (e) {
                    var t = this._getNodeQueryTarget(n, e),
                      i = this.query(t, "symbolSize");
                    e.layout.size =
                      m === U ? i || U : i || (e.layout.size - U) * p + h;
                  }, this);
                }
                var c = new d();
                (c.clockWise = n.clockWise),
                  (c.startAngle = (n.startAngle * Math.PI) / 180),
                  c.clockWise || (c.startAngle = -c.startAngle),
                  (c.padding = (n.padding * Math.PI) / 180),
                  (c.sort = n.sort),
                  (c.sortSub = n.sortSub),
                  (c.directed = n.ribbonType),
                  c.run(t);
                var u = this.query(n, "itemStyle.normal.label.show");
                if (n.ribbonType) {
                  this._buildSectors(n, 0, l, n, t),
                    u && this._buildLabels(n, 0, l, n, t);
                  for (var o = 0, y = 0; o < e.length; o++)
                    this.selectedMap[e[o].name] &&
                      this._buildRibbons(e, o, t[y++], n);
                  n.showScale && this._buildScales(n, 0, l);
                } else {
                  this._buildNodeIcons(n, 0, l, n, t),
                    u && this._buildLabels(n, 0, l, n, t);
                  for (var o = 0, y = 0; o < e.length; o++)
                    this.selectedMap[e[o].name] &&
                      this._buildEdgeCurves(e, o, t[y++], n, l);
                }
                this._initHoverHandler(e, t);
              }
            },
            _getSerieGraphFromDataMatrix: function (e, t) {
              for (var n = [], i = 0, a = [], o = 0; o < e.matrix.length; o++)
                a[o] = e.matrix[o].slice();
              for (var s = e.data || e.nodes, o = 0; o < s.length; o++) {
                var r = {},
                  l = s[o];
                l.rawIndex = o;
                for (var h in l) "name" === h ? (r.id = l.name) : (r[h] = l[h]);
                var V = this._getNodeCategory(t, l),
                  U = V ? V.name : l.name;
                if (
                  ((this.selectedMap[U] = this.isSelected(U)),
                  this.selectedMap[U])
                )
                  n.push(r), i++;
                else {
                  a.splice(i, 1);
                  for (var m = 0; m < a.length; m++) a[m].splice(i, 1);
                }
              }
              var d = p.fromMatrix(n, a, !0);
              return (
                d.eachNode(function (e) {
                  (e.layout = { size: e.data.outValue }),
                    (e.rawIndex = e.data.rawIndex);
                }),
                d.eachEdge(function (e) {
                  e.layout = { weight: e.data.weight };
                }),
                d
              );
            },
            _getSerieGraphFromNodeLinks: function (e, t) {
              for (
                var n = new p(!0), i = e.data || e.nodes, a = 0, o = i.length;
                o > a;
                a++
              ) {
                var s = i[a];
                if (s && !s.ignore) {
                  var r = this._getNodeCategory(t, s),
                    l = r ? r.name : s.name;
                  if (
                    ((this.selectedMap[l] = this.isSelected(l)),
                    this.selectedMap[l])
                  ) {
                    var h = n.addNode(s.name, s);
                    h.rawIndex = a;
                  }
                }
              }
              for (var a = 0, o = e.links.length; o > a; a++) {
                var V = e.links[a],
                  U = V.source,
                  m = V.target;
                "number" == typeof U && ((U = i[U]), U && (U = U.name)),
                  "number" == typeof m && ((m = i[m]), m && (m = m.name));
                var d = n.addEdge(U, m, V);
                d && (d.rawIndex = a);
              }
              return (
                n.eachNode(function (e) {
                  var n = e.data.value;
                  if (null == n)
                    if (((n = 0), t.ribbonType))
                      for (var i = 0; i < e.outEdges.length; i++)
                        n += e.outEdges[i].data.weight || 0;
                    else
                      for (var i = 0; i < e.edges.length; i++)
                        n += e.edges[i].data.weight || 0;
                  e.layout = { size: n };
                }),
                n.eachEdge(function (e) {
                  e.layout = {
                    weight: null == e.data.weight ? 1 : e.data.weight,
                  };
                }),
                n
              );
            },
            _initHoverHandler: function (e, t) {
              var n = e[0],
                i = t[0],
                a = this;
              i.eachNode(function (e) {
                (e.shape.onmouseover = function () {
                  i.eachNode(function (e) {
                    (e.shape.style.opacity = 0.1),
                      e.labelShape &&
                        ((e.labelShape.style.opacity = 0.1),
                        e.labelShape.modSelf()),
                      e.shape.modSelf();
                  });
                  for (var n = 0; n < t.length; n++)
                    for (var o = 0; o < t[n].edges.length; o++) {
                      var s = t[n].edges[o],
                        r = a._getEdgeQueryTarget(t[n].__serie, s.data);
                      (s.shape.style.opacity = 0.1 * a.deepQuery(r, "opacity")),
                        s.shape.modSelf();
                    }
                  (e.shape.style.opacity = 1),
                    e.labelShape && (e.labelShape.style.opacity = 1);
                  for (var n = 0; n < t.length; n++) {
                    var l = t[n].getNodeById(e.id);
                    if (l)
                      for (var o = 0; o < l.outEdges.length; o++) {
                        var s = l.outEdges[o],
                          r = a._getEdgeQueryTarget(t[n].__serie, s.data);
                        s.shape.style.opacity = a.deepQuery(r, "opacity");
                        var h = t[0].getNodeById(s.node2.id);
                        h &&
                          (h.shape && (h.shape.style.opacity = 1),
                          h.labelShape && (h.labelShape.style.opacity = 1));
                      }
                  }
                  a.zr.refreshNextFrame();
                }),
                  (e.shape.onmouseout = function () {
                    i.eachNode(function (e) {
                      (e.shape.style.opacity = 1),
                        e.labelShape &&
                          ((e.labelShape.style.opacity = 1),
                          e.labelShape.modSelf()),
                        e.shape.modSelf();
                    });
                    for (var e = 0; e < t.length; e++)
                      for (var o = 0; o < t[e].edges.length; o++) {
                        var s = t[e].edges[o],
                          r = [s.data, n];
                        (s.shape.style.opacity = a.deepQuery(
                          r,
                          "itemStyle.normal.chordStyle.opacity"
                        )),
                          s.shape.modSelf();
                      }
                    a.zr.refreshNextFrame();
                  });
              });
            },
            _buildSectors: function (e, t, n, i) {
              var a = this.parseCenter(this.zr, i.center),
                s = this.parseRadius(this.zr, i.radius),
                r = i.clockWise,
                l = r ? 1 : -1;
              n.eachNode(function (n) {
                var h = this._getNodeCategory(i, n.data),
                  U = this.getColor(h ? h.name : n.id),
                  m = (n.layout.startAngle / Math.PI) * 180 * l,
                  p = (n.layout.endAngle / Math.PI) * 180 * l,
                  d = new o({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      x: a[0],
                      y: a[1],
                      r0: s[0],
                      r: s[1],
                      startAngle: m,
                      endAngle: p,
                      brushType: "fill",
                      opacity: 1,
                      color: U,
                      clockWise: r,
                    },
                    clickable: i.clickable,
                    highlightStyle: { brushType: "fill" },
                  });
                (d.style.lineWidth = this.deepQuery(
                  [n.data, i],
                  "itemStyle.normal.borderWidth"
                )),
                  (d.highlightStyle.lineWidth = this.deepQuery(
                    [n.data, i],
                    "itemStyle.emphasis.borderWidth"
                  )),
                  (d.style.strokeColor = this.deepQuery(
                    [n.data, i],
                    "itemStyle.normal.borderColor"
                  )),
                  (d.highlightStyle.strokeColor = this.deepQuery(
                    [n.data, i],
                    "itemStyle.emphasis.borderColor"
                  )),
                  d.style.lineWidth > 0 && (d.style.brushType = "both"),
                  d.highlightStyle.lineWidth > 0 &&
                    (d.highlightStyle.brushType = "both"),
                  V.pack(d, e, t, n.data, n.rawIndex, n.id, n.category),
                  this.shapeList.push(d),
                  (n.shape = d);
              }, this);
            },
            _buildNodeIcons: function (e, t, n, i) {
              var a = this.parseCenter(this.zr, i.center),
                o = this.parseRadius(this.zr, i.radius),
                s = o[1];
              n.eachNode(function (n) {
                var o = n.layout.startAngle,
                  l = n.layout.endAngle,
                  h = (o + l) / 2,
                  U = s * Math.cos(h),
                  m = s * Math.sin(h),
                  p = this._getNodeQueryTarget(i, n.data),
                  d = this._getNodeCategory(i, n.data),
                  c = this.deepQuery(p, "itemStyle.normal.color");
                c || (c = this.getColor(d ? d.name : n.id));
                var u = new r({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase() + 1,
                  style: {
                    x: -n.layout.size,
                    y: -n.layout.size,
                    width: 2 * n.layout.size,
                    height: 2 * n.layout.size,
                    iconType: this.deepQuery(p, "symbol"),
                    color: c,
                    brushType: "both",
                    lineWidth: this.deepQuery(
                      p,
                      "itemStyle.normal.borderWidth"
                    ),
                    strokeColor: this.deepQuery(
                      p,
                      "itemStyle.normal.borderColor"
                    ),
                  },
                  highlightStyle: {
                    color: this.deepQuery(p, "itemStyle.emphasis.color"),
                    lineWidth: this.deepQuery(
                      p,
                      "itemStyle.emphasis.borderWidth"
                    ),
                    strokeColor: this.deepQuery(
                      p,
                      "itemStyle.emphasis.borderColor"
                    ),
                  },
                  clickable: i.clickable,
                  position: [U + a[0], m + a[1]],
                });
                V.pack(u, e, t, n.data, n.rawIndex, n.id, n.category),
                  this.shapeList.push(u),
                  (n.shape = u);
              }, this);
            },
            _buildLabels: function (e, t, n, a) {
              var o = this.query(a, "itemStyle.normal.label.color"),
                s = this.query(a, "itemStyle.normal.label.rotate"),
                r = this.query(a, "itemStyle.normal.label.distance"),
                l = this.parseCenter(this.zr, a.center),
                h = this.parseRadius(this.zr, a.radius),
                V = a.clockWise,
                U = V ? 1 : -1;
              n.eachNode(function (e) {
                var t = (e.layout.startAngle / Math.PI) * 180 * U,
                  n = (e.layout.endAngle / Math.PI) * 180 * U,
                  V = (t * -U + n * -U) / 2;
                (V %= 360), 0 > V && (V += 360);
                var p = 90 >= V || V >= 270;
                V = (V * Math.PI) / 180;
                var d = [Math.cos(V), -Math.sin(V)],
                  c = 0;
                c = a.ribbonType
                  ? a.showScaleText
                    ? 35 + r
                    : r
                  : r + e.layout.size;
                var u = m.scale([], d, h[1] + c);
                m.add(u, u, l);
                var y = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase() + 1,
                  hoverable: !1,
                  style: {
                    text: null == e.data.label ? e.id : e.data.label,
                    textAlign: p ? "left" : "right",
                    color: o || "#000000",
                  },
                };
                s
                  ? ((y.rotation = p ? V : Math.PI + V),
                    (y.style.x = p ? h[1] + c : -h[1] - c),
                    (y.style.y = 0),
                    (y.position = l.slice()))
                  : ((y.style.x = u[0]), (y.style.y = u[1])),
                  (y.style.textColor =
                    this.deepQuery(
                      [e.data, a],
                      "itemStyle.normal.label.textStyle.color"
                    ) || "#fff"),
                  (y.style.textFont = this.getFont(
                    this.deepQuery(
                      [e.data, a],
                      "itemStyle.normal.label.textStyle"
                    )
                  )),
                  (y = new i(y)),
                  this.shapeList.push(y),
                  (e.labelShape = y);
              }, this);
            },
            _buildRibbons: function (e, t, n, i) {
              var a = e[t],
                o = this.parseCenter(this.zr, i.center),
                r = this.parseRadius(this.zr, i.radius);
              n.eachEdge(function (l, h) {
                var U,
                  m = n.getEdge(l.node2, l.node1);
                if (m && !l.shape) {
                  if (m.shape) return void (l.shape = m.shape);
                  var p = (l.layout.startAngle / Math.PI) * 180,
                    d = (l.layout.endAngle / Math.PI) * 180,
                    c = (m.layout.startAngle / Math.PI) * 180,
                    u = (m.layout.endAngle / Math.PI) * 180;
                  U = this.getColor(
                    1 === e.length
                      ? l.layout.weight <= m.layout.weight
                        ? l.node1.id
                        : l.node2.id
                      : a.name
                  );
                  var y,
                    b,
                    g = this._getEdgeQueryTarget(a, l.data),
                    k = this._getEdgeQueryTarget(a, l.data, "emphasis"),
                    f = new s({
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                      style: {
                        x: o[0],
                        y: o[1],
                        r: r[0],
                        source0: p,
                        source1: d,
                        target0: c,
                        target1: u,
                        brushType: "both",
                        opacity: this.deepQuery(g, "opacity"),
                        color: U,
                        lineWidth: this.deepQuery(g, "borderWidth"),
                        strokeColor: this.deepQuery(g, "borderColor"),
                        clockWise: i.clockWise,
                      },
                      clickable: i.clickable,
                      highlightStyle: {
                        brushType: "both",
                        opacity: this.deepQuery(k, "opacity"),
                        lineWidth: this.deepQuery(k, "borderWidth"),
                        strokeColor: this.deepQuery(k, "borderColor"),
                      },
                    });
                  l.layout.weight <= m.layout.weight
                    ? ((y = m.node1), (b = m.node2))
                    : ((y = l.node1), (b = l.node2)),
                    V.pack(
                      f,
                      a,
                      t,
                      l.data,
                      null == l.rawIndex ? h : l.rawIndex,
                      l.data.name || y.id + "-" + b.id,
                      y.id,
                      b.id
                    ),
                    this.shapeList.push(f),
                    (l.shape = f);
                }
              }, this);
            },
            _buildEdgeCurves: function (e, t, n, i, a) {
              var o = e[t],
                s = this.parseCenter(this.zr, i.center);
              n.eachEdge(function (e, n) {
                var i = a.getNodeById(e.node1.id),
                  r = a.getNodeById(e.node2.id),
                  h = i.shape,
                  U = r.shape,
                  m = this._getEdgeQueryTarget(o, e.data),
                  p = this._getEdgeQueryTarget(o, e.data, "emphasis"),
                  d = new l({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    style: {
                      xStart: h.position[0],
                      yStart: h.position[1],
                      xEnd: U.position[0],
                      yEnd: U.position[1],
                      cpX1: s[0],
                      cpY1: s[1],
                      lineWidth: this.deepQuery(m, "width"),
                      strokeColor: this.deepQuery(m, "color"),
                      opacity: this.deepQuery(m, "opacity"),
                    },
                    highlightStyle: {
                      lineWidth: this.deepQuery(p, "width"),
                      strokeColor: this.deepQuery(p, "color"),
                      opacity: this.deepQuery(p, "opacity"),
                    },
                  });
                V.pack(
                  d,
                  o,
                  t,
                  e.data,
                  null == e.rawIndex ? n : e.rawIndex,
                  e.data.name || e.node1.id + "-" + e.node2.id,
                  e.node1.id,
                  e.node2.id
                ),
                  this.shapeList.push(d),
                  (e.shape = d);
              }, this);
            },
            _buildScales: function (e, t, n) {
              var o,
                s,
                r = e.clockWise,
                l = this.parseCenter(this.zr, e.center),
                h = this.parseRadius(this.zr, e.radius),
                V = r ? 1 : -1,
                U = 0,
                p = -1 / 0;
              e.showScaleText &&
                (n.eachNode(function (e) {
                  var t = e.data.value;
                  t > p && (p = t), (U += t);
                }),
                p > 1e10
                  ? ((o = "b"), (s = 1e-9))
                  : p > 1e7
                  ? ((o = "m"), (s = 1e-6))
                  : p > 1e4
                  ? ((o = "k"), (s = 0.001))
                  : ((o = ""), (s = 1)));
              var d = U / (360 - e.padding);
              n.eachNode(function (t) {
                for (
                  var n = (t.layout.startAngle / Math.PI) * 180,
                    U = (t.layout.endAngle / Math.PI) * 180,
                    p = n;
                  ;

                ) {
                  if ((r && p > U) || (!r && U > p)) break;
                  var c = (p / 180) * Math.PI,
                    u = [Math.cos(c), Math.sin(c)],
                    y = m.scale([], u, h[1] + 1);
                  m.add(y, y, l);
                  var b = m.scale([], u, h[1] + this.scaleLineLength);
                  m.add(b, b, l);
                  var g = new a({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() - 1,
                    hoverable: !1,
                    style: {
                      xStart: y[0],
                      yStart: y[1],
                      xEnd: b[0],
                      yEnd: b[1],
                      lineCap: "round",
                      brushType: "stroke",
                      strokeColor: "#666",
                      lineWidth: 1,
                    },
                  });
                  this.shapeList.push(g), (p += V * this.scaleUnitAngle);
                }
                if (e.showScaleText)
                  for (var k = n, f = 5 * d * this.scaleUnitAngle, L = 0; ; ) {
                    if ((r && k > U) || (!r && U > k)) break;
                    var c = k;
                    (c %= 360), 0 > c && (c += 360);
                    var x = 90 >= c || c >= 270,
                      _ = new i({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() - 1,
                        hoverable: !1,
                        style: {
                          x: x
                            ? h[1] + this.scaleLineLength + 4
                            : -h[1] - this.scaleLineLength - 4,
                          y: 0,
                          text: Math.round(10 * L) / 10 + o,
                          textAlign: x ? "left" : "right",
                        },
                        position: l.slice(),
                        rotation: x
                          ? [(-c / 180) * Math.PI, 0, 0]
                          : [(-(c + 180) / 180) * Math.PI, 0, 0],
                      });
                    this.shapeList.push(_),
                      (L += f * s),
                      (k += V * this.scaleUnitAngle * 5);
                  }
              }, this);
            },
            refresh: function (e) {
              if (
                (e && ((this.option = e), (this.series = e.series)),
                (this.legend = this.component.legend),
                this.legend)
              )
                (this.getColor = function (e) {
                  return this.legend.getColor(e);
                }),
                  (this.isSelected = function (e) {
                    return this.legend.isSelected(e);
                  });
              else {
                var t = {},
                  n = 0;
                (this.getColor = function (e) {
                  return t[e]
                    ? t[e]
                    : (t[e] || (t[e] = this.zr.getColor(n++)), t[e]);
                }),
                  (this.isSelected = function () {
                    return !0;
                  });
              }
              this.backupShapeList(), this._init();
            },
            reformOption: function (e) {
              var t = U.merge;
              (e = t(t(e || {}, this.ecTheme.chord), h.chord)),
                (e.itemStyle.normal.label.textStyle = this.getTextStyle(
                  e.itemStyle.normal.label.textStyle
                ));
            },
          }),
          U.inherits(t, n),
          e("../chart").define("chord", t),
          t
        );
      }
    ),
    n(
      "echarts/util/shape/Ribbon",
      [
        "require",
        "zrender/shape/Base",
        "zrender/shape/util/PathProxy",
        "zrender/tool/util",
      ],
      function (e) {
        function t(e) {
          n.call(this, e), (this._pathProxy = new i());
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/shape/util/PathProxy"),
          a = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "ribbon",
            buildPath: function (e, t) {
              var n = t.clockWise || !1,
                i = this._pathProxy;
              i.begin(e);
              var a = t.x,
                o = t.y,
                s = t.r,
                r = (t.source0 / 180) * Math.PI,
                l = (t.source1 / 180) * Math.PI,
                h = (t.target0 / 180) * Math.PI,
                V = (t.target1 / 180) * Math.PI,
                U = a + Math.cos(r) * s,
                m = o + Math.sin(r) * s,
                p = a + Math.cos(l) * s,
                d = o + Math.sin(l) * s,
                c = a + Math.cos(h) * s,
                u = o + Math.sin(h) * s,
                y = a + Math.cos(V) * s,
                b = o + Math.sin(V) * s;
              i.moveTo(U, m),
                i.arc(a, o, t.r, r, l, !n),
                i.bezierCurveTo(
                  0.7 * (a - p) + p,
                  0.7 * (o - d) + d,
                  0.7 * (a - c) + c,
                  0.7 * (o - u) + u,
                  c,
                  u
                ),
                (t.source0 !== t.target0 || t.source1 !== t.target1) &&
                  (i.arc(a, o, t.r, h, V, !n),
                  i.bezierCurveTo(
                    0.7 * (a - y) + y,
                    0.7 * (o - b) + b,
                    0.7 * (a - U) + U,
                    0.7 * (o - m) + m,
                    U,
                    m
                  ));
            },
            getRect: function (e) {
              return e.__rect
                ? e.__rect
                : (this._pathProxy.isEmpty() || this.buildPath(null, e),
                  this._pathProxy.fastBoundingRect());
            },
          }),
          a.inherits(t, n),
          t
        );
      }
    ),
    n(
      "zrender/shape/BezierCurve",
      ["require", "./Base", "../tool/util"],
      function (e) {
        "use strict";
        var t = e("./Base"),
          n = function (e) {
            (this.brushTypeOnly = "stroke"),
              (this.textPosition = "end"),
              t.call(this, e);
          };
        return (
          (n.prototype = {
            type: "bezier-curve",
            buildPath: function (e, t) {
              e.moveTo(t.xStart, t.yStart),
                "undefined" != typeof t.cpX2 && "undefined" != typeof t.cpY2
                  ? e.bezierCurveTo(
                      t.cpX1,
                      t.cpY1,
                      t.cpX2,
                      t.cpY2,
                      t.xEnd,
                      t.yEnd
                    )
                  : e.quadraticCurveTo(t.cpX1, t.cpY1, t.xEnd, t.yEnd);
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t = Math.min(e.xStart, e.xEnd, e.cpX1),
                n = Math.min(e.yStart, e.yEnd, e.cpY1),
                i = Math.max(e.xStart, e.xEnd, e.cpX1),
                a = Math.max(e.yStart, e.yEnd, e.cpY1),
                o = e.cpX2,
                s = e.cpY2;
              "undefined" != typeof o &&
                "undefined" != typeof s &&
                ((t = Math.min(t, o)),
                (n = Math.min(n, s)),
                (i = Math.max(i, o)),
                (a = Math.max(a, s)));
              var r = e.lineWidth || 1;
              return (
                (e.__rect = {
                  x: t - r,
                  y: n - r,
                  width: i - t + r,
                  height: a - n + r,
                }),
                e.__rect
              );
            },
          }),
          e("../tool/util").inherits(n, t),
          n
        );
      }
    ),
    n("echarts/data/Graph", ["require", "zrender/tool/util"], function (e) {
      var t = e("zrender/tool/util"),
        n = function (e) {
          (this._directed = e || !1),
            (this.nodes = []),
            (this.edges = []),
            (this._nodesMap = {}),
            (this._edgesMap = {});
        };
      (n.prototype.isDirected = function () {
        return this._directed;
      }),
        (n.prototype.addNode = function (e, t) {
          if (this._nodesMap[e]) return this._nodesMap[e];
          var i = new n.Node(e, t);
          return this.nodes.push(i), (this._nodesMap[e] = i), i;
        }),
        (n.prototype.getNodeById = function (e) {
          return this._nodesMap[e];
        }),
        (n.prototype.addEdge = function (e, t, i) {
          if (
            ("string" == typeof e && (e = this._nodesMap[e]),
            "string" == typeof t && (t = this._nodesMap[t]),
            e && t)
          ) {
            var a = e.id + "-" + t.id;
            if (this._edgesMap[a]) return this._edgesMap[a];
            var o = new n.Edge(e, t, i);
            return (
              this._directed && (e.outEdges.push(o), t.inEdges.push(o)),
              e.edges.push(o),
              e !== t && t.edges.push(o),
              this.edges.push(o),
              (this._edgesMap[a] = o),
              o
            );
          }
        }),
        (n.prototype.removeEdge = function (e) {
          var n = e.node1,
            i = e.node2,
            a = n.id + "-" + i.id;
          this._directed &&
            (n.outEdges.splice(t.indexOf(n.outEdges, e), 1),
            i.inEdges.splice(t.indexOf(i.inEdges, e), 1)),
            n.edges.splice(t.indexOf(n.edges, e), 1),
            n !== i && i.edges.splice(t.indexOf(i.edges, e), 1),
            delete this._edgesMap[a],
            this.edges.splice(t.indexOf(this.edges, e), 1);
        }),
        (n.prototype.getEdge = function (e, t) {
          return (
            "string" != typeof e && (e = e.id),
            "string" != typeof t && (t = t.id),
            this._directed
              ? this._edgesMap[e + "-" + t]
              : this._edgesMap[e + "-" + t] || this._edgesMap[t + "-" + e]
          );
        }),
        (n.prototype.removeNode = function (e) {
          if ("string" != typeof e || (e = this._nodesMap[e])) {
            delete this._nodesMap[e.id],
              this.nodes.splice(t.indexOf(this.nodes, e), 1);
            for (var n = 0; n < this.edges.length; ) {
              var i = this.edges[n];
              i.node1 === e || i.node2 === e ? this.removeEdge(i) : n++;
            }
          }
        }),
        (n.prototype.filterNode = function (e, t) {
          for (var n = this.nodes.length, i = 0; n > i; )
            e.call(t, this.nodes[i], i)
              ? i++
              : (this.removeNode(this.nodes[i]), n--);
        }),
        (n.prototype.filterEdge = function (e, t) {
          for (var n = this.edges.length, i = 0; n > i; )
            e.call(t, this.edges[i], i)
              ? i++
              : (this.removeEdge(this.edges[i]), n--);
        }),
        (n.prototype.eachNode = function (e, t) {
          for (var n = this.nodes.length, i = 0; n > i; i++)
            this.nodes[i] && e.call(t, this.nodes[i], i);
        }),
        (n.prototype.eachEdge = function (e, t) {
          for (var n = this.edges.length, i = 0; n > i; i++)
            this.edges[i] && e.call(t, this.edges[i], i);
        }),
        (n.prototype.clear = function () {
          (this.nodes.length = 0),
            (this.edges.length = 0),
            (this._nodesMap = {}),
            (this._edgesMap = {});
        }),
        (n.prototype.breadthFirstTraverse = function (e, t, n, i) {
          if (("string" == typeof t && (t = this._nodesMap[t]), t)) {
            var a = "edges";
            "out" === n ? (a = "outEdges") : "in" === n && (a = "inEdges");
            for (var o = 0; o < this.nodes.length; o++)
              this.nodes[o].__visited = !1;
            if (!e.call(i, t, null))
              for (var s = [t]; s.length; )
                for (var r = s.shift(), l = r[a], o = 0; o < l.length; o++) {
                  var h = l[o],
                    V = h.node1 === r ? h.node2 : h.node1;
                  if (!V.__visited) {
                    if (e.call(V, V, r)) return;
                    s.push(V), (V.__visited = !0);
                  }
                }
          }
        }),
        (n.prototype.clone = function () {
          for (var e = new n(this._directed), t = 0; t < this.nodes.length; t++)
            e.addNode(this.nodes[t].id, this.nodes[t].data);
          for (var t = 0; t < this.edges.length; t++) {
            var i = this.edges[t];
            e.addEdge(i.node1.id, i.node2.id, i.data);
          }
          return e;
        });
      var i = function (e, t) {
        (this.id = e),
          (this.data = t || null),
          (this.inEdges = []),
          (this.outEdges = []),
          (this.edges = []);
      };
      (i.prototype.degree = function () {
        return this.edges.length;
      }),
        (i.prototype.inDegree = function () {
          return this.inEdges.length;
        }),
        (i.prototype.outDegree = function () {
          return this.outEdges.length;
        });
      var a = function (e, t, n) {
        (this.node1 = e), (this.node2 = t), (this.data = n || null);
      };
      return (
        (n.Node = i),
        (n.Edge = a),
        (n.fromMatrix = function (e, t, i) {
          if (
            t &&
            t.length &&
            t[0].length === t.length &&
            e.length === t.length
          ) {
            for (var a = t.length, o = new n(i), s = 0; a > s; s++) {
              var r = o.addNode(e[s].id, e[s]);
              (r.data.value = 0), i && (r.data.outValue = r.data.inValue = 0);
            }
            for (var s = 0; a > s; s++)
              for (var l = 0; a > l; l++) {
                var h = t[s][l];
                i &&
                  ((o.nodes[s].data.outValue += h),
                  (o.nodes[l].data.inValue += h)),
                  (o.nodes[s].data.value += h),
                  (o.nodes[l].data.value += h);
              }
            for (var s = 0; a > s; s++)
              for (var l = s; a > l; l++) {
                var h = t[s][l];
                if (0 !== h) {
                  var V = o.nodes[s],
                    U = o.nodes[l],
                    m = o.addEdge(V, U, {});
                  if (((m.data.weight = h), s !== l && i && t[l][s])) {
                    var p = o.addEdge(U, V, {});
                    p.data.weight = t[l][s];
                  }
                }
              }
            return o;
          }
        }),
        n
      );
    }),
    n("echarts/layout/Chord", ["require"], function () {
      var e = function (e) {
        (e = e || {}),
          (this.sort = e.sort || null),
          (this.sortSub = e.sortSub || null),
          (this.padding = 0.05),
          (this.startAngle = e.startAngle || 0),
          (this.clockWise = null == e.clockWise ? !1 : e.clockWise),
          (this.center = e.center || [0, 0]),
          (this.directed = !0);
      };
      e.prototype.run = function (e) {
        e instanceof Array || (e = [e]);
        var i = e.length;
        if (i) {
          for (
            var a = e[0], o = a.nodes.length, s = [], r = 0, l = 0;
            o > l;
            l++
          ) {
            var h = a.nodes[l],
              V = { size: 0, subGroups: [], node: h };
            s.push(V);
            for (var U = 0, m = 0; m < e.length; m++) {
              var p = e[m],
                d = p.getNodeById(h.id);
              if (d) {
                V.size += d.layout.size;
                for (
                  var c = this.directed ? d.outEdges : d.edges, u = 0;
                  u < c.length;
                  u++
                ) {
                  var y = c[u],
                    b = y.layout.weight;
                  V.subGroups.push({ weight: b, edge: y, graph: p }), (U += b);
                }
              }
            }
            r += V.size;
            for (var g = V.size / U, u = 0; u < V.subGroups.length; u++)
              V.subGroups[u].weight *= g;
            "ascending" === this.sortSub
              ? V.subGroups.sort(t)
              : "descending" === this.sort &&
                (V.subGroups.sort(t), V.subGroups.reverse());
          }
          "ascending" === this.sort
            ? s.sort(n)
            : "descending" === this.sort && (s.sort(n), s.reverse());
          for (
            var g = (2 * Math.PI - this.padding * o) / r,
              k = this.startAngle,
              f = this.clockWise ? 1 : -1,
              l = 0;
            o > l;
            l++
          ) {
            var V = s[l];
            (V.node.layout.startAngle = k),
              (V.node.layout.endAngle = k + f * V.size * g),
              (V.node.layout.subGroups = []);
            for (var u = 0; u < V.subGroups.length; u++) {
              var L = V.subGroups[u];
              (L.edge.layout.startAngle = k),
                (k += f * L.weight * g),
                (L.edge.layout.endAngle = k);
            }
            k = V.node.layout.endAngle + f * this.padding;
          }
        }
      };
      var t = function (e, t) {
          return e.weight - t.weight;
        },
        n = function (e, t) {
          return e.size - t.size;
        };
      return e;
    }),
    n(
      "echarts/chart/force",
      [
        "require",
        "./base",
        "../data/Graph",
        "../layout/Force",
        "zrender/shape/Line",
        "zrender/shape/BezierCurve",
        "zrender/shape/Image",
        "../util/shape/Icon",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/config",
        "zrender/tool/vector",
        "../chart",
      ],
      function (e) {
        "use strict";
        function t(e, t, o, h, V) {
          var U = this;
          s.call(this, e, t, o, h, V),
            (this.__nodePositionMap = {}),
            (this._graph = new r(!0)),
            (this._layout = new l()),
            (this._layout.onupdate = function () {
              U._step();
            }),
            (this._steps = 1),
            (this.ondragstart = function () {
              n.apply(U, arguments);
            }),
            (this.ondragend = function () {
              a.apply(U, arguments);
            }),
            (this.ondrop = function () {}),
            (this.shapeHandler.ondragstart = function () {
              U.isDragstart = !0;
            }),
            (this.onmousemove = function () {
              i.apply(U, arguments);
            }),
            this.refresh(h);
        }
        function n(e) {
          if (this.isDragstart && e.target) {
            var t = e.target;
            (t.fixed = !0),
              (this.isDragstart = !1),
              this.zr.on(u.EVENT.MOUSEMOVE, this.onmousemove);
          }
        }
        function i() {
          (this._layout.temperature = 0.8), this._step();
        }
        function a(e, t) {
          if (this.isDragend && e.target) {
            var n = e.target;
            (n.fixed = !1),
              (t.dragIn = !0),
              (t.needRefresh = !1),
              (this.isDragend = !1),
              this.zr.un(u.EVENT.MOUSEMOVE, this.onmousemove);
          }
        }
        function o(e, t, n) {
          var i = y.create();
          return (
            (i[0] = (Math.random() - 0.5) * n + e),
            (i[1] = (Math.random() - 0.5) * n + t),
            i
          );
        }
        var s = e("./base"),
          r = e("../data/Graph"),
          l = e("../layout/Force"),
          h = e("zrender/shape/Line"),
          V = e("zrender/shape/BezierCurve"),
          U = e("zrender/shape/Image"),
          m = e("../util/shape/Icon"),
          p = e("../config");
        p.force = {
          zlevel: 1,
          z: 2,
          center: ["50%", "50%"],
          size: "80%",
          preventOverlap: !1,
          coolDown: 0.99,
          minRadius: 10,
          maxRadius: 20,
          ratioScaling: !1,
          large: !1,
          useWorker: !1,
          steps: 1,
          scaling: 1,
          gravity: 1.2,
          symbol: "circle",
          symbolSize: 0,
          linkSymbol: null,
          linkSymbolSize: [10, 15],
          draggable: !0,
          clickable: !0,
          roam: !1,
          itemStyle: {
            normal: {
              label: { show: !1, position: "inside" },
              nodeStyle: {
                brushType: "both",
                borderColor: "#5182ab",
                borderWidth: 1,
              },
              linkStyle: { color: "#5182ab", width: 1, type: "line" },
            },
            emphasis: {
              label: { show: !1 },
              nodeStyle: {},
              linkStyle: { opacity: 0 },
            },
          },
        };
        var d = e("../util/ecData"),
          c = e("zrender/tool/util"),
          u = e("zrender/config"),
          y = e("zrender/tool/vector");
        return (
          (t.prototype = {
            constructor: t,
            type: p.CHART_TYPE_FORCE,
            _init: function () {
              var e,
                t = this.component.legend,
                n = this.series;
              this.clear();
              for (var i = 0, a = n.length; a > i; i++) {
                var o = n[i];
                if (o.type === p.CHART_TYPE_FORCE) {
                  if (
                    ((n[i] = this.reformOption(n[i])),
                    (e = n[i].name || ""),
                    (this.selectedMap[e] = t ? t.isSelected(e) : !0),
                    !this.selectedMap[e])
                  )
                    continue;
                  this.buildMark(i), this._initSerie(o, i);
                  break;
                }
              }
              this.animationEffect();
            },
            _getNodeCategory: function (e, t) {
              return e.categories && e.categories[t.category || 0];
            },
            _getNodeQueryTarget: function (e, t, n) {
              n = n || "normal";
              var i = this._getNodeCategory(e, t) || {};
              return [
                t.itemStyle && t.itemStyle[n],
                i && i.itemStyle && i.itemStyle[n],
                e.itemStyle[n].nodeStyle,
              ];
            },
            _getEdgeQueryTarget: function (e, t, n) {
              return (
                (n = n || "normal"),
                [t.itemStyle && t.itemStyle[n], e.itemStyle[n].linkStyle]
              );
            },
            _initSerie: function (e, t) {
              (this._temperature = 1),
                (this._graph = e.data
                  ? this._getSerieGraphFromDataMatrix(e)
                  : this._getSerieGraphFromNodeLinks(e)),
                this._buildLinkShapes(e, t),
                this._buildNodeShapes(e, t);
              var n = e.roam === !0 || "move" === e.roam,
                i = e.roam === !0 || "scale" === e.roam;
              this.zr.modLayer(this.getZlevelBase(), {
                panable: n,
                zoomable: i,
              }),
                (this.query("markPoint.effect.show") ||
                  this.query("markLine.effect.show")) &&
                  this.zr.modLayer(p.EFFECT_ZLEVEL, {
                    panable: n,
                    zoomable: i,
                  }),
                this._initLayout(e),
                this._step();
            },
            _getSerieGraphFromDataMatrix: function (e) {
              for (var t = [], n = 0, i = [], a = 0; a < e.matrix.length; a++)
                i[a] = e.matrix[a].slice();
              for (var o = e.data || e.nodes, a = 0; a < o.length; a++) {
                var s = {},
                  l = o[a];
                for (var h in l) "name" === h ? (s.id = l.name) : (s[h] = l[h]);
                var V = this._getNodeCategory(e, l),
                  U = V ? V.name : l.name;
                if (
                  ((this.selectedMap[U] = this.isSelected(U)),
                  this.selectedMap[U])
                )
                  t.push(s), n++;
                else {
                  i.splice(n, 1);
                  for (var m = 0; m < i.length; m++) i[m].splice(n, 1);
                }
              }
              var p = r.fromMatrix(t, i, !0);
              return (
                p.eachNode(function (e, t) {
                  (e.layout = { size: e.data.value, mass: 0 }),
                    (e.rawIndex = t);
                }),
                p.eachEdge(function (e) {
                  e.layout = { weight: e.data.weight };
                }),
                p
              );
            },
            _getSerieGraphFromNodeLinks: function (e) {
              for (
                var t = new r(!0), n = e.data || e.nodes, i = 0, a = n.length;
                a > i;
                i++
              ) {
                var o = n[i];
                if (o && !o.ignore) {
                  var s = this._getNodeCategory(e, o),
                    l = s ? s.name : o.name;
                  if (
                    ((this.selectedMap[l] = this.isSelected(l)),
                    this.selectedMap[l])
                  ) {
                    var h = t.addNode(o.name, o);
                    h.rawIndex = i;
                  }
                }
              }
              for (var i = 0, a = e.links.length; a > i; i++) {
                var V = e.links[i],
                  U = V.source,
                  m = V.target;
                "number" == typeof U && ((U = n[U]), U && (U = U.name)),
                  "number" == typeof m && ((m = n[m]), m && (m = m.name));
                var p = t.addEdge(U, m, V);
                p && (p.rawIndex = i);
              }
              return (
                t.eachNode(function (e) {
                  var t = e.data.value;
                  if (null == t) {
                    t = 0;
                    for (var n = 0; n < e.edges.length; n++)
                      t += e.edges[n].data.weight || 0;
                  }
                  e.layout = { size: t, mass: 0 };
                }),
                t.eachEdge(function (e) {
                  e.layout = {
                    weight: null == e.data.weight ? 1 : e.data.weight,
                  };
                }),
                t
              );
            },
            _initLayout: function (e) {
              var t = this._graph,
                n = t.nodes.length,
                i = this.query(e, "minRadius"),
                a = this.query(e, "maxRadius");
              (this._steps = e.steps || 1),
                (this._layout.center = this.parseCenter(this.zr, e.center)),
                (this._layout.width = this.parsePercent(
                  e.size,
                  this.zr.getWidth()
                )),
                (this._layout.height = this.parsePercent(
                  e.size,
                  this.zr.getHeight()
                )),
                (this._layout.large = e.large),
                (this._layout.scaling = e.scaling),
                (this._layout.ratioScaling = e.ratioScaling),
                (this._layout.gravity = e.gravity),
                (this._layout.temperature = 1),
                (this._layout.coolDown = e.coolDown),
                (this._layout.preventNodeEdgeOverlap = e.preventOverlap),
                (this._layout.preventNodeOverlap = e.preventOverlap);
              for (var s = 1 / 0, r = -1 / 0, l = 0; n > l; l++) {
                var h = t.nodes[l];
                (r = Math.max(h.layout.size, r)),
                  (s = Math.min(h.layout.size, s));
              }
              for (var V = r - s, l = 0; n > l; l++) {
                var h = t.nodes[l];
                V > 0
                  ? ((h.layout.size = ((h.layout.size - s) * (a - i)) / V + i),
                    (h.layout.mass = h.layout.size / a))
                  : ((h.layout.size = (a - i) / 2), (h.layout.mass = 0.5));
              }
              for (var l = 0; n > l; l++) {
                var h = t.nodes[l];
                if ("undefined" != typeof this.__nodePositionMap[h.id])
                  (h.layout.position = y.create()),
                    y.copy(h.layout.position, this.__nodePositionMap[h.id]);
                else if ("undefined" != typeof h.data.initial)
                  (h.layout.position = y.create()),
                    y.copy(h.layout.position, h.data.initial);
                else {
                  var U = this._layout.center,
                    m = Math.min(this._layout.width, this._layout.height);
                  h.layout.position = o(U[0], U[1], 0.8 * m);
                }
                var p = h.shape.style,
                  d = h.layout.size;
                (p.width = p.width || 2 * d),
                  (p.height = p.height || 2 * d),
                  (p.x = -p.width / 2),
                  (p.y = -p.height / 2),
                  y.copy(h.shape.position, h.layout.position);
              }
              (n = t.edges.length), (r = -1 / 0);
              for (var l = 0; n > l; l++) {
                var c = t.edges[l];
                c.layout.weight > r && (r = c.layout.weight);
              }
              for (var l = 0; n > l; l++) {
                var c = t.edges[l];
                c.layout.weight /= r;
              }
              this._layout.init(t, e.useWorker);
            },
            _buildNodeShapes: function (e, t) {
              var n = this._graph,
                i = this.query(e, "categories");
              n.eachNode(function (n) {
                var a = this._getNodeCategory(e, n.data),
                  o = [n.data, a, e],
                  s = this._getNodeQueryTarget(e, n.data),
                  r = this._getNodeQueryTarget(e, n.data, "emphasis"),
                  l = new m({
                    style: {
                      x: 0,
                      y: 0,
                      color: this.deepQuery(s, "color"),
                      brushType: "both",
                      strokeColor:
                        this.deepQuery(s, "strokeColor") ||
                        this.deepQuery(s, "borderColor"),
                      lineWidth:
                        this.deepQuery(s, "lineWidth") ||
                        this.deepQuery(s, "borderWidth"),
                    },
                    highlightStyle: {
                      color: this.deepQuery(r, "color"),
                      strokeColor:
                        this.deepQuery(r, "strokeColor") ||
                        this.deepQuery(r, "borderColor"),
                      lineWidth:
                        this.deepQuery(r, "lineWidth") ||
                        this.deepQuery(r, "borderWidth"),
                    },
                    clickable: e.clickable,
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                  });
                l.style.color ||
                  (l.style.color = this.getColor(a ? a.name : n.id)),
                  (l.style.iconType = this.deepQuery(o, "symbol")),
                  (l.style.width = l.style.height =
                    2 * (this.deepQuery(o, "symbolSize") || 0)),
                  l.style.iconType.match("image") &&
                    ((l.style.image = l.style.iconType.replace(
                      new RegExp("^image:\\/\\/"),
                      ""
                    )),
                    (l = new U({
                      style: l.style,
                      highlightStyle: l.highlightStyle,
                      clickable: l.clickable,
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase(),
                    }))),
                  this.deepQuery(o, "itemStyle.normal.label.show") &&
                    ((l.style.text =
                      null == n.data.label ? n.id : n.data.label),
                    (l.style.textPosition = this.deepQuery(
                      o,
                      "itemStyle.normal.label.position"
                    )),
                    (l.style.textColor = this.deepQuery(
                      o,
                      "itemStyle.normal.label.textStyle.color"
                    )),
                    (l.style.textFont = this.getFont(
                      this.deepQuery(o, "itemStyle.normal.label.textStyle") ||
                        {}
                    ))),
                  this.deepQuery(o, "itemStyle.emphasis.label.show") &&
                    ((l.highlightStyle.textPosition = this.deepQuery(
                      o,
                      "itemStyle.emphasis.label.position"
                    )),
                    (l.highlightStyle.textColor = this.deepQuery(
                      o,
                      "itemStyle.emphasis.label.textStyle.color"
                    )),
                    (l.highlightStyle.textFont = this.getFont(
                      this.deepQuery(o, "itemStyle.emphasis.label.textStyle") ||
                        {}
                    ))),
                  this.deepQuery(o, "draggable") &&
                    (this.setCalculable(l),
                    (l.dragEnableTime = 0),
                    (l.draggable = !0),
                    (l.ondragstart = this.shapeHandler.ondragstart),
                    (l.ondragover = null));
                var h = "";
                if ("undefined" != typeof n.category) {
                  var a = i[n.category];
                  h = (a && a.name) || "";
                }
                d.pack(
                  l,
                  e,
                  t,
                  n.data,
                  n.rawIndex,
                  n.data.name || "",
                  n.category
                ),
                  this.shapeList.push(l),
                  this.zr.addShape(l),
                  (n.shape = l);
              }, this);
            },
            _buildLinkShapes: function (e, t) {
              for (var n = this._graph, i = n.edges.length, a = 0; i > a; a++) {
                var o = n.edges[a],
                  s = o.data,
                  r = o.node1,
                  l = o.node2,
                  U = this._getEdgeQueryTarget(e, s),
                  p = this.deepQuery(U, "type");
                e.linkSymbol && "none" !== e.linkSymbol && (p = "line");
                var u = "line" === p ? h : V,
                  y = new u({
                    style: { xStart: 0, yStart: 0, xEnd: 0, yEnd: 0 },
                    clickable: this.query(e, "clickable"),
                    highlightStyle: {},
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                  });
                if (
                  (c.merge(
                    y.style,
                    this.query(e, "itemStyle.normal.linkStyle"),
                    !0
                  ),
                  c.merge(
                    y.highlightStyle,
                    this.query(e, "itemStyle.emphasis.linkStyle"),
                    !0
                  ),
                  "undefined" != typeof s.itemStyle &&
                    (s.itemStyle.normal &&
                      c.merge(y.style, s.itemStyle.normal, !0),
                    s.itemStyle.emphasis &&
                      c.merge(y.highlightStyle, s.itemStyle.emphasis, !0)),
                  (y.style.lineWidth = y.style.lineWidth || y.style.width),
                  (y.style.strokeColor = y.style.strokeColor || y.style.color),
                  (y.highlightStyle.lineWidth =
                    y.highlightStyle.lineWidth || y.highlightStyle.width),
                  (y.highlightStyle.strokeColor =
                    y.highlightStyle.strokeColor || y.highlightStyle.color),
                  d.pack(
                    y,
                    e,
                    t,
                    o.data,
                    null == o.rawIndex ? a : o.rawIndex,
                    o.data.name || r.id + " - " + l.id,
                    r.id,
                    l.id
                  ),
                  this.shapeList.push(y),
                  this.zr.addShape(y),
                  (o.shape = y),
                  e.linkSymbol && "none" !== e.linkSymbol)
                ) {
                  var b = new m({
                    style: {
                      x: -5,
                      y: 0,
                      width: e.linkSymbolSize[0],
                      height: e.linkSymbolSize[1],
                      iconType: e.linkSymbol,
                      brushType: "fill",
                      color: y.style.strokeColor,
                    },
                    highlightStyle: { brushType: "fill" },
                    position: [0, 0],
                    rotation: 0,
                  });
                  (y._symbolShape = b),
                    this.shapeList.push(b),
                    this.zr.addShape(b);
                }
              }
            },
            _updateLinkShapes: function () {
              for (
                var e = y.create(), t = this._graph.edges, n = 0, i = t.length;
                i > n;
                n++
              ) {
                var a = t[n],
                  o = a.node1.shape,
                  s = a.node2.shape,
                  r = o.position,
                  l = s.position;
                if (
                  ((a.shape.style.xStart = r[0]),
                  (a.shape.style.yStart = r[1]),
                  (a.shape.style.xEnd = l[0]),
                  (a.shape.style.yEnd = l[1]),
                  "bezier-curve" === a.shape.type &&
                    ((a.shape.style.cpX1 =
                      (r[0] + l[0]) / 2 - (l[1] - r[1]) / 4),
                    (a.shape.style.cpY1 =
                      (r[1] + l[1]) / 2 - (r[0] - l[0]) / 4)),
                  a.shape.modSelf(),
                  a.shape._symbolShape)
                ) {
                  var h = a.shape._symbolShape;
                  y.copy(h.position, s.position),
                    y.sub(e, o.position, s.position),
                    y.normalize(e, e),
                    y.scaleAndAdd(
                      h.position,
                      h.position,
                      e,
                      s.style.width / 2 + 2
                    );
                  var V = Math.atan2(e[1], e[0]);
                  (h.rotation = Math.PI / 2 - V), h.modSelf();
                }
              }
            },
            _syncNodePositions: function () {
              for (var e = this._graph, t = 0; t < e.nodes.length; t++) {
                var n = e.nodes[t],
                  i = n.layout.position,
                  a = n.data,
                  o = n.shape,
                  s = o.fixed || a.fixX,
                  r = o.fixed || a.fixY;
                s === !0 ? (s = 1) : isNaN(s) && (s = 0),
                  r === !0 ? (r = 1) : isNaN(r) && (r = 0),
                  (o.position[0] += (i[0] - o.position[0]) * (1 - s)),
                  (o.position[1] += (i[1] - o.position[1]) * (1 - r)),
                  y.copy(i, o.position);
                var l = a.name;
                if (l) {
                  var h = this.__nodePositionMap[l];
                  h || (h = this.__nodePositionMap[l] = y.create()),
                    y.copy(h, i);
                }
                o.modSelf();
              }
            },
            _step: function () {
              this._syncNodePositions(),
                this._updateLinkShapes(),
                this.zr.refreshNextFrame(),
                this._layout.temperature > 0.01
                  ? this._layout.step(this._steps)
                  : this.messageCenter.dispatch(
                      p.EVENT.FORCE_LAYOUT_END,
                      {},
                      {},
                      this.myChart
                    );
            },
            refresh: function (e) {
              if (
                (e && ((this.option = e), (this.series = this.option.series)),
                (this.legend = this.component.legend),
                this.legend)
              )
                (this.getColor = function (e) {
                  return this.legend.getColor(e);
                }),
                  (this.isSelected = function (e) {
                    return this.legend.isSelected(e);
                  });
              else {
                var t = {},
                  n = 0;
                (this.getColor = function (e) {
                  return t[e]
                    ? t[e]
                    : (t[e] || (t[e] = this.zr.getColor(n++)), t[e]);
                }),
                  (this.isSelected = function () {
                    return !0;
                  });
              }
              this._init();
            },
            dispose: function () {
              this.clear(),
                (this.shapeList = null),
                (this.effectList = null),
                this._layout.dispose(),
                (this._layout = null),
                (this.__nodePositionMap = {});
            },
            getPosition: function () {
              var e = [];
              return (
                this._graph.eachNode(function (t) {
                  t.layout &&
                    e.push({
                      name: t.data.name,
                      position: Array.prototype.slice.call(t.layout.position),
                    });
                }),
                e
              );
            },
          }),
          c.inherits(t, s),
          e("../chart").define("force", t),
          t
        );
      }
    ),
    n(
      "echarts/layout/Force",
      ["require", "./forceLayoutWorker", "zrender/tool/vector"],
      function (e) {
        function t() {
          if ("undefined" != typeof Worker && "undefined" != typeof Blob)
            try {
              var e = new Blob([i.getWorkerCode()]);
              n = window.URL.createObjectURL(e);
            } catch (t) {
              n = "";
            }
          return n;
        }
        var n,
          i = e("./forceLayoutWorker"),
          a = e("zrender/tool/vector"),
          o =
            window.requestAnimationFrame ||
            window.msRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            function (e) {
              setTimeout(e, 16);
            },
          s = "undefined" == typeof Float32Array ? Array : Float32Array,
          r = function (e) {
            "undefined" == typeof n && t(),
              (e = e || {}),
              (this.width = e.width || 500),
              (this.height = e.height || 500),
              (this.center = e.center || [this.width / 2, this.height / 2]),
              (this.ratioScaling = e.ratioScaling || !1),
              (this.scaling = e.scaling || 1),
              (this.gravity = "undefined" != typeof e.gravity ? e.gravity : 1),
              (this.large = e.large || !1),
              (this.preventNodeOverlap = e.preventNodeOverlap || !1),
              (this.preventNodeEdgeOverlap = e.preventNodeEdgeOverlap || !1),
              (this.maxSpeedIncrease = e.maxSpeedIncrease || 1),
              (this.onupdate = e.onupdate || function () {}),
              (this.temperature = e.temperature || 1),
              (this.coolDown = e.coolDown || 0.99),
              (this._layout = null),
              (this._layoutWorker = null);
            var i = this,
              a = this._$onupdate;
            this._$onupdate = function (e) {
              a.call(i, e);
            };
          };
        return (
          (r.prototype.updateConfig = function () {
            var e = this.width,
              t = this.height,
              n = Math.min(e, t),
              i = {
                center: this.center,
                width: this.ratioScaling ? e : n,
                height: this.ratioScaling ? t : n,
                scaling: this.scaling || 1,
                gravity: this.gravity || 1,
                barnesHutOptimize: this.large,
                preventNodeOverlap: this.preventNodeOverlap,
                preventNodeEdgeOverlap: this.preventNodeEdgeOverlap,
                maxSpeedIncrease: this.maxSpeedIncrease,
              };
            if (this._layoutWorker)
              this._layoutWorker.postMessage({
                cmd: "updateConfig",
                config: i,
              });
            else for (var a in i) this._layout[a] = i[a];
          }),
          (r.prototype.init = function (e, t) {
            if (n && t)
              try {
                this._layoutWorker ||
                  ((this._layoutWorker = new Worker(n)),
                  (this._layoutWorker.onmessage = this._$onupdate)),
                  (this._layout = null);
              } catch (a) {
                (this._layoutWorker = null),
                  this._layout || (this._layout = new i());
              }
            else
              this._layout || (this._layout = new i()),
                this._layoutWorker &&
                  (this._layoutWorker.terminate(), (this._layoutWorker = null));
            (this.temperature = 1), (this.graph = e);
            for (
              var o = e.nodes.length,
                r = new s(2 * o),
                l = new s(o),
                h = new s(o),
                V = 0;
              o > V;
              V++
            ) {
              var U = e.nodes[V];
              (r[2 * V] = U.layout.position[0]),
                (r[2 * V + 1] = U.layout.position[1]),
                (l[V] =
                  "undefined" == typeof U.layout.mass ? 1 : U.layout.mass),
                (h[V] =
                  "undefined" == typeof U.layout.size ? 1 : U.layout.size),
                (U.layout.__index = V);
            }
            o = e.edges.length;
            for (var m = new s(2 * o), p = new s(o), V = 0; o > V; V++) {
              var d = e.edges[V];
              (m[2 * V] = d.node1.layout.__index),
                (m[2 * V + 1] = d.node2.layout.__index),
                (p[V] = d.layout.weight || 1);
            }
            this._layoutWorker
              ? this._layoutWorker.postMessage({
                  cmd: "init",
                  nodesPosition: r,
                  nodesMass: l,
                  nodesSize: h,
                  edges: m,
                  edgesWeight: p,
                })
              : (this._layout.initNodes(r, l, h), this._layout.initEdges(m, p)),
              this.updateConfig();
          }),
          (r.prototype.step = function (e) {
            var t = this.graph.nodes;
            if (this._layoutWorker) {
              for (var n = new s(2 * t.length), i = 0; i < t.length; i++) {
                var r = t[i];
                (n[2 * i] = r.layout.position[0]),
                  (n[2 * i + 1] = r.layout.position[1]);
              }
              this._layoutWorker.postMessage(n.buffer, [n.buffer]),
                this._layoutWorker.postMessage({
                  cmd: "update",
                  steps: e,
                  temperature: this.temperature,
                  coolDown: this.coolDown,
                });
              for (var i = 0; e > i; i++) this.temperature *= this.coolDown;
            } else {
              o(this._$onupdate);
              for (var i = 0; i < t.length; i++) {
                var r = t[i];
                a.copy(this._layout.nodes[i].position, r.layout.position);
              }
              for (var i = 0; e > i; i++)
                (this._layout.temperature = this.temperature),
                  this._layout.update(),
                  (this.temperature *= this.coolDown);
            }
          }),
          (r.prototype._$onupdate = function (e) {
            if (this._layoutWorker) {
              for (
                var t = new Float32Array(e.data), n = 0;
                n < this.graph.nodes.length;
                n++
              ) {
                var i = this.graph.nodes[n];
                (i.layout.position[0] = t[2 * n]),
                  (i.layout.position[1] = t[2 * n + 1]);
              }
              this.onupdate && this.onupdate();
            } else if (this._layout) {
              for (var n = 0; n < this.graph.nodes.length; n++) {
                var i = this.graph.nodes[n];
                a.copy(i.layout.position, this._layout.nodes[n].position);
              }
              this.onupdate && this.onupdate();
            }
          }),
          (r.prototype.dispose = function () {
            this._layoutWorker && this._layoutWorker.terminate(),
              (this._layoutWorker = null),
              (this._layout = null);
          }),
          r
        );
      }
    ),
    n(
      "echarts/layout/forceLayoutWorker",
      ["require", "zrender/tool/vector"],
      function o(e) {
        "use strict";
        function t() {
          (this.subRegions = []),
            (this.nSubRegions = 0),
            (this.node = null),
            (this.mass = 0),
            (this.centerOfMass = null),
            (this.bbox = new l(4)),
            (this.size = 0);
        }
        function n() {
          (this.position = s.create()),
            (this.force = s.create()),
            (this.forcePrev = s.create()),
            (this.speed = s.create()),
            (this.speedPrev = s.create()),
            (this.mass = 1),
            (this.inDegree = 0),
            (this.outDegree = 0);
        }
        function i(e, t) {
          (this.node1 = e), (this.node2 = t), (this.weight = 1);
        }
        function a() {
          (this.barnesHutOptimize = !1),
            (this.barnesHutTheta = 1.5),
            (this.repulsionByDegree = !1),
            (this.preventNodeOverlap = !1),
            (this.preventNodeEdgeOverlap = !1),
            (this.strongGravity = !0),
            (this.gravity = 1),
            (this.scaling = 1),
            (this.edgeWeightInfluence = 1),
            (this.center = [0, 0]),
            (this.width = 500),
            (this.height = 500),
            (this.maxSpeedIncrease = 1),
            (this.nodes = []),
            (this.edges = []),
            (this.bbox = new l(4)),
            (this._rootRegion = new t()),
            (this._rootRegion.centerOfMass = s.create()),
            (this._massArr = null),
            (this._k = 0);
        }
        var s,
          r = "undefined" == typeof window && "undefined" == typeof e;
        s = r
          ? {
              create: function (e, t) {
                var n = new Float32Array(2);
                return (n[0] = e || 0), (n[1] = t || 0), n;
              },
              dist: function (e, t) {
                var n = t[0] - e[0],
                  i = t[1] - e[1];
                return Math.sqrt(n * n + i * i);
              },
              len: function (e) {
                var t = e[0],
                  n = e[1];
                return Math.sqrt(t * t + n * n);
              },
              scaleAndAdd: function (e, t, n, i) {
                return (e[0] = t[0] + n[0] * i), (e[1] = t[1] + n[1] * i), e;
              },
              scale: function (e, t, n) {
                return (e[0] = t[0] * n), (e[1] = t[1] * n), e;
              },
              add: function (e, t, n) {
                return (e[0] = t[0] + n[0]), (e[1] = t[1] + n[1]), e;
              },
              sub: function (e, t, n) {
                return (e[0] = t[0] - n[0]), (e[1] = t[1] - n[1]), e;
              },
              dot: function (e, t) {
                return e[0] * t[0] + e[1] * t[1];
              },
              normalize: function (e, t) {
                var n = t[0],
                  i = t[1],
                  a = n * n + i * i;
                return (
                  a > 0 &&
                    ((a = 1 / Math.sqrt(a)),
                    (e[0] = t[0] * a),
                    (e[1] = t[1] * a)),
                  e
                );
              },
              negate: function (e, t) {
                return (e[0] = -t[0]), (e[1] = -t[1]), e;
              },
              copy: function (e, t) {
                return (e[0] = t[0]), (e[1] = t[1]), e;
              },
              set: function (e, t, n) {
                return (e[0] = t), (e[1] = n), e;
              },
            }
          : e("zrender/tool/vector");
        var l = "undefined" == typeof Float32Array ? Array : Float32Array;
        if (
          ((t.prototype.beforeUpdate = function () {
            for (var e = 0; e < this.nSubRegions; e++)
              this.subRegions[e].beforeUpdate();
            (this.mass = 0),
              this.centerOfMass &&
                ((this.centerOfMass[0] = 0), (this.centerOfMass[1] = 0)),
              (this.nSubRegions = 0),
              (this.node = null);
          }),
          (t.prototype.afterUpdate = function () {
            this.subRegions.length = this.nSubRegions;
            for (var e = 0; e < this.nSubRegions; e++)
              this.subRegions[e].afterUpdate();
          }),
          (t.prototype.addNode = function (e) {
            if (0 === this.nSubRegions) {
              if (null == this.node) return void (this.node = e);
              this._addNodeToSubRegion(this.node), (this.node = null);
            }
            this._addNodeToSubRegion(e), this._updateCenterOfMass(e);
          }),
          (t.prototype.findSubRegion = function (e, t) {
            for (var n = 0; n < this.nSubRegions; n++) {
              var i = this.subRegions[n];
              if (i.contain(e, t)) return i;
            }
          }),
          (t.prototype.contain = function (e, t) {
            return (
              this.bbox[0] <= e &&
              this.bbox[2] >= e &&
              this.bbox[1] <= t &&
              this.bbox[3] >= t
            );
          }),
          (t.prototype.setBBox = function (e, t, n, i) {
            (this.bbox[0] = e),
              (this.bbox[1] = t),
              (this.bbox[2] = n),
              (this.bbox[3] = i),
              (this.size = (n - e + i - t) / 2);
          }),
          (t.prototype._newSubRegion = function () {
            var e = this.subRegions[this.nSubRegions];
            return (
              e || ((e = new t()), (this.subRegions[this.nSubRegions] = e)),
              this.nSubRegions++,
              e
            );
          }),
          (t.prototype._addNodeToSubRegion = function (e) {
            var t = this.findSubRegion(e.position[0], e.position[1]),
              n = this.bbox;
            if (!t) {
              var i = (n[0] + n[2]) / 2,
                a = (n[1] + n[3]) / 2,
                o = (n[2] - n[0]) / 2,
                s = (n[3] - n[1]) / 2,
                r = e.position[0] >= i ? 1 : 0,
                l = e.position[1] >= a ? 1 : 0,
                t = this._newSubRegion();
              t.setBBox(
                r * o + n[0],
                l * s + n[1],
                (r + 1) * o + n[0],
                (l + 1) * s + n[1]
              );
            }
            t.addNode(e);
          }),
          (t.prototype._updateCenterOfMass = function (e) {
            null == this.centerOfMass && (this.centerOfMass = s.create());
            var t = this.centerOfMass[0] * this.mass,
              n = this.centerOfMass[1] * this.mass;
            (t += e.position[0] * e.mass),
              (n += e.position[1] * e.mass),
              (this.mass += e.mass),
              (this.centerOfMass[0] = t / this.mass),
              (this.centerOfMass[1] = n / this.mass);
          }),
          (a.prototype.nodeToNodeRepulsionFactor = function (e, t, n) {
            return (n * n * e) / t;
          }),
          (a.prototype.edgeToNodeRepulsionFactor = function (e, t, n) {
            return (n * e) / t;
          }),
          (a.prototype.attractionFactor = function (e, t, n) {
            return (e * t) / n;
          }),
          (a.prototype.initNodes = function (e, t, i) {
            this.temperature = 1;
            var a = e.length / 2;
            this.nodes.length = 0;
            for (var o = "undefined" != typeof i, s = 0; a > s; s++) {
              var r = new n();
              (r.position[0] = e[2 * s]),
                (r.position[1] = e[2 * s + 1]),
                (r.mass = t[s]),
                o && (r.size = i[s]),
                this.nodes.push(r);
            }
            (this._massArr = t), o && (this._sizeArr = i);
          }),
          (a.prototype.initEdges = function (e, t) {
            var n = e.length / 2;
            this.edges.length = 0;
            for (var a = "undefined" != typeof t, o = 0; n > o; o++) {
              var s = e[2 * o],
                r = e[2 * o + 1],
                l = this.nodes[s],
                h = this.nodes[r];
              if (l && h) {
                l.outDegree++, h.inDegree++;
                var V = new i(l, h);
                a && (V.weight = t[o]), this.edges.push(V);
              }
            }
          }),
          (a.prototype.update = function () {
            var e = this.nodes.length;
            if (
              (this.updateBBox(),
              (this._k =
                0.4 * this.scaling * Math.sqrt((this.width * this.height) / e)),
              this.barnesHutOptimize)
            ) {
              this._rootRegion.setBBox(
                this.bbox[0],
                this.bbox[1],
                this.bbox[2],
                this.bbox[3]
              ),
                this._rootRegion.beforeUpdate();
              for (var t = 0; e > t; t++)
                this._rootRegion.addNode(this.nodes[t]);
              this._rootRegion.afterUpdate();
            } else {
              var n = 0,
                i = this._rootRegion.centerOfMass;
              s.set(i, 0, 0);
              for (var t = 0; e > t; t++) {
                var a = this.nodes[t];
                (n += a.mass), s.scaleAndAdd(i, i, a.position, a.mass);
              }
              n > 0 && s.scale(i, i, 1 / n);
            }
            this.updateForce(), this.updatePosition();
          }),
          (a.prototype.updateForce = function () {
            for (var e = this.nodes.length, t = 0; e > t; t++) {
              var n = this.nodes[t];
              s.copy(n.forcePrev, n.force),
                s.copy(n.speedPrev, n.speed),
                s.set(n.force, 0, 0);
            }
            this.updateNodeNodeForce(),
              this.gravity > 0 && this.updateGravityForce(),
              this.updateEdgeForce(),
              this.preventNodeEdgeOverlap && this.updateNodeEdgeForce();
          }),
          (a.prototype.updatePosition = function () {
            for (var e = this.nodes.length, t = s.create(), n = 0; e > n; n++) {
              var i = this.nodes[n],
                a = i.speed;
              s.scale(i.force, i.force, 1 / 30);
              var o = s.len(i.force) + 0.1,
                r = Math.min(o, 500) / o;
              s.scale(i.force, i.force, r),
                s.add(a, a, i.force),
                s.scale(a, a, this.temperature),
                s.sub(t, a, i.speedPrev);
              var l = s.len(t);
              if (l > 0) {
                s.scale(t, t, 1 / l);
                var h = s.len(i.speedPrev);
                h > 0 &&
                  ((l = Math.min(l / h, this.maxSpeedIncrease) * h),
                  s.scaleAndAdd(a, i.speedPrev, t, l));
              }
              var V = s.len(a),
                r = Math.min(V, 100) / (V + 0.1);
              s.scale(a, a, r), s.add(i.position, i.position, a);
            }
          }),
          (a.prototype.updateNodeNodeForce = function () {
            for (var e = this.nodes.length, t = 0; e > t; t++) {
              var n = this.nodes[t];
              if (this.barnesHutOptimize)
                this.applyRegionToNodeRepulsion(this._rootRegion, n);
              else
                for (var i = t + 1; e > i; i++) {
                  var a = this.nodes[i];
                  this.applyNodeToNodeRepulsion(n, a, !1);
                }
            }
          }),
          (a.prototype.updateGravityForce = function () {
            for (var e = 0; e < this.nodes.length; e++)
              this.applyNodeGravity(this.nodes[e]);
          }),
          (a.prototype.updateEdgeForce = function () {
            for (var e = 0; e < this.edges.length; e++)
              this.applyEdgeAttraction(this.edges[e]);
          }),
          (a.prototype.updateNodeEdgeForce = function () {
            for (var e = 0; e < this.nodes.length; e++)
              for (var t = 0; t < this.edges.length; t++)
                this.applyEdgeToNodeRepulsion(this.edges[t], this.nodes[e]);
          }),
          (a.prototype.applyRegionToNodeRepulsion = (function () {
            var e = s.create();
            return function (t, n) {
              if (t.node) this.applyNodeToNodeRepulsion(t.node, n, !0);
              else {
                if (0 === t.mass && 0 === n.mass) return;
                s.sub(e, n.position, t.centerOfMass);
                var i = e[0] * e[0] + e[1] * e[1];
                if (i > this.barnesHutTheta * t.size * t.size) {
                  var a = (this._k * this._k * (n.mass + t.mass)) / (i + 1);
                  s.scaleAndAdd(n.force, n.force, e, 2 * a);
                } else
                  for (var o = 0; o < t.nSubRegions; o++)
                    this.applyRegionToNodeRepulsion(t.subRegions[o], n);
              }
            };
          })()),
          (a.prototype.applyNodeToNodeRepulsion = (function () {
            var e = s.create();
            return function (t, n, i) {
              if (t !== n && (0 !== t.mass || 0 !== n.mass)) {
                s.sub(e, t.position, n.position);
                var a = e[0] * e[0] + e[1] * e[1];
                if (0 !== a) {
                  var o,
                    r = t.mass + n.mass,
                    l = Math.sqrt(a);
                  s.scale(e, e, 1 / l),
                    this.preventNodeOverlap
                      ? ((l = l - t.size - n.size),
                        l > 0
                          ? (o = this.nodeToNodeRepulsionFactor(r, l, this._k))
                          : 0 >= l && (o = this._k * this._k * 10 * r))
                      : (o = this.nodeToNodeRepulsionFactor(r, l, this._k)),
                    i || s.scaleAndAdd(t.force, t.force, e, 2 * o),
                    s.scaleAndAdd(n.force, n.force, e, 2 * -o);
                }
              }
            };
          })()),
          (a.prototype.applyEdgeAttraction = (function () {
            var e = s.create();
            return function (t) {
              var n = t.node1,
                i = t.node2;
              s.sub(e, n.position, i.position);
              var a,
                o = s.len(e);
              a =
                0 === this.edgeWeightInfluence
                  ? 1
                  : 1 == this.edgeWeightInfluence
                  ? t.weight
                  : Math.pow(t.weight, this.edgeWeightInfluence);
              var r;
              if (
                !(this.preventOverlap && ((o = o - n.size - i.size), 0 >= o))
              ) {
                var r = this.attractionFactor(a, o, this._k);
                s.scaleAndAdd(n.force, n.force, e, -r),
                  s.scaleAndAdd(i.force, i.force, e, r);
              }
            };
          })()),
          (a.prototype.applyNodeGravity = (function () {
            var e = s.create();
            return function (t) {
              s.sub(e, this.center, t.position),
                this.width > this.height
                  ? (e[1] *= this.width / this.height)
                  : (e[0] *= this.height / this.width);
              var n = s.len(e) / 100;
              this.strongGravity
                ? s.scaleAndAdd(t.force, t.force, e, n * this.gravity * t.mass)
                : s.scaleAndAdd(
                    t.force,
                    t.force,
                    e,
                    (this.gravity * t.mass) / (n + 1)
                  );
            };
          })()),
          (a.prototype.applyEdgeToNodeRepulsion = (function () {
            var e = s.create(),
              t = s.create(),
              n = s.create();
            return function (i, a) {
              var o = i.node1,
                r = i.node2;
              if (o !== a && r !== a) {
                s.sub(e, r.position, o.position),
                  s.sub(t, a.position, o.position);
                var l = s.len(e);
                s.scale(e, e, 1 / l);
                var h = s.dot(e, t);
                if (!(0 > h || h > l)) {
                  s.scaleAndAdd(n, o.position, e, h);
                  var V = s.dist(n, a.position) - a.size,
                    U = this.edgeToNodeRepulsionFactor(
                      a.mass,
                      Math.max(V, 0.1),
                      100
                    );
                  s.sub(e, a.position, n),
                    s.normalize(e, e),
                    s.scaleAndAdd(a.force, a.force, e, U),
                    s.scaleAndAdd(o.force, o.force, e, -U),
                    s.scaleAndAdd(r.force, r.force, e, -U);
                }
              }
            };
          })()),
          (a.prototype.updateBBox = function () {
            for (
              var e = 1 / 0, t = 1 / 0, n = -1 / 0, i = -1 / 0, a = 0;
              a < this.nodes.length;
              a++
            ) {
              var o = this.nodes[a].position;
              (e = Math.min(e, o[0])),
                (t = Math.min(t, o[1])),
                (n = Math.max(n, o[0])),
                (i = Math.max(i, o[1]));
            }
            (this.bbox[0] = e),
              (this.bbox[1] = t),
              (this.bbox[2] = n),
              (this.bbox[3] = i);
          }),
          (a.getWorkerCode = function () {
            var e = o.toString();
            return e.slice(e.indexOf("{") + 1, e.lastIndexOf("return"));
          }),
          r)
        ) {
          var h = null;
          self.onmessage = function (e) {
            if (e.data instanceof ArrayBuffer) {
              if (!h) return;
              for (
                var t = new Float32Array(e.data), n = t.length / 2, i = 0;
                n > i;
                i++
              ) {
                var o = h.nodes[i];
                (o.position[0] = t[2 * i]), (o.position[1] = t[2 * i + 1]);
              }
            } else
              switch (e.data.cmd) {
                case "init":
                  h || (h = new a()),
                    h.initNodes(
                      e.data.nodesPosition,
                      e.data.nodesMass,
                      e.data.nodesSize
                    ),
                    h.initEdges(e.data.edges, e.data.edgesWeight);
                  break;
                case "updateConfig":
                  if (h) for (var s in e.data.config) h[s] = e.data.config[s];
                  break;
                case "update":
                  var r = e.data.steps;
                  if (h) {
                    var n = h.nodes.length,
                      t = new Float32Array(2 * n);
                    h.temperature = e.data.temperature;
                    for (var i = 0; r > i; i++)
                      h.update(), (h.temperature *= e.data.coolDown);
                    for (var i = 0; n > i; i++) {
                      var o = h.nodes[i];
                      (t[2 * i] = o.position[0]),
                        (t[2 * i + 1] = o.position[1]);
                    }
                    self.postMessage(t.buffer, [t.buffer]);
                  } else {
                    var l = new Float32Array();
                    self.postMessage(l.buffer, [l.buffer]);
                  }
              }
          };
        }
        return a;
      }
    ),
    n(
      "echarts/chart/map",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Path",
        "zrender/shape/Circle",
        "zrender/shape/Rectangle",
        "zrender/shape/Line",
        "zrender/shape/Polygon",
        "zrender/shape/Ellipse",
        "../component/dataRange",
        "../component/roamController",
        "../config",
        "../util/ecData",
        "zrender/tool/util",
        "zrender/config",
        "zrender/tool/event",
        "../util/mapData/params",
        "../util/mapData/textFixed",
        "../util/mapData/geoCoord",
        "../util/projection/svg",
        "../util/projection/normal",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o);
          var s = this;
          (s._onmousewheel = function (e) {
            return s.__onmousewheel(e);
          }),
            (s._onmousedown = function (e) {
              return s.__onmousedown(e);
            }),
            (s._onmousemove = function (e) {
              return s.__onmousemove(e);
            }),
            (s._onmouseup = function (e) {
              return s.__onmouseup(e);
            }),
            (s._onroamcontroller = function (e) {
              return s.__onroamcontroller(e);
            }),
            (s._ondrhoverlink = function (e) {
              return s.__ondrhoverlink(e);
            }),
            (this._isAlive = !0),
            (this._selectedMode = {}),
            (this._activeMapType = {}),
            (this._clickable = {}),
            (this._hoverable = {}),
            (this._showLegendSymbol = {}),
            (this._selected = {}),
            (this._mapTypeMap = {}),
            (this._mapDataMap = {}),
            (this._nameMap = {}),
            (this._specialArea = {}),
            this._refreshDelayTicket,
            this._mapDataRequireCounter,
            (this._markAnimation = !1),
            (this._hoverLinkMap = {}),
            (this._roamMap = {}),
            (this._scaleLimitMap = {}),
            this._mx,
            this._my,
            this._mousedown,
            this._justMove,
            this._curMapType,
            this.refresh(a),
            this.zr.on(p.EVENT.MOUSEWHEEL, this._onmousewheel),
            this.zr.on(p.EVENT.MOUSEDOWN, this._onmousedown),
            t.bind(V.EVENT.ROAMCONTROLLER, this._onroamcontroller),
            t.bind(V.EVENT.DATA_RANGE_HOVERLINK, this._ondrhoverlink);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Path"),
          o = e("zrender/shape/Circle"),
          s = e("zrender/shape/Rectangle"),
          r = e("zrender/shape/Line"),
          l = e("zrender/shape/Polygon"),
          h = e("zrender/shape/Ellipse");
        e("../component/dataRange"), e("../component/roamController");
        var V = e("../config");
        V.map = {
          zlevel: 0,
          z: 2,
          mapType: "china",
          mapValuePrecision: 0,
          showLegendSymbol: !0,
          dataRangeHoverLink: !0,
          hoverable: !0,
          clickable: !0,
          itemStyle: {
            normal: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              areaStyle: { color: "#ccc" },
              label: { show: !1, textStyle: { color: "rgb(139,69,19)" } },
            },
            emphasis: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              areaStyle: { color: "rgba(255,215,0,0.8)" },
              label: { show: !1, textStyle: { color: "rgb(100,0,0)" } },
            },
          },
        };
        var U = e("../util/ecData"),
          m = e("zrender/tool/util"),
          p = e("zrender/config"),
          d = e("zrender/tool/event"),
          c = e("../util/mapData/params").params,
          u = e("../util/mapData/textFixed"),
          y = e("../util/mapData/geoCoord");
        return (
          (t.prototype = {
            type: V.CHART_TYPE_MAP,
            _buildShape: function () {
              var e = this.series;
              (this.selectedMap = {}), (this._activeMapType = {});
              for (
                var t,
                  n,
                  i,
                  a,
                  o = this.component.legend,
                  s = {},
                  r = {},
                  l = {},
                  h = {},
                  U = 0,
                  p = e.length;
                p > U;
                U++
              )
                if (
                  e[U].type == V.CHART_TYPE_MAP &&
                  ((e[U] = this.reformOption(e[U])),
                  (n = e[U].mapType),
                  (r[n] = r[n] || {}),
                  (r[n][U] = !0),
                  (l[n] = l[n] || e[U].mapValuePrecision),
                  (this._scaleLimitMap[n] = this._scaleLimitMap[n] || {}),
                  e[U].scaleLimit &&
                    m.merge(this._scaleLimitMap[n], e[U].scaleLimit, !0),
                  (this._roamMap[n] = e[U].roam || this._roamMap[n]),
                  (this._hoverLinkMap[n] =
                    e[U].dataRangeHoverLink || this._hoverLinkMap[n]),
                  (this._nameMap[n] = this._nameMap[n] || {}),
                  e[U].nameMap && m.merge(this._nameMap[n], e[U].nameMap, !0),
                  (this._activeMapType[n] = !0),
                  e[U].textFixed && m.merge(u, e[U].textFixed, !0),
                  e[U].geoCoord && m.merge(y, e[U].geoCoord, !0),
                  (this._selectedMode[n] =
                    this._selectedMode[n] || e[U].selectedMode),
                  (null == this._hoverable[n] || this._hoverable[n]) &&
                    (this._hoverable[n] = e[U].hoverable),
                  (null == this._clickable[n] || this._clickable[n]) &&
                    (this._clickable[n] = e[U].clickable),
                  (null == this._showLegendSymbol[n] ||
                    this._showLegendSymbol[n]) &&
                    (this._showLegendSymbol[n] = e[U].showLegendSymbol),
                  (h[n] = h[n] || e[U].mapValueCalculation),
                  (t = e[U].name),
                  (this.selectedMap[t] = o ? o.isSelected(t) : !0),
                  this.selectedMap[t])
                ) {
                  (s[n] = s[n] || {}), (i = e[U].data);
                  for (var d = 0, b = i.length; b > d; d++) {
                    (a = this._nameChange(n, i[d].name)),
                      (s[n][a] = s[n][a] || { seriesIndex: [] });
                    for (var g in i[d])
                      "value" != g
                        ? (s[n][a][g] = i[d][g])
                        : isNaN(i[d].value) ||
                          (null == s[n][a].value && (s[n][a].value = 0),
                          (s[n][a].value += i[d].value));
                    s[n][a].seriesIndex.push(U);
                  }
                }
              this._mapDataRequireCounter = 0;
              for (var k in s) this._mapDataRequireCounter++;
              this._clearSelected(),
                0 === this._mapDataRequireCounter &&
                  (this.clear(),
                  this.zr && this.zr.delShape(this.lastShapeList),
                  (this.lastShapeList = []));
              for (var k in s) {
                if (h[k] && "average" == h[k])
                  for (var b in s[k])
                    s[k][b].value =
                      (s[k][b].value / s[k][b].seriesIndex.length).toFixed(
                        l[k]
                      ) - 0;
                (this._mapDataMap[k] = this._mapDataMap[k] || {}),
                  this._mapDataMap[k].mapData
                    ? this._mapDataCallback(
                        k,
                        s[k],
                        r[k]
                      )(this._mapDataMap[k].mapData)
                    : c[k.replace(/\|.*/, "")].getGeoJson &&
                      ((this._specialArea[k] =
                        c[k.replace(/\|.*/, "")].specialArea ||
                        this._specialArea[k]),
                      c[k.replace(/\|.*/, "")].getGeoJson(
                        this._mapDataCallback(k, s[k], r[k])
                      ));
              }
            },
            _mapDataCallback: function (t, n, i) {
              var a = this;
              return function (o) {
                a._isAlive &&
                  null != a._activeMapType[t] &&
                  (-1 != t.indexOf("|") && (o = a._getSubMapData(t, o)),
                  (a._mapDataMap[t].mapData = o),
                  o.firstChild
                    ? ((a._mapDataMap[t].rate = 1),
                      (a._mapDataMap[t].projection = e(
                        "../util/projection/svg"
                      )))
                    : ((a._mapDataMap[t].rate = 0.75),
                      (a._mapDataMap[t].projection = e(
                        "../util/projection/normal"
                      ))),
                  a._buildMap(t, a._getProjectionData(t, o, i), n, i),
                  a._buildMark(t, i),
                  --a._mapDataRequireCounter <= 0 &&
                    (a.addShapeList(), a.zr.refreshNextFrame()));
              };
            },
            _clearSelected: function () {
              for (var e in this._selected)
                this._activeMapType[this._mapTypeMap[e]] ||
                  (delete this._selected[e], delete this._mapTypeMap[e]);
            },
            _getSubMapData: function (e, t) {
              for (
                var n = e.replace(/^.*\|/, ""),
                  i = t.features,
                  a = 0,
                  o = i.length;
                o > a;
                a++
              )
                if (i[a].properties && i[a].properties.name == n) {
                  (i = i[a]),
                    "United States of America" == n &&
                      i.geometry.coordinates.length > 1 &&
                      (i = {
                        geometry: {
                          coordinates: i.geometry.coordinates.slice(5, 6),
                          type: i.geometry.type,
                        },
                        id: i.id,
                        properties: i.properties,
                        type: i.type,
                      });
                  break;
                }
              return { type: "FeatureCollection", features: [i] };
            },
            _getProjectionData: function (e, t, n) {
              var i,
                a = this._mapDataMap[e].projection,
                o = [],
                s =
                  this._mapDataMap[e].bbox ||
                  a.getBbox(t, this._specialArea[e]);
              i = this._mapDataMap[e].hasRoam
                ? this._mapDataMap[e].transform
                : this._getTransform(s, n, this._mapDataMap[e].rate);
              var r,
                l = this._mapDataMap[e].lastTransform || { scale: {} };
              i.left != l.left ||
              i.top != l.top ||
              i.scale.x != l.scale.x ||
              i.scale.y != l.scale.y
                ? ((r = a.geoJson2Path(t, i, this._specialArea[e])),
                  (l = m.clone(i)))
                : ((i = this._mapDataMap[e].transform),
                  (r = this._mapDataMap[e].pathArray)),
                (this._mapDataMap[e].bbox = s),
                (this._mapDataMap[e].transform = i),
                (this._mapDataMap[e].lastTransform = l),
                (this._mapDataMap[e].pathArray = r);
              for (var h = [i.left, i.top], V = 0, U = r.length; U > V; V++)
                o.push(this._getSingleProvince(e, r[V], h));
              if (this._specialArea[e])
                for (var p in this._specialArea[e])
                  o.push(
                    this._getSpecialProjectionData(
                      e,
                      t,
                      p,
                      this._specialArea[e][p],
                      h
                    )
                  );
              if ("china" == e) {
                var d = this.geo2pos(
                    e,
                    y["南海诸岛"] || c["南海诸岛"].textCoord
                  ),
                  b = i.scale.x / 10.5,
                  g = [32 * b + d[0], 83 * b + d[1]];
                u["南海诸岛"] &&
                  ((g[0] += u["南海诸岛"][0]), (g[1] += u["南海诸岛"][1])),
                  o.push({
                    name: this._nameChange(e, "南海诸岛"),
                    path: c["南海诸岛"].getPath(d, b),
                    position: h,
                    textX: g[0],
                    textY: g[1],
                  });
              }
              return o;
            },
            _getSpecialProjectionData: function (t, n, i, a, o) {
              n = this._getSubMapData("x|" + i, n);
              var s = e("../util/projection/normal"),
                r = s.getBbox(n),
                l = this.geo2pos(t, [a.left, a.top]),
                h = this.geo2pos(t, [a.left + a.width, a.top + a.height]),
                V = Math.abs(h[0] - l[0]),
                U = Math.abs(h[1] - l[1]),
                m = r.width,
                p = r.height,
                d = V / 0.75 / m,
                c = U / p;
              d > c
                ? ((d = 0.75 * c), (V = m * d))
                : ((c = d), (d = 0.75 * c), (U = p * c));
              var u = {
                  OffsetLeft: l[0],
                  OffsetTop: l[1],
                  scale: { x: d, y: c },
                },
                y = s.geoJson2Path(n, u);
              return this._getSingleProvince(t, y[0], o);
            },
            _getSingleProvince: function (e, t, n) {
              var i,
                a = t.properties.name,
                o = u[a] || [0, 0];
              if (y[a]) i = this.geo2pos(e, y[a]);
              else if (t.cp) i = [t.cp[0] + o[0], t.cp[1] + o[1]];
              else {
                var s = this._mapDataMap[e].bbox;
                (i = this.geo2pos(e, [
                  s.left + s.width / 2,
                  s.top + s.height / 2,
                ])),
                  (i[0] += o[0]),
                  (i[1] += o[1]);
              }
              return (
                (t.name = this._nameChange(e, a)),
                (t.position = n),
                (t.textX = i[0]),
                (t.textY = i[1]),
                t
              );
            },
            _getTransform: function (e, t, n) {
              var i,
                a,
                o,
                s,
                r,
                l,
                h,
                V = this.series,
                U = this.zr.getWidth(),
                m = this.zr.getHeight(),
                p = Math.round(0.02 * Math.min(U, m));
              for (var d in t)
                (i = V[d].mapLocation || {}),
                  (o = i.x || o),
                  (r = i.y || r),
                  (l = i.width || l),
                  (h = i.height || h);
              (a = this.parsePercent(o, U)),
                (a = isNaN(a) ? p : a),
                (s = this.parsePercent(r, m)),
                (s = isNaN(s) ? p : s),
                (l = null == l ? U - a - 2 * p : this.parsePercent(l, U)),
                (h = null == h ? m - s - 2 * p : this.parsePercent(h, m));
              var c = e.width,
                u = e.height,
                y = l / n / c,
                b = h / u;
              if (
                (y > b
                  ? ((y = b * n), (l = c * y))
                  : ((b = y), (y = b * n), (h = u * b)),
                isNaN(o))
              )
                switch (((o = o || "center"), o + "")) {
                  case "center":
                    a = Math.floor((U - l) / 2);
                    break;
                  case "right":
                    a = U - l;
                }
              if (isNaN(r))
                switch (((r = r || "center"), r + "")) {
                  case "center":
                    s = Math.floor((m - h) / 2);
                    break;
                  case "bottom":
                    s = m - h;
                }
              return {
                left: a,
                top: s,
                width: l,
                height: h,
                baseScale: 1,
                scale: { x: y, y: b },
              };
            },
            _buildMap: function (e, t, n, p) {
              for (
                var d,
                  c,
                  u,
                  y,
                  b,
                  g,
                  k,
                  f,
                  L,
                  x,
                  _,
                  W = this.series,
                  X = this.component.legend,
                  K = this.component.dataRange,
                  I = 0,
                  w = t.length;
                w > I;
                I++
              ) {
                if (
                  ((f = m.clone(t[I])),
                  (L = {
                    name: f.name,
                    path: f.path,
                    position: m.clone(f.position),
                  }),
                  (c = f.name),
                  (u = n[c]))
                ) {
                  (b = [u]), (d = "");
                  for (var v = 0, J = u.seriesIndex.length; J > v; v++)
                    b.push(W[u.seriesIndex[v]]),
                      (d += W[u.seriesIndex[v]].name + " "),
                      X &&
                        this._showLegendSymbol[e] &&
                        X.hasColor(W[u.seriesIndex[v]].name) &&
                        this.shapeList.push(
                          new o({
                            zlevel: this.getZlevelBase(),
                            z: this.getZBase() + 1,
                            position: m.clone(f.position),
                            _mapType: e,
                            style: {
                              x: f.textX + 3 + 7 * v,
                              y: f.textY - 10,
                              r: 3,
                              color: X.getColor(W[u.seriesIndex[v]].name),
                            },
                            hoverable: !1,
                          })
                        );
                  y = u.value;
                } else {
                  (u = "-"), (d = ""), (b = []);
                  for (var C in p) b.push(W[C]);
                  y = "-";
                }
                switch (
                  (this.ecTheme.map && b.push(this.ecTheme.map),
                  b.push(V),
                  (g = K && !isNaN(y) ? K.getColor(y) : null),
                  (f.color =
                    f.color ||
                    g ||
                    this.getItemStyleColor(
                      this.deepQuery(b, "itemStyle.normal.color"),
                      u.seriesIndex,
                      -1,
                      u
                    ) ||
                    this.deepQuery(b, "itemStyle.normal.areaStyle.color")),
                  (f.strokeColor =
                    f.strokeColor ||
                    this.deepQuery(b, "itemStyle.normal.borderColor")),
                  (f.lineWidth =
                    f.lineWidth ||
                    this.deepQuery(b, "itemStyle.normal.borderWidth")),
                  (L.color =
                    this.getItemStyleColor(
                      this.deepQuery(b, "itemStyle.emphasis.color"),
                      u.seriesIndex,
                      -1,
                      u
                    ) ||
                    this.deepQuery(b, "itemStyle.emphasis.areaStyle.color") ||
                    f.color),
                  (L.strokeColor =
                    this.deepQuery(b, "itemStyle.emphasis.borderColor") ||
                    f.strokeColor),
                  (L.lineWidth =
                    this.deepQuery(b, "itemStyle.emphasis.borderWidth") ||
                    f.lineWidth),
                  (f.brushType = L.brushType = f.brushType || "both"),
                  (f.lineJoin = L.lineJoin = "round"),
                  (f._name = L._name = c),
                  (k = this.deepQuery(b, "itemStyle.normal.label.textStyle")),
                  (_ = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() + 1,
                    position: m.clone(f.position),
                    _mapType: e,
                    _geo: this.pos2geo(e, [f.textX, f.textY]),
                    style: {
                      brushType: "fill",
                      x: f.textX,
                      y: f.textY,
                      text: this.getLabelText(c, y, b, "normal"),
                      _name: c,
                      textAlign: "center",
                      color: this.deepQuery(b, "itemStyle.normal.label.show")
                        ? this.deepQuery(
                            b,
                            "itemStyle.normal.label.textStyle.color"
                          )
                        : "rgba(0,0,0,0)",
                      textFont: this.getFont(k),
                    },
                  }),
                  (_._style = m.clone(_.style)),
                  (_.highlightStyle = m.clone(_.style)),
                  this.deepQuery(b, "itemStyle.emphasis.label.show")
                    ? ((_.highlightStyle.text = this.getLabelText(
                        c,
                        y,
                        b,
                        "emphasis"
                      )),
                      (_.highlightStyle.color =
                        this.deepQuery(
                          b,
                          "itemStyle.emphasis.label.textStyle.color"
                        ) || _.style.color),
                      (k =
                        this.deepQuery(
                          b,
                          "itemStyle.emphasis.label.textStyle"
                        ) || k),
                      (_.highlightStyle.textFont = this.getFont(k)))
                    : (_.highlightStyle.color = "rgba(0,0,0,0)"),
                  (x = {
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase(),
                    position: m.clone(f.position),
                    style: f,
                    highlightStyle: L,
                    _style: m.clone(f),
                    _mapType: e,
                  }),
                  null != f.scale && (x.scale = m.clone(f.scale)),
                  (_ = new i(_)),
                  x.style.shapeType)
                ) {
                  case "rectangle":
                    x = new s(x);
                    break;
                  case "line":
                    x = new r(x);
                    break;
                  case "circle":
                    x = new o(x);
                    break;
                  case "polygon":
                    x = new l(x);
                    break;
                  case "ellipse":
                    x = new h(x);
                    break;
                  default:
                    (x = new a(x)),
                      x.buildPathArray &&
                        (x.style.pathArray = x.buildPathArray(x.style.path));
                }
                ((this._selectedMode[e] && this._selected[c]) ||
                  (u.selected && this._selected[c] !== !1)) &&
                  ((_.style = _.highlightStyle), (x.style = x.highlightStyle)),
                  (_.clickable = x.clickable =
                    this._clickable[e] && (null == u.clickable || u.clickable)),
                  this._selectedMode[e] &&
                    ((this._selected[c] =
                      null != this._selected[c]
                        ? this._selected[c]
                        : u.selected),
                    (this._mapTypeMap[c] = e),
                    (null == u.selectable || u.selectable) &&
                      ((x.clickable = _.clickable = !0),
                      (x.onclick = _.onclick = this.shapeHandler.onclick))),
                  this._hoverable[e] && (null == u.hoverable || u.hoverable)
                    ? ((_.hoverable = x.hoverable = !0),
                      (x.hoverConnect = _.id),
                      (_.hoverConnect = x.id))
                    : (_.hoverable = x.hoverable = !1),
                  U.pack(
                    _,
                    { name: d, tooltip: this.deepQuery(b, "tooltip") },
                    0,
                    u,
                    0,
                    c
                  ),
                  this.shapeList.push(_),
                  U.pack(
                    x,
                    { name: d, tooltip: this.deepQuery(b, "tooltip") },
                    0,
                    u,
                    0,
                    c
                  ),
                  this.shapeList.push(x);
              }
            },
            _buildMark: function (e, t) {
              (this._seriesIndexToMapType = this._seriesIndexToMapType || {}),
                (this.markAttachStyle = this.markAttachStyle || {});
              var n = [
                this._mapDataMap[e].transform.left,
                this._mapDataMap[e].transform.top,
              ];
              "none" == e && (n = [0, 0]);
              for (var i in t)
                (this._seriesIndexToMapType[i] = e),
                  (this.markAttachStyle[i] = { position: n, _mapType: e }),
                  this.buildMark(i);
            },
            getMarkCoord: function (e, t) {
              return t.geoCoord || y[t.name]
                ? this.geo2pos(
                    this._seriesIndexToMapType[e],
                    t.geoCoord || y[t.name]
                  )
                : [0, 0];
            },
            getMarkGeo: function (e) {
              return e.geoCoord || y[e.name];
            },
            _nameChange: function (e, t) {
              return this._nameMap[e][t] || t;
            },
            getLabelText: function (e, t, n, i) {
              var a = this.deepQuery(n, "itemStyle." + i + ".label.formatter");
              return a
                ? "function" == typeof a
                  ? a.call(this.myChart, e, t)
                  : "string" == typeof a
                  ? ((a = a.replace("{a}", "{a0}").replace("{b}", "{b0}")),
                    (a = a.replace("{a0}", e).replace("{b0}", t)))
                  : void 0
                : e;
            },
            _findMapTypeByPos: function (e, t) {
              var n, i, a, o, s;
              for (var r in this._mapDataMap)
                if (
                  ((n = this._mapDataMap[r].transform),
                  n &&
                    this._roamMap[r] &&
                    this._activeMapType[r] &&
                    ((i = n.left),
                    (a = n.top),
                    (o = n.width),
                    (s = n.height),
                    e >= i && i + o >= e && t >= a && a + s >= t))
                )
                  return r;
            },
            __onmousewheel: function (e) {
              if (!(this.shapeList.length <= 0)) {
                var t,
                  n,
                  i = e.event,
                  a = d.getX(i),
                  o = d.getY(i),
                  s = d.getDelta(i),
                  r = e.mapTypeControl;
                r ||
                  ((r = {}),
                  (n = this._findMapTypeByPos(a, o)),
                  n &&
                    this._roamMap[n] &&
                    "move" != this._roamMap[n] &&
                    (r[n] = !0));
                var l = !1;
                for (n in r)
                  if (r[n]) {
                    l = !0;
                    var h = this._mapDataMap[n].transform,
                      U = h.left,
                      m = h.top,
                      p = h.width,
                      c = h.height,
                      u = this.pos2geo(n, [a - U, o - m]);
                    if (s > 0) {
                      if (
                        ((t = 1.2),
                        null != this._scaleLimitMap[n].max &&
                          h.baseScale >= this._scaleLimitMap[n].max)
                      )
                        continue;
                    } else if (
                      ((t = 1 / 1.2),
                      null != this._scaleLimitMap[n].min &&
                        h.baseScale <= this._scaleLimitMap[n].min)
                    )
                      continue;
                    (h.baseScale *= t),
                      (h.scale.x *= t),
                      (h.scale.y *= t),
                      (h.width = p * t),
                      (h.height = c * t),
                      (this._mapDataMap[n].hasRoam = !0),
                      (this._mapDataMap[n].transform = h),
                      (u = this.geo2pos(n, u)),
                      (h.left -= u[0] - (a - U)),
                      (h.top -= u[1] - (o - m)),
                      (this._mapDataMap[n].transform = h),
                      this.clearEffectShape(!0);
                    for (var y = 0, b = this.shapeList.length; b > y; y++)
                      this.shapeList[y]._mapType == n &&
                        ((this.shapeList[y].position[0] = h.left),
                        (this.shapeList[y].position[1] = h.top),
                        "path" == this.shapeList[y].type ||
                        "symbol" == this.shapeList[y].type ||
                        "circle" == this.shapeList[y].type ||
                        "rectangle" == this.shapeList[y].type ||
                        "polygon" == this.shapeList[y].type ||
                        "line" == this.shapeList[y].type ||
                        "ellipse" == this.shapeList[y].type
                          ? ((this.shapeList[y].scale[0] *= t),
                            (this.shapeList[y].scale[1] *= t))
                          : "mark-line" == this.shapeList[y].type
                          ? ((this.shapeList[y].style.pointListLength = void 0),
                            (this.shapeList[y].style.pointList = !1),
                            (u = this.geo2pos(n, this.shapeList[y]._geo[0])),
                            (this.shapeList[y].style.xStart = u[0]),
                            (this.shapeList[y].style.yStart = u[1]),
                            (u = this.geo2pos(n, this.shapeList[y]._geo[1])),
                            (this.shapeList[y]._x = this.shapeList[
                              y
                            ].style.xEnd = u[0]),
                            (this.shapeList[y]._y = this.shapeList[
                              y
                            ].style.yEnd = u[1]))
                          : "icon" == this.shapeList[y].type ||
                            "image" == this.shapeList[y].type
                          ? ((u = this.geo2pos(n, this.shapeList[y]._geo)),
                            (this.shapeList[y].style.x = this.shapeList[
                              y
                            ].style._x =
                              u[0] - this.shapeList[y].style.width / 2),
                            (this.shapeList[y].style.y = this.shapeList[
                              y
                            ].style._y =
                              u[1] - this.shapeList[y].style.height / 2))
                          : ((u = this.geo2pos(n, this.shapeList[y]._geo)),
                            (this.shapeList[y].style.x = u[0]),
                            (this.shapeList[y].style.y = u[1]),
                            "text" == this.shapeList[y].type &&
                              ((this.shapeList[y]._style.x = this.shapeList[
                                y
                              ].highlightStyle.x = u[0]),
                              (this.shapeList[y]._style.y = this.shapeList[
                                y
                              ].highlightStyle.y = u[1]))),
                        this.zr.modShape(this.shapeList[y].id));
                  }
                if (l) {
                  d.stop(i), this.zr.refreshNextFrame();
                  var g = this;
                  clearTimeout(this._refreshDelayTicket),
                    (this._refreshDelayTicket = setTimeout(function () {
                      g && g.shapeList && g.animationEffect();
                    }, 100)),
                    this.messageCenter.dispatch(
                      V.EVENT.MAP_ROAM,
                      e.event,
                      { type: "scale" },
                      this.myChart
                    );
                }
              }
            },
            __onmousedown: function (e) {
              if (!(this.shapeList.length <= 0)) {
                var t = e.target;
                if (!t || !t.draggable) {
                  var n = e.event,
                    i = d.getX(n),
                    a = d.getY(n),
                    o = this._findMapTypeByPos(i, a);
                  if (o && this._roamMap[o] && "scale" != this._roamMap[o]) {
                    (this._mousedown = !0),
                      (this._mx = i),
                      (this._my = a),
                      (this._curMapType = o),
                      this.zr.on(p.EVENT.MOUSEUP, this._onmouseup);
                    var s = this;
                    setTimeout(function () {
                      s.zr.on(p.EVENT.MOUSEMOVE, s._onmousemove);
                    }, 100);
                  }
                }
              }
            },
            __onmousemove: function (e) {
              if (this._mousedown && this._isAlive) {
                var t = e.event,
                  n = d.getX(t),
                  i = d.getY(t),
                  a = this._mapDataMap[this._curMapType].transform;
                (a.hasRoam = !0),
                  (a.left -= this._mx - n),
                  (a.top -= this._my - i),
                  (this._mx = n),
                  (this._my = i),
                  (this._mapDataMap[this._curMapType].transform = a);
                for (var o = 0, s = this.shapeList.length; s > o; o++)
                  this.shapeList[o]._mapType == this._curMapType &&
                    ((this.shapeList[o].position[0] = a.left),
                    (this.shapeList[o].position[1] = a.top),
                    this.zr.modShape(this.shapeList[o].id));
                this.messageCenter.dispatch(
                  V.EVENT.MAP_ROAM,
                  e.event,
                  { type: "move" },
                  this.myChart
                ),
                  this.clearEffectShape(!0),
                  this.zr.refreshNextFrame(),
                  (this._justMove = !0),
                  d.stop(t);
              }
            },
            __onmouseup: function (e) {
              var t = e.event;
              (this._mx = d.getX(t)),
                (this._my = d.getY(t)),
                (this._mousedown = !1);
              var n = this;
              setTimeout(function () {
                n._justMove && n.animationEffect(),
                  (n._justMove = !1),
                  n.zr.un(p.EVENT.MOUSEMOVE, n._onmousemove),
                  n.zr.un(p.EVENT.MOUSEUP, n._onmouseup);
              }, 120);
            },
            __onroamcontroller: function (e) {
              var t = e.event;
              (t.zrenderX = this.zr.getWidth() / 2),
                (t.zrenderY = this.zr.getHeight() / 2);
              var n = e.mapTypeControl,
                i = 0,
                a = 0,
                o = e.step;
              switch (e.roamType) {
                case "scaleUp":
                  return (
                    (t.zrenderDelta = 1),
                    void this.__onmousewheel({ event: t, mapTypeControl: n })
                  );
                case "scaleDown":
                  return (
                    (t.zrenderDelta = -1),
                    void this.__onmousewheel({ event: t, mapTypeControl: n })
                  );
                case "up":
                  i = -o;
                  break;
                case "down":
                  i = o;
                  break;
                case "left":
                  a = -o;
                  break;
                case "right":
                  a = o;
              }
              var s, r;
              for (r in n)
                this._mapDataMap[r] &&
                  this._activeMapType[r] &&
                  ((s = this._mapDataMap[r].transform),
                  (s.hasRoam = !0),
                  (s.left -= a),
                  (s.top -= i),
                  (this._mapDataMap[r].transform = s));
              for (var l = 0, h = this.shapeList.length; h > l; l++)
                (r = this.shapeList[l]._mapType),
                  n[r] &&
                    this._activeMapType[r] &&
                    ((s = this._mapDataMap[r].transform),
                    (this.shapeList[l].position[0] = s.left),
                    (this.shapeList[l].position[1] = s.top),
                    this.zr.modShape(this.shapeList[l].id));
              this.messageCenter.dispatch(
                V.EVENT.MAP_ROAM,
                e.event,
                { type: "move" },
                this.myChart
              ),
                this.clearEffectShape(!0),
                this.zr.refreshNextFrame(),
                clearTimeout(this.dircetionTimer);
              var U = this;
              this.dircetionTimer = setTimeout(function () {
                U.animationEffect();
              }, 150);
            },
            __ondrhoverlink: function (e) {
              for (var t, n, i = 0, a = this.shapeList.length; a > i; i++)
                (t = this.shapeList[i]._mapType),
                  this._hoverLinkMap[t] &&
                    this._activeMapType[t] &&
                    ((n = U.get(this.shapeList[i], "value")),
                    null != n &&
                      n >= e.valueMin &&
                      n <= e.valueMax &&
                      this.zr.addHoverShape(this.shapeList[i]));
            },
            onclick: function (e) {
              if (
                this.isClick &&
                e.target &&
                !this._justMove &&
                "icon" != e.target.type
              ) {
                this.isClick = !1;
                var t = e.target,
                  n = t.style._name,
                  i = this.shapeList.length,
                  a = t._mapType || "";
                if ("single" == this._selectedMode[a])
                  for (var o in this._selected)
                    if (this._selected[o] && this._mapTypeMap[o] == a) {
                      for (var s = 0; i > s; s++)
                        this.shapeList[s].style._name == o &&
                          this.shapeList[s]._mapType == a &&
                          ((this.shapeList[s].style = this.shapeList[s]._style),
                          this.zr.modShape(this.shapeList[s].id));
                      o != n && (this._selected[o] = !1);
                    }
                this._selected[n] = !this._selected[n];
                for (var s = 0; i > s; s++)
                  this.shapeList[s].style._name == n &&
                    this.shapeList[s]._mapType == a &&
                    ((this.shapeList[s].style = this._selected[n]
                      ? this.shapeList[s].highlightStyle
                      : this.shapeList[s]._style),
                    this.zr.modShape(this.shapeList[s].id));
                this.messageCenter.dispatch(
                  V.EVENT.MAP_SELECTED,
                  e.event,
                  { selected: this._selected, target: n },
                  this.myChart
                ),
                  this.zr.refreshNextFrame();
                var r = this;
                setTimeout(function () {
                  r.zr.trigger(p.EVENT.MOUSEMOVE, e.event);
                }, 100);
              }
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this._mapDataRequireCounter > 0
                  ? this.clear()
                  : this.backupShapeList(),
                this._buildShape(),
                this.zr.refreshHover();
            },
            ondataRange: function (e, t) {
              this.component.dataRange &&
                (this.refresh(), (t.needRefresh = !0));
            },
            pos2geo: function (e, t) {
              return this._mapDataMap[e].transform
                ? this._mapDataMap[e].projection.pos2geo(
                    this._mapDataMap[e].transform,
                    t
                  )
                : null;
            },
            getGeoByPos: function (e, t) {
              if (!this._mapDataMap[e].transform) return null;
              var n = [
                this._mapDataMap[e].transform.left,
                this._mapDataMap[e].transform.top,
              ];
              return (
                t instanceof Array
                  ? ((t[0] -= n[0]), (t[1] -= n[1]))
                  : ((t.x -= n[0]), (t.y -= n[1])),
                this.pos2geo(e, t)
              );
            },
            geo2pos: function (e, t) {
              return this._mapDataMap[e].transform
                ? this._mapDataMap[e].projection.geo2pos(
                    this._mapDataMap[e].transform,
                    t
                  )
                : null;
            },
            getPosByGeo: function (e, t) {
              if (!this._mapDataMap[e].transform) return null;
              var n = this.geo2pos(e, t);
              return (
                (n[0] += this._mapDataMap[e].transform.left),
                (n[1] += this._mapDataMap[e].transform.top),
                n
              );
            },
            getMapPosition: function (e) {
              return this._mapDataMap[e].transform
                ? [
                    this._mapDataMap[e].transform.left,
                    this._mapDataMap[e].transform.top,
                  ]
                : null;
            },
            onbeforDispose: function () {
              (this._isAlive = !1),
                this.zr.un(p.EVENT.MOUSEWHEEL, this._onmousewheel),
                this.zr.un(p.EVENT.MOUSEDOWN, this._onmousedown),
                this.messageCenter.unbind(
                  V.EVENT.ROAMCONTROLLER,
                  this._onroamcontroller
                ),
                this.messageCenter.unbind(
                  V.EVENT.DATA_RANGE_HOVERLINK,
                  this._ondrhoverlink
                );
            },
          }),
          m.inherits(t, n),
          e("../chart").define("map", t),
          t
        );
      }
    ),
    n(
      "zrender/shape/Path",
      ["require", "./Base", "./util/PathProxy", "../tool/util"],
      function (e) {
        var t = e("./Base"),
          n = e("./util/PathProxy"),
          i = n.PathSegment,
          a = function (e) {
            return Math.sqrt(e[0] * e[0] + e[1] * e[1]);
          },
          o = function (e, t) {
            return (e[0] * t[0] + e[1] * t[1]) / (a(e) * a(t));
          },
          s = function (e, t) {
            return (e[0] * t[1] < e[1] * t[0] ? -1 : 1) * Math.acos(o(e, t));
          },
          r = function (e) {
            t.call(this, e);
          };
        return (
          (r.prototype = {
            type: "path",
            buildPathArray: function (e, t, n) {
              if (!e) return [];
              (t = t || 0), (n = n || 0);
              var a = e,
                o = [
                  "m",
                  "M",
                  "l",
                  "L",
                  "v",
                  "V",
                  "h",
                  "H",
                  "z",
                  "Z",
                  "c",
                  "C",
                  "q",
                  "Q",
                  "t",
                  "T",
                  "s",
                  "S",
                  "a",
                  "A",
                ];
              (a = a.replace(/-/g, " -")),
                (a = a.replace(/  /g, " ")),
                (a = a.replace(/ /g, ",")),
                (a = a.replace(/,,/g, ","));
              var s;
              for (s = 0; s < o.length; s++)
                a = a.replace(new RegExp(o[s], "g"), "|" + o[s]);
              var r = a.split("|"),
                l = [],
                h = 0,
                V = 0;
              for (s = 1; s < r.length; s++) {
                var U = r[s],
                  m = U.charAt(0);
                (U = U.slice(1)), (U = U.replace(new RegExp("e,-", "g"), "e-"));
                var p = U.split(",");
                p.length > 0 && "" === p[0] && p.shift();
                for (var d = 0; d < p.length; d++) p[d] = parseFloat(p[d]);
                for (; p.length > 0 && !isNaN(p[0]); ) {
                  var c,
                    u,
                    y,
                    b,
                    g,
                    k,
                    f,
                    L,
                    x = null,
                    _ = [],
                    W = h,
                    X = V;
                  switch (m) {
                    case "l":
                      (h += p.shift()),
                        (V += p.shift()),
                        (x = "L"),
                        _.push(h, V);
                      break;
                    case "L":
                      (h = p.shift()), (V = p.shift()), _.push(h, V);
                      break;
                    case "m":
                      (h += p.shift()),
                        (V += p.shift()),
                        (x = "M"),
                        _.push(h, V),
                        (m = "l");
                      break;
                    case "M":
                      (h = p.shift()),
                        (V = p.shift()),
                        (x = "M"),
                        _.push(h, V),
                        (m = "L");
                      break;
                    case "h":
                      (h += p.shift()), (x = "L"), _.push(h, V);
                      break;
                    case "H":
                      (h = p.shift()), (x = "L"), _.push(h, V);
                      break;
                    case "v":
                      (V += p.shift()), (x = "L"), _.push(h, V);
                      break;
                    case "V":
                      (V = p.shift()), (x = "L"), _.push(h, V);
                      break;
                    case "C":
                      _.push(p.shift(), p.shift(), p.shift(), p.shift()),
                        (h = p.shift()),
                        (V = p.shift()),
                        _.push(h, V);
                      break;
                    case "c":
                      _.push(
                        h + p.shift(),
                        V + p.shift(),
                        h + p.shift(),
                        V + p.shift()
                      ),
                        (h += p.shift()),
                        (V += p.shift()),
                        (x = "C"),
                        _.push(h, V);
                      break;
                    case "S":
                      (c = h),
                        (u = V),
                        (y = l[l.length - 1]),
                        "C" === y.command &&
                          ((c = h + (h - y.points[2])),
                          (u = V + (V - y.points[3]))),
                        _.push(c, u, p.shift(), p.shift()),
                        (h = p.shift()),
                        (V = p.shift()),
                        (x = "C"),
                        _.push(h, V);
                      break;
                    case "s":
                      (c = h),
                        (u = V),
                        (y = l[l.length - 1]),
                        "C" === y.command &&
                          ((c = h + (h - y.points[2])),
                          (u = V + (V - y.points[3]))),
                        _.push(c, u, h + p.shift(), V + p.shift()),
                        (h += p.shift()),
                        (V += p.shift()),
                        (x = "C"),
                        _.push(h, V);
                      break;
                    case "Q":
                      _.push(p.shift(), p.shift()),
                        (h = p.shift()),
                        (V = p.shift()),
                        _.push(h, V);
                      break;
                    case "q":
                      _.push(h + p.shift(), V + p.shift()),
                        (h += p.shift()),
                        (V += p.shift()),
                        (x = "Q"),
                        _.push(h, V);
                      break;
                    case "T":
                      (c = h),
                        (u = V),
                        (y = l[l.length - 1]),
                        "Q" === y.command &&
                          ((c = h + (h - y.points[0])),
                          (u = V + (V - y.points[1]))),
                        (h = p.shift()),
                        (V = p.shift()),
                        (x = "Q"),
                        _.push(c, u, h, V);
                      break;
                    case "t":
                      (c = h),
                        (u = V),
                        (y = l[l.length - 1]),
                        "Q" === y.command &&
                          ((c = h + (h - y.points[0])),
                          (u = V + (V - y.points[1]))),
                        (h += p.shift()),
                        (V += p.shift()),
                        (x = "Q"),
                        _.push(c, u, h, V);
                      break;
                    case "A":
                      (b = p.shift()),
                        (g = p.shift()),
                        (k = p.shift()),
                        (f = p.shift()),
                        (L = p.shift()),
                        (W = h),
                        (X = V),
                        (h = p.shift()),
                        (V = p.shift()),
                        (x = "A"),
                        (_ = this._convertPoint(W, X, h, V, f, L, b, g, k));
                      break;
                    case "a":
                      (b = p.shift()),
                        (g = p.shift()),
                        (k = p.shift()),
                        (f = p.shift()),
                        (L = p.shift()),
                        (W = h),
                        (X = V),
                        (h += p.shift()),
                        (V += p.shift()),
                        (x = "A"),
                        (_ = this._convertPoint(W, X, h, V, f, L, b, g, k));
                  }
                  for (var K = 0, I = _.length; I > K; K += 2)
                    (_[K] += t), (_[K + 1] += n);
                  l.push(new i(x || m, _));
                }
                ("z" === m || "Z" === m) && l.push(new i("z", []));
              }
              return l;
            },
            _convertPoint: function (e, t, n, i, a, r, l, h, V) {
              var U = V * (Math.PI / 180),
                m = (Math.cos(U) * (e - n)) / 2 + (Math.sin(U) * (t - i)) / 2,
                p =
                  (-1 * Math.sin(U) * (e - n)) / 2 +
                  (Math.cos(U) * (t - i)) / 2,
                d = (m * m) / (l * l) + (p * p) / (h * h);
              d > 1 && ((l *= Math.sqrt(d)), (h *= Math.sqrt(d)));
              var c = Math.sqrt(
                (l * l * h * h - l * l * p * p - h * h * m * m) /
                  (l * l * p * p + h * h * m * m)
              );
              a === r && (c *= -1), isNaN(c) && (c = 0);
              var u = (c * l * p) / h,
                y = (c * -h * m) / l,
                b = (e + n) / 2 + Math.cos(U) * u - Math.sin(U) * y,
                g = (t + i) / 2 + Math.sin(U) * u + Math.cos(U) * y,
                k = s([1, 0], [(m - u) / l, (p - y) / h]),
                f = [(m - u) / l, (p - y) / h],
                L = [(-1 * m - u) / l, (-1 * p - y) / h],
                x = s(f, L);
              return (
                o(f, L) <= -1 && (x = Math.PI),
                o(f, L) >= 1 && (x = 0),
                0 === r && x > 0 && (x -= 2 * Math.PI),
                1 === r && 0 > x && (x += 2 * Math.PI),
                [b, g, l, h, k, x, U, r]
              );
            },
            buildPath: function (e, t) {
              var n = t.path,
                i = t.x || 0,
                a = t.y || 0;
              t.pathArray = t.pathArray || this.buildPathArray(n, i, a);
              for (
                var o = t.pathArray,
                  s = (t.pointList = []),
                  r = [],
                  l = 0,
                  h = o.length;
                h > l;
                l++
              ) {
                "M" == o[l].command.toUpperCase() &&
                  (r.length > 0 && s.push(r), (r = []));
                for (var V = o[l].points, U = 0, m = V.length; m > U; U += 2)
                  r.push([V[U], V[U + 1]]);
              }
              r.length > 0 && s.push(r);
              for (var l = 0, h = o.length; h > l; l++) {
                var p = o[l].command,
                  V = o[l].points;
                switch (p) {
                  case "L":
                    e.lineTo(V[0], V[1]);
                    break;
                  case "M":
                    e.moveTo(V[0], V[1]);
                    break;
                  case "C":
                    e.bezierCurveTo(V[0], V[1], V[2], V[3], V[4], V[5]);
                    break;
                  case "Q":
                    e.quadraticCurveTo(V[0], V[1], V[2], V[3]);
                    break;
                  case "A":
                    var d = V[0],
                      c = V[1],
                      u = V[2],
                      y = V[3],
                      b = V[4],
                      g = V[5],
                      k = V[6],
                      f = V[7],
                      L = u > y ? u : y,
                      x = u > y ? 1 : u / y,
                      _ = u > y ? y / u : 1;
                    e.translate(d, c),
                      e.rotate(k),
                      e.scale(x, _),
                      e.arc(0, 0, L, b, b + g, 1 - f),
                      e.scale(1 / x, 1 / _),
                      e.rotate(-k),
                      e.translate(-d, -c);
                    break;
                  case "z":
                    e.closePath();
                }
              }
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t;
              t =
                "stroke" == e.brushType || "fill" == e.brushType
                  ? e.lineWidth || 1
                  : 0;
              for (
                var n = Number.MAX_VALUE,
                  i = Number.MIN_VALUE,
                  a = Number.MAX_VALUE,
                  o = Number.MIN_VALUE,
                  s = e.x || 0,
                  r = e.y || 0,
                  l = e.pathArray || this.buildPathArray(e.path),
                  h = 0;
                h < l.length;
                h++
              )
                for (var V = l[h].points, U = 0; U < V.length; U++)
                  U % 2 === 0
                    ? (V[U] + s < n && (n = V[U]), V[U] + s > i && (i = V[U]))
                    : (V[U] + r < a && (a = V[U]), V[U] + r > o && (o = V[U]));
              var m;
              return (
                (m =
                  n === Number.MAX_VALUE ||
                  i === Number.MIN_VALUE ||
                  a === Number.MAX_VALUE ||
                  o === Number.MIN_VALUE
                    ? { x: 0, y: 0, width: 0, height: 0 }
                    : {
                        x: Math.round(n - t / 2),
                        y: Math.round(a - t / 2),
                        width: i - n + t,
                        height: o - a + t,
                      }),
                (e.__rect = m),
                m
              );
            },
          }),
          e("../tool/util").inherits(r, t),
          r
        );
      }
    ),
    n("zrender/shape/Ellipse", ["require", "./Base", "../tool/util"], function (
      e
    ) {
      var t = e("./Base"),
        n = function (e) {
          t.call(this, e);
        };
      return (
        (n.prototype = {
          type: "ellipse",
          buildPath: function (e, t) {
            var n = 0.5522848,
              i = t.x,
              a = t.y,
              o = t.a,
              s = t.b,
              r = o * n,
              l = s * n;
            e.moveTo(i - o, a),
              e.bezierCurveTo(i - o, a - l, i - r, a - s, i, a - s),
              e.bezierCurveTo(i + r, a - s, i + o, a - l, i + o, a),
              e.bezierCurveTo(i + o, a + l, i + r, a + s, i, a + s),
              e.bezierCurveTo(i - r, a + s, i - o, a + l, i - o, a),
              e.closePath();
          },
          getRect: function (e) {
            if (e.__rect) return e.__rect;
            var t;
            return (
              (t =
                "stroke" == e.brushType || "fill" == e.brushType
                  ? e.lineWidth || 1
                  : 0),
              (e.__rect = {
                x: Math.round(e.x - e.a - t / 2),
                y: Math.round(e.y - e.b - t / 2),
                width: 2 * e.a + t,
                height: 2 * e.b + t,
              }),
              e.__rect
            );
          },
        }),
        e("../tool/util").inherits(n, t),
        n
      );
    }),
    n(
      "echarts/component/roamController",
      [
        "require",
        "./base",
        "zrender/shape/Rectangle",
        "zrender/shape/Sector",
        "zrender/shape/Circle",
        "../config",
        "zrender/tool/util",
        "zrender/tool/color",
        "zrender/tool/event",
        "../component",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          if (a.roamController && a.roamController.show) {
            if (!a.roamController.mapTypeControl)
              return void console.error(
                "option.roamController.mapTypeControl has not been defined."
              );
            n.call(this, e, t, i, a, o), (this.rcOption = a.roamController);
            var s = this;
            (this._drictionMouseDown = function (e) {
              return s.__drictionMouseDown(e);
            }),
              (this._drictionMouseUp = function (e) {
                return s.__drictionMouseUp(e);
              }),
              (this._drictionMouseMove = function (e) {
                return s.__drictionMouseMove(e);
              }),
              (this._drictionMouseOut = function (e) {
                return s.__drictionMouseOut(e);
              }),
              (this._scaleHandler = function (e) {
                return s.__scaleHandler(e);
              }),
              this.refresh(a);
          }
        }
        var n = e("./base"),
          i = e("zrender/shape/Rectangle"),
          a = e("zrender/shape/Sector"),
          o = e("zrender/shape/Circle"),
          s = e("../config");
        s.roamController = {
          zlevel: 0,
          z: 4,
          show: !0,
          x: "left",
          y: "top",
          width: 80,
          height: 120,
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "#ccc",
          borderWidth: 0,
          padding: 1,
          handleColor: "#6495ed",
          fillerColor: "#fff",
          step: 15,
          mapTypeControl: null,
        };
        var r = e("zrender/tool/util"),
          l = e("zrender/tool/color"),
          h = e("zrender/tool/event");
        return (
          (t.prototype = {
            type: s.COMPONENT_TYPE_ROAMCONTROLLER,
            _buildShape: function () {
              if (this.rcOption.show) {
                (this._itemGroupLocation = this._getItemGroupLocation()),
                  this._buildBackground(),
                  this._buildItem();
                for (var e = 0, t = this.shapeList.length; t > e; e++)
                  this.zr.addShape(this.shapeList[e]);
              }
            },
            _buildItem: function () {
              this.shapeList.push(this._getDirectionShape("up")),
                this.shapeList.push(this._getDirectionShape("down")),
                this.shapeList.push(this._getDirectionShape("left")),
                this.shapeList.push(this._getDirectionShape("right")),
                this.shapeList.push(this._getScaleShape("scaleUp")),
                this.shapeList.push(this._getScaleShape("scaleDown"));
            },
            _getDirectionShape: function (e) {
              var t = this._itemGroupLocation.r,
                n = this._itemGroupLocation.x + t,
                i = this._itemGroupLocation.y + t,
                o = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  style: {
                    x: n,
                    y: i,
                    r: t,
                    startAngle: -45,
                    endAngle: 45,
                    color: this.rcOption.handleColor,
                    text: ">",
                    textX: n + t / 2 + 4,
                    textY: i - 0.5,
                    textAlign: "center",
                    textBaseline: "middle",
                    textPosition: "specific",
                    textColor: this.rcOption.fillerColor,
                    textFont: Math.floor(t / 2) + "px arial",
                  },
                  highlightStyle: {
                    color: l.lift(this.rcOption.handleColor, -0.2),
                    brushType: "fill",
                  },
                  clickable: !0,
                };
              switch (e) {
                case "up":
                  o.rotation = [Math.PI / 2, n, i];
                  break;
                case "left":
                  o.rotation = [Math.PI, n, i];
                  break;
                case "down":
                  o.rotation = [-Math.PI / 2, n, i];
              }
              return (
                (o = new a(o)),
                (o._roamType = e),
                (o.onmousedown = this._drictionMouseDown),
                (o.onmouseup = this._drictionMouseUp),
                (o.onmousemove = this._drictionMouseMove),
                (o.onmouseout = this._drictionMouseOut),
                o
              );
            },
            _getScaleShape: function (e) {
              var t = this._itemGroupLocation.width,
                n = this._itemGroupLocation.height - t;
              n = 0 > n ? 20 : n;
              var i = Math.min(t / 2 - 5, n) / 2,
                a = this._itemGroupLocation.x + ("scaleDown" === e ? t - i : i),
                s =
                  this._itemGroupLocation.y +
                  this._itemGroupLocation.height -
                  i,
                r = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  style: {
                    x: a,
                    y: s,
                    r: i,
                    color: this.rcOption.handleColor,
                    text: "scaleDown" === e ? "-" : "+",
                    textX: a,
                    textY: s - 2,
                    textAlign: "center",
                    textBaseline: "middle",
                    textPosition: "specific",
                    textColor: this.rcOption.fillerColor,
                    textFont: Math.floor(i) + "px verdana",
                  },
                  highlightStyle: {
                    color: l.lift(this.rcOption.handleColor, -0.2),
                    brushType: "fill",
                  },
                  clickable: !0,
                };
              return (
                (r = new o(r)),
                (r._roamType = e),
                (r.onmousedown = this._scaleHandler),
                r
              );
            },
            _buildBackground: function () {
              var e = this.reformCssArray(this.rcOption.padding);
              this.shapeList.push(
                new i({
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  hoverable: !1,
                  style: {
                    x: this._itemGroupLocation.x - e[3],
                    y: this._itemGroupLocation.y - e[0],
                    width: this._itemGroupLocation.width + e[3] + e[1],
                    height: this._itemGroupLocation.height + e[0] + e[2],
                    brushType:
                      0 === this.rcOption.borderWidth ? "fill" : "both",
                    color: this.rcOption.backgroundColor,
                    strokeColor: this.rcOption.borderColor,
                    lineWidth: this.rcOption.borderWidth,
                  },
                })
              );
            },
            _getItemGroupLocation: function () {
              var e,
                t = this.reformCssArray(this.rcOption.padding),
                n = this.rcOption.width,
                i = this.rcOption.height,
                a = this.zr.getWidth(),
                o = this.zr.getHeight();
              switch (this.rcOption.x) {
                case "center":
                  e = Math.floor((a - n) / 2);
                  break;
                case "left":
                  e = t[3] + this.rcOption.borderWidth;
                  break;
                case "right":
                  e = a - n - t[1] - t[3] - 2 * this.rcOption.borderWidth;
                  break;
                default:
                  e = this.parsePercent(this.rcOption.x, a);
              }
              var s;
              switch (this.rcOption.y) {
                case "top":
                  s = t[0] + this.rcOption.borderWidth;
                  break;
                case "bottom":
                  s = o - i - t[0] - t[2] - 2 * this.rcOption.borderWidth;
                  break;
                case "center":
                  s = Math.floor((o - i) / 2);
                  break;
                default:
                  s = this.parsePercent(this.rcOption.y, o);
              }
              return { x: e, y: s, r: n / 2, width: n, height: i };
            },
            __drictionMouseDown: function (e) {
              (this.mousedown = !0), this._drictionHandlerOn(e);
            },
            __drictionMouseUp: function (e) {
              (this.mousedown = !1), this._drictionHandlerOff(e);
            },
            __drictionMouseMove: function (e) {
              this.mousedown && this._drictionHandlerOn(e);
            },
            __drictionMouseOut: function (e) {
              this._drictionHandlerOff(e);
            },
            _drictionHandlerOn: function (e) {
              this._dispatchEvent(e.event, e.target._roamType),
                clearInterval(this.dircetionTimer);
              var t = this;
              (this.dircetionTimer = setInterval(function () {
                t._dispatchEvent(e.event, e.target._roamType);
              }, 100)),
                h.stop(e.event);
            },
            _drictionHandlerOff: function () {
              clearInterval(this.dircetionTimer);
            },
            __scaleHandler: function (e) {
              this._dispatchEvent(e.event, e.target._roamType), h.stop(e.event);
            },
            _dispatchEvent: function (e, t) {
              this.messageCenter.dispatch(
                s.EVENT.ROAMCONTROLLER,
                e,
                {
                  roamType: t,
                  mapTypeControl: this.rcOption.mapTypeControl,
                  step: this.rcOption.step,
                },
                this.myChart
              );
            },
            refresh: function (e) {
              e &&
                ((this.option = e || this.option),
                (this.option.roamController = this.reformOption(
                  this.option.roamController
                )),
                (this.rcOption = this.option.roamController)),
                this.clear(),
                this._buildShape();
            },
          }),
          r.inherits(t, n),
          e("../component").define("roamController", t),
          t
        );
      }
    ),
    n("echarts/util/mapData/params", ["require"], function (e) {
      function t(e) {
        if (!e.UTF8Encoding) return e;
        for (var t = e.features, i = 0; i < t.length; i++)
          for (
            var a = t[i],
              o = a.geometry.coordinates,
              s = a.geometry.encodeOffsets,
              r = 0;
            r < o.length;
            r++
          ) {
            var l = o[r];
            if ("Polygon" === a.geometry.type) o[r] = n(l, s[r]);
            else if ("MultiPolygon" === a.geometry.type)
              for (var h = 0; h < l.length; h++) {
                var V = l[h];
                l[h] = n(V, s[r][h]);
              }
          }
        return (e.UTF8Encoding = !1), e;
      }
      function n(e, t) {
        for (var n = [], i = t[0], a = t[1], o = 0; o < e.length; o += 2) {
          var s = e.charCodeAt(o) - 64,
            r = e.charCodeAt(o + 1) - 64;
          (s = (s >> 1) ^ -(1 & s)),
            (r = (r >> 1) ^ -(1 & r)),
            (s += i),
            (r += a),
            (i = s),
            (a = r),
            n.push([s / 1024, r / 1024]);
        }
        return n;
      }
      var i = {
        none: {
          getGeoJson: function (e) {
            e({
              type: "FeatureCollection",
              features: [
                {
                  type: "Feature",
                  geometry: {
                    coordinates: [],
                    encodeOffsets: [],
                    type: "Polygon",
                  },
                  properties: {},
                },
              ],
            });
          },
        },
        world: {
          getGeoJson: function (n) {
            e(["./geoJson/world_geo"], function (e) {
              n(t(e));
            });
          },
        },
        china: {
          getGeoJson: function (n) {
            e(["./geoJson/china_geo"], function (e) {
              n(t(e));
            });
          },
        },
        南海诸岛: {
          textCoord: [126, 25],
          getPath: function (e, t) {
            for (
              var n = [
                  [
                    [0, 3.5],
                    [7, 11.2],
                    [15, 11.9],
                    [30, 7],
                    [42, 0.7],
                    [52, 0.7],
                    [56, 7.7],
                    [59, 0.7],
                    [64, 0.7],
                    [64, 0],
                    [5, 0],
                    [0, 3.5],
                  ],
                  [
                    [13, 16.1],
                    [19, 14.7],
                    [16, 21.7],
                    [11, 23.1],
                    [13, 16.1],
                  ],
                  [
                    [12, 32.2],
                    [14, 38.5],
                    [15, 38.5],
                    [13, 32.2],
                    [12, 32.2],
                  ],
                  [
                    [16, 47.6],
                    [12, 53.2],
                    [13, 53.2],
                    [18, 47.6],
                    [16, 47.6],
                  ],
                  [
                    [6, 64.4],
                    [8, 70],
                    [9, 70],
                    [8, 64.4],
                    [6, 64.4],
                  ],
                  [
                    [23, 82.6],
                    [29, 79.8],
                    [30, 79.8],
                    [25, 82.6],
                    [23, 82.6],
                  ],
                  [
                    [37, 70.7],
                    [43, 62.3],
                    [44, 62.3],
                    [39, 70.7],
                    [37, 70.7],
                  ],
                  [
                    [48, 51.1],
                    [51, 45.5],
                    [53, 45.5],
                    [50, 51.1],
                    [48, 51.1],
                  ],
                  [
                    [51, 35],
                    [51, 28.7],
                    [53, 28.7],
                    [53, 35],
                    [51, 35],
                  ],
                  [
                    [52, 22.4],
                    [55, 17.5],
                    [56, 17.5],
                    [53, 22.4],
                    [52, 22.4],
                  ],
                  [
                    [58, 12.6],
                    [62, 7],
                    [63, 7],
                    [60, 12.6],
                    [58, 12.6],
                  ],
                  [
                    [0, 3.5],
                    [0, 93.1],
                    [64, 93.1],
                    [64, 0],
                    [63, 0],
                    [63, 92.4],
                    [1, 92.4],
                    [1, 3.5],
                    [0, 3.5],
                  ],
                ],
                i = "",
                a = e[0],
                o = e[1],
                s = 0,
                r = n.length;
              r > s;
              s++
            ) {
              i +=
                "M " +
                ((n[s][0][0] * t + a).toFixed(2) - 0) +
                " " +
                ((n[s][0][1] * t + o).toFixed(2) - 0) +
                " ";
              for (var l = 1, h = n[s].length; h > l; l++)
                i +=
                  "L " +
                  ((n[s][l][0] * t + a).toFixed(2) - 0) +
                  " " +
                  ((n[s][l][1] * t + o).toFixed(2) - 0) +
                  " ";
            }
            return i + " Z";
          },
        },
        新疆: {
          getGeoJson: function (n) {
            e(["./geoJson/xin_jiang_geo"], function (e) {
              n(t(e));
            });
          },
        },
        西藏: {
          getGeoJson: function (n) {
            e(["./geoJson/xi_zang_geo"], function (e) {
              n(t(e));
            });
          },
        },
        内蒙古: {
          getGeoJson: function (n) {
            e(["./geoJson/nei_meng_gu_geo"], function (e) {
              n(t(e));
            });
          },
        },
        青海: {
          getGeoJson: function (n) {
            e(["./geoJson/qing_hai_geo"], function (e) {
              n(t(e));
            });
          },
        },
        四川: {
          getGeoJson: function (n) {
            e(["./geoJson/si_chuan_geo"], function (e) {
              n(t(e));
            });
          },
        },
        黑龙江: {
          getGeoJson: function (n) {
            e(["./geoJson/hei_long_jiang_geo"], function (e) {
              n(t(e));
            });
          },
        },
        甘肃: {
          getGeoJson: function (n) {
            e(["./geoJson/gan_su_geo"], function (e) {
              n(t(e));
            });
          },
        },
        云南: {
          getGeoJson: function (n) {
            e(["./geoJson/yun_nan_geo"], function (e) {
              n(t(e));
            });
          },
        },
        广西: {
          getGeoJson: function (n) {
            e(["./geoJson/guang_xi_geo"], function (e) {
              n(t(e));
            });
          },
        },
        湖南: {
          getGeoJson: function (n) {
            e(["./geoJson/hu_nan_geo"], function (e) {
              n(t(e));
            });
          },
        },
        陕西: {
          getGeoJson: function (n) {
            e(["./geoJson/shan_xi_1_geo"], function (e) {
              n(t(e));
            });
          },
        },
        广东: {
          getGeoJson: function (n) {
            e(["./geoJson/guang_dong_geo"], function (e) {
              n(t(e));
            });
          },
        },
        吉林: {
          getGeoJson: function (n) {
            e(["./geoJson/ji_lin_geo"], function (e) {
              n(t(e));
            });
          },
        },
        河北: {
          getGeoJson: function (n) {
            e(["./geoJson/he_bei_geo"], function (e) {
              n(t(e));
            });
          },
        },
        湖北: {
          getGeoJson: function (n) {
            e(["./geoJson/hu_bei_geo"], function (e) {
              n(t(e));
            });
          },
        },
        贵州: {
          getGeoJson: function (n) {
            e(["./geoJson/gui_zhou_geo"], function (e) {
              n(t(e));
            });
          },
        },
        山东: {
          getGeoJson: function (n) {
            e(["./geoJson/shan_dong_geo"], function (e) {
              n(t(e));
            });
          },
        },
        江西: {
          getGeoJson: function (n) {
            e(["./geoJson/jiang_xi_geo"], function (e) {
              n(t(e));
            });
          },
        },
        河南: {
          getGeoJson: function (n) {
            e(["./geoJson/he_nan_geo"], function (e) {
              n(t(e));
            });
          },
        },
        辽宁: {
          getGeoJson: function (n) {
            e(["./geoJson/liao_ning_geo"], function (e) {
              n(t(e));
            });
          },
        },
        山西: {
          getGeoJson: function (n) {
            e(["./geoJson/shan_xi_2_geo"], function (e) {
              n(t(e));
            });
          },
        },
        安徽: {
          getGeoJson: function (n) {
            e(["./geoJson/an_hui_geo"], function (e) {
              n(t(e));
            });
          },
        },
        福建: {
          getGeoJson: function (n) {
            e(["./geoJson/fu_jian_geo"], function (e) {
              n(t(e));
            });
          },
        },
        浙江: {
          getGeoJson: function (n) {
            e(["./geoJson/zhe_jiang_geo"], function (e) {
              n(t(e));
            });
          },
        },
        江苏: {
          getGeoJson: function (n) {
            e(["./geoJson/jiang_su_geo"], function (e) {
              n(t(e));
            });
          },
        },
        重庆: {
          getGeoJson: function (n) {
            e(["./geoJson/chong_qing_geo"], function (e) {
              n(t(e));
            });
          },
        },
        宁夏: {
          getGeoJson: function (n) {
            e(["./geoJson/ning_xia_geo"], function (e) {
              n(t(e));
            });
          },
        },
        海南: {
          getGeoJson: function (n) {
            e(["./geoJson/hai_nan_geo"], function (e) {
              n(t(e));
            });
          },
        },
        台湾: {
          getGeoJson: function (n) {
            e(["./geoJson/tai_wan_geo"], function (e) {
              n(t(e));
            });
          },
        },
        北京: {
          getGeoJson: function (n) {
            e(["./geoJson/bei_jing_geo"], function (e) {
              n(t(e));
            });
          },
        },
        天津: {
          getGeoJson: function (n) {
            e(["./geoJson/tian_jin_geo"], function (e) {
              n(t(e));
            });
          },
        },
        上海: {
          getGeoJson: function (n) {
            e(["./geoJson/shang_hai_geo"], function (e) {
              n(t(e));
            });
          },
        },
        香港: {
          getGeoJson: function (n) {
            e(["./geoJson/xiang_gang_geo"], function (e) {
              n(t(e));
            });
          },
        },
        澳门: {
          getGeoJson: function (n) {
            e(["./geoJson/ao_men_geo"], function (e) {
              n(t(e));
            });
          },
        },
      };
      return { decode: t, params: i };
    }),
    n("echarts/util/mapData/textFixed", [], function () {
      return {
        广东: [0, -10],
        香港: [10, 10],
        澳门: [-10, 18],
        黑龙江: [0, 20],
        天津: [5, 5],
        深圳市: [-35, 0],
        红河哈尼族彝族自治州: [0, 20],
        楚雄彝族自治州: [-5, 15],
        石河子市: [-5, 5],
        五家渠市: [0, -10],
        昌吉回族自治州: [10, 10],
        昌江黎族自治县: [0, 20],
        陵水黎族自治县: [0, 20],
        东方市: [0, 20],
        渭南市: [0, 20],
      };
    }),
    n("echarts/util/mapData/geoCoord", [], function () {
      return { Russia: [100, 60], "United States of America": [-99, 38] };
    }),
    n(
      "echarts/util/projection/svg",
      ["require", "zrender/shape/Path"],
      function (e) {
        function t(e) {
          return parseFloat(e || 0);
        }
        function n(e) {
          for (
            var n = e.firstChild;
            "svg" != n.nodeName.toLowerCase() || 1 != n.nodeType;

          )
            n = n.nextSibling;
          var i = t(n.getAttribute("x")),
            a = t(n.getAttribute("y")),
            o = t(n.getAttribute("width")),
            s = t(n.getAttribute("height"));
          return { left: i, top: a, width: o, height: s };
        }
        function i(e, t) {
          function n(e) {
            var t = e.tagName;
            if (V[t]) {
              var o = V[t](e, i);
              o &&
                ((o.scale = i),
                (o.properties = { name: e.getAttribute("name") || "" }),
                (o.id = e.id),
                r(o, e),
                a.push(o));
            }
            for (var s = e.childNodes, l = 0, h = s.length; h > l; l++) n(s[l]);
          }
          var i = [t.scale.x, t.scale.y],
            a = [];
          return n(e), a;
        }
        function a(e, t) {
          var n =
            t instanceof Array ? [1 * t[0], 1 * t[1]] : [1 * t.x, 1 * t.y];
          return [n[0] / e.scale.x, n[1] / e.scale.y];
        }
        function o(e, t) {
          var n =
            t instanceof Array ? [1 * t[0], 1 * t[1]] : [1 * t.x, 1 * t.y];
          return [n[0] * e.scale.x, n[1] * e.scale.y];
        }
        function s(e) {
          return e.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
        }
        function r(e, t) {
          var n = t.getAttribute("fill"),
            i = t.getAttribute("stroke"),
            a = t.getAttribute("stroke-width"),
            o = t.getAttribute("opacity");
          n && "none" != n
            ? ((e.color = n),
              i
                ? ((e.brushType = "both"), (e.strokeColor = i))
                : (e.brushType = "fill"))
            : i &&
              "none" != i &&
              ((e.strokeColor = i), (e.brushType = "stroke")),
            a && "none" != a && (e.lineWidth = parseFloat(a)),
            o && "none" != o && (e.opacity = parseFloat(o));
        }
        function l(e) {
          for (
            var t = s(e).replace(/,/g, " ").split(/\s+/), n = [], i = 0;
            i < t.length;

          ) {
            var a = parseFloat(t[i++]),
              o = parseFloat(t[i++]);
            n.push([a, o]);
          }
          return n;
        }
        var h = e("zrender/shape/Path"),
          V = {
            path: function (e, t) {
              var n = e.getAttribute("d"),
                i = h.prototype.getRect({ path: n });
              return {
                shapeType: "path",
                path: n,
                cp: [(i.x + i.width / 2) * t[0], (i.y + i.height / 2) * t[1]],
              };
            },
            rect: function (e, n) {
              var i = t(e.getAttribute("x")),
                a = t(e.getAttribute("y")),
                o = t(e.getAttribute("width")),
                s = t(e.getAttribute("height"));
              return {
                shapeType: "rectangle",
                x: i,
                y: a,
                width: o,
                height: s,
                cp: [(i + o / 2) * n[0], (a + s / 2) * n[1]],
              };
            },
            line: function (e, n) {
              var i = t(e.getAttribute("x1")),
                a = t(e.getAttribute("y1")),
                o = t(e.getAttribute("x2")),
                s = t(e.getAttribute("y2"));
              return {
                shapeType: "line",
                xStart: i,
                yStart: a,
                xEnd: o,
                yEnd: s,
                cp: [0.5 * (i + o) * n[0], 0.5 * (a + s) * n[1]],
              };
            },
            circle: function (e, n) {
              var i = t(e.getAttribute("cx")),
                a = t(e.getAttribute("cy")),
                o = t(e.getAttribute("r"));
              return {
                shapeType: "circle",
                x: i,
                y: a,
                r: o,
                cp: [i * n[0], a * n[1]],
              };
            },
            ellipse: function (e, t) {
              var n = parseFloat(e.getAttribute("cx") || 0),
                i = parseFloat(e.getAttribute("cy") || 0),
                a = parseFloat(e.getAttribute("rx") || 0),
                o = parseFloat(e.getAttribute("ry") || 0);
              return {
                shapeType: "ellipse",
                x: n,
                y: i,
                a: a,
                b: o,
                cp: [n * t[0], i * t[1]],
              };
            },
            polygon: function (e, t) {
              var n = e.getAttribute("points"),
                i = [1 / 0, 1 / 0],
                a = [-1 / 0, -1 / 0];
              if (n) {
                n = l(n);
                for (var o = 0; o < n.length; o++) {
                  var s = n[o];
                  (i[0] = Math.min(s[0], i[0])),
                    (i[1] = Math.min(s[1], i[1])),
                    (a[0] = Math.max(s[0], a[0])),
                    (a[1] = Math.max(s[1], a[1]));
                }
                return {
                  shapeType: "polygon",
                  pointList: n,
                  cp: [((i[0] + a[0]) / 2) * t[0], ((i[1] + a[1]) / 2) * t[0]],
                };
              }
            },
            polyline: function (e, t) {
              var n = V.polygon(e, t);
              return n;
            },
          };
        return { getBbox: n, geoJson2Path: i, pos2geo: a, geo2pos: o };
      }
    ),
    n("echarts/util/projection/normal", [], function () {
      function e(e, n) {
        return (n = n || {}), e.srcSize || t(e, n), e.srcSize;
      }
      function t(e, t) {
        (t = t || {}),
          (s.xmin = 360),
          (s.xmax = -360),
          (s.ymin = 180),
          (s.ymax = -180);
        for (var n, i, a = e.features, o = 0, r = a.length; r > o; o++)
          if (((i = a[o]), !i.properties.name || !t[i.properties.name]))
            switch (i.type) {
              case "Feature":
                s[i.geometry.type](i.geometry.coordinates);
                break;
              case "GeometryCollection":
                n = i.geometries;
                for (var l = 0, h = n.length; h > l; l++)
                  s[n[l].type](n[l].coordinates);
            }
        return (
          (e.srcSize = {
            left: 1 * s.xmin.toFixed(4),
            top: 1 * s.ymin.toFixed(4),
            width: 1 * (s.xmax - s.xmin).toFixed(4),
            height: 1 * (s.ymax - s.ymin).toFixed(4),
          }),
          e
        );
      }
      function n(e, n, i) {
        function a(e, t) {
          (c = e.type),
            (u = e.coordinates),
            (o._bbox = { xmin: 360, xmax: -360, ymin: 180, ymax: -180 }),
            (y = o[c](u)),
            V.push({
              path: y,
              cp: o.makePoint(
                t.properties.cp
                  ? t.properties.cp
                  : [
                      (o._bbox.xmin + o._bbox.xmax) / 2,
                      (o._bbox.ymin + o._bbox.ymax) / 2,
                    ]
              ),
              properties: t.properties,
              id: t.id,
            });
        }
        (i = i || {}),
          (o.scale = null),
          (o.offset = null),
          e.srcSize || t(e, i),
          (n.offset = {
            x: e.srcSize.left,
            y: e.srcSize.top,
            left: n.OffsetLeft || 0,
            top: n.OffsetTop || 0,
          }),
          (o.scale = n.scale),
          (o.offset = n.offset);
        for (
          var s, r, l, h = e.features, V = [], U = 0, m = h.length;
          m > U;
          U++
        )
          if (((l = h[U]), !l.properties.name || !i[l.properties.name]))
            if ("Feature" == l.type) a(l.geometry, l);
            else if ("GeometryCollection" == l.type) {
              s = l.geometries;
              for (var p = 0, d = s.length; d > p; p++) (r = s[p]), a(r, r);
            }
        var c, u, y;
        return V;
      }
      function i(e, t) {
        var n, i;
        return (
          t instanceof Array
            ? ((n = 1 * t[0]), (i = 1 * t[1]))
            : ((n = 1 * t.x), (i = 1 * t.y)),
          (n = n / e.scale.x + e.offset.x - 168.5),
          (n = n > 180 ? n - 360 : n),
          (i = 90 - (i / e.scale.y + e.offset.y)),
          [n, i]
        );
      }
      function a(e, t) {
        return (
          (o.offset = e.offset),
          (o.scale = e.scale),
          o.makePoint(
            t instanceof Array ? [1 * t[0], 1 * t[1]] : [1 * t.x, 1 * t.y]
          )
        );
      }
      var o = {
          formatPoint: function (e) {
            return [
              (e[0] < -168.5 && e[1] > 63.8 ? e[0] + 360 : e[0]) + 168.5,
              90 - e[1],
            ];
          },
          makePoint: function (e) {
            var t = this,
              n = t.formatPoint(e);
            t._bbox.xmin > e[0] && (t._bbox.xmin = e[0]),
              t._bbox.xmax < e[0] && (t._bbox.xmax = e[0]),
              t._bbox.ymin > e[1] && (t._bbox.ymin = e[1]),
              t._bbox.ymax < e[1] && (t._bbox.ymax = e[1]);
            var i = (n[0] - o.offset.x) * o.scale.x + o.offset.left,
              a = (n[1] - o.offset.y) * o.scale.y + o.offset.top;
            return [i, a];
          },
          Point: function (e) {
            return (e = this.makePoint(e)), e.join(",");
          },
          LineString: function (e) {
            for (var t, n = "", i = 0, a = e.length; a > i; i++)
              (t = o.makePoint(e[i])),
                (n = 0 === i ? "M" + t.join(",") : n + "L" + t.join(","));
            return n;
          },
          Polygon: function (e) {
            for (var t = "", n = 0, i = e.length; i > n; n++)
              t = t + o.LineString(e[n]) + "z";
            return t;
          },
          MultiPoint: function (e) {
            for (var t = [], n = 0, i = e.length; i > n; n++)
              t.push(o.Point(e[n]));
            return t;
          },
          MultiLineString: function (e) {
            for (var t = "", n = 0, i = e.length; i > n; n++)
              t += o.LineString(e[n]);
            return t;
          },
          MultiPolygon: function (e) {
            for (var t = "", n = 0, i = e.length; i > n; n++)
              t += o.Polygon(e[n]);
            return t;
          },
        },
        s = {
          formatPoint: o.formatPoint,
          makePoint: function (e) {
            var t = this,
              n = t.formatPoint(e),
              i = n[0],
              a = n[1];
            t.xmin > i && (t.xmin = i),
              t.xmax < i && (t.xmax = i),
              t.ymin > a && (t.ymin = a),
              t.ymax < a && (t.ymax = a);
          },
          Point: function (e) {
            this.makePoint(e);
          },
          LineString: function (e) {
            for (var t = 0, n = e.length; n > t; t++) this.makePoint(e[t]);
          },
          Polygon: function (e) {
            for (var t = 0, n = e.length; n > t; t++) this.LineString(e[t]);
          },
          MultiPoint: function (e) {
            for (var t = 0, n = e.length; n > t; t++) this.Point(e[t]);
          },
          MultiLineString: function (e) {
            for (var t = 0, n = e.length; n > t; t++) this.LineString(e[t]);
          },
          MultiPolygon: function (e) {
            for (var t = 0, n = e.length; n > t; t++) this.Polygon(e[t]);
          },
        };
      return { getBbox: e, geoJson2Path: n, pos2geo: i, geo2pos: a };
    }),
    n("echarts/util/mapData/geoJson/an_hui_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "3415",
            properties: {
              name: "六安市",
              cp: [116.3123, 31.8329],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nJUXUV°UÑnU@mlLVaVln@@bn@VU@xlb@lLnKlVIJUVxnI@lVL@b°VX@bxnVVUnVVnU@kX@VwV@al¥UUnUWa@@wĸULU¥lKUa@aUI@alLVaU¯anWkUKm@XV@VaXlW@aU_UWVUI¯@ma¯W¯I@UU@WWU@U@@UU@VkV@@WUUm@UaU@lK@IUKL@KWmXUWaXI@@a@a@U@U@KV¥lwk°b²JVIVKlV@UXlaUl`UVLVVVUJU@Lnm@_VK@KUIW@J@Xk@WW@UmmXmWk@kK@aUUVmmkUwUmWL@WmU@UJmUULkKWakLWVkIlwULW@X°lUJ@°ULWVwmJ@bmb¯Vkm@@WkWm¯wL@lkXWmXym¯UImJUbkV@Vn¯@V@lUb@mk@maUxmlUbULWn@JLmKUkWKkwUKbmXWxkVUKmLkVV@JUUWL@xkJUUV@X@VVlUbVX@xk¤x¼xWxnnn@Þ¼JVb°aVn@mlnXUJlbVlkz@lUlXJmxVxXnWxXÈWlU@UxU@VX@xUL@UÆmLnV@lWXk@@JlbXblnlJ",
              ],
              encodeOffsets: [[118710, 33351]],
            },
          },
          {
            type: "Feature",
            id: "3408",
            properties: {
              name: "安庆市",
              cp: [116.7517, 30.5255],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n°znWXlW@kK°xXnl@Xn@l°Una@anIxXUVK@¯VIkW¯X@VKxklJXUlKXblLVKnVVIV@Xn@XKVnVxlnnUlmV@²óUkVlWbln@VVVIn@lw@WVIXblV@ÈxaUaVIVVnKVLKln@b²K@»U£ÑķġÝÅbKa@Im@Û@kWÓkkmKÅnóJUÅ£W@wĕ@wĉţ¯¯UkK±l¯U¥UÑkÝUķ»Ý¥¯JIUVbUl¯ÈV¼VJU¼Vb@bkLUl@VJ@bUXÇ@lkVmXmKkLVxVL@VkVVVlzWkbmLUUUbVbUVlÒnJlUnLllUL@bUVxlLXVÆ¦ÈVU¦WJ",
              ],
              encodeOffsets: [[118834, 31759]],
            },
          },
          {
            type: "Feature",
            id: "3411",
            properties: { name: "滁州市", cp: [118.1909, 32.536], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@`nnl@xK@X°KXVIXVlbXVWnXlL@È»LVan@VJêVVn@X@laÞbVayn@_xnWVXnWl@VnUVkI@lnXKVLVV@V@kW@LlVô@J@bVnnKnkVa@»lç@nwKmaUUUVÑ@nmWXalI@alVn@VwUaVU@nlaôJnUVVXlJaXXVK@UV@VWx@nXVWXVUlLUbVULVVnUVbUbVb@@aKÆnnKVK@U@UU@@a@V°¯ÈJVIlķ@aaUaVKU_@mkxUI@aUlyU@@wkKWmUbUnUVWbkJW_J@bn@Vm@@KULk@V@@bVbÅm@LW@UVVbkK@UkKWL@VULUKWIUJUbkK@_WVXUJka@XVa@ky@aVIUUW@@mUlLKWÑUKVan@UkVmmIXKaVaUwVU@UmykU¯@±UUL@WUIVUU@KkIWaaU@kUUaÇUó»mKk¯@y@kWK@bkI¯`mnl¯XWlkVUzUJlbUbVJl@nnm@VULV`XnWÆbmUUnJmUknJ¯km@yk@kUxL@VUbmnn¤lX@`z@JmaULUVl@Xn@xllkXWaaW@UVmUb@mVXWxXbWbUÒnVVnVVUL",
              ],
              encodeOffsets: [[120004, 33520]],
            },
          },
          {
            type: "Feature",
            id: "3418",
            properties: {
              name: "宣城市",
              cp: [118.8062, 30.6244],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vb@XLJXxlIXxlVlV@I²¤nlUnVU@VULWVUJ@Lnb@lV@UnV@@VVVlLnbnJUVkUUVWn@@anUVnVJVIV@@nUJVbUb@VUbVK@bn@VbnIlxkllXVlXKWUXUlL°¤UVVb@bUlkXWxXz@IlaUlnUlJVInVÆJULVUnVK°@VnlVnxV@XLlK@wVL@KnUlJXUbnKVLXlUw@VWlLXKm@@a@VLnmlIVVnKn@kVaVlwk@@a@k@VIUa@maUa@wna@kmWUUmVUIVÇ@aKmakUJ@InmUUaVaklX@Vk@m@VU@wnK@alKVUkUkKbmUkm@U£WVk@@UÝbbaÇx@b@WVUa¯@wVwUUV@VwnK@KWaÅ@KIUyUI@WmXóUbWaKm@km@IUyIUaWKx@zUKUL@llVUnkLVVkJWX@VUKUVIkVWakb@VWb@n@JkXUlmL@xkL@`VxLUÈUJ@Vm@@bmIUlUL@VUVVbknm@mKUwKVÈ@J@LV±kkJUIl",
              ],
              encodeOffsets: [[120803, 31247]],
            },
          },
          {
            type: "Feature",
            id: "3412",
            properties: {
              name: "阜阳市",
              cp: [115.7629, 32.9919],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vn@ak°a±@¥@UUI@aUmlwUUxb@¥XU@mmI@a@Kn@@_W@@WI@mUVVXUl@XaV@K@I@aLX@aVI°K@KVLUUwyXkK@kKÆbXnlK@k@aJlU@w@U@»@aXKWn_JXkVKn@°LlKXW@¯U@aUK@kmJUwVIUJkmLK@kka@wUVm@@am@UkUbkK@nmVÒ¯VUWVVmIULk@ma@kkK@nUbUamU`UUVUkKVkkW@@bkmnmUXVKXVL@VbUmbVXJ@nmKÅI@KWKUXVJUL@VUKUX@KUKWL@LUJmaXXm@kVVV@L@VUL@VlK@L@V@LUK@VUb@UUU@°@nVxU`Lkn@`@XVJ@XVmk@UKmV¯LVVn±Wm@Ub@JlLUl@VLk@lmVVn@bnV@V°IVaVJXI°K°V@XXVlVVUnKVlUbWXnV@bV`U@@m@@@nxmn@bXVlL@¤nbUl¦VVUnJVUVl@@bÞL",
              ],
              encodeOffsets: [[118418, 34392]],
            },
          },
          {
            type: "Feature",
            id: "3413",
            properties: {
              name: "宿州市",
              cp: [117.5208, 33.6841],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@UWU@bkW@aWU@aUIkWVlLXblVIUVV@mn@V_n@VaUK@I@UaanJVU@lVUVnnKVVlaUaI@wnKLnll@nVlk@wVKXkl@@bbUJ@VU@UUUyVk@aVUXwlWXXWU¹@aU@WUI@mlUnJ@Il@aXbV@VKl@XxVL@WIJlb@al@IUUm@@aVK@¥¯@mUķ¯bWk£Vm@akm@VaÅ@UVWa@UJWkJUbWbU@UlXk@amV@K¯nk@lU@Uxmz@bU`ÇbUbÅVm£U@Wwx@akLUK@UlakwUJWVkLmaUal@n_mVUnKVUUmÅXWa@kJmx@XUJ@bVLXxl@VVUVVUbkLWbU@@lUVVVVXK@XkJ@nU@@bV@VxUVlbU@xXLWn@UxVbVĊV@b@XV`mnkJ@kUKmbaU@VbnbÆx@XU@@`k@@bl@@bkL@WakXWaU@Vmkx@XWW@@wUUUbJU¯V@¯ÞU@WxXlL@bkb@lVlnbJW@kkU@mbkaWJIVlmz¯`UnU@mb@@`@bkVlnV@b@V@aVxn@VxKXnl@nbVKbVK@a_V@Vw@WLlwnK@UmIU@VW@UÈ@lKnalw@@V°@aUmlUUw@V@@UXK",
              ],
              encodeOffsets: [[119836, 35061]],
            },
          },
          {
            type: "Feature",
            id: "3410",
            properties: {
              name: "黄山市",
              cp: [118.0481, 29.9542],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lXnlWX@VUJVnUJVzXJVxkVJlI²lU@K@IUÇLVxnLn@lmUaVU@UVKVknJ@an@@UVIVÇKUw@_lK@wnKVklW@I@mXa@UlaXblUJVUVL@UXWlIUUlKVmkU@kVKVL@ywXLVbJVz@Jln@nLXbVaônW@la@UVWUa@@a@mk@WIk@VwUa¯¥m@UUVK@ImK@aX£kKÅVa_@±akXWWLnU@@a@¯mK@LJUWwUVVmbXX@lWLn`mzUJUbLk@makVWmkXambkKkna@ab@U@Unm@WV@VbUbUJWIk@@lmL@°UVUVmn@@kmWkb@x_m@@aU@b@JlUzlWxXn@b²@l`IVlUlL@VKnVbUl@VlIn@@bbVWUk@@bX@Valb@bnb°Vn@xVKlbVnV@VxL@ln@UXVVL",
              ],
              encodeOffsets: [[120747, 31095]],
            },
          },
          {
            type: "Feature",
            id: "3414",
            properties: {
              name: "巢湖市",
              cp: [117.7734, 31.4978],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VV@blL@XlWnnn@VXXl@@WIX@VJ@LxŎxln@bXJVblX@VVbUVn@VbUVlb@LnJVbVLVXLÒVLÒVbVIVylUXk°Wknm°_lJ@aXL@lz°@lnLô¼VÈVUUaVKU@WW@@UUa@knmVLlaV@a@kak±@UmwkKmkǉÝUUkL@mlIVmnÝWkkUÝ@KƑĉa@»mma@mX¤¯Uw@@UU@bU±±L@akmLUKmLUUUJVbbÇw@kUWaUJ@Xkxm@UJUUm@kakXUVl±ôU@kn",
              ],
              encodeOffsets: [[119847, 32007]],
            },
          },
          {
            type: "Feature",
            id: "3416",
            properties: {
              name: "亳州市",
              cp: [116.1914, 33.4698],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lU@Un@@anUlw@KVmUwlaX_lKna@KU@@kWKUU@ankWXK@@V²VVIÈU@al@VaÈamK@wU@klaUV@XVUU»WUUbkmUkVmk@aÈw@mWU@VkIkVWKUÑķXȭºU¯l@kkLWmÅaL@lLWlzVxVUK@L¯LUJ@bWK@b@JLU@Wbk@WVUUV@nJ@XX@@`m@@L@bnJ@nWV@¦awVVkxVn@bVJ@V¦@²¯blb@mUU@¼¦XbUV`@nnxUxWLkUkVWKkV@XV@@VVL@VX@lVV@L@blL@`L@xXKVL@VnU@lwnU@ml@XnV@@UVW°LnalUI@aUK@aa@UkXW@I@mWL@UXK@UVW@U@@kWn@@V@XblaVxL@bVKXbIlJ",
              ],
              encodeOffsets: [[119183, 34594]],
            },
          },
          {
            type: "Feature",
            id: "3417",
            properties: {
              name: "池州市",
              cp: [117.3889, 30.2014],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@V°°ĊŤ@xĖ@xXÆ¤VôIÆmnLllXÔ@lÜn@@JbLÆaĢÞĸ°VVUUKVanK@UV@VLVVnln@xnklxXamk@WV@Xa@naVkKlk@mkUWwkJWwIWK@UaUwWIUyVIUmVI@UXWmkkWKUUVWm@@kKw@UUUmkaULwm@¯Uma@akaUbW@@a@VlUXa@am@kJ@UVkUamL@UkKVUkJk_±@a@WmXwÇkkaVaUa±wV@VkwnyUaW@UU¯amLk@m@kmmU¯K@L@lUX¯WlkXVbbVUL@J@LVKnlJXnlb@`nXlalV@bnL@Vnb¼@lXbWlkLK@zUJmIUxUVUVmX",
                "@@llUL@VlxL@a@UwXa¯@",
              ],
              encodeOffsets: [
                [119543, 30781],
                [120061, 31152],
              ],
            },
          },
          {
            type: "Feature",
            id: "3401",
            properties: { name: "合肥市", cp: [117.29, 32.0581], childNum: 4 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@LxVĊLÞkVlVVXaWaXwWnU@anVVUX@bXblWkk@wWmk@VUVKnb@Iy@_kWm£nmVa@UKwlVl@zn@°lIlmnVIVmnVaXÅWmU_VK@Unmmk@UIVakaaUÑUKÑWKUUKUamI@KkaVUUam@VUUa@UkWUaWI@akmōwwUL@`mn@KVIUVUUUKVk_VkbW@VkUULUJ±I¯alkxU¦@L@V@V@b@b@WJXbWVXn@LKVL@JkLV@Vbn@VV@XU@UlV@@VV@V@XXV@@VJ°°Xnb°@JUVVXV`@bkXWUbU@Wn@VLXlm°bVUbkK@bVJ@bVbkLV¦KķV@x@XbmVVVk¦",
              ],
              encodeOffsets: [[119678, 33323]],
            },
          },
          {
            type: "Feature",
            id: "3403",
            properties: {
              name: "蚌埠市",
              cp: [117.4109, 33.1073],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VÒXLlUlJ@UXV@nÇx@bnlUVllnVaXVV¼UVWU@V²wVV@Vl@VnwlI@XbÆWVnUVmLUVnm`k@VbnblKXUVIlxkb@VVLlK@bwXxV@n¤ÆUVaÈaV_@anyVwV@kl@°m@LnUbl@WVkV@XaaVIXlIV@XbVUÆ@XKWwUkmW@_UmnIlJXkWKXmV@w@_XV@Kl@kU@KlX@@UUUUKWLm@klJVUUmk@mXUWmXw`m@zUbÝakbW@m@UUéUIm@UbKÇ¼@kKWXmWUkaWUJWU¯L@WLwk@mm@_ÅlUVkmWUnV@VWLUbbƑĬ¯l",
              ],
              encodeOffsets: [[119543, 33722]],
            },
          },
          {
            type: "Feature",
            id: "3402",
            properties: {
              name: "芜湖市",
              cp: [118.3557, 31.0858],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bVaV@XllLXU°lL@V@VUnVl¯IkVUVU@@b@lUXUWmbn@¼bƒĊLÞ@lVXlmÞUnkJ@nlKVVÞXklWVaVI@aUKn»lL@Kn@XXwlm@mn°@V@WywXlWVk@aUaVU¯£kKWVXVWLUkkWlkkwmJUam@@aULVa@UVaUaVI@m@UUJUIUmmV@bm@UXVVUlVmImakKUU@UU@VmU@@kma@KVIXUVK@UVmUkVm±£@JkU@nlkLUlmb@WbU@@XnlWb",
              ],
              encodeOffsets: [[120814, 31585]],
            },
          },
          {
            type: "Feature",
            id: "3406",
            properties: {
              name: "淮北市",
              cp: [116.6968, 33.6896],
              childNum: 3,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@lnnK@¦n@@VV@@VV@nIVV@VW²a@b@bVnUVVV@Vz@l@°UVIVaVV@x@XX@WlwUnV@XblWb@XlK@a@k@al@@_V@@WÅwmaUaV@bnaVL@llInmU_@W@aUUĉUaVwm@XWK@wVkaVUUwU@@aV@@mlI@WLWUUUVU@kV@XalKVaUVUUUk@WwUK@aVI@WUk@@UUU±xkb@lV@xnLÇbUbk@@bÇVUJ±U@U@WLXml@bVVXL@lV@@LmbkLW`kbVxUn@LkxmV@bm@@VkV",
                ],
                ["@@VVVkV@¥@UV@U@VUUJkWakKUlXVJ@bXV@blX@aXV@V"],
              ],
              encodeOffsets: [[[119183, 34594]], [[119836, 35061]]],
            },
          },
          {
            type: "Feature",
            id: "3404",
            properties: {
              name: "淮南市",
              cp: [116.7847, 32.7722],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°kƒīaVaXK@UUVmnXUlVÆkVKUUUmmUÑkUUÝlĉKUwKbU@UxW@@lmVUUVmUUmwaWkL¯K@mULWlIm`XWL@b@¼@V@xkVI@b@l@lkV°Ȯ¹ĸW",
              ],
              encodeOffsets: [[119543, 33722]],
            },
          },
          {
            type: "Feature",
            id: "3405",
            properties: {
              name: "马鞍山市",
              cp: [118.6304, 31.5363],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ǊnllLnxV@laXLVKmaaXbVIbVKVVVIVyn@n_W@@UnJlUVVXlLnaUWlV@VVIXW@_W@XK@K@UVUUwVamÑXmmwwKUnUKçU@JU¯@m@nknWxWm@@LkKm¼VL@bUJUbkXWl",
              ],
              encodeOffsets: [[121219, 32288]],
            },
          },
          {
            type: "Feature",
            id: "3407",
            properties: {
              name: "铜陵市",
              cp: [117.9382, 30.9375],
              childNum: 3,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@ÒV¤@¼V²@aVV@@x°V£nW@nbnaVXVW@k@aV@VUUl°JUkVm@U@UkK¯WVkKWkU@Ubakwmlwm@kUmUUKU@@VmLUbVLUV¯U",
                ],
                ["@@LllUL@VlxL@a@UwXamK"],
              ],
              encodeOffsets: [[[120522, 31529]], [[120094, 31146]]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/ao_men_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "8200",
            properties: { name: "澳门", cp: [113.5715, 22.1583], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@HQFMDIDGBI@E@EEKEGCEIGGEKEMGSEU@CBEDAJAP@F@LBT@JCHMPOdADCFADAB@LFLDFFP@DAB@@AF@D@B@@FBD@FADHBBHAD@FAJ@JEDCJI`gFIJW",
              ],
              encodeOffsets: [[116325, 22699]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/bei_jing_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "110228",
            properties: {
              name: "密云县",
              cp: [117.0923, 40.5121],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@vIHZDZQtDLNMXIbHRCXXITbJ@H`LGPRDDJNCLHTOCWFGvGBUJMKGFO^IHWXITQCIY^AXGfRDXF`DJOLB~G\\DZIHHpErUVMhHb]\\MBVF@FTP`@zTbD\\@~M\\K`H^EVODWICAakAQXoIcCOCIgGYNWFWNGGKKGaJEGMEIKYJUT_J_Go@_SyQaSFMEGTcYOQLIIi@EKAUPCV[EEXQCW|aMUMAaYCYNIDGGACIMGGSKDQGaF_C[GaB@GOIiOKAYLmI@CN]F[SWWAcKKI@HMUimEKbeYQYISNUOcBKPIFBNgvDPGZYFSf]CMSIWGEUFgDIQ[MeDMJS@RR@LphFPCHaBAJKF@J]IBJO@HlO@@RKAMPJHCNDJTHFP@ZGNANBRFH@J_fM^ONJNF\\VTDJHDON@XRND\\XRCPVETCLBVKDFJINHRGPRV@\\CLJN@VbXbLVT",
              ],
              encodeOffsets: [[119561, 41684]],
            },
          },
          {
            type: "Feature",
            id: "110116",
            properties: {
              name: "怀柔区",
              cp: [116.6377, 40.6219],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@JHTVHXCHPfnDJGHNDJSB[JSBGVSAOH@PMPuDEHHXZN@PHF@ZLJ@LHVYJA\\OFWP]BMtMBSRGV[JeVAPQVIFENMD¡@^NV\\JH@NNL@NM\\kTQ\\I^FNIpBHGTBFFAZQfKDIXQTLXFXNNVMVHRGpCFLlRLEVBBH`IVO\\G`RDPAXLXBXORHZEHTDLLN@VGTMrQNFPeASKG@GMOAKBYMK@GTUHUXSHMVDNMOUEOZMJML@^KRACMZEZMRQLUHE@OFENPR@DI\\ChMHIDG\\GJMDWHCKGMDCIQCHO_K@GaIJSWWQDaGWJMNCKRsCYGYuJUSaKaW@UIMDK@[QUHOGQJMEILCAUDKFSOUQD[WMCQ@WPMGCCIUSE[IMPMN]`e@IEGAQBMHM@YEOSGCIDMIGNOLB@QP@GkP@AI^J@ILEBIbADGEOog@KQQWSekWQQUOFKZLF@PUNmIaHIUeBCTSHENcJa@_IWSaGu`GLSBKJQFOXGDXVQVOBIHcDSJWBEFGTMH[^mLaXcHiKElTRKtFXZ`MHMPCNRDxZB\\ICIHK@KHbIVFZ@BPnGTGbDXRDJaZKRiGEFSFEJhjFNZFjn",
              ],
              encodeOffsets: [[119314, 41552]],
            },
          },
          {
            type: "Feature",
            id: "110111",
            properties: {
              name: "房山区",
              cp: [115.8453, 39.7163],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@h@bl@HRJDZ``TA\\VVD^H`\\pF\\J`JGv@ZO\\GPSTEjPTR`FnEbDTDHEhLFMTK@ETSPULKEI@OVISKSJACEQNQbVIXGDIN@dMB[IIBcN]ZHNLP@XOWCFWCNRHTpATD@^NVNLED@Rh@jCEF}E[OOHUEW]W@QGGDIQSH_MmFmCUT_K]i@MHCMWFCFE{BMHMPOHKS]CFNGBELDH_@BcAKOACESAOBELaXAROB@FODMEDWJAG[aE@UM@DImEWJMC@OeCA{aE[@{L@MINUCQXKfUJORCHqJBF@TCXWNQX]M[EAJO@@KMBQJIC]EWMCCUBEBFHKDOTMBGNGF]MWDBRDdMDQVyE@LPVHDCP@JVVMTG~HNSH[CmRUvHPHBbA\\PTNRC\\YNJPRARPJDDR",
              ],
              encodeOffsets: [[118343, 40770]],
            },
          },
          {
            type: "Feature",
            id: "110229",
            properties: {
              name: "延庆县",
              cp: [116.1543, 40.5286],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@^AXOPEB[ZIGU@KKI@YGE@OYMGWFGvCNO@OPGTBHUTA\\ITACIGMIHmCOeDGGWSUIGimYEEMgiFITEFEjHLQbYCIWQaCSHmHAOY@UEaJG@LGLDJ[JAwYQCDMNONGY_EWLsSQFkMO[NWAIGaIYL@HMBOKiOQDWEUDMQSF_QIUBWdg@[NaAKQ@M]OQ@WhgLUMMFYQDIRCEUZOOCIOJ[KIUMKL@HIDKVEBM`HJAJSJUdBLGNEdMBMO[BYEWJSNKNaD]PE\\SjOT_RQVEZPpNQXfNA~lNG`@PNLp¼RFLfbdKbATUh@FSNWjGFZVLFHVA~X¨PPROfFJbNJPLFbENJPrEFNPFRHDDJdENJLVEPBJTVTHGHFRFH@PXP\\ORQHW\\BjWFDERLPPBbB\\E`B\\D\\L`@F]FCnJ^AZL",
              ],
              encodeOffsets: [[119262, 41751]],
            },
          },
          {
            type: "Feature",
            id: "110109",
            properties: { name: "门头沟区", cp: [115.8, 39.9957], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@V@XMnGPY²JQNEhH\\AZMPDVTTDZCPiJkHSHCjIdFtEHITCNITQEKUAMCEIKCECABYESKFWAKBEIIHABGDCKCAIHMHALKEI\\CFIBILIJQZS]BBEECS@E@@C]COKI@CABAAEEDMGCH]A[M@CJWHJaUMRFRBDTITLUJ@PFJKLOVST@FSLENgKGFSCaCmF_ESQiOSFOT[HYPu@IH_[IoE_[]GUC[USB__CYQI@Gakg@qZeHQNMNV\\FVLPgJAFJPRLCH[XcPELUT[JiV_EELFTADBXRTRLJC@fHXHHbPd`fR@NfT`@TLplHMpCEJHJBVLF@JTVnG^KXDXHNVGRLRXFJVdDHSNWLGfEzA",
              ],
              encodeOffsets: [[118635, 41113]],
            },
          },
          {
            type: "Feature",
            id: "110114",
            properties: {
              name: "昌平区",
              cp: [116.1777, 40.2134],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VNLJI\\JPPDYPFVQDCJZRNEVNhKXgR@^P@NLRbB\\Mh@XcVARJE`RTCNFVXRCjPPLNA@GZKbJJHXB\\MNPjLdGbWnK\\]NGHSFEXATIdCJGPARUWUHCPWRELITAHKv_E@iYCaW_BQ\\Y@QIO@QDCIGZCEMWGFMFAFgHEDOCSqKCCFGAMKEAC@ODGCGs@WH@KQA@EE@CE@GEA@EH@GGUEEJEAYD@JM@@DAA@FHD@FTJEHUC@JUBKCKG@G[CIIQReAYhO@OXGDO@@FF@IHJFCPEBACBIAAKDOABXARHPNEHGbQAAKQFGIAM[C@WHKaGiCEGOAHUKCIokSCUSOCYN[BgGMFIR±OZmHWNU@ShbbXDHVXXGJ^lZ@PZ\\Nb@\\FHJAD",
              ],
              encodeOffsets: [[118750, 41232]],
            },
          },
          {
            type: "Feature",
            id: "110115",
            properties: {
              name: "大兴区",
              cp: [116.4716, 39.6352],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@F\\E~DFN@BDFEpHFCHBBEGCDCJBHUDSBB@ELCPbF@B\\J@BJVAFJ\\ADKTCBGECFMT@BMN@@FH@DaNBEnvB@FPBATK@FHEFIAKFBFL@@PKBFJHC@FXBRAFCDMPDTOL@JIVFDHH@DDH@BGRFCDLD@N^@@CNA@KNOAEBCECFEGCFGMGFIPMOEJOLBADBBHGG@GCHIECY@INC@DMGS\\AIOZAAEYA@GT@KKMBEETCGMVINFxA@MJADB@FlA@HJA@NND@DFA@DVAZBBOFKH_JA@K^GBC@EFEG@gAENMXKJigC@IbSJMqGOP£RGSMGE@kbQFDPEFiBSGGSBK]I{CDWCIDOic[C_G@SuSO@EWKCO@MNY@\\uZOPENQD[LKESSKGBKEG@EJGAGHoH¥CqhifeJkX_XFFGHFNEDFPENKHM^IFIVL^S`DVEnNnG`RTCJHH@R^XFXGVPP",
              ],
              encodeOffsets: [[119042, 40704]],
            },
          },
          {
            type: "Feature",
            id: "110113",
            properties: {
              name: "顺义区",
              cp: [116.7242, 40.1619],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@EhEBENXHFNYDJHCD@RJP@R[ZARX`DbjZF@bHXT`Jb@dIFMTGDSfAJVbGnJVM@OKELYPERVXRflXTT@NIfC\\NJRhCVEHFJXNT^DTeZEHYCOhuAMJELOdAVPTMOWBWNMNEJgl]@WGUFIC[T{EEDEHGCIGMI@SECUQI[D{A{GQESPUH]CsiMCmHUeoHENcAaDGCMDGMQCACCBaCGLMAHB@DIEQLOAAEEJ@CW@CDINGAAGKQOCgV@LG@BEGDKNeREFBNCFIDOPKD[@YRW@GFWDAFE@EHDDrLDTCPGF",
                "@@KrJEH[\\B@FF@CHFBHUNAJKADGECBCMAG^E@EbI@BEGP",
              ],
              encodeOffsets: [
                [119283, 41084],
                [119377, 41046],
              ],
            },
          },
          {
            type: "Feature",
            id: "110117",
            properties: {
              name: "平谷区",
              cp: [117.1706, 40.2052],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ZJZRafFLjnVGNJ@LLBdXX\\T^EDMJ@nZKLBjPPJ@HbA\\H`DbERHLCFK^BZaFWXQLAGMHa\\OLO@SBIpBdCLVQfElO@GSAKEDQTC@GEBKG@ORIJBDAPDFA@CaOq@GGQAAEJK@KMUGAAGEAa@MGMBGCGSIIW@WSUCMDOJeWOM@IUF{WMWaDIMgIoRoCOKeEOEAG_I[cg@wLIFENQFDVTFJ@HNDJGHCFFFS|D\\EJHV@Xk^IhMFMNAXPX",
              ],
              encodeOffsets: [[119748, 41190]],
            },
          },
          {
            type: "Feature",
            id: "110112",
            properties: {
              name: "通州区",
              cp: [116.7297, 39.8131],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@FDAJTGDNDCTDDEDBBE@DT@@EHCDGJ@EIZ@@FDBR@ATFBBVFFE@@HNA\\VE@CLIFNJFNJBCP]A@LJFA@HJEDD\\C@DBCHLAEPF@@DH@APHAERDF\\GIxDTM@CFLBBFJ@CNUPMHECGDBF]BMFPDLRBHHBJMDCX@@DFIBFPBRKJF@CGANBHKbDDABDRDHNNCHDbCdBFMpGHiOYMefKJMC}HWAUNW\\NNBNAkNU|]HMTMN@MZBLFFF@RIRUTBMFIEGaAGGAOIIUGTSFcYKS@MSLYPKRUBU]EWDOI]CKGASgW@MTWKIMCS@uMAKKADMECGAKVUTSDy@IjWLMNBF@hHEF@FAD]H@LIBG`ELAPYAUB@CEB@CMC@MIB@GkB@ECAIB@NwBMEUJHNSDFFNALLS@@HZBBFYBJP[BHTCND@JMZ@FDGJHDH@GHAABCKAIPPFONEJNHEHHDEFFDADBFMP@L",
              ],
              encodeOffsets: [[119329, 40782]],
            },
          },
          {
            type: "Feature",
            id: "110105",
            properties: { name: "朝阳区", cp: [116.4977, 39.949], childNum: 2 },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@bFGHBHFBFIVFHHG@@FFB@HDFF@@FRB@LXGt@DHCH@PBDLFBNF@BEXCHEX@ZQ\\@LCPOJCDEAMFEfQLMHCAFH@@KhUNE^AAEHCFDNGVODMI@AEKADEN@CSJw[HCEFQGBBOG@@CE@FOKBDGCAD@C[FCGIB@IE@K^BDOIAEMMIJEDKF@[UMB@GF@EEAUEABSQ@CA@EY@FJI@CHGD@FS@@CAFCACFSCCDCMSHBIECMB@D]@@MKCDCQEAHG@CCG@CGUEIJK@SPOCCNEDQBDNDB@DJCDLFCBBALJB@BVGPBKVO@KHCCCD@FE@BNA@FNCTDDJA@FGB@NBDW@CL@hT@@ZHHQDDDAFSAANBC@HG@EFS@@DE@@PCB@Ue@CADNJB@FCBWA@LI^ix@FIHrH",
                ],
                ["@@HUNAJKADGECBCMAG^E@EbI@BEGPKrJEH[\\B@FF@CHFB"],
              ],
              encodeOffsets: [[[119169, 40992]], [[119398, 41063]]],
            },
          },
          {
            type: "Feature",
            id: "110108",
            properties: {
              name: "海淀区",
              cp: [116.2202, 40.0239],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@plDJVLGPBFHjDbHGL@X\\DBNHJREBLRBHaFGMGOBQAWPBLCBBAJBDFADOIEJGE@@EP@HCPWP@ZgfBRQJJ\\D@HLHLDVA@IVDFGSI@EGC@EBB@CN@@IZCAGHGaEqGJG@EjwJ]@K@GSA@e_I@NE@CA@Kg@KC@ENCFAKQAW@WIMK@V@I@@F@^EDFB@HcIaDYCBRRDCHD@EFLN@FE@CJUPEJOJMTBPEDIFCMIAKNOGMRFJNDVBFLSRMJSDGJsFcEiJGDGTIlOjYD",
              ],
              encodeOffsets: [[118834, 41050]],
            },
          },
          {
            type: "Feature",
            id: "110106",
            properties: {
              name: "丰台区",
              cp: [116.2683, 39.8309],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@hMN@NFTQCFRCBJFA@HJ@@HJ@HJ\\FTACD@@UNLXJX@@MA@@IECAQlDFEHBDI~D@GXCFMVDFCH@@NF@ANJC@FnAB@AMF@@EDCDDLGP@LUOAUH@AIABKAAEDCKID@CCACMWA@EGDEILA@OK@AELEJBFEEGL@BSOA@EuAFmMACbG@@EM@ANS@ENFDAHSDCL[BEIUBAII@A[E@OaKD@FAACTGVIACDHDAFGAEDoGEFACM@ig@@QFCMKMU@]SCoBGSMQDEXXDWPO@MKYGM^AdJJA\\cNB\\G^DNHFCBFABDBJ@PL^D@DF@T@FDAF^A",
              ],
              encodeOffsets: [[118958, 40846]],
            },
          },
          {
            type: "Feature",
            id: "110107",
            properties: {
              name: "石景山区",
              cp: [116.1887, 39.9346],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@NQPHLMJBDNJEFCAONSPIFIVODIF@@EKMFEC@DGQCAQZDbCdJ@GEAFC@]@EJ@DCSB[EGII@@GI@@GEBAIQDDESRMEM@gNYTIRKJAJEJ[DFJKLGBGNBJLDCDAHGBJJAFBLEXTLZFBAFDLD",
              ],
              encodeOffsets: [[118940, 40953]],
            },
          },
          {
            type: "Feature",
            id: "110102",
            properties: {
              name: "西城区",
              cp: [116.3631, 39.9353],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XBDA@EIACM@IJAD]BC@SFABISAD]H@@OAEDQEW@BLEMD@FLDh@@LDBF@@M`J@fTB@H",
              ],
              encodeOffsets: [[119175, 40932]],
            },
          },
          {
            type: "Feature",
            id: "110101",
            properties: { name: "东城区", cp: [116.418, 39.9367], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@DBf@@VDA@OF@@CT@FEH@@GADBMTBBECCRCGG@YS@@gDK@AC@PG@C^TBAJEB@TADC^IB@J",
              ],
              encodeOffsets: [[119182, 40921]],
            },
          },
          {
            type: "Feature",
            id: "110104",
            properties: {
              name: "宣武区",
              cp: [116.3603, 39.8852],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@RBX@RFFCBFU@aK@WA}CCJGAEFkCBRFD@JB@@N"],
              encodeOffsets: [[119118, 40855]],
            },
          },
          {
            type: "Feature",
            id: "110103",
            properties: {
              name: "崇文区",
              cp: [116.4166, 39.8811],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XBL@@bEVD@BX@AC@MHA@EIBCCDSEMmB@EIDBME@@MG@EDUCENWD@H",
              ],
              encodeOffsets: [[119175, 40829]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/china_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "xin_jiang",
            properties: { name: "新疆", cp: [84.9023, 41.748], childNum: 18 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@ρȁôƧƦóəʵסʵóƪԫʵѵͩƧͩړυࡓɛʵ@ȃ@óᇑѵƨɝɚôóНѺͩɜ̏ԭʵôƧɞñ@υƩ݇ȂóƩƧ@ѵȂυƥŌਗ॥ɛóʵѵƧѹ݇̍ࢯəɞυρͩ̏óਙƨƧŋôōó̍ͩóʵןóŋړͪƧѶ@ɜԭԫƦɛȄ̍ɝȄöςƩȂ̏ñȀ̏ƩóóŎə@Ő̎@ɞȀɝŎôƨóנѵȄƧ@óŏɝóɜôŎ̍ͨςŎ@ƨóôƨɞ݈ʶóƨφó̎Ȁƨ̍ԮòѸԮמ@ѺȀ@ƪၬֆòȂñ̐òȂɜóƨ̒Ŏ̑߼@φρȀ@Ő๐ς̎Ƨφ@ɝφڔ೦Ԯǿࢰ@ƦŏԮƨƨȄƧ۬ɜʶڔŐɚɚóŐôƨ߼ôƧƧó̐ƥóŏѺǿƦȁφƧςƨƧ̒@ɜƥƦυ̐ɛƪͩƩəƪʷ̑ə@ȃƨʵנŋྸōਚԭԪ@ɝƨŋ̒օςʵôƧ",
              ],
              encodeOffsets: [[98730, 43786]],
            },
          },
          {
            type: "Feature",
            id: "xi_zang",
            properties: { name: "西藏", cp: [88.7695, 31.6846], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôŌנôʶ̎ͪôóŎƨŌਚƧ̐ôςͪφɚɝࢰ݈̎ѺѶƨôʶ०ɜਘƦŋφѶȁ̍ôŏɚŋ@̑ə@ŏò̍ɜóƥôʷƧ̍φѹԪ̍ע@Ѹʷɜ@ôñנ@Ѷɛɞô̐ŏѶƨѸƧƥōƦôŏô@ƧôƩ̒ŋƨŌƦǿô̎ɜȁ̒óʶѶôôО̒ςƥɜНφσɛȁ̎υƨఱƧŏ@ʵƥ@ŌóóóͩƨƧóŋ̑õóɞóɝԩͪɝρôƧ̍ƧѹͨڑŎ̑ōóƧࢭͩ̏ѵɝóఱóóԪυô@̒ƥŌ̏Ƨ̑Ȅ݇ŎƧѵӏ@ɛõŏɛȄôӒƧŌѵǿɝƧŋԫ@̏ʴƥ@óǿ̑Ȁóǿ̍ςóóυô@ʶɛñρƦƩŐó̎óѵó̑ͪࢯОóɜןƧ̏ƥȄ߻̎̏̐ןŎɝɜöɞƩȀôöɛȀóͪ̐ƨƪ̍̎ȂƥԪυО@φɞôƪ",
              ],
              encodeOffsets: [[80911, 35146]],
            },
          },
          {
            type: "Feature",
            id: "nei_meng_gu",
            properties: {
              name: "内蒙古",
              cp: [117.5977, 44.3408],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ኊȁ૊ö߼ƩɜɛנñԮɛѶóԮô@ȁѸóמ̎ගѺၬ@߼ʶԮӒ߼̎@ŐѹӒ̒Ԫƨöග̑ѶȄ̒ς।ѶɚöɞɜʴڔôôȂ̎ѺȀςƨƪóԪɜôɛОਕڔԭѵ̍ѹȂԫɛƥ̍Ȃóɜ̎ô@ʶ݊ੲࢮʵږͪנƨôȂƧ̐ͪ@ŐƦƨφԬѶɜôƦ@ŐƧôôƦəŐ̏@ŐڒѶԬô̐ʳԩНςōôŏɞ@ƨȂѶəóƧ̒ػ̎ó̐Őנóƨô̒@ƨɚɚ@עԫɛɛ@ȁυͩƥʳòևρ̑ࡗƧͪ༃ॣԮփ̎Ʀ@ôô@ôō@@ȁѵóƨ̍υȃóʵɛƨƥóυȂóəƪ̐ρƧͩɜԭڔȄ̎عƧȁ̐ŏó̍ɛƥƧ̑óρŐ@Ƨ̏ɝəɛ߻ͩ̍ͩɝО̍ƪƧóóӓƨóƧʳ݇@ɝςƪ@ʴƩƧƦôƨɛȄəƧŋυóͩѵ@ɝǿóŌן̍ɛóО̍̑̏ôȁ̍ŏòȁñóƦͩ@ǿə@ɛƧ̑ρȁυô̍օѹóȃə@ȂσʵѷƪòƩ̍ôó߻ۯôʳƧóõʵѵóѹɜ̍ȂѹôɛŌφֈƩͨρóυӑóޟఱ̑݇ͪóƪƨŌóȄڔԬƩςםñ̑ȃѵŐԭŏƨȁɛǿρôõɚɛóƧОə@ѹ̐ѵöԪͨôͪɛ̒ןŏƧƥóôƥƧɛŌôóɝó@̒݇Ӓ̒Ō@Ŏԭࢰ",
              ],
              encodeOffsets: [[99540, 43830]],
            },
          },
          {
            type: "Feature",
            id: "qing_hai",
            properties: { name: "青海", cp: [96.2402, 35.4199], childNum: 8 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƨ@ôƪ݈ȁƪ@φɝòóƨԮʶɛ̐ѹͪôОəóƧɞᇒѶ@ôږô@ǿѶƪȁςɜͩφςŋɞôѶɛƨŌɞ@ɚςŐñԪॢͩƨȂɞóƨŐ̎ŏעӏ̎óƧƦô̒ȁɜςͩ̒ɚɛƨôƨɝφɛóȁƨŋóóɚͩƨóóƩ@ƧəŋƦƩ̍@ƧƧôǿυ̑@ȁɞǿõŏρƥסɚƧóτԫɞôƧƦ@ñȃòñƥóυôôѹѵ@ŏ̏Ȅɝó@ȂəŌóəѹƦ@Ő̍Ōυ݈ԩŐƧóôƧ̑ôʵɞƧ̑ѵôƩɞƧ̑óНѵóôʵ̑ɛȂó̍ƥȀƧŋ̑Ōóƪ@ƨóóŐƥƦŎѷƨѵƧ̏Őɝóѵɜן@óòɛ@ѷʸס@ԩ̎υѺƨ̎óʸôƦɛñ̎@Őɚ@̒əŌóŐ̎",
              ],
              encodeOffsets: [[91890, 36945]],
            },
          },
          {
            type: "Feature",
            id: "si_chuan",
            properties: { name: "四川", cp: [102.9199, 30.1904], childNum: 21 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôôŋó̑Ԯ̒ɛОמͪƨōöͫ߼ƥôȃƨóóñôƧóƧôōڔŏƨŐ@ŎôòƥѺŎ@ōɜóנôǿôƦôԮ̍ɜôɚƧñɛɚȁ̍Ƨɛևυ@óóôŋρԭɝ@Ƨʸ̍ŏυɜƧƧóƧƨȁρ̍ƨȃɚôʵφóô̑̏Ȃ̑ʵɜʵɞ@ƨʳסƩóŎəóɜƧôƩƧρóôôô@ŎƧƨƨƪѹó̍̍Ʃ@̏ѹНôޟ̍ƩóƪυɝɛəƨôŎɛȀ@Ȃ@ñɝʶ@Ōρנ̏õóɛͨƨȂѵОɛʵ@̏ƩŐó߼Ƨల̍φɜȂυτɛОρƦɝƨóƪ̒Ѷɝƨóʶ̒óƨƨôԪŏφ݇̎ŋ@ŏѺƥôɚɚŋ@ȁɞô̐ȃ@ŐѶóѺφóƦôñòòȄ",
              ],
              encodeOffsets: [[104220, 34336]],
            },
          },
          {
            type: "Feature",
            id: "hei_long_jiang",
            properties: {
              name: "黑龙江",
              cp: [128.1445, 48.5156],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ᇔȂਚНƨŐѶŏöƥςŏñƧƦóƨȁ@óƨóȁφӑóóƨóǿ̎̑ôНɞó̑ɜə߼̎ǿ̒ôڒӑφ@Ƨȁ̎̏ƥƩ̎ρశôȂςƨφ@נɞ݈̑ƥƧɛƨʵƧȃƥ@Ƨƥ@ŏ̑ԩôɝρρóɛƧƩͩƧó߻ʸ̍ʷѹƥɞڕõ̍öɝυ̍ȂƧ̐̑ŏóƨñŋѹóóȁ̍̏Ԭõʸ̏ŏ@ǿ̍@ƧОυ@ñƨòȀƥŎ̑ŐѵóɛŌóȂԫōƧŎѹñ̍ʶóОן@Ƨ̎Ѷô@Ȃ@óŎó@@ó̍ƥԭք༄।ƨͩ̒ࡘςñֈƦʴφͪ@ȂɜɜסԬə@Ƨə̑@Ƨóןô̏ŏ̍ô̑ؼôƨѵɚƧȁɝ@óŐρŎԪО̏ʴ",
              ],
              encodeOffsets: [[124380, 54630]],
            },
          },
          {
            type: "Feature",
            id: "gan_su",
            properties: { name: "甘肃", cp: [95.7129, 40.166], childNum: 14 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ڔôԮࢯ@ō̑ŋ݈ӑ@̑ɞôóôɜŋƦƨôóƨƦנŐɜ̑óͩԩͧѶõѺ̏ɚ@ƨНɜôöəςóɜȀƧȂԮŐѶŏ̒ȄמòƪρړԫôȃƧŋôƩ݈ͩɚ@@ǿɜ@φͩóŏɜӑƧōôǿ̎ôƥƪóõö@ôƨôƧƦôó̒ɜ@ɞŌõʶ̏Ő@ȀóôƨȂ@ʶע@@ƥ୾ӑó̑óŋôʵóɛړ@@ƩöóƩóρɛƨ̑@óʷƥƥ̎ɛƧôōƧǿôͩѵôɝȃɞȁõƧρóó@ōƧŏړŐóŎôƨóƨôòƧôóȄ߻ƦõͬƧŎםͩɜНԭ̑ô̒óŌóƥ@óƨɝσԬƨôעəςƦöŐɝȀ@Ȃφ̒óȀƨƨ̎@ƥƪɚŌ@ƨôƪƧôəͪôôƧŌôȂυɜƧɞƧóəɜ̑ρͪɛ̑Ȃóƨƥ̍ôסӐ̍ŐƧŏɝôƧȁॡͪòԩρŏ@əɝƧŋѵɜɝóρŌυɛͪρƩȂѵ@Ȁڕó@ȄɜʶφࡔڔƨͪѶͪԬʶôƩעʶɚʶƥôóƨςȂ",
              ],
              encodeOffsets: [[98730, 43740]],
            },
          },
          {
            type: "Feature",
            id: "yun_nan",
            properties: { name: "云南", cp: [101.8652, 25.1807], childNum: 16 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôɞôɝ̒öôŌƧƨôͪôô@ŋƦ@ʶƨŐô߻ƪŏ@̐ɜʶѶНƧȁɜͧöô̐ςן@ŋɞʵ@ò@ȁɜǿóōɚƧɜφɞôƩ̎ƪóޠѺО@̐̎ƪô̎ѺƧƩƨƧ@ōóóôóςƪƨƨóôɛó̑ԭƥŌɛǿɝƨɛͩô@ǿƨȁѺŌɚɛ̍ןѶНɛƧôóƥȁƦͩôŎɞƨ̑ɜòôφ@ƨʵ@ɛѹōóȃəƨυǿóʵρƧƧŌƩɛ̏ȄñƧƧȀɝ̍ԩʶƧ̑υóŌƥʳɚӑóНƥô̑óӒѵʵѹƧӐןôƪφõŌƪ̒ԫŌƧؼƨƨסρȁƧƨȂóʶó@@ʴƨôôφ̎Ŏ@ȀƨƪɚƨóƨôôôςóޤƧŌƩŋƧԪ",
              ],
              encodeOffsets: [[100530, 28800]],
            },
          },
          {
            type: "Feature",
            id: "guang_xi",
            properties: { name: "广西", cp: [108.2813, 23.6426], childNum: 14 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƦŋѺ̎ڔʵƨŐ@ƦמȄƪôóȂɜŌɚͩɜ@öóɜôôȂƦôɜȁ@ɞφóȄ̎ƨʶɞŋƨʴɚǿ̐̎Ԭ@ôñ@̏ƨρ۫ôɚƨƨНƪŐ̎ƥóƦʵƥŋ@ȃóƥƧ@@ŏɝǿôυƧȁѵɛ@əóŏ̑@@ə̍óƧó@ȁƩρóòНƥô@Ӓ̑@óŎ̍ƥσŎυ@̍ƨ@Ō̑ôóͪƨ̒óŌړ̏Ŏ@ŌôȄѺŎ@ɜƧʶυ@ñóɛƧ̒ɝóōƥͪ",
              ],
              encodeOffsets: [[107011, 25335]],
            },
          },
          {
            type: "Feature",
            id: "hu_nan",
            properties: { name: "湖南", cp: [111.5332, 27.3779], childNum: 14 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@քɜОƨ@öŐמóƪôƩɚ̒Ő߼ȁςͩɜòƪɜȀòñɝòѺͪ@ŏƨŋóɝôǿƨɚȃóəƨȃѵͩó̍@ȃƨóóƥƨƧ@ʵƦóͩɜɛóñԭɛōυȂ̍ƧƦō@ɛƥɛȀ̑óʷóō̍ƩŏƧОəƧóς۬Ƨ@̐óòԫ@̏̍əȀƧʳɝŌóɞƧƨɜóŐƨò@ȄƧŌρŋóôԪОóʶ@̎óȄ",
              ],
              encodeOffsets: [[111870, 29161]],
            },
          },
          {
            type: "Feature",
            id: "shan_xi_1",
            properties: { name: "陕西", cp: [109.5996, 35.6396], childNum: 10 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ςôöƨɝȂɞȄѶóóͪƨȀóŎƨ̍ɜƦƦôʸ̒@ɜƧςƪôõô@ƪڔ@ôɜóʶôŌô̒୽Ӓ@Ʀ@Ѻ̎ɜѺɛѶôöʶôƨóʴ߼۰óô̎ñƪѸƩτʶ@ȁòŋəѹóǿ̑ʵ@ȁ̒ʷυփô݉ôН̏ط@ȁƨóô̏ƪõ@ʳ̐ʵ@ɝɛŋƩŌɛóןôƧŋ̒ó@ŏ̐ƥ@ŏυ@ƧƧôן̏@ƥȂѹɜəɛóԭ̎ƥóóóȀןɛô@ŎѹōñƦ",
              ],
              encodeOffsets: [[108001, 33705]],
            },
          },
          {
            type: "Feature",
            id: "guang_dong",
            properties: { name: "广东", cp: [113.4668, 22.8076], childNum: 21 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@Ȃôôƨ̎@ɚ̒@ôŐ@ɚѶɜƨȂóφɞȀ@Őƨ@ôƦ@ȄƦŌƥʶƦôôŎôʸ̒ɜǿƦ@ɜƥŎ̎ƨφȁɜŎòƥԮŎƨōóŏɛƧɝəɞƧ߼ɜςȃñȄƦŎ̒ōôòƨəƨɚН@əƨ̏ƪʵυŌəɛóəԭŏəóŏѹρʵɝƦ̏ƥʳѶöō̑óóŋρȀυƧƥɛѹōƧôןɛŏѵ@óŋôʵɝƪԩõ@Ƨō̍@Ƨ@@ƦɝԮƪО@@",
                "@@X¯aWĀ@l",
              ],
              encodeOffsets: [
                [112411, 21916],
                [116325, 22697],
              ],
            },
          },
          {
            type: "Feature",
            id: "ji_lin",
            properties: { name: "吉林", cp: [126.4746, 43.5938], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@נ@ôН̎ʵѺòƨōԬŎôȁɜŋѶô̒ŏƦōñǿòƧφ@ƨН̎@@Ȁ̐Őöʷ̐ԫ̎ôȂѺôòŌôƧ̒Őƨ̏̎ȁφ@ŋƩͩםȃƨ@ȁ̑ʶ@Ōóôɛƥѹ̑συ݇@ɜρƧȃࢯƨôəȂɛōƩɛ̏υρóõƪʴυφ@ʶôŌóρք@ɜƧ@ɝǿƧͪρȀƩó̏ŐƨȂ̍غړȃɛԮƨͪ̏ςƩôɚφȁƦôɜƧôʶφȄ",
              ],
              encodeOffsets: [[126181, 47341]],
            },
          },
          {
            type: "Feature",
            id: "he_bei",
            properties: { name: "河北", cp: [115.4004, 37.9688], childNum: 11 },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@Ʃ̒̏ŌѺ̒ƩóȄƧŌƥͪòôñȂ̎ŐóȂ̒̐̎ôНɜנ̎ôŋɞȀѶ@ôͪφƨŌɚɜȃóƧƨƥƪ@ʳƩɞρ݈@υНφʵɜƦρƨƧ̍ɝóɛѹ̍ρŏ̑ôóƨ@ƧƦôƨɛ@ƥƨ@ȂƦ@@ôəŐƧʶƨŌυ̍̎ɛŋôōɝ@óƧ̍ƦʵѵʳôʵɜŏςôƪŋƨŌɚ@ôНƥƧ@ōѸɛ̐ô̎ʵѵНԭ@̍̍Ƨò@ȁɝ@əρυͩƪ̏ƩõƧŎƧōóॡȄɛʶɜȀ@ɞςѶƧƥςɛŐ@ɚɜɜ@Ŏôôςƪς",
                ],
                ["@@õə@Ƨɛ@ŐóƦφô"],
              ],
              encodeOffsets: [[[117271, 40455]], [[120061, 41040]]],
            },
          },
          {
            type: "Feature",
            id: "hu_bei",
            properties: { name: "湖北", cp: [112.2363, 31.1572], childNum: 17 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ñȄυƦöŐƩóנƨƨφ@@Ő̏Ʀ@Ő̑ôƨŌנóɜôƪŋɜŌѶօڔə݈òɞōɜŎôӏƦóƨô̒óôȃƨó̎ŐôƧƪ@ƨȁςƧə̑̎Н@̍Ƨŏρôԭͩԫ̍ʵƧóȀôɞƧŌ@ŐѹͩñòɞñɛǿƩɛñρͪ߻Ȃ̑ŏƪəƩóםôõŏƧ@ɛНƥȄó̑ѺƧôφóƨƨƦƪóɜŐôóòôƨóφ̐ƨóƦ̎",
              ],
              encodeOffsets: [[112860, 31905]],
            },
          },
          {
            type: "Feature",
            id: "gui_zhou",
            properties: { name: "贵州", cp: [106.6113, 26.9385], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɜȀƦŋԮô̒ɚôōעƪƧʴɝ@ɛʶ̒ʶ̐ȁƦóȂô@ôŏ@ōôƨʶѸô@ʶƨɞó@ōτöòυƨ@@əƨô@ɛ̒@Ʀɜôȃ@̍ôʵԩНôóςŌƨŋ@ȃƧñôŏƧɛƨôɝƧʵ̍ôȃυ@ɝɛȂƥóóȁɛóõôɛ@əͪɛŋôȁƩóםȃ@ƥƧŏړʶѹ̍ƥŌƦȂóôɜƨѵО̎נəɜѹŋƧȂ@ȀóɜͪɞƧ",
              ],
              encodeOffsets: [[106651, 27901]],
            },
          },
          {
            type: "Feature",
            id: "shan_dong",
            properties: { name: "山东", cp: [118.7402, 36.4307], childNum: 17 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ʃ̐φͪɚςɞ@@Ȃƨñ̎̎Ԯ@ѶОƨƧڔ@φН̑ŋ@Ʃ̒ǿ̎@ƨɜԬςôʶ̐ʶöԫƨƧנƥɜŎôō̎@ôŏóρƧŏԫôóƧԩó@ƥɜƧԭóƨʵɛƨ߻ӑɜНԩóô̑óƧʳəóɛƧ@õȀƧ̍ȃɛŐóŏυО̍óɝƩԩ@ƧɚԫȄɚʶƨɞʶԪ̐ړɛƪ̒",
              ],
              encodeOffsets: [[118261, 37036]],
            },
          },
          {
            type: "Feature",
            id: "jiang_xi",
            properties: { name: "江西", cp: [116.0156, 27.29], childNum: 11 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƧȄôɚəȄ̎ʶԬԮͪςóƨŐƪτɞƦōƥƧ@ŏςôóŐôô̒ʷѶƪƩƩǿ@ō̒ɛôυ@Ƨȁѹɛəƨѹ̑ƨ̏óƥѵʷô̍ɛȁôŏɝǿƧԫƧôʳƥōòȃρȄ߻ɛɝƨɞɚɜƨôŐƧŎԭōñƦòԮɜôɛôͪƥ@ʶƧƨôƦƧô@Ȅô̎Ѷͪ",
              ],
              encodeOffsets: [[117e3, 29025]],
            },
          },
          {
            type: "Feature",
            id: "he_nan",
            properties: { name: "河南", cp: [113.4668, 33.8818], childNum: 17 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@φ̎ƪ̐ɞȄɚ@@Ȃעó̎ŌѺ̒ôֆॢȃôƨŎƨōƪöƩ̑ڔɜԩ̏ɝʵƧəʵԬȃƨəԪ@@Ƨ̒ŏô̍υȁƧɚ̍ôóŋ@ɝƧŋõ̑σ@ŏɜŋôɝ̒ƧɚôôطρóóɛƩ@óƨ̍ŏƧôóȄ̑ôƧóƥôóӐɛōɝŎ݇ñړɚѵֆ@ɞ̏ʶ@ʴƩöó̐",
              ],
              encodeOffsets: [[113040, 35416]],
            },
          },
          {
            type: "Feature",
            id: "liao_ning",
            properties: { name: "辽宁", cp: [122.3438, 41.0889], childNum: 14 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƨʴƧôôӔƨô̎ƩɞН̎ͪ߼ͪɜɞɚ̐@ƨςŏ̒ôƦƨɜô̎ƪôςǿƨͩɞȀƨ@@ɛςփôóŋ@ʵφυƩʳö॥փρѹס@əɛ@ͩࢯ@ѹʵρƩʶφȀƧ݈̒۬óʸɝŎѵ@ԭԫןɛƧƨƥςɛυʶφО",
              ],
              encodeOffsets: [[122131, 42301]],
            },
          },
          {
            type: "Feature",
            id: "shan_xi_2",
            properties: { name: "山西", cp: [112.4121, 37.6611], childNum: 11 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɚѺñŌɚôȄѺ̎ֆφóςȂ̒ɜƨɚ@@Ȁƨŋôȃƪѹ̑̐ŋƪ̑Ʃρρóó@ōɛɛ@əɜŏƦρƨρѵ@ɝɛǿɜʵóօѹ̑̍ŋסô@ȁə@ɝȃ̏̍ƩυƧô@Ȃ̐ظóОó݊φք̑ʸ@Ȃ̒ʶôȀ",
              ],
              encodeOffsets: [[113581, 39645]],
            },
          },
          {
            type: "Feature",
            id: "an_hui",
            properties: { name: "安徽", cp: [117.2461, 32.0361], childNum: 17 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ó̎̑Ő@ƨƪѶǿɜ̑φƦʵ̐ƧѵôóƪôôυςƨȂɞŏ@̍ԫôò̑ƥóȃѶͩƧƥôŏѺôŏƦ@ƥͩƧôȁυó@̑ƧɛѵʵƩƪѵ̑ʸóóôŏρó@ŐƦƨƥŎσɝƩ@̎̍Оɚ̒ρƨƧȂôɜςôóظəó̑ƨóɞɛŌ@Őτö̒ƨŌ@ɞôŌ̎óƨəφȂ",
              ],
              encodeOffsets: [[119431, 34741]],
            },
          },
          {
            type: "Feature",
            id: "fu_jian",
            properties: { name: "福建", cp: [118.3008, 25.9277], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@̎óȁƨӑ̒̎ɚƨͩφŐƨɝ̎ŋóŏρ@ōƨòʳəóƨō̏õɛƧ@ƨѵƧōəŏóŋƧô̑ɝɛʳƥ@@óɛõ@Ƨ̑ƧóȁəƧ̑Ƨ̐@ɚəОƧƧɚóñ̑ŎóʴƨƨԬɞȀóŐɜȂó̎ѶʸôƦƧ̐Ѻ̒ɚƧѺɜƨȂ",
              ],
              encodeOffsets: [[121321, 28981]],
            },
          },
          {
            type: "Feature",
            id: "zhe_jiang",
            properties: { name: "浙江", cp: [120.498, 29.0918], childNum: 11 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ѷʶƨɜ@̒φôóȂƨƦͪ@̐Ѹ̍τȂ̒̑נŐמôƪƧôӑ̑@ƥρͩƨօ̏@@υɝó@ŋɛ@ôƩəóƧѵυó@ƩɜŋƧ@̍ŌƧɞυŏƧͪ̍ə̑ƧӒôȂ̍@óφ̑ɜ@ŎƪȀ",
              ],
              encodeOffsets: [[121051, 30105]],
            },
          },
          {
            type: "Feature",
            id: "jiang_su",
            properties: { name: "江苏", cp: [120.0586, 32.915], childNum: 13 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôɞ̎φНôŐɜŏ̎Ȅƨöǿƨ@ôɜɚƨʴ̒ôôó@Ƨ̎əԮȃԪૉöͩ̐ƧòʵφƧôʵ@óړɜóŏɜǿƧɝρσȁѷ̎̏ƥóŐѹóŐƨƦѵͪôȄƦñ̒Ԭó@̎ɝŐƧȁρóφƩóóôƨѶ̏ƥʶυɛ̒ѵȀ",
              ],
              encodeOffsets: [[119161, 35460]],
            },
          },
          {
            type: "Feature",
            id: "chong_qing",
            properties: { name: "重庆", cp: [107.7539, 30.1904], childNum: 40 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@əȂòɜƨѺɛƦȁ̐@ƪõŏφƥòȃƥ̍Ƨôυ̏ƧôñóóôɛŏƩôƧƥôƧóυƨ̒ѹôƦȃ@փƥɛ̑@@ɜƧó@ɚƧ@ñφσõ@ŎɝôƧ@ʵѷóƧʵó@ŎóŐó@ôȁƥó̒υôóʶəƧȄς̎ƧȂôƨƨƨφɛ̎Őƨʷɞ@ςԮóŌôôφ@ɜֈ̎ƨ",
              ],
              encodeOffsets: [[111150, 32446]],
            },
          },
          {
            type: "Feature",
            id: "ning_xia",
            properties: { name: "宁夏", cp: [105.9961, 37.3096], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ల̒ôޠφӒςôƪͧυևɜŋѺó̎ȁ̍ɛ@ѹס@@ʵƧȁôó@ǿ̐ŏöʵɝŋɛ@ô̑ƥóóƨƧóôó@ƩôóƦ̍óȀƨŎɛӒôŐυͪɛ@@Ȁə@",
              ],
              encodeOffsets: [[106831, 38340]],
            },
          },
          {
            type: "Feature",
            id: "hai_nan",
            properties: { name: "海南", cp: [109.9512, 19.2041], childNum: 18 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@φɜƦʶ̐ôφô̎@ƨŎö@τʵƦԩ۫õН̏óƥȃƧ@Ʃəםƨ̑Ʀ@ޤ"],
              encodeOffsets: [[111240, 19846]],
            },
          },
          {
            type: "Feature",
            id: "tai_wan",
            properties: { name: "台湾", cp: [121.0254, 23.5986], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ôƩɝöƧɝѵəޣ̏ρƩԭóōóͪρɞƧОôԪ݈ଦѶɜ̒ɛ"],
              encodeOffsets: [[124831, 25650]],
            },
          },
          {
            type: "Feature",
            id: "bei_jing",
            properties: { name: "北京", cp: [116.4551, 40.2539], childNum: 19 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@óóóυóôƥ@ŏóóə@ƧŋƩŌρóɛŐóʶѶʴƥʶ̎ôƨɞ@óŎɜŌ̎̍φƧŋƨʵ"],
              encodeOffsets: [[120241, 41176]],
            },
          },
          {
            type: "Feature",
            id: "tian_jin",
            properties: { name: "天津", cp: [117.4219, 39.4189], childNum: 18 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ôôɜ@ƨöɚôôôɚŏ@óƥ@@ȁƦƧɜ@óƧƨƥ@ƧóəН̏óѷɜ@ŎƦƨóО"],
              encodeOffsets: [[119610, 40545]],
            },
          },
          {
            type: "Feature",
            id: "shang_hai",
            properties: { name: "上海", cp: [121.4648, 31.2891], childNum: 19 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ɞςƨɛȀôŐڔɛóυô̍ןŏ̑̒"],
              encodeOffsets: [[123840, 31771]],
            },
          },
          {
            type: "Feature",
            id: "xiang_gang",
            properties: { name: "香港", cp: [114.2578, 22.3242], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@óɛƩ@ρ@óôȀɚŎƨ@ö@@ōƨ@"],
              encodeOffsets: [[117361, 22950]],
            },
          },
          {
            type: "Feature",
            id: "ao_men",
            properties: { name: "澳门", cp: [113.5547, 22.1484], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@X¯aWĀ@l"],
              encodeOffsets: [[116325, 22697]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/chong_qing_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "500242",
            properties: {
              name: "酉阳土家族苗族自治县",
              cp: [108.8196, 28.8666],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XJ°lJX@lbl@XbV@VLnJlxnbUU@IVK@lVIVwnJlU@n@J@L@Jn@l_nWVLVln@@blLmV@@xÔ`nxVÈLlxLVxVVV_U»VWn_m¥XwVmnX°lmUUVwÞaVk@a@mmIUa@mwk@m@@U¯a@UV@@K@ykkmwkV@kU@ÑVkKWLÅamaUm@kyU@WkU@UaIUaVaUUmUUa@aVLXKWa¯UUbmJXnWnX`l@@xkzWÆ@VLU¦x@b@JkIkJ@LmbUamJwm@óxnk@V@xVnUVmVUVUbVlUbkXW",
              ],
              encodeOffsets: [[110914, 29695]],
            },
          },
          {
            type: "Feature",
            id: "500236",
            properties: {
              name: "奉节县",
              cp: [109.3909, 30.9265],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WVXbUnK@x@b²kxmKkl¯_VV°VU@bnKVVV@@nk@nbn@°@VLČU@°WV@VnU@InKVl@nUbKnXWlknLlKUwnalLaVlUXmWk@UU@UWWIUyķ¹XaWW@XKUIVmU@W@UVU@KV@n»VkUkÇmUmVIUmULUbm@wUaKkkm¯ÑUL@bWVnx@VmxUI@klmkkK@aK@IlJ@I¯k@mak@mnkJVL@bV@UbW`UUUVI@VU@VVbUJVLUVVbUXVVxk¦VJUnVxnVVUJV@Ubl@@bXV@L",
              ],
              encodeOffsets: [[111781, 31658]],
            },
          },
          {
            type: "Feature",
            id: "500238",
            properties: {
              name: "巫溪县",
              cp: [109.3359, 31.4813],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nLWbXVLVUV@KIVl@b@lbUVnU@JÆU@V@n°KĢUl@VbÞKV@_VKXUU@KX@wlkkU@mWKUU@UôJ@XV@aVmÞIVaVL@»km@UkLU@aU@WWLUUUKkbwWa@KU@kaXmWLamVk@UmL@JmVUU@¯X@ċVUK¯@ÅnWKLkKULWK@UXK@wW@LkV@bVLlXn`¯xU°LnlV@n°Lnl",
              ],
              encodeOffsets: [[111488, 32361]],
            },
          },
          {
            type: "Feature",
            id: "500234",
            properties: { name: "开县", cp: [108.4131, 31.2561], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n@naIw@@VVKLVbVxnVÆUnanKWXamKmk¯K@mkUm¯KV°w@Wm@UIUUlKUU@a¯KWanwmUXamKkUWUnU@KkUwWKXaWLUWkImaUUUKka±k@l¯wwmbUkXm@UJkIWXXbmUJXUV@°KllVXV@xmbnV@blV@VU`UL@Va@bULlb°VXbÜ@V@bL@JxnLVb@lVb@V@@zbXWXKVLV@@bUVVL@blVna@ll@zl@@J",
              ],
              encodeOffsets: [[111150, 32434]],
            },
          },
          {
            type: "Feature",
            id: "500243",
            properties: {
              name: "彭水苗族土家族自治县",
              cp: [108.2043, 29.3994],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Jlb@nVV@bXb@ÆlLUl`nVKU¼VxkbWnlUxlXX@°°WnnJ@VUn@Jk°L@VlV@nUJx@bVVVz@VnLlaKnalVlIU¼@nV@@anKUwVal@UlJlI@akU@UWXKVI¯Uak@@KmkXWÜkXWykIWwXw@laXamkVUUym_XmlkkmmakwmIUKU@Wak@kaW@kI¯WIk¦VUUmaUV@XkVUV±aUb¯b¯¥m@@ImJ@mmL@kUKUkkJbV¦",
              ],
              encodeOffsets: [[110408, 29729]],
            },
          },
          {
            type: "Feature",
            id: "500235",
            properties: {
              name: "云阳县",
              cp: [108.8306, 31.0089],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lbLVVVnblJVXXKWbXLVxl@LmVXVVlnLWbnVmxXb°L@bVVkLVVVJn@@X_WmkUK@alUKX@@xWL@VXLVKlLKXLÆm@ma@ml@mU@UUmL@aVUU¯U°`lknLlw±@a@wmLVWaXU@KWU@ak@VaU@IUVmUUwVmUIl¥UwUVWUaVUUKVIUa@UUUUJUUmknl@@VWV@L¯aUbUlx@@b@VULUx@VUxVVU@bU@mxUU@mUVklkk@WxknlxK@amLKUK",
              ],
              encodeOffsets: [[111016, 31742]],
            },
          },
          {
            type: "Feature",
            id: "500101",
            properties: {
              name: "万州区",
              cp: [108.3911, 30.6958],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĸĊVInaWWXlJVIn@lWVnax°xkl@²LVLnK@bLkwlmXw@lllkUnVV@VnwV@@aVUUVw@UVwVK@U@a@kwVVa°b@KXU@U@mkÇÑamlkUVmn@VULUm@kUVkUawUWm@Uw¯mKUUmVUUULUKUW@XbWVkaWwkUUk@maUbmbVlk¦xUVUIWVUkJVVkL@UmJUUVU@lLUVUlx@@VbJUL¯¤@V",
              ],
              encodeOffsets: [[110464, 31551]],
            },
          },
          {
            type: "Feature",
            id: "500229",
            properties: {
              name: "城口县",
              cp: [108.7756, 31.9098],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VK@w¯L@m@UÅV@ImVUVka@@aUkJ@LUUVUKmLmbÅVmUUwUaKUL@U@xJmbm@nVJ@X@VkVnlLXx@b@bUVLU`UnbU@@mVVX@JX@VLVVklV`@bUL@VLVKn@U@UJkn@lmLmK@X@Jn@mbnÞWVXnJkKČÑÆ@VK@knaÜmXlUČW°kôÇÆ@a@yÞ_VmUnU@K",
              ],
              encodeOffsets: [[111893, 32513]],
            },
          },
          {
            type: "Feature",
            id: "500116",
            properties: {
              name: "江津区",
              cp: [106.2158, 28.9874],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@InWUUlU@LValX@°²lÒXxlK@Ul@@Un@UaVJ@I@W@UUUVUwVIUKUaUUVwn@Üx@XUlnnbJ@¥VklKUUlk@ynU@kVUUVWnI@¥V£VWVIUKU@UVa@n@Vm@@nlUaVkUwJ@blLkLW@XWmXkmmLn@m@U@UVm@UVUUlakUVaVkV@@wnaWUk@VwklmVIkUUxmJ@U@KIkx±V@IUm@K@IUKkbWKUbnm@bmVnbmb@xkxUJ@ULW`@bX@WVXL@V¯mk¯@UJ@VmLUaWnX@WJ@nkKkxW@UIV@@KkImmkK@UW@XaWIU@UIkbWbxXlLVbnV@bWlX@VxVLnl@nÆÞVÜ",
              ],
              encodeOffsets: [[108585, 30032]],
            },
          },
          {
            type: "Feature",
            id: "500240",
            properties: {
              name: "石柱土家族自治县",
              cp: [108.2813, 30.1025],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@kl@¼UbmVXJ@bV@nxVIVJULVVk@@LWbnJVU@bVbUJ@blLXnWV@mbnV@Vbn@VJVLnaVanbl@VlVXxlbXUWaX@VUUVwUUVm@I@WmI@amlLlK@alwnUV@kóVaÝk@UlbVK@VU»VUUVWU@U`ULkwm@@KmU@knK»VkJkUmbLkbmK@UUyUU@awm@@XXJ@VVLVVUbVnUJVX@Kk`WXXJWXUbmW@bkLUm`Xnb@JVL@LU@°VVXKVnUxVLUbmJ",
              ],
              encodeOffsets: [[110588, 30769]],
            },
          },
          {
            type: "Feature",
            id: "500237",
            properties: {
              name: "巫山县",
              cp: [109.8853, 31.1188],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@kVUbkKmbVxkLmKkllbV@@LXbxlaLVVVKXXV@@bVlKV@ln@¼°KXaU@Ulw°JXalIUaÝWXW@kVU@VUVWUUUamUw@aVamwn@VUUlLXWm£@wÇĉkKklmLUÒ¯Wn@ğ±kwmaWm¼U@@LUV@V@XVUnVJLW@XXWbĸºVzXJVXV@@VXlWn",
              ],
              encodeOffsets: [[112399, 31917]],
            },
          },
          {
            type: "Feature",
            id: "500102",
            properties: {
              name: "涪陵区",
              cp: [107.3364, 29.6796],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nèVblĖVVnL@xVn@nJ@LUVVX@lbUJV@@nn@VVVK@zV@nzVJVUlmX@@_VVVbnaVal@@knW@wnaVK@aVIJ@£kUVW@wXUVJam@Ik_X¥@WwkKkwmkUxnÅmm¥WV@Um@UlVL@JU@@X@UVkKVkKVkKkb@bmJVXUVVUbU@@`W_UV¯b",
              ],
              encodeOffsets: [[109508, 30207]],
            },
          },
          {
            type: "Feature",
            id: "500230",
            properties: {
              name: "丰都县",
              cp: [107.8418, 29.9048],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Þè@XUK@LlV@blbUJ@V@bnV@VVVXU@lbXal@VXnKV@maXUÞ@amk@aVKXVanb£°mnIVaUKVwUmWLUU¯V@@KUK@IaWmn_VlK@anXVaXWWIXWl_@LUWVIUmVaUUUK@UWI@Wn@VI@mkU@U¯Kl@ImVÅLwU¤óbUU@wWXkmm@LU@@VUIWVUL@JUnax@JnbUIWVx@UXlV@¤IUJ@bULmb@xmX@lk@UbmbUaUU@`W@kn",
              ],
              encodeOffsets: [[110048, 30713]],
            },
          },
          {
            type: "Feature",
            id: "500232",
            properties: { name: "武隆县", cp: [107.655, 29.35], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lwbVm@IVKXUVJ@UV@@KnnWlX@xVVôaV£xÆKnUVm@UmIXm¯¯@WkWVwmkXlaUwV»ULmk_VkK@ÅWa@aUU@mkaIb@n¼nm_@mmK@ULUVVmI@aUJ@XWJ@U`UIkm±kk@@lULmUmKUnVnlUVmI@VkVlxbkIVmLUxkKUXn¦ÆnmVwlnlxlLXx@W¦`",
              ],
              encodeOffsets: [[110262, 30291]],
            },
          },
          {
            type: "Feature",
            id: "500119",
            properties: {
              name: "南川区",
              cp: [107.1716, 29.1302],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VUbVJVUn@VLX@WVXVVI@VUVWxU@m@ĊX@@¼V°aVUX`@_V@VaUUVUWnI@alaLUlLUllLVU@@WV@@IUKVkn@@VlLVwnKUlJakwlU@UnJVUmkUVmXa@wVK@UUw@VVI@ak@alInwlKXUmaUW@wWLkKVak_ÇaUV@XbLVxUlWIk@UK@V@kU@VbUVUlVnLUV@lVXmxkV@L@V@Vk@WbUwmL@JUI@xVxkx",
              ],
              encodeOffsets: [[109463, 29830]],
            },
          },
          {
            type: "Feature",
            id: "500241",
            properties: {
              name: "秀山土家族苗族自治县",
              cp: [109.0173, 28.5205],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XlV@lzn@VnbÆbXKlLUÒV@@llUnxll@z@LU@@V°b@Vn@l@VÑUnK@UU@aUakVm@K¯wklmnnUl`nI@almkIUwmWVkUakkJmUUa@K@aU@@_m@@wUyVUUa@Um@awl@Wka±UkUykIWVb@bUVk@aU@UXUUIWakUWmUxUV@nUVWb@XXVVmXX@VbVLkVWx",
              ],
              encodeOffsets: [[111330, 29183]],
            },
          },
          {
            type: "Feature",
            id: "500114",
            properties: {
              name: "黔江区",
              cp: [108.7207, 29.4708],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VX@V@LV@VJUL@lVnnxlb@VXVXV@@W@UIVK@kUKna@£VWUaVUUalIVJVIUW_lm@bXKV@mn@JUUw@KnIVll@VanLVmUkVKXLVKUIVamw@UaU_lwKlwUWV_Ua@aUa@KUwm_Ó@wU@nkK@am@UkUKmXk`m@@I@K@I@mkVmIUxUJ@kUL@JVVlnklWnn`VzUVnlWbkb@WxXxlJXzWÛlWXnl@Ll@Vb°UJWLX@VlV@bkJ",
              ],
              encodeOffsets: [[111106, 30420]],
            },
          },
          {
            type: "Feature",
            id: "500117",
            properties: { name: "合川区", cp: [106.3257, 30.108], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XKVXlKVL@UnV@aValXXKU@WVwUaVU@IV@@aVWL@U@anVV@@bVK@UVL@bnJWL@VnUnb@@JnIlVl@@bXIWbn@UKVLVKXLlaV@VVnK@bVLmIV@KmknUUWVI@aVJ@_WU_VmUwU@KVak@am¯mJU_UJUkU@WkIV`UI@JV@LmmU@@mbUzÅ@VK@nUKbakb@UWK@bkVVbVÛ@@`Xk@W@n@lXL@bmb@VVJUn@JnUlnUlmX@`XLlbkJW@kzlb@`@b@b",
              ],
              encodeOffsets: [[108529, 31101]],
            },
          },
          {
            type: "Feature",
            id: "500222",
            properties: {
              name: "綦江县",
              cp: [106.6553, 28.8171],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@¦@XlVX@@UVKlVUX@lanVlUVbXWVXVVVUnKVUlwUwU@UJ@nmVkUVlwXam@VaUUUw@W@kk»mV@UmKkwVKVUU@@LUKVI@mV@XVWxnXVKUUUK@wWU@UUWnUlLXamUIam@wI@K@amImUUkI@makUkKWUUan@wamLVxk@UVmUUL@Vm@kV@I@ak@@bWVXJlLVbVL@@bn@@`Un@WbUKULWVXb@UVmbXWVb@bVmxUKUV@Un@V@V@nmnKlnnWWXX@lKkK@aIVxUlVbk@mn@@U@mbVUV@VLUJUXU¤",
              ],
              encodeOffsets: [[109137, 29779]],
            },
          },
          {
            type: "Feature",
            id: "500233",
            properties: { name: "忠县", cp: [107.8967, 30.3223], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VLÞĊU@W@¼V@lk@w²mlVUllVnI@VlKUUlIVXUVJVUwl¥UkUKUIm@aU@mUna@XUWmkK@aVIUa@aUVmIXa@Kl@UUVKUIUJmwU@@aWInUVa»k@@l¯n¤mabWUUL@bnl@bÝWVnbU@mLUWk@Wbka@WVUU@UmUmVkUULVlVUxl@L@VbÈÒlb",
              ],
              encodeOffsets: [[110239, 31146]],
            },
          },
          {
            type: "Feature",
            id: "500228",
            properties: {
              name: "梁平县",
              cp: [107.7429, 30.6519],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XLV@VV@b°°nnkb@bnJWVXblIUVxWnUJnVVLVUJlUnLVK@UnUVJ²nKVbVKla@aXlJkKlb@U°£KVIUa@@kwVVUkKV@VUkkUVk±n@xkl@U@»@XVÝĉUJnxWb@UXKkVUbUKWUkVmkkLU`b",
              ],
              encodeOffsets: [[109980, 31247]],
            },
          },
          {
            type: "Feature",
            id: "500113",
            properties: {
              name: "巴南区",
              cp: [106.7322, 29.4214],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nxnVlJlUXL¦@x@Vl@nKVVX@V_V@@KlVXU@lKlxXIl@ÈĊ@Vl@n_VJlnVlnb²VVVJVVmUUkĕUamçU@»W@@ĉnV@XwVU@UUJWUXUW@UKm@UVUIVaUUVmLUVUUUWWXUakVmUkbW@UVkUL@VW@kUW@mJUXVVU@lmV@zklVVkLUl@¦I",
              ],
              encodeOffsets: [[108990, 30061]],
            },
          },
          {
            type: "Feature",
            id: "500223",
            properties: {
              name: "潼南县",
              cp: [105.7764, 30.1135],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@a@a@_kalyX@lIkaWK@_nWVkkmmV@IVmUI@Una@aWK@k@mkbWaknmJUk@mk@@kUal@Ua@Wa@aXLlwUKlkk@KmI@VUJ@Lk@@VUUmL@amJU£kKUaWakLmU@bVVUbnbWV@xkL@bUbxUxVbXJVbUVWIUVU@kLWxkKWV@n¯VUbU@@VVX@VmaUL@VUK@VVbn@lVnI@@lnLULm@Ub@l@na@lK@XVVkJ@b@zl@@VnV@bVb@J@bnXV`lXXmVI@W@InbV@@aVKUblKVLUanLlmnLlK",
              ],
              encodeOffsets: [[108529, 31101]],
            },
          },
          {
            type: "Feature",
            id: "500118",
            properties: {
              name: "永川区",
              cp: [105.8643, 29.2566],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@bÜnWVLXlxVVxXxlVn@@bVblK@a@UnLVJV@@UnLVU@VXaVKVX@n`WUÿ@IUKlaUUUkWyUÛÅÝ@mmkUKUwW@Xk@amUUakKWwXaK@VVLklXVlkxVUL@bm@Vxn`IVxUVkLVUl@@lkXmmVUn@VV@Xb",
              ],
              encodeOffsets: [[108192, 30038]],
            },
          },
          {
            type: "Feature",
            id: "500231",
            properties: {
              name: "垫江县",
              cp: [107.4573, 30.2454],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ċ°¤nÒ¼aV_lKnllUXVVLValULVW@XamwVIUKkaÇÑa@U@KkVwkUUVKlVnU@aU@VIka@akU@KVL@WÝçUV@VmbÅ¯@LKnnJWVkxlL@VX@VxmnXVWxUb@bkn",
              ],
              encodeOffsets: [[109812, 30961]],
            },
          },
          {
            type: "Feature",
            id: "500112",
            properties: {
              name: "渝北区",
              cp: [106.7212, 29.8499],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@bVVXLa@lnbWn@L@XVlK@VVLUVlbkLUKVVVL@VnXVL@VV@UbVb@x@¦UxVb@bUJL@LVVxlK@nk@U@WUVLlKXV@VblU@UUKVU@wn@VJVanLlkX@VaVK¯@a@U@U@VaUKkUU±maUkm@UUkbm@@Vk@@JwU@Ub@I@JmwUL@a@@KkVÇLkWk@kUU@@xUVmKUnllUb",
              ],
              encodeOffsets: [[109013, 30381]],
            },
          },
          {
            type: "Feature",
            id: "500115",
            properties: {
              name: "长寿区",
              cp: [107.1606, 29.9762],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VVUbXlX¥l@XnVmlxUx@@blVnnôĀlm@aVaXwWUnmUwW@@UkKlwUXmImL@KÆ°na@UUImyU@@yULUUm@@mU@VIkaW@UUV@KI@mmUw@mKUnUUIlVLUb@@V@V@b°ULUbW@klmKUbUIm@@xUVVL",
              ],
              encodeOffsets: [[109429, 30747]],
            },
          },
          {
            type: "Feature",
            id: "500225",
            properties: {
              name: "大足县",
              cp: [105.7544, 29.6136],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XUmaVaUU@anVlKXbValU@aV@@IXK@@bV@VxVK@UXLlUJXa@_@@aVKÅWVkwWawUa@am@kUWLU@kWmX@ykI@W@UV@na@LlLV@UkwWUKmXX`mIVl@bXLWVkbkkx@`VXm@@J@U@UUKUxk@WbUIVl@VXLWJUkUlUImxXlmb@X@VUJUnVbW@UV@@VVX@bnW@LVxUnlJUV@n@VxVIn@l`UVVVL",
              ],
              encodeOffsets: [[108270, 30578]],
            },
          },
          {
            type: "Feature",
            id: "500224",
            properties: {
              name: "铜梁县",
              cp: [106.0291, 29.8059],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VblLV¤nI@bnKVV@Ul@@KVI@UnJ@LlklVLkxWK@bXb@Vbk@Vb@ll@@nVlnIlmXblaXl@W@_Ü@UUalU@aXL@VlabaVL@mUL@UUÇXUWX_WaU»m_@UWULWb@UUVmK@VU@UImK@V@bkLxXblxXUÆUL@b@@`WbIkVWK@VULUwU@@a@WL@JU@@bkVUb",
              ],
              encodeOffsets: [[108316, 30527]],
            },
          },
          {
            type: "Feature",
            id: "500226",
            properties: {
              name: "荣昌县",
              cp: [105.5127, 29.4708],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VI@U@WnaWknwVJVkVlIXWK@UUkVJXal@VwVL@V@V@In@UW@_wlllaXUWK@aUknJW_Û@aWaU@@UVmUUaUImJVnÅUmVUm`kUUVWLnVU@VVmXK@nxmULkxImJ@nU`@X@Vkn@`@nlV@nVJVaXVLnK@bVV@nV@lbXW@",
              ],
              encodeOffsets: [[108012, 30392]],
            },
          },
          {
            type: "Feature",
            id: "500227",
            properties: {
              name: "璧山县",
              cp: [106.2048, 29.5807],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XzVlVVkbVL@JVĀX¼VXbW`XWVÈVVVkV@@UXa@alK@IU@UKWUyUI@wVUUWVak@VUkW¹@WXI@yVIUK@kWwkÑ¯±W@kUb@KkVVVmXJ",
              ],
              encodeOffsets: [[108585, 30032]],
            },
          },
          {
            type: "Feature",
            id: "500109",
            properties: {
              name: "北碚区",
              cp: [106.5674, 29.8883],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XVLV@@JkL@bWb@VU@UlÆVya@nV@nn@KU@IVJU_lJXV@VlVIV`nIn°@blUbKVI@aUaVw@¥@wUaVaU@@UUKWm@UUKUUVLlKkaVUUK@UkLWU@@KXmma@kbWKUU@aUamLnÞ@VWLk@@Wm@ULU@@UKUVWI",
              ],
              encodeOffsets: [[108855, 30449]],
            },
          },
          {
            type: "Feature",
            id: "500110",
            properties: { name: "万盛区", cp: [106.908, 28.9325], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VIV@@wVJ@InKVxXal@@U@U@KlUnwUW@kVUKUmVkUa@I@KW@@bk@@mU@m@k@a@aIUxmJk@wULwkKmVVX@VXV@xVLVVULmWXwWUU@@nUJVL@KV@UVULlxnL@VnUl¼@l@XVxVVUbn@WbkxUlVnU@m",
              ],
              encodeOffsets: [[109452, 29779]],
            },
          },
          {
            type: "Feature",
            id: "500107",
            properties: {
              name: "九龙坡区",
              cp: [106.3586, 29.4049],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XKL@V@XbV@lW@UV@@VXIV@UVKlL@KnnJ@VV@VU@I@@mVUVWUUmL@V¯LUK@UV@UU@a@U@yU@WLUK@X@KUVmL@@aXI@w@ammVk@WÛwm@UxVVVbVLUJVxVUV@V@X@JUIVbm@@Vk@@VkL@lVLUJ@zWJ@X",
              ],
              encodeOffsets: [[108799, 30241]],
            },
          },
          {
            type: "Feature",
            id: "500106",
            properties: {
              name: "沙坪坝区",
              cp: [106.3696, 29.6191],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XºlUVl@UbVXUV@xVJVzXJVUL@VV@VKn@@Xl@XK@UmÝnKVbVakkVm@kUK@UmIm@LkKULVU@WJ@UU@@VkXU@Wa@@UKWL",
              ],
              encodeOffsets: [[108799, 30241]],
            },
          },
          {
            type: "Feature",
            id: "500108",
            properties: {
              name: "南岸区",
              cp: [106.6663, 29.5367],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VVJVL@bUVVnl`XIlwXJlw°nnlIXW@UÇĉk@WJkwkL@WVkU@LU@U`W@UXUV@n",
              ],
              encodeOffsets: [[109092, 30241]],
            },
          },
          {
            type: "Feature",
            id: "500105",
            properties: {
              name: "江北区",
              cp: [106.8311, 29.6191],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nLVU@wV@lV@XllÈKlU@L@@bVKnx@I@JVaV@x@Il@@Un@laVVn@mkUIm`k@WXJmk¯mkxWIkxWJk_UmVUUK@UU@@l",
              ],
              encodeOffsets: [[109013, 30319]],
            },
          },
          {
            type: "Feature",
            id: "500104",
            properties: {
              name: "大渡口区",
              cp: [106.4905, 29.4214],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@k@@U@w¥WKkVkImUmwa@b@xWJ@b@nKVU@L@WVLXKV@@z@V@bVVU@@VVL°K@U",
              ],
              encodeOffsets: [[109080, 30190]],
            },
          },
          {
            type: "Feature",
            id: "500111",
            properties: {
              name: "双桥区",
              cp: [105.7874, 29.4928],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@WwUwU@kK@KmbU@@V@XlJ@znWlXV@XK"],
              encodeOffsets: [[108372, 30235]],
            },
          },
          {
            type: "Feature",
            id: "500103",
            properties: {
              name: "渝中区",
              cp: [106.5344, 29.5477],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@VL@VV@VL@aUKIUU@@JUVU@"],
              encodeOffsets: [[109036, 30257]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/fu_jian_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "3507",
            properties: {
              name: "南平市",
              cp: [118.136, 27.2845],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@knyk@KU¥wV@nkWzUmk@@lKUa@aVI@UKUamKUUVaUI@X@UV@K±IUVVlUbUbUL@KWUXmWk@KkXmmkÅKUa@amUbkUkKWUnwUÇwVUUÝUKV£U@nKWwXLVKm¥@wUXkmWk@@wX@lU@yVImaXwV@knU@mbk@mlUXmU@mV@n@bnW@bUIWJImVUKWbUK@nkKaU@W_VUUmWmL@UU@bUWUL@V@bmVUz@`mUUVVbXL@VL@lmLUxmVamXkW@xWbUVbUxkU±@ÅUmmkLUbW@@`kLknVlV@lbXxlVUXVVUU@UbWkIWVUUUJkI@llbUxVL@VVUU°ULUmWXUV@VULWb@xm@UaVLVKUa@w@VbkmVambUUm@@VkK@@bxlxX@n¤@X@@lkLWV@nVkb@bWJXLWx@nkxmmbXn@VWVUn@VnJ@bVXl@VJXnWbX`lLUlJVI@@VXV@Vl@bn@@Æmn@VxXU@mVIlxVnIl@nVJaXI@mlU@aXkVm°klmnVV_na°@V@xÜ¦XKVnnUlVXbVKLXKV@naV@@VVl@@lXblXWnLlbVK²n@@VLUnlV@lXxô°V@UnaUUlKXLVUVVUbVVlUnJVX@VW@an@lb@nl@VU@anUVW@kaUm@InVVKVU@kUW@Uam@km@kVa@a@nwU@WlI@mVI@WXaW_n@nlkkW@U¥@kV@Uw@wU@@IXK¥VIn@nU@`@Xl@VVLnaWbVaUwnU@VIKlV",
              ],
              encodeOffsets: [[122119, 28086]],
            },
          },
          {
            type: "Feature",
            id: "3504",
            properties: {
              name: "三明市",
              cp: [117.5317, 26.3013],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lL@Un@VVnabnUla@Ux@VbULUKVbn@w@XaVK@UVUXWVnVKV¯VU@UUKVwka@klJVIVVXUlJXVaV@VUUVWkUWwkaU@UklmlK@_X@ValKnnÆV²@lVVwUaVXa@wlXnWbnUVwnK@kK@UWKUaVUnV@_VynU@a@UVKVXaV@@VnKnXVVUX`V@blL@mVLXaVLnUJXIVJ@amX@a@mnUV@nVWnkl@naV@ml@@KmKUam@UU@@UlKUVkUK@aVaUwVU¥UIkJ@wmI@mbkwkVW@UXKULU`IVKUa@LkkVmUU@WlULUWÅU@I@WWnU@@w@a@Uam_XyVIVWkk@mwVKXUV@nwVXkWÅU@aU¯KUnK@¯mULXVLnWVbVbUVm@Ub¯¼W@am`kbamLUUUaUXV`@x@XmJ@n@L@xkJUU@kU@mWm@kUUwUUVWl@VUkIy@kkaVUUmIWVXbWxU@kmVkK@nWVX¦WxU@@bkx@VU@Wk@kUbmJUUmkUW@_kKWK@knV¤kIUKWLUbV@Wbk@@VWL@VkI@lUXVxUVU@@mWIV@a¯nUaaUV@Jb@bÞ°VbU@XaUVmL@VXblnV°n@Vnx@VUUUlK@InJVb@Vlnn@VL@VWJUx@XlJUVVVl@LUUUJ@L@lUL°¦kVVnV@xVl@blLnlLVaXll@nVUn@xn@nml°X@lb",
              ],
              encodeOffsets: [[119858, 27754]],
            },
          },
          {
            type: "Feature",
            id: "3508",
            properties: {
              name: "龙岩市",
              cp: [116.8066, 25.2026],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@aI@VUbVb°m@bUXJ@nV@VUUwVW@klJ@UXK@Ul@Xa@UVaXKVLlJU£lm@XLlL@`VXnlVVnIVall@XV@@Ulw@aV@XwW¥XU@mlLnUlV@XwWaXUJVnUVlb@lzlJUVk@UXVVVxlVn@nXV@@lVVlI@w@K@mnI@W@wU_VWbVVVnKbla_nbX@°»Van@VUUaUamXUKWK@a@Uk@wWkXWW@wUUKw@_lywUkU@@U@kamVmXaUVUka@Wk@»UUUVKkbWUVUbk@mkxkKnIVUmW@kUKmXUmVaU@kU@m@KUWVkIWJ@U@UI@wUUUa@KW»nU@mVkUmm@XwWU@UUmL@w@mnVUU@aWak@@amxU@UxULWVXbVLU`mbUImVUbnV@@bVn@bnVWxLmyUbIUK@aVmakbVUXWUlKWbkV@WLUlk@@nbb@lkKmU@UIWJkw¯UUVVxm@@XkbWxXKlUzWJkUUL@bmKkV@@VUIUlWV@XK@VkbWx°xUb@LUbk@@VWb@LXJ@VWXU@@bUVVVVn@VVlLn@l@xk¦Vx@bVJXbn@JlnXxV@@nJ@X@V@lmxbUn@xVL@VVKlL@lnLVaVL@xkl@LxVl°XWVXVlJWnxlJ",
              ],
              encodeOffsets: [[119194, 26657]],
            },
          },
          {
            type: "Feature",
            id: "3509",
            properties: {
              name: "宁德市",
              cp: [119.6521, 26.9824],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@LVKVaVaUkVU²J@LVU@@WVJUbVVnLVbL@VUJ@bVbkL@l@VnyXmlU@xV¦L@lmz@lnL@bVVbVb@lnKVkVl¤@zXV@l@XJVLVKnXVKVnU@wUm@KU@UlVlw@U@U@UaUKlU@kXKlmXIWKXaVIVUVK@KU@@kJVUnLVJUL@VIVa@VnLKUnl`VbVV@Vbn@Vzn@lKnVlIVVKUalkXJl@XXVWVLVUUmVU@Unm£lK@Uk@WUXK@U@WVwVkĠkĢÇ°aUÅUwmaţɱUÇaw±V¹XalKôx@UVaÜʓͿVóbÅLJm¯Vk¦k@mamXkKUULakbk@mV@LkJWb@VkmXk@UVmaUV@amLUKUamI@KUaU@WbU@UUUUIWJUkm@wKkVJm@kxÇVUK@mUVUkmlkkVm@amwLVWU@UbVLkUb@VmK@XaVWU_VJnwV@@kUmWakx@kwWakIWxnbUJz@kVW@@x@XllnVW@xn¦ULWKXxmL@VU¤VLÞVVUÈxVmxXVlLlVanV@bbVLlÆnnlW@LXlWnXV",
              ],
              encodeOffsets: [[121816, 27816]],
            },
          },
          {
            type: "Feature",
            id: "3501",
            properties: {
              name: "福州市",
              cp: [119.4543, 25.9222],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lxna@nJ@xlIVJV¦UVxUb@bLVUlVkL@V@VVn@VbLn@LUlJXblx@lwXbVn@lU@mxUIV`UXWb@nLU@ValUKVaV@UXKnxbn@lUkllnUVnV@VLUÈlwn@UIlLxn@VlXIVJVVVV@XaV@Vb@LnJVbVLnK@bVUnbVUl@nWl@UXalI@KnUl@labVKVlLnWnbl@l¥°UnIÆKôa΀Ua@UUwÇWǓIUWUÅVkƨm@@£@KmLU¤ULˣJkUVǟUUķ@ĉVKUk@Ñ°wôÇç@īé@Åţ¥mīÛkm¼Å@VķVó°ō¦U°n@bVJXVVL@bUakLmx@xmxXzW`XbWnXV@bWLÛ@a@aXbWVkaÝwU@mlWKkLWWkLUKULW@kVmVUUÝUamV¤n@xUVUzkJV¦lJU",
              ],
              encodeOffsets: [[121253, 26511]],
            },
          },
          {
            type: "Feature",
            id: "3506",
            properties: {
              name: "漳州市",
              cp: [117.5757, 24.3732],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@bl@Xb@bVVUm@nx@nKVV@XVWxn@VnUl@nmVX¼@LVbVV@xVJV@@XIlJXUV@Ln@lVV@UbVnnWVL@lnXUVmJLlwnll@VaUXVlaLVUVV@¼Xl@lbUVVWbnnUlb@@VV@aVUmlUaUny@kU@Wkk@WaUVk@@ammk@@U@UlU@aUa@wl@mXLllnLU@anVnU@L@VVV@KlXnWVnVanUw@w@wmnÅ@waUam@UkmUl@@aa@U@¥kôKwÈ¯°w@ŻkwǕaKÑÛk@ĕōřċ£ĵUKW»kÅŻLU@Ulġw@¤VzVUbkKUbmLmlULU¼UxmbXl@bWVb@bUnVUVbULU@@VkbVL@`U@WX@XV@b°@b¯@¤@Xm@@b@`UVVUL",
              ],
              encodeOffsets: [[119712, 24953]],
            },
          },
          {
            type: "Feature",
            id: "3505",
            properties: {
              name: "泉州市",
              cp: [118.3228, 25.1147],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vlxkz@`xLVV@xXXWXl@xl@V@bnV°@LVm°LVbV@ÆXWlUmxU@WVULnx@llUXUJWzn`Vb@@b@xV@mXX@@JÆVVXVKXkV@nVlUl@KVbULJV_VKLVWX@lUVkIU¥lIVyVU@wm£nUVWU@am@UmWw@UX@@amVUn@@aUUlUVanaWUXWmUnkK@VUlVVUUw@XLWWXma@knmbVbVXbVL@XJlInlLwmXów@çV»ÇçŋaķƧóƅóKġ°nÅUķƑUÇW@¯xÇ°öÆlVn@lla@Lb`@VXVVx@V@bULVJUkÇ@¼XUKk@mmULkaWbk@x@UkL@a@K@U@UmKmbU@kV@UmVUbUmmXkW@LUU@U@KmVmU@bVmKkkWKnk@@xVb@bkV@V@Vl@nn@bl@VUXbl@XlV@@lmzVVbknUVb",
              ],
              encodeOffsets: [[120398, 25797]],
            },
          },
          {
            type: "Feature",
            id: "3503",
            properties: {
              name: "莆田市",
              cp: [119.0918, 25.3455],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VbÞVVnUlUX@VKVLlKXXlKXLnkV@ÞxlbXUWab@bÜ@XK@aWUXmWaX_Wynw@wnwlKbV@aUKWUUI@amV¯Ŏ¥ô¯ĸUUÆ@n»¯aƿé@ţ¯nĉĬÝKóó@ÑU¼@èxWônxKmkkJWI@UKWaUUaamn@lnbWXXWK@VxUVkUV@ULmlnVWXXVmbUbkVVV@bm@UVn@bW@@VXxn@Vn@bVUX",
              ],
              encodeOffsets: [[121388, 26264]],
            },
          },
          {
            type: "Feature",
            id: "3502",
            properties: {
              name: "厦门市",
              cp: [118.1689, 24.6478],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VlUV@nanL@V@V@L@blK@Vwl@XalbVKnnl@VLW»È@lVUIVK@a@UUwWUU@_aK@bkkm@UkõÅxóLl@¦@Vb@bk@VnVln@Vbb@xmÆn@x@xx",
              ],
              encodeOffsets: [[120747, 25465]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/gan_su_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "6209",
            properties: { name: "酒泉市", cp: [96.2622, 40.4517], childNum: 8 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÇnÅaĉ@U¯¥UŹ£WUýUU±JkkUwyÞIČxĊĕĊ¯¥ÆUkţUÅÓ±¼IUx¯UÒƑÝÅ°KÝnğ°ÅU@@Vn@þ¼¯WnŎ°XLWlnVnbWnVXxmbabóUlǕUUaIUmlU¥k¥ĉwkkÝɛa@¯U¯°mVkVnKlōÑÇÑU@klUġkUŻnUW@¯k»mWV£UKnUmUww@UIVaXwm»Èmmwn¯ċ¯LĉUJUalka±Va@Uk@ÛÑ¯WmnUaɝ¤Ûmn¯m±x@wóxÛLġÒUx¯VÈJUbózÝÇKĉ¯ōlÝUÅWl¯nťbÝ@¯ǩLġmV@Æ¯ĢkÆmĊkVťLɃmÝXó°@ĢbVóVÝ¦ɱ@ƧaġUVĠÇÈV¼UVţwmbJÇwˋaXmÇ¯KkkmbXm¼V¼ǬŚ²¤ôŰÆƴô̐ŤǪnɆӨ¼ɆLÆłUĊxŎƞȘǔˎǬǪnƨŮǬö°»ġÞÜÆĸÒĊǀbƾèôÈ@¼¯þŤĸƧ°VĀ¯b@lÈĊʠń̐ȘKǀֲॗţÿǕý@ʊǓƨóÆÑǖŃôw@΋ʈƆÅÈVVĊVóĊÅ@ÞƒĬV@Þī@°V@ĸĢ°XτƜĠ@ÈaÜ¥ŐƅnğóĕVġUůƿŋĕa±VUťÇğÑ",
              ],
              encodeOffsets: [[101892, 40821]],
            },
          },
          {
            type: "Feature",
            id: "6207",
            properties: { name: "张掖市", cp: [99.7998, 38.7433], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÈÒŎÒkmLUlU¯nV°@°ɜbÞĠaÈ»ĸlLVUÈ@Ċ@ýUm@@ÆVĠ¯ÞmLÆ¯ÞƒÑ°VVwJ²»ÆÔVlŤÅV¦ĉ°ĉĖċwÝJzVxll²IVVVþX¤źV°¦VĊ@ÆbÈmǔLĸĠ¯Ģaô¯ĸmÆÛUlÇĸk°XyĊUǔVǩnmV»a@ýnK°n@l¥@»żĊ¤mç@£ČU@mmVkÞUƐ±²¹°ĠwÅƑŃU¯V¯aÈŁÇ»ġn_°xŎKlxklx@Þw@Æm²bÇ²LlkWXať¯ĊaÑK±w@wUÅçV±Uk@@¯¯xU±±UU°ōxVxÅÔō°ó¯UÝ¦óbÝþ@ĉÈóUVUx@VUVÝwÅÈÇóVkk¯JÇkmmL@KÇx@bk@U°ķ²ó`mn¯°UwlÅkU`¦ɛôķz@ÅnÇ°U¼¯KmVk²J¼ƏÞķô¤UL@mnğ`ÇnUxÇ@ÛÿU@kŻ@x@móJkÅ¥VŹĉóÒĉlċ°ķUƽÜ@x",
              ],
              encodeOffsets: [[99720, 40090]],
            },
          },
          {
            type: "Feature",
            id: "6230",
            properties: {
              name: "甘南藏族自治州",
              cp: [102.9199, 34.6893],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÞnKlnwX¥WÝXkxÞUn°aĊVnUUKlÞĶWXnĠ¥ô»@nmVL@¤°VzJanU@aÆwna@kU¯yX_aĉbwéXkWwÅa¯V¥m¯UI@@mb°aÈçU¥@»knwɜƇ°I°ÑÈmVU¯Xa@wW@wV¯Č¥l¯Uwnm@kaUaóKkk@Çab@ÒWa¯IÇxÛam¼VUxÒl@zÝÒ¯bÝaĉVĉwÇWzJmJn²mÜ¯U¯ĉ@ġ¤Åb@²nml@@ULVxVU¼Ålmab@°l@WIU¯@m@ó@UzţyXÇUÇVUUVLkbWakVWmUbkkKUÆ»n°Knk@aUVmnk»l¯Ģlw@_kKVU@na@lUk@¯¥mV@kmbWb¯Åõa@mkU@kÇkU@`@óóbl¼Uxn¼lVÈx@blVkVVn`XÈġÈ@ÇK£ÝJmUUnUĖmlUmKUnVÅaUwUĉ`¯n¯wW¼nxV@bĉnkIċŘkXU±ÒxÈ@X°`lVIÈ¯ĊVVVan@VaUVażVmblkÈWWIXaalL@wVbV¦lL@lĠnÒUnkL@ÆÞkÞKbñþW¦ÛċVULUºkÈlŎUxÆxÞUUxÒx@XbL@lÆ@ÒlXVln@bm¼J@Ånx@bnĠmxVXmbÈè@Ċ£ČWw",
              ],
              encodeOffsets: [[105210, 36349]],
            },
          },
          {
            type: "Feature",
            id: "6206",
            properties: {
              name: "武威市",
              cp: [103.0188, 38.1061],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@±¯¥@klwU»ÞÝmwKm¯ç@kVÇUL¯lVUKġġm@a@U@X£°l°LŎÇ@aōVÝwÔKUÅWJ¯lm@ÛVWa@klĉUmaLUanak¯J±KkXóÜÅx²Ç@nUÒĊb°@ÆkLXÇÆ@xÝnxWxţ¯¤I@ÆnVVVlU²ÆèV@x²xLÒĉbŦ°WbXklÞ@l¤XĊ`wl@ĢÈŎm@bnVUb@ÈÆÛLèÇUÒÅ¦lĸ`°ĮʟÆǓbĉôϚĊÆĢnŤé΀ÑĸĀĊ¦@@l°l¦Ȯ¦ɆÞĊKŤĵĸů»mŁyġķŭ@Çɱȭ¯mƧUĊķnŁŻ»UaUƛɞÝƨů",
              ],
              encodeOffsets: [[106336, 38543]],
            },
          },
          {
            type: "Feature",
            id: "6212",
            properties: { name: "陇南市", cp: [105.304, 33.5632], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÈÞ@l`UmV¼@nnÆwVlnVVaLVÈ_ÿÞ@naxÆ@l_@VxnK@llLnxmÈŎJnbUxI°l@n¦lÈIlmX¥k°@kJk²é@klaUaVaU@@ÝnIWnmnxkºÞaV°V@nwKxôbÞ£VUbþLn»mVwIJ°@nb@°°IġUkÇKV@Å¯»lLnm£@anK@ÑÜn@»mL@£ykUUmbUÞÝ@kyÇbó»XUxWVzb±mÝbXawUamL¯»@wUKVwm¯ĵJ°ÅUWVkKVk°wÈVVÑlU¥kmVamknUw¯¯bċ¥ÅKkKkVċVk£kKVwÑa@kóyÛ¯ÇVkówXō¥Ç¼ów¯U±k@xIĉÒÅVmÈnÜ@n°bUbÝVUnnJ¯Į@m¦nVÜ@L°JXbÑ@aÈb@llôLVbb@lmnVxk°ċ¦U°@xX@xWb°UVÇn¯Ò¯Jɛƈmxl@¼",
              ],
              encodeOffsets: [[106527, 34943]],
            },
          },
          {
            type: "Feature",
            id: "6210",
            properties: { name: "庆阳市", cp: [107.5342, 36.2], childNum: 8 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@kwĉ»VamV¯wIóVkl¯KmVō¯ÝWkL@bÝKō¦@@Lx@b@la@km@@l¯nm@UaÅ@óWUXm¥nw`@UUxķôÇ°ğ¦@VJ_nIVnalxkXJWn¯nVLxl¤nnVbklVX@xnxmV@bUK@nm@@xV°±aÅnkUWnUax@mn@¯LmUĀlU@lV@blLUblxklkIÇx¯°UXbaVUnV@°LUlnbX@`°nVmbnÆmVkLmK¦U@Xy@kl@U°K@¼XbW@bWnLVaVVz@xlVČ¥lbUxÞlVU@nÆWôn²VJlUƧLnmÜLXan@mw@wlUlV²mblwVÈlLÞ±@lVnUlxnkma@mkJ@kXVU@mn@¼VXUVlLnmVbôaVnWV»ÈUl°È¯ÆInÆU@kk»mKkÆġk¯@»mk¯@óÇlÇ@VykklUml¯Þ@w",
              ],
              encodeOffsets: [[111229, 36383]],
            },
          },
          {
            type: "Feature",
            id: "6204",
            properties: {
              name: "白银市",
              cp: [104.8645, 36.5076],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VKUÈl@è°nLnxÝÞV¼kx@l¦²°ĊóĠĊ»@ÈxaĊxlwÈVŤa@¯²aÇ£Jk£lnUÞ@°ô@ywl»lIX¥Ǫnw@ÑÞWlaÅlL@Uwĉakl@¯mwna°JV¯nUVÓÞÑm£²óWaUÇ@óÝUçV»ÈkkW@¯xV@XlK@wX@Vmm_@wÈÝKU¯ÇwVwÅK¯VkJXkWVaIm¯UkÇlVĀV°mxók@¼óWxĉÜU@UbzÛJÇk@ÆnVlÔ@kxô@ĬWL¯K@aÛImm@IUa@UÇêU¤VÒÇx¯ÒVlk@Wbĉ¦UbkWV_y¯Laók@b@nmbkx°",
              ],
              encodeOffsets: [[106077, 37885]],
            },
          },
          {
            type: "Feature",
            id: "6211",
            properties: {
              name: "定西市",
              cp: [104.5569, 35.0848],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@aV²wVJV_@LlanÅllŦçÜÓ_lnWaôkxUbmV@È°lènk°l¦`@nnL@ÈlÜIyVaV@ĊÛXwô@»lônwU¯ÿUÈkl°VnJUblXWIl°UV@aVVVmnL@lUUwmk£bV¥VUVwÛlaÇÝÞmk£LUy¯L@WlkKW_XaWmġU@akakXkmVwmŹVUbWónmwnWW£KÈnV¥¥Æ_klWbU¯V°aôbnaVwmaōInÇmwkK@kmLUw@`kÅ@wb@mÝĀÇ`UKUbmUUkÅxmm@»nUVk_Ý@Ç¦VÇè¯ban@@JV°nU¦°ÆbXxWlêxĊabW`zV°@lmbÅx@bmVbI`¦@ÒUVUI@ÆL@b¼@@lmxnL°ULÞğÞ°kLUL°xVnKVl@zX@",
              ],
              encodeOffsets: [[106122, 36794]],
            },
          },
          {
            type: "Feature",
            id: "6205",
            properties: {
              name: "天水市",
              cp: [105.6445, 34.6289],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UyÈVVUnn@VU`UblzJnk@VbKU°lwW°nkVUÈl£°V@n¥VklkU±Unlw¯UkwmKUlmkUmnkym@Å@UmWÈU°l°anlJkUKlU¯Èm@kmWV»kkÝLUWUx±b@¯ma@¯IJUxnm¼KýaVUÝ¤óawLmxU@¯UbÝ¹lmwmnXmJ@ÞV@UbVbkbl@±êlIl¯@lW¦knÇJkm¥k@¯Jmbóa¯bUV°akXlÅ`¦U¦ÇmLX¤mXnxmôXaVźUnUxlnlWbl@bĢVnXWbX`lLXk@°KVzKl¤nÞÝÈkbÜ",
              ],
              encodeOffsets: [[108180, 35984]],
            },
          },
          {
            type: "Feature",
            id: "6201",
            properties: {
              name: "兰州市",
              cp: [103.5901, 36.3043],
              childNum: 5,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@lW²L°IlmbVbKnbĊVlk@XbÜU@kn°XIÆVLÓÞxŎUlôb°KzU`lXVaĊ¥Xal@kU°ÑÈwUÑV£ÈéV@VbJ@nnÜJ@bL°XK@īówl@kÓmUÅmK@m_k¥l¯mkçÇ¯@nUaVwólXbmk`ÛÔťèkkmÆkbK@U`UI±xUbWlXmbVbÅÒólkIWJk@zKŻ¼@xUxó¯LWb@ÅÒ±¦U`nbťĀUVbLU",
                ],
                ["@@¯lwna@mōÈ¯K¯kW¤@@V@bĢnĢVLU°k"],
              ],
              encodeOffsets: [[[105188, 37649]], [[106077, 37885]]],
            },
          },
          {
            type: "Feature",
            id: "6208",
            properties: { name: "平凉市", cp: [107.0728, 35.321], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÆLUxÈxV°LÇÞ@xn`Ü@X@nĊÆwnJmwUxaUkw@V@waVmlLXÝl@XVĢmV°@nl@UUUWK@wÿVI²Òlm@nÝĊýVV@nJ°Ułm@kV¼nKĢÈ¤ôKblnKllVk²aĠ¥È¯ĸóVw@V_xmn¦VWôXÆ@Vbn@°m@kn@@lb@ka@wK@@UlKVaWXW²¹lÓw@_°n@@_lKÅķW@mLUWn»Û@l_Ç`Ûmm°ÅbWb@VWbUUKÇÅaġlmkUġl»LlUm¦@¯U¤ÇkVUml¯Xx¯kVLUa@mlIkyVa_UV@mmUVUÇVzUxUVU¦a¤lnVxVk@mKUnUU@bU",
                "@@@ż@mlkġk",
              ],
              encodeOffsets: [
                [107877, 36338],
                [108439, 36265],
              ],
            },
          },
          {
            type: "Feature",
            id: "6229",
            properties: {
              name: "临夏回族自治州",
              cp: [103.2715, 35.5737],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@ż»Ly@lXIJlôkÆÑUanaWXkW@yk@ULmUw¯KVlK¯ĠÝÝVK¯mKnwk@@»@aK@ÅVJVU@Ñ¥_Uy¯@£UKmn@ó¼ğ¦WmĵXÝkVLmVĉU¯bmÝVwWlXÞW¦xkmmLÝ±U@VÞ@ÅÈW°XÜ¼ƨyUĮnWnXÝxUx°lVXJlôV",
              ],
              encodeOffsets: [[105548, 37075]],
            },
          },
          {
            type: "Feature",
            id: "6203",
            properties: { name: "金昌市", cp: [102.074, 38.5126], childNum: 2 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĢÈ¼Çł°bU°VƒńÆǖŰnÆōĬǔaʠÅ¯ĭ_kķÆ¥VÑÈçÜKÅ@ÇVaUm@aōnġÇk@xĉ_Wk£@Ý±KÈ±aÅn@Ýx@kwlkwōL¯wm`",
              ],
              encodeOffsets: [[103849, 38970]],
            },
          },
          {
            type: "Feature",
            id: "6202",
            properties: {
              name: "嘉峪关市",
              cp: [98.1738, 39.8035],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@llĊx¦l¦kVVnJVbǖVkôVabnaWwUXmmamUXkWKō¯Xm°»ĉÇ@UVKķkÇ¼ğb",
              ],
              encodeOffsets: [[100182, 40664]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/guang_dong_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "4418",
            properties: {
              name: "清远市",
              cp: [112.9175, 24.3292],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lÇ¯kÿaV¯VaÈU¥ÆÇIlxmnbUxlUôl°kWl@ôVwUanUl@xVkaX¥kU»a¯±@kka@UwmUkwJk±k@L@ÝWUwVÝxÇU¯ÇX@mÅ@@yĉ£VmUwȗ»ÇUnlUnWU¯`Uk@@x@bÇxX¼VV¯LĀkÝL¯@VĀ¯lnĊW¦kVÇôkUÇUK@ţU@aóÜUU»@¦k@VxKVbn@Æl@xbWnlUlxÈlVÈ°Æ@¼@xWxŎVK°¥nÆkŎ@ÈÑmK@¥k@ô@nôV",
              ],
              encodeOffsets: [[115707, 25527]],
            },
          },
          {
            type: "Feature",
            id: "4402",
            properties: {
              name: "韶关市",
              cp: [113.7964, 24.7028],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WXk±Ñ@UwmUwĉwlmn@Æwn£mkI¥ÇÅ@¥aón£nWWw£V`Þ@nVml@xô¼IV¥kUmkamUkVWwÛ»mó£UVÅKmn@x@kbmm¯aXkaVĉaUbÝ²lIlxnVVx@lb@l²°bV¼lW¦bUlwk@mVVbUxó@kX¯lókVkwVmankwJÅÈ¦ÇVUbU°blĀ°kÈ@x¦ÆÜ°@°¦óaVUôlUlbXl@nÜVnKlnIVÞ°W°U@bnm@¥IV²Ul°VnalzXyl_Vyƒ¦lLlx@ÞbKmknVWanwÑVwČº@n_ÞVaVÜIl@KÈVJ@a£È@@kmaV¯W@_a¯KmbkÇkLmw@Å¥",
              ],
              encodeOffsets: [[117147, 25549]],
            },
          },
          {
            type: "Feature",
            id: "4408",
            properties: {
              name: "湛江市",
              cp: [110.3577, 20.9894],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@kX@aUUċlkJk@wVJXUWk°W@nKnwlUl²blU@lIl@XbWxnm@lW@wwUJX¯VU°`ŎóˋkÝÝkÅ@ÇmğÈřmwaĵVxUÛ»°ĠǷnýmóX¥ɅĵҏÇ@°²ĊUĖ±ĮU¤Ç°Ā¯ɐnżUĊĊĬV@è@ÔÒU¼l¤nĠbêVĠ°ÈyzVaVnUÆLabVlwÆ@",
              ],
              encodeOffsets: [[113040, 22416]],
            },
          },
          {
            type: "Feature",
            id: "4414",
            properties: {
              name: "梅州市",
              cp: [116.1255, 24.1534],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nÔlW¼x¦@lVllLkèa@z¤Ė¼UxlnUKUbÝlU¼lb@VxVklJÈwV¯@ĠlÛĖnbkÆźÞUÈôklmL¥LWnKUkVa°Vx@IVV@x°bUkaa@mV@@ywLÑUwVUVUbÞVVann@XwÇÿ¯²aVamkXaÆ»@»nw@¥UXakbWa¯KUw@¥m@kwmLU»UUJ@kmU@UUWU@yanwmçÛl¯¯UmKUmwVkmÝXbW@XWÝbk¯@±w@»U@W¯Å@Ç¥UU@IUakJĀê°þXkam@_J°m@X",
              ],
              encodeOffsets: [[118125, 24419]],
            },
          },
          {
            type: "Feature",
            id: "4416",
            properties: { name: "河源市", cp: [114.917, 23.9722], childNum: 6 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°VlmX¹laĢÒlm@V£@¦Ģklynn¼lW°zW°VbÈV@lÆbnnJkXVÆaÅW@UUw@kaV»ÞkVaVLkmVw»ĕ£@yblçkKkU@k¥wX»kmÓ@Wn¯I`@nlbWý¯éÿlI@XUmWUw@@UJUÇmKUV@xţk¯¯LWnUxK@Å±»Vwa¯@¤WX@Û¦@¤ÇIÈ¼WxX@WxwUnVbÅèmVa±²UWl@klÈ¤nôÜ¼XxlUnVlbVnlU¦Jó»@wnkmUÝ@U_¤XxmXm¤ôb@¦ÈÆ¦lJn",
              ],
              encodeOffsets: [[117057, 25167]],
            },
          },
          {
            type: "Feature",
            id: "4412",
            properties: {
              name: "肇庆市",
              cp: [112.1265, 23.5822],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l@¥@V¼VôÛ@bV@ŤVLÈlVÈólUX¥mĉ°kÿU°@ÞKlÿ°KUUW»Èw@aw@@nm@w£kÓVUVnKk¥£Vam@nkKkbÆǫmakmLU¥UmÛwmVUmUJÇaUxÇIn`mb@Þ¯b@nJ@nlUVlVULW¯Û`Ç_¯`m¯IbĉWċzx±Jx¯ÆU_k@J@UmbXôlLn¦@¼ĊxlUXxUbLĠUnVĊwlUb@lWXm²@ÞWxXUnb",
              ],
              encodeOffsets: [[114627, 24818]],
            },
          },
          {
            type: "Feature",
            id: "4413",
            properties: {
              name: "惠州市",
              cp: [114.6204, 23.1647],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lbW°bnnla@@wnmÆLVUkÇl@XkV²±bnUÆçUaVmxXw@WXwÇ»ÈJ@£Ü¥@XW@£°bUx²¼@ÆLVwmX°K°Ťl@wVUnLÈVVIky±wkKU¯ÅkXġÑÛlwUwlm@mnKWaÅm¯óÇmğb¯alĉUwķbmb@lÞÒVnmĀŹ@VbVUnmakLm`@xĉkklVÔVJVnlVUnmJmaLUblzmkLaō@@zV¦UV²kJnÜU@VXUL@lJL@bÝ¤UnVb@xVnlK²Vx°VxlIlkVl²k¤@n",
              ],
              encodeOffsets: [[116776, 24492]],
            },
          },
          {
            type: "Feature",
            id: "4409",
            properties: {
              name: "茂名市",
              cp: [111.0059, 22.0221],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@LnÇlkKnkÆLUmÈxlUJló°n@ana@@X_@mÝóóU@aaU¯mL¯kV¯ÇVwkw@V±Ŏ£@@alw±Vk@mÅm¯ÿÅƧIÇ`ōô¯_UVW°IVx@xkX@mnwXWa@kkJ@kVa±kkVmxmL@¯XXlWVUI@xlIklVČV@blW@@nUxVblVxkôlxnynIÆ»Æ°aXwlKbVnXbL¤kLèVV¼²IlĠVXynz°KVx°@VlLlblK",
              ],
              encodeOffsets: [[113761, 23237]],
            },
          },
          {
            type: "Feature",
            id: "4407",
            properties: {
              name: "江门市",
              cp: [112.6318, 22.1484],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lUXx°JWnnÆXVWX@ºVLV¯nUVnbôxaXmWXIUb°xlKl¯KxXÞ°XÈ¥Ü@ĉÞUç»nóVmax¯UÅU¥Ý¯@ç@ș@çĉÅUmUç±ĉKÝxÝ_ÅJk¯»ó¯nmèkǀWx¼mnUÜġ°@¦@xLkÇaVnUxVVlnIlbnÆÆKX¦",
              ],
              encodeOffsets: [[114852, 22928]],
            },
          },
          {
            type: "Feature",
            id: "4417",
            properties: {
              name: "阳江市",
              cp: [111.8298, 22.0715],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°nKV°b@bôVÞô@nVlÒôÆUnlnn@lmkmVkaÈkÆÆk¥ÅÞ»ÆKXkW¥ÅLmÅkamJUkUVwUmÈblKw@@¥Ģ¯VÛnm»Xwlƿ@kbWaʵ@óLl¯ƽ@Ln°Æ@nUl²kxb@@ō¤U²@lxUxÈU°l",
              ],
              encodeOffsets: [[114053, 22782]],
            },
          },
          {
            type: "Feature",
            id: "4453",
            properties: {
              name: "云浮市",
              cp: [111.7859, 22.8516],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VIl@`V°Åw²IwČyĊXa°Jn°_È`Ü_°XKVkUUVk@mmI@°a@Ýnam_ÈJVwlĉX@lUómaUmVU°UK¹@WXUWmÅXm¯IWwkVWlÅLÝ¼Æl¦ÅÅÇlbUllnknm@kmVmóÅkÑUW`@@bmb@¯mkôIkVÇwnVÅKmlLklmÈKVĊK°²`n¤nUbWlxVxLUx@°nXm`VklVxmnnx",
              ],
              encodeOffsets: [[114053, 23873]],
            },
          },
          {
            type: "Feature",
            id: "4401",
            properties: {
              name: "广州市",
              cp: [113.5107, 23.2196],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ș¼VxUnĊ¤@z@Æ@nÈW°ÈVwUÞVxÞX@Kl@ÞVaĊbU@ml£k±lUkkJw¯UUw±kLUm@waUVmÞ£@aKkI@KVUW@ÛVmlIU±VU¥@yğzƧÇƽĠřÅnī±m@²¯l°@nÝÆóUll@XnÝVU¦mVV°V¼Jnb@°mbn@²¯¯wVw@@nmxX¤¯L@VLUm@@l",
              ],
              encodeOffsets: [[115673, 24019]],
            },
          },
          {
            type: "Feature",
            id: "4415",
            properties: {
              name: "汕尾市",
              cp: [115.5762, 23.0438],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@@VxnXWV@bVJV@ÞÅU¥Ċx£UWUwÅUU¥WVUkĊÇnkV`°LVwnU@lbĊ¯Vnal@@çkUÝ¥ġaó¯ÅaÅLŻÆUýmy¯ó@ĉÆóȯwÆXbmL@nknVxkxÜĢÒWÆlV°Ll²xlz",
              ],
              encodeOffsets: [[118193, 23806]],
            },
          },
          {
            type: "Feature",
            id: "4452",
            properties: { name: "揭阳市", cp: [116.1255, 23.313], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VÈ¦Æ@X°V@@¼x²°@lÞaWXX@aÞWlnUxVnnL°V@kmĢl@ak@mlk°aX±nwm±²¯JV²@wW_maV»U@m¯ĉUÑJlabVnlĸLlƅÛÇ±wÝ@ĉxó@è@kmbUĉ°ka@mVxU¯KU_mlĉÈVlXUV¦ÆVxVVX¤ĉwV¦ÝÆ",
              ],
              encodeOffsets: [[118384, 24036]],
            },
          },
          {
            type: "Feature",
            id: "4404",
            properties: {
              name: "珠海市",
              cp: [113.7305, 22.1155],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@è@Þ°V¦VÆ°wnbUÆ»nçÆ@nxÜ¤²llU°VnÈJÞ°UôéķUklô£VVˌKÞV°£n¥£ȗÝy¯¯mÅkw¯bÇĔğ@Ýn¯ĊVğōŁŻķJ@Ț",
                "@@X¯kmèVbnJ",
              ],
              encodeOffsets: [
                [115774, 22602],
                [116325, 22697],
              ],
            },
          },
          {
            type: "Feature",
            id: "4406",
            properties: {
              name: "佛山市",
              cp: [112.8955, 23.1097],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÈbInVVnUÜxnVV¦nKlnbÅǬlalL@mnUb¤l¦LUmUVlÔ¤@xmnVl°_XVVmkVmÈ@kn@VUK@°KW£nw@m@Ux°x°@±mna@¯amIU»U¯nUV¥ÞUWmk@Vk¯UknÑWÝĊÛ@Ç¦W¯WÝwLk°kL¯wVaWJXWnbwkVW@kĊ",
              ],
              encodeOffsets: [[115088, 23316]],
            },
          },
          {
            type: "Feature",
            id: "4451",
            properties: {
              name: "潮州市",
              cp: [116.7847, 23.8293],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°Üknèmxbz@VVX@VnV@lIVVV¼nKlxn@@¦Vx°LXblaWbV°£¯W@nW@aUñVwW»@¥ŤÅUÝǓÝóV@ńÇkUVmIUwÅVWÇX¹@W¯bkl@nlb@kġn@l",
              ],
              encodeOffsets: [[119161, 24306]],
            },
          },
          {
            type: "Feature",
            id: "4405",
            properties: {
              name: "汕头市",
              cp: [117.1692, 23.3405],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@U±°I±n²mx²@WºXÈÆUVxJUnlVÈ@ŃôUǔÞVçn»VyĢÛVm@»kaÝUÇ¼óÛÈķKċ¥X¥Wwğk¯@wķKkUmabkIVÒ°Ċ@nVU¼bn`Xx",
              ],
              encodeOffsets: [[119251, 24059]],
            },
          },
          {
            type: "Feature",
            id: "4403",
            properties: {
              name: "深圳市",
              cp: [114.5435, 22.5439],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÞL@xbVVK°X°Kô¥Vw@anUèlkĊl@wn_lKnbVmUaUź@nÿUmÝÑ¯Ubk@ÆkxŻ@aÇXwJ¯LķÝUĕóĸóêWº@b²nmĬÆ",
              ],
              encodeOffsets: [[116404, 23265]],
            },
          },
          {
            type: "Feature",
            id: "4419",
            properties: { name: "东莞市", cp: [113.8953, 22.901], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ŏ@blKnykVaKnbnIVmUkUmUIUÓçmV@bUxó¦¯LW¯LUUa@wÝKğŚƾƨÈĠy",
              ],
              encodeOffsets: [[116573, 23670]],
            },
          },
          {
            type: "Feature",
            id: "4420",
            properties: { name: "中山市", cp: [113.4229, 22.478], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XÒlmV°ôÞÅ@m¯°k±@@aX¹¯VÝÇIUmV¯kk±Û£mw@ÅmèÅ¼mô¼èV",
              ],
              encodeOffsets: [[115887, 23209]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/guang_xi_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "4510",
            properties: {
              name: "百色市",
              cp: [106.6003, 23.9227],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lklWXL@VIl@XnJn@VUUalk@mK@kny@UlU@a°UU@VmaU@Ua@UWw@n@KmLm@alkmnIm@an@VIUamWÅImwU@@a@KX@JVLUVmUaVkUa@m@@Ulmkk°UaVUlKXbVwVIkaVmUk@KVk@aaW¯m@w¥laX@KmakVmnUl@nxVKInU@yVaVIV@na°KlxX@@_lmXUV`VIVV@n@lbn@@WUkValK@²yl@VUV@@K°L@KU@@UVaXIVVV@naVkVa@K@UUK@UUaLWaw@m@K@UVV@mVUUVKnLmVLKbVK@UUIkmI@mUIVK@IUK@VkL@WU@mU@WmUk@I@VJk@WwX_@amK@UUWkIK@LVb@mVmakL@J@bU@Ux@xbmI@`Iwm@UbmKUaUWa¯UkJWV@XJUU¯LUmV@ma@kkamKwLUUmWVkkm@aVUUkVKnVVUmXK@UW@km@Ukkm@@W@UkUy@I@aUUmb¤U@kUmL@bmJU@Ua@wkLWWkL@U@VaU@LUakKWbkUWVkKkLVLUV@JVbz@V@VmUU@kVmK¯@VU_VWakVmIUKUaU@@bml@XU@@V@LmKUVmVUKKbkaUXKUL@x@V@l@mxU¦V@lL@V@Ln@@VV@nlKUaV@nLUbmJnL@VWLkbmV@@LWXLlxVVIVV@x@V²blUVmLVUK@kWWXUlV@Xl`LXl@@Vn@VnbV@lVUVUÈVb@@`UXU`l@@XUVm@k@xmVknUJVXUbmKULmbx@VlJ@LVbkKUbVLÇUUVUVmU@VaUkUKVUwmLkUUVVlbkaXmwKUVVU@@V±Uk@VWUUm»XamUbKk`U@UnWW_kKmbUVUVmnUV@nJVUlUbU@UV@n@JmI@VmbnVUXlx¯kKmnVV@L@VbkVUmm@Ub¯LmlUL@VWLkmkLmmn£WmnKU_mWbnbmx@U¦UJU@Xmlk¦@mnUUm@@Jn@lVÔVJnIVWI@aÆK@I@aVKIlÞnnl@nl`nbÆX²l@xV@llbVn²VVl@nnV@IlW@Un@@kVa°KnÈmVaVXUlaVÈUVlwôUlynIVaan@lVXbI@n¥la@K_n@bÆx@XnJVnKVz@`VXVU`@b¦UV@VIlxUnVKXÈbVllbVbnVn@",
              ],
              encodeOffsets: [[109126, 25684]],
            },
          },
          {
            type: "Feature",
            id: "4512",
            properties: {
              name: "河池市",
              cp: [107.8638, 24.5819],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lLVlbVV@nXVlI@JVXmnW°bIVV@ln@nalVUbnW@kVkÒlbVKn²°bUlV²@X@`nbaUI@°wlU@aXJVI@aVK@wUamIXm@XUV@@bV@VmImnUUwVaVKXUnVK@akVwV@nL@UV`n@@XlnIUJl@X¦V@aUIVm@anV@UwnL@VlbVL@KVVXUWwUUVUka@UVJnUlbnalbVVn@°LV`Þ@XVxV@@bVlUVVbXnWlXnml@XXWVXJmbUI@VllUVkn@@VWV@Vnb@VXUJVnn`lLVka»lVLnw@WV@lInw@WnU@U@mknUVóKwUmUXUU@@wVJVIl@XKVVVbVIJ@Un@lVLnmb@U@Ul@nU°VUVJnnVJV@@mVU@@wkUVwkKWkyUUkU@alkÈ@lJ@xIl@UUWVkUw@Kn@@kmaVUlUULÇUUKl@UUmL@aXU@mlUUwmKkUUVKVUaKUnK@U@Vl@XUWUKlwX@b@K@XkV@UwWJka@aUwmV@U@@U@wUm@»kLWVkIWXnmV@VkbmKLUbkVa@aa@@aVU@aVak£@±UkVU¯VUUJVUI@kxmUmWUbLw@K@aU@@aVU@Kma@aka@_VWkk@UWVUKULWKULU@KUnwVaUKxU@UmaLm@kVmVa@UkmI@@KmIkxU@@KU@mmakI@VLkmWkkJ_U@V@L@nxXbKVb@VVL@V@LUbUlmbU@UUWJUb@VV@@L¯K@LU@UVk@±z@kLUbVl@Xm@akm@U@UUJU_VWkn@`W@kw¯LmbU@UJUb@zmVJULmwk@mVUnlnb@LWkb¦@x°nXb@bUl@LVlUnlbUJUxWakLUVVb¯llkn@V@@nVbUlVbUnVUK@IW@L@bV@nxÆJnXVbUJm@@bnmJnkl@bnnK@Lm@Xx@VVbV@nb@UVV¯@bkV@Vmz@lnLl@kVbUVm@mI@WkJ@UWKkXkl",
              ],
              encodeOffsets: [[109126, 25684]],
            },
          },
          {
            type: "Feature",
            id: "4503",
            properties: {
              name: "桂林市",
              cp: [110.5554, 25.318],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nU@JX@`XLm¦Vb`lVXXW@VblČnVlanLnmVLK@_Va¥@kUa@VmVbaV@XVVzlVVK@knKVmX£VKLlbn@b@llL@xĊôXaV@°È@¤bnV@@Wl_VU@WnVamwwVbn@KVLX@VmVUxlV@nVV_nK@mI@Wn@@IUĊ@@wVWX@@I°VVm@wmU@m@IUVklkUmmkÅV@@aV@@Wn_UKla@kaVlVanb@k@@KlVn@@aV@nIWWUUaVU@kKmwU@UImKk@UU@w@W@k@UkW@mk_W@Ua@a@¯mV£@mUUam@kWakVama@UUm@nw@alaUmnUlVlIVLVyk£Vm@k@UUJkK@kmKUwKkWK@UXImyVwnI@mkUlkUKkUVmw@kkJWUÈm@_k@@aaW@UUJUwU@@IWKkmUUV@nVl@bVb@bUUXakw@WUkbkKbm@xUlkLm@@wmKUX@UaVWXVmU@@UUUxkmWXkKkUWaUaUbL@`UL@LV`UXmK@VmakLVbkLxUJUIVbUVVb¯KV@Xnl@lVXbmÒnV@L@VWKkVUIWJkIUamUUbm@UkU@JUbW@XWxUam@kbVVUnUJmUUV@bU@UUV@Vk@bmULV¦U@VU`VLUL@xVbn@UJ@nWJXXVVV@bkxVbUxL@x¦@UlXUVVlULV@@nUb@xlnJVnlVknUlVUbmU@bVx",
              ],
              encodeOffsets: [[112399, 26500]],
            },
          },
          {
            type: "Feature",
            id: "4501",
            properties: { name: "南宁市", cp: [108.479, 23.1152], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lKnbnU@Ua@KLlJVX@VnL@bW`Xxl@I@UJl@nV@XV@nXV@lK@UVL@JULVJ@nnJlVJ@VULaLUKnmKULVVU@nU`lIXllnK@UlJnb@nV@LV@lwnJ@L@nJl@VUbUn@lnKnbVV@wVLUbxVm@LVVKXLVKVLXU@VllUX@`lb@bnbL@UV@bV@@b@LxKVanXVUUmVUUUaVUkyUUaImK@mUUVUkKU_@W@UVVVIUWUVaVU@UUKn@k@al@ll@bnL@bVUVX@V@@bKnblmn@V_@aUalL@a@akK@kVKUKlwUUnV¥VmU_VWVIVaX@VaalÅK@LVJnalL@LnKwlVUwmX@VXlLUVnblaUmVUVwXU@Wm¯Va@ÞKnw@wmk»UVW²a@_mW@U@IyLVUUKW@@LX@VUV@@yVU@UV@nwUUmJka@IU@mVkaW@UwUX@`@kLWUk@mkUUm@kUUWkUkWxk@@VK@nV@UVaUUJmIkV@UamLUbkVmamLka@kmL¯WI@wJmwx@akU@aUKmbkaW_nW@_U@Wm@a@wkwUKmk@bkbw@mKUkkU@J@bW@kVWz@bVUaVUx@ULkJWbXVVX`@mJUVU@@Lk@WbU@UJlnXlmVx@Ln@b@KLXWJUUW@kaUVUbmV@nnV@n@lVLVmLXmXkV±@kxÅLUbJWIÅJ@ImXalkUamKkkL±aVwKUU@mÞnbWJXm@lbmKULWUUVkabnn@Vl@VVV@VbVbnLWLXJWxXLV@@VV",
              ],
              encodeOffsets: [[109958, 23806]],
            },
          },
          {
            type: "Feature",
            id: "4502",
            properties: {
              name: "柳州市",
              cp: [109.3799, 24.9774],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@wUaV@nVaUVklmkUUmmIk@waVm@U@VKUkVUkWV@¥@wKVwUalw@aUUUWWXI@mVIm@Ua@wVKUKV_UV@U¥VKnal@U@VU@VV@aVUnVVIVmUUlan@VbXwWX@Va@IlVVn@VanVVblJXIVJlUXL@U@KmUnÑWakU@mkJUI@mk@wUmmUV@JXaWIXWmaUIJkk@WnJ@aUak@kkJ@kUKU_@myUóWUkm¥kUmL@KUKm@k_UmVa@k@@UmU@mm_JWIUVUWLUlbVUJÇVUIVwKUVk@mU@n@lUL@Km@@l@LVzJmUU¤m@UbV²U`U@@¼Vn@x@V@@VnUVx@blbXIVxU@Wl@@LaW@kxLXVWVk@@U@VmLVLbUVULVVlnLVxkV@nWV@bnKVVk@VLVÈVKVVkUnb@lm@@LVxUlVX@VkJ@wkIÇ@kl@blVVVzXllLUxlV@x@UV@nU@UImmUIUV¯mVk@@V@VamnUKkm@@VIUJUaUUWLk@UJUI@xV@VVWVnxLUômVV@VkVVVUnV@UVkL@VVV@bVxla@bkXVJVn`nU@bb@bVL@VnJ@l@VaU@@_lW@UUU@Unlll@XLl@@UX@°bVWVanLlknVV@VVX@VVnUVLmbXJ@nllXX@`VXlmaXVWk@WkwJ@VL@JbnU@bn@@bVKUnVJVIVVVL²a@bV@@Vl@nUVakalmUL@VUL@Va@mXl@nK@UlKL@Vl@@nkllb@Vnn@nVV°lVInwlKXxlU°n@@I@UnVlakUJWkUK@anUWK@_ÞJ@U",
              ],
              encodeOffsets: [[112399, 26500]],
            },
          },
          {
            type: "Feature",
            id: "4514",
            properties: {
              name: "崇左市",
              cp: [107.3364, 22.4725],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@JVzl@V@Xn@ll@VlnX@@VWLnUVmUULVlUV@blnUlnXVVKxnLlb@lnbU@Vn°KVVI@WXUlI°VXbVVbnLVan@xJ@_nJa@wVwV@@a@IU@UU@WKXwWIXKmKUaa@UUUUk@@UmmalbVUXVVKnLa@knWXImanÝV@VLUx²blKlnLVbklWbn@JÆIXJIVaÆKlw²@lUnWWnKUUK@k@mmU@mnUVaVUb@lVXVXIWK@Lam@@KUwnWkkmVIV@Xal@@KV@VUnI@_UWWUkam@kkm@ka@mk@wkJWIUU@WXkWXkWWLUU@UakLWXV±VIVWUU@anUWaUK@IU@Vak@@UUKWa@m@ak@@wUkla@mUaUklakwV¯¯@WWUkLkKmakLUnV`UxWX@Jkn@bmlakkk@b@l¯bmbJb@VXnbVV@bJUkkKWVU@mÛVUUW@UVUJWXkVkKmUL@WW@UVl@XXKWXJ@XVlmbUxnnm@UlVnV@XVm¦VJb@mLkKÇbXblVkn@l@bWnX`V@@IVV@VV°n@@_naÆVVbUVVbUJnzlVUlXkV@Vlx@XVnxbKUK@b¯VVUVL",
              ],
              encodeOffsets: [[109227, 23440]],
            },
          },
          {
            type: "Feature",
            id: "4513",
            properties: {
              name: "来宾市",
              cp: [109.7095, 23.8403],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nVlw@VJUIVVUV°lU²V@l¤Ub@bUV@b@b@bUblVaKnLla@UnUWmXlJXUlKV@V_U±Van@V£nVIyU@K@kn@@LVK@k@mnVl@VULUxVJÈUVIUaVkXKVVUXJIn`@nnV@Vl@@UbVnl`n@VL@LnKlVn¦VlôXVnz@V`VL@llIll@Vbb@mIXl@lIVJnbWXXJWb@IUnVVn@xl@nVJI@WU°LUaVUUaVJVIwlKUalKnb@UnLVWU_@KVK@_KVa@VKU¯VLVKn@laaUkU@maVUJ@k@Um@XmbkyVaUIUU@KV@laVn@KXKWUkUk@aWUUVw@aXKmVaUUkmIlUU@wUaxUmmU¯U@WLUmVIUym@UVmUa@wmw@çm@aWLUJUIUamKmL@ax¯¥kU¥U@±kUVmKU_mJUbkKmLÅÇ_@WWUXUmaVUkKUWW@nVxkUxmL@KkKmbUI@KLkÆbUbW@UbUJUXV`UnU¦mVVkxVLUL@llL@b@bkKVb@bU`m@knmaL@a@@UWVUU@amK@akkk@@b@lmVL@VUVUbVVXUJUU@V@XV`lLUVVV@nnLJVbVlzUVVbVVnUVVU",
              ],
              encodeOffsets: [[111083, 24599]],
            },
          },
          {
            type: "Feature",
            id: "4509",
            properties: {
              name: "玉林市",
              cp: [110.2148, 22.3792],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VJUXVVXlWX@VxVnX@@`ULWUXÅbWK@mULUUmJ@n¯b@l@VULVxxXU`VXXJVIV@nm`@nUVXn@lWVn@b@Jn@nU@Lm`@Xn@WJ¦U@@VnLlV@@Xl`nIlJnkVLw@KVK@UaVL@bVKXlUUKVK@IVLa@U@WLUlVL@bU@@blb@VlbUxVbXUVJ@xVLUlV@VUbVLnKlXJ@Lb@an@VanL@`VLKV_UWl@U_a@WVInlVUUUVm@I@W@wVakIWm@U@XwlaVbnI@m»Va@aXaVLU»@aVa@kKkL@KmU@WzUK@wU@VWUUVUUKUa@mKmbUK@_nWVaUkVaUaVUVLXKVVUVmVI@UkKkLm`UkW@UwWW_UaU@WakXmK@xUXJkUUWUk@WlmJ@km@@aUKzmyVka@kkWVUU¯lmU@@wkkmV@Vk@mÅIUka@Ub@m@UUU`mUbWaWmbXXKWIXUWm@Å@y@UkIUJUUWLUWL@UkVUxW@kaWbKWnXxW¦nm`XLVlUbVbUxI@JmLUKUb@VW@@bkL@b@VlU@xk@L@lxXxWXX°V@VVVbUVV@UVVbULVnVJUb²baUb@VVVVInlV@VnXaVUlIVUb",
              ],
              encodeOffsets: [[112478, 22872]],
            },
          },
          {
            type: "Feature",
            id: "4504",
            properties: {
              name: "梧州市",
              cp: [110.9949, 23.5052],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VbXblVlLXWlnwVV@VV@UnWUXVb@VWXa@kVKUaVaVkUlyX@VaVmUwUaVU@UÈymI@aU°@nWV@VaVaw@IV@VmnLVK@kmmna@VbVI@aV@XbW`ULUVVx@VbUV@bl@VLXblJn¦lL°°@n@K@UlLnKa°LWbnJ¦UÒVUllLlVnKnbWnnV`w@@Xa±nl@XKV_WVkVa@kVyUa@wU£UW@UIVW@@awWaX_WKkVmUULmak@UJUI@±m»k@m»VyUImnmmwnkUmVaVIUn_mW@»Vk@VwkmmUXa@IaVmm@Wm_U@mIUWóLmUk@laXmmkUK@UmKULUUmWUL@VakU@Ub@b¼VUKWb@bUbn¼@mJUakbWx@@VXnlJUb@x@X@JUnVVUVmkUJ@XbV`k@VXU`LUK@_mKUbm@@b@U`@nlV@bUnbVbn@@`VbUbVV¯bm@@mJXb@bVnUllVXUlbUl@LU¦VVmkLVb@bl@V@XlK@V@nUJUz°mwmLmlXbWVU@UUUlIU@VVmV@@¦bXbWxXWlXVWL@LUmkbU@@LVVVJUblzna@WVn@@lIUVnbV@Vlbkbm@ULUKV°UL@",
              ],
              encodeOffsets: [[112973, 24863]],
            },
          },
          {
            type: "Feature",
            id: "4511",
            properties: {
              name: "贺州市",
              cp: [111.3135, 24.4006],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nL@xn@lKVkwn@alLlaXV@lxbVWV@aUa@aUk@mVUnVlXL@JV@VxVIVX@b@bl@@`ÇnXVlI@lxUnlVVLkllV@nmJUxnzWJ@VXLlLVxnL@lLlVI@V@lUnl¤UzK@Vl@LlLnb@VnVVU@kaKnxn@VkVJ@ÅUlakmWIUaVanm@_UK@UVWUa@klXamU@VmVIXW@lUVknVlKVLXVXW@b@VlnnVL@KXLKn@lb@UnW°@VaXWVb°aVa@I¯aUkUaVKVwaXk@aa@wkm@alanUVw@alK@Umkw@UaUmU@WXUaUK@UW@UaVWI@¥Xa@w@WWVXwU@mKUXUWVU@a¯kl@akU@UULmK¯VUVW@U_m`U@@xVbUz@lUbUlXU`WLk@m²Wb@@xU_mXmmamLkUkKVkUVÑ¥mIXa¯KbmLkK@V@Lm¯@¯kKm¥kIWaUKk@@aVUUa@UwVUKVX_WaU@@bUJUa@mbnn@lULmKUnU@@JxUbUbU@mX¯@V@bnJÇz@VUVVbVxUnUbW@kzVUlUbVbUL@lWb",
              ],
              encodeOffsets: [[113220, 24947]],
            },
          },
          {
            type: "Feature",
            id: "4507",
            properties: {
              name: "钦州市",
              cp: [109.0283, 22.0935],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@IlVVlnL@xlaal@nVLlx@x@bXnV@@`mXX`lbnaVL@blV@bwnxI@xXJ°nKl@lbnKnblUVanKVb@lUnJVIVUb@VU@mL@Ul@XwllVVXV@lVnlVnl@XVlK@@_VWVxX@lbUnV@@JlbnIlmnVV@UwVK@U@k°a@mnIVVVK@nXLÆaVWXVK@_W@Umw@UXWWkUUVWUIVaUkJUVWbUmU@mkUJUU@UVab±aVaUIUmVKUaVUU@VUUaUUU@W¯XWWww@k@Kl@wkV@U@alK@aX@@UmIUWUI@mmkXU`U_WJUnUJmUk@@amLU@UVW@UkU@@VbUWVUk@@wmKkUWLUWX@JmIlUkkKWKkLWU@UKWa@bU@@a@_UKWUUUmJmw@nV_@ġğKóLmbU¼VÆ@xUX@Um@wklVnUnlkaUV@lV²WVklWXXbWlkVkIm`UULUU@UWx@XU@@lWLU@kbUbV`UXllUV@bmb@LnKVbULmnVVIV`X@",
              ],
              encodeOffsets: [[110881, 22742]],
            },
          },
          {
            type: "Feature",
            id: "4508",
            properties: {
              name: "贵港市",
              cp: [109.9402, 23.3459],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n@VzUJnVK@XV°nVVnwVb@xVVknJlVVUbnWL@bUxVVXbl@lVXkWXwWaa@¥@nUUUV@JVkVVV@XUWanknKxn¯VyVI@m@UkL@W@Uk@aUalKnUUV¥@KVkkaWVkUVkUm@aWanI@n@°aUUVaUa@_m@UamaV@akU@mV_@a@KWIkmLUKaUVU@kVUK@wUIWVUaVwka@Uka@aV@@aUKVkK@X@VbKU@JULVLkVWUL@aUKb@VUL@LxUKmlkImJk_@WU@kmK@UV@¥XIm@@Wn_@KmVm@@I@aUmkXm@UWV@mn_@mUUJWIUWV_WwU@mUknVVmxU@@VUV@zU@UVW@K@X@VLUVKz@J@VnX@`±bUXV¼ln@xmxÝL@Ubn°@XWVUxUVVnkbWVXV@X`ÆÈKnlLVanIV`nLVUl²V@V¦l°¦wb@nKnLVbVJIVXK@bn@ènx@xVbUnV",
              ],
              encodeOffsets: [[112568, 24255]],
            },
          },
          {
            type: "Feature",
            id: "4506",
            properties: {
              name: "防城港市",
              cp: [108.0505, 21.9287],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XV@X°°UlxkbVlVb@nkbVl@xl@@b@nXbVL@Vl@UbV@@JVLXbmV@bVVUXUJU²WXlKVb@VVXKlXWlXXWV@VXJlI@xl@nlbn@lln@lbXalIVK@VwUVbU@aXylUX@@aW@U_UJmUnVKUamL@Kna@aVUkkVWU_ValaV@XK@kV@@WwVXV@VKVVn_lJlUXkWaXWlkXU±kU@VUlbkVmUmlk¯ÝW@mb@¦VxULmkJUU@ma¯wmkX@VóJ±bUVUXÝWklWXXlxUabIğÇ@U@mVUKkkm@UJm@XnWV@x",
              ],
              encodeOffsets: [[110070, 22174]],
            },
          },
          {
            type: "Feature",
            id: "4505",
            properties: { name: "北海市", cp: [109.314, 21.6211], childNum: 2 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VaVLnK@IJVwUaVaUkWKn_mX¥WwXmLXalbU£UyVÅ@Ýwm@°lLÅUmkmwÛaƑLÝUUm@ȣÆV_Ó@£UUV¼U°W̄ÞVbXbôx@b@bmV@ÇUÝ@@ĢU`m@nxnIVVVXVL@`@bV@@aXbVL@XVlKXLlLVlknJ@IWVXXKlVnL@xl@UVVXa@UV@VlX@VUV@nK@bl@nVVIVmXIV`V_lWnn@VJVXnJ",
              ],
              encodeOffsets: [[112242, 22444]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/gui_zhou_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "5203",
            properties: {
              name: "遵义市",
              cp: [106.908, 28.1744],
              childNum: 14,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@@UnUlJnwJU°VL@bnVUwlJ@XXVlU@klVUJknlUllL@bUJ@xULUlUblVkblbnwUXmla@wV@VK@L@UXaVKVLXWUVa@U@Im@@W@£UKUakKWIXU@al@@llUnL@W@Un@@VlUV@VIUanKl@Xb@lmxVb@b°bb@nlJVVnnJ@b@LV@ln@LmV@Vx@blnVKnlJXIlwJ@Òb@nlK@Un@UL@VVVVUUUVKl@VUVLJ@UVUUw@Wm@UVÈVlbUb@JLlX@@xLmk@@nlx@bUJUzVJ@@LVxUV@bWxnLnVVK@_K²xVbV@n¥@aVI@b@l@VaKnb@n`nmmýW@U_wV@VlVV@Vn@n@nI@Jn@°¦VaUU@mVVWVaUÅU@aVKnVbVUmmU@a@kUwm@aUUmUUJ¯lakUaXaWUUaVkkamkmUnVlULVlJ@XU@UJWUUwk@aU@WbkWL@U@WU@@XUKmV@aUVwUĕUJUamUUVUÑmnIVJ@kl@XalJVn@KVL¥@UWIXWmU@mVUKnUWLUKUaWUUKVU@U@anUny@UlUkK@w@a@aVU»UkVw@WmkJÅmUUVmwXalLXWWUnam@XkJ@UVU@U@W@@U@I@Wl@Ènlw@KXLWblVUkalKUUVVaV@@wnIlaUmkUKWU@KkUkLWaKUUWUn@VK@LnnWJUIVkUWVnV@V@@XK@VUIUJ@IWJkX@VVJIVkK@I@UVaUWk@m@wnUWKk@mxk@@lV@bxmb@x@VUmLkUJ@nVV@b@VkLVbU`¯Il@U_UW@UU@K¯wm@xL¯¥kI@bkb@Ua@m@kkW@XVbmV@kV@bWbUbV@¦xXlmVk@¦bkaWL@KUImK@wUK@VUIb@bmK@LÅy@akXW@kbWlXblL@ULUb`@UkUymX¯@mUJUUJL@Lm@@WX@lUVlXll@l@Èk°V°X@VU@UVll@XUJVXUVm@@VXLWlnV@Xk@mVULnxV@@bmkL@VWLUbU@UVm@b@ķ¥UnmJ@UUVkkJUlÔU`UIW@°kLUlUI@WVIU@mWKkXk@WU@bXW@J@xX@l@LVl@xLVxXX@xKnxVknbKVV@ULWlXU`@nUlX@llVXVUKlkUKlI@anKVLXKVaUIVWV_VK@VnLlU»VKVLm",
                ],
                ["@@@KlKkUUVVX"],
              ],
              encodeOffsets: [[[108799, 29239]], [[110532, 27822]]],
            },
          },
          {
            type: "Feature",
            id: "5226",
            properties: {
              name: "黔东南苗族侗族自治州",
              cp: [108.4241, 26.4166],
              childNum: 17,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@VV@XkV@bUbWJU¼Vb@Vnb@b@J@bL@LV@UVlUI@aKULVb@bkJmxlLVxknVJkxnKmnnL@bn`WIXlWLU@UxVbUVmKVXI@JVIVJ@UL@W@@UmUXUlVUVJXImm@KL@UVmVXVLXblKlV@LXVLlVVnkbmJ@xnXl@bXa@VanaÒLmVnIlÞ¦°k@b@@lVnJlUnVX_@lVlKVUUxVLVWVIXJUlnnWlI@KUaUUVKn@VaVXV@na@mw¯@mUkJUamI@lk@@am@@IUmVImUUw@anUVaUU@LU@WaWUXWWwV@VwnU@L@ynbl@@X@aJ@nW@@Vn@lVLlxnIl@@UWKUnIlJXIVllIVV¼XK@aVIV@@bn@VKXLVKVVVInwJ@UWI@mX@WKnI@KmUUVJUL@VKW@@k@aU@@W@InJWUXwWI@W@¯wkaVaUIl@nValIXWWI@UUm@anwWkXWWIUbk@UJmIUamKVUUUVVama¯VkIVVUlKnXVwX@@WVaUUVa@IlaVmknawkUU@U@mUVUVwl°LVbnJVU¯la@mX@@UWKXU@aV_V@@JlkU¯@VnK@km¯kU@WUW@mmU@kmlU@wkL@WUkL@VmLJ@b@V@bknUUVK@UVKUK@Uk@Wa@LUVVnUbmVk@@UU@@aV¯K@U@UU@WmUL@aU@WVw@IxXll@UXK@KXXVJna@wWa£naUKVm@UU@mUmalm@@XkVm@U@VLmWU@kkWxU@@bVV@VkXVlV@UUk@@mI@KUwm@UmVUUwU@lwkV@IUa@mUaVIVKVa@w@U@UJkb@n@bmJ@XmlVUxWXkJmUkUUVWxUlU@aULUmbU@@WXkmL@xUV@nUxÇm@XLWbnlnVnnUVUnVVz@lbUVVlULVb@V@nUJkwm@Ux@bWbUK@UULkaJbUU@U@lUK@XUJmnJ@bU@UwWax@zkJWnUJUUVVV@bXn@xVb@JLm@Xw@`@bkb@VmXUV¯L@mW@@n@V@L@KIW@@aaUx¯@Um@XbW@@LV@bnVWVkKUzlV@bÆa@lnI@VV@@LnVVKUaV_VJVbnU@bn@nX@yVIVxXKVLlUVaXU°J",
                  "@@@KlKkUUVVX",
                ],
                ["@@UUVUkUmV@ln@VXVK@K"],
              ],
              encodeOffsets: [
                [
                  [110318, 27214],
                  [110532, 27822],
                ],
                [[112219, 27394]],
              ],
            },
          },
          {
            type: "Feature",
            id: "5224",
            properties: {
              name: "毕节地区",
              cp: [105.1611, 27.0648],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UkV@kW@Xn@@KKVIVVIn°@nWVzl@V_VaVK@kKWaXklaX@lW@bÆz@KnL@aaVJ@UVL@xnLVJ@LXKlba¥l@nUWkw¥U@VaXa@amLkUKm¯kmkIUaKUIWkKm@anw@mlwXImUk¯@a@amU`kkKWVkxmUUak_mJmw@wmXUW¯X_@WnI@aVwkWWýÅU@WLkUaUbVV@lUVVnm@kUmV¯kKLwmVUUaWVaaWw¯wÈ@VULUVUUK@nWJkIl@Umxnbm@kbUJa¯bUbVxmLUVaU@VUUWxkVVV@bUV@XWbnlUbbUJlbUV¯b@z`WbXnmbawUwVWUbUxmbU@Uam@VkVawVaUWI@mUKóz@lUlÅ@WIb@xXxml@XklULWKUmwUa¯KUXWJkaULmKkLWbkKUVImWa@kUaULW¯LK¯@kbL@bx@J@bmnnlUlzU`U@@Ub@mn¦°bUVx@bkVm¼mx@mkmVV@bkxVnaVV@bU@mL@b²`lIVV@lXLlbVxn@@bl@XllIVnbVn°°wlbXw@mVa°lVnU@mVLVbn@@b@@WVnUV@Xlxn`VznJVb@L@bV`V@UnwU@WUXKV@UUlmUUlaXalLmbIVbnJVIlVVaUUnWVXnVLk@nWnblnlb²xxVKVXlVXLVWLlUVJna@wVL¼@JVX@`@nnx@nWJU@Vx@XXKUblxU°LVKVVlL@KnbVUnJIlUnKl£VWxIlJ@nVÞUVVnbVX@V_°lnK",
                "@@@UmWUwkU@Um@@VkL@V@VVkV@nbVa@",
              ],
              encodeOffsets: [
                [108552, 28412],
                [107213, 27445],
              ],
            },
          },
          {
            type: "Feature",
            id: "5227",
            properties: {
              name: "黔南布依族苗族自治州",
              cp: [107.2485, 25.8398],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@V@IöalK@UV@@KUaVIVVLlaVbVWnX@@LnUlxl@naVLXVVaVUJ@lUUanWWI@VlV@Xbb@Vn@VmVVbk@kU@VV@XJ@zn`ULW@kK@_WVUK@LUb@Jlxn@nnWlU@@bx@XVVU@UbVb@n`VI@VVLUlUIUV@KmL@VV@XIV@@lVLVmXV@WLXLW@U`nkb@Vl@UL@VVVLllX@`lIXbJIXWLaVL@XXWĢb@bmK@L@°@VnxmxnK@xVn@VkL@VLakbl`VnnxVnUlV@@VVXV`@k°JV_UalK@U@aUU@mIlVnKV@U@wnaw@akU@l@nwl@XLmV@xnl@VXUb@V@JlLUJUI@UlWUnLVUUaVwV@XKWkXJm_@amKnmmLwlUIlmUwkKnwlI@aUaVKL@bVJkVUU@@KK@a@I@ama@UUaV»XIVa@alU@WUU¯IWVUbkVUKWLUwUJ@zmWm@@amVUaUIU`VbULmU@KU@@UmJ@kÅb@akUVylLXUmU@aU@KX@Wan@V°@Vwb@bX@J@LK@@U@mX@@n°KVUnW@Ula@a@_x@WnK@IUa@wWm@aUUUVVVIXmlI@ywXbVxV@@aInmVI@WVL@k@VVVaIlbVK@VVLXa@aVwn@lxVI@m@UUaVKUkVUka@UymUVVUmmUmmkXaWK@ÈnVw@mVU@wKlnXW@V@naVVKUk@KVIUW@mk@KXU@Um@@lVk@UVJna@UWaL@a@Xa@kmmVUUk@mkkamJImJUUmIm±aUUkambkamVUU@VlbUbVVxXWVUU@VUakU@UmUVU@mnUVVnUbVJ@bUW¥kLVamVkUaWJU_UVWKk@@nlUVVJUXm@Vm@UnVlmbnmJUbULU@@UUKWVIWxnJVb@xUL@bUJWIkxbkb@xVJbmU@kW±LkKUkVa@a¯am¥ULkalÑlKXUWXaVakImV@ka@UUJ¯aXmmbKWU@wUUaUaKmU@UXlWb¼WLUKUb°UlVbkbVL@VJ@nVlUbUXmJ@VX@lbUbU@@bWb@VnLVJ@bVVUzVL@lnL@bVVVULmKUkJkbm@xVb@VkKVnnV@b@WXUnVlVVXVJUXlVXbWV@VU@Ubk@@KWbUUmL@JnXV°XJ@_`UbkXVVlÆkb@VLXVV@V@kKXX@`V@@n",
              ],
              encodeOffsets: [[108912, 26905]],
            },
          },
          {
            type: "Feature",
            id: "5222",
            properties: {
              name: "铜仁地区",
              cp: [108.6218, 28.0096],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°a@aÈbVUlU@aVKnVVVUlyX¹lWVa@UVnUVU@m@mUl@mÞw@xnIVbna@KVIJ@kwV¥UXÇVkVW@kkKWU@aXUWmnIVa°VXbmL@VVbnVVVUbVbJVbVKXkVKVanU@aWnWUWa@Unk@mVIVK@wXxlLXbVJVlKbl@VI@maXalVVVbX@@aalnkx@b@Vb@Vnx@bVVUXn¤WXn@Vl@Vlzn@`@I@KUU@V£namVkXa@aVKnnU@anVlKa@UUU@amk@»kU¯@aVWnkWmkImU@akaVm@»VUV@UKnkW¯XWlkUKnIWa@nmlIXmWUnwUwWm@wULmaUJkIUaaWaklwkwmJmU@bkJ@XUJ¯W@XbWbUKUkWJUUVKnn@UmmXUWa@mU@@UI@WmXVykwm@kaULWwU@¯lKUUVU@mU@UkmaUbmV@bxVnVUJVn@Jn@@bl@@knJVblInV°@nx@mbU@UWUbm@ULVVVb@LkJmXkmVWIUJUXUKVwVUkLkU@W`UmkVmIU@k@@a¯lÝ¥kmJUnKÑmbUb@Wbak@mWU@UbUVVkLlbUVkXaWK@LkxÇmk@@X@J@V@@X@VUV@VIWln@mbXVWXkKWbnxVUnVÆInl@XUxVl¼UV@b@b@xlLkV@VmzmV@b@VUVVLXVVbVLXKmVVLU@nnVWXXJ@V¦UK@LUmkIWbk@@lUImJnVÒVUnVVbVIVĖUxV@bnUVL@WV@@X@VKlXXaV@@blVxXVVIV@@WkIUVKUkVmlnnbllUVbXVWbblVkb°VInVVV@bnVx@l@bnVVnUUamUL@bVVÆUbUXUn@VVUb",
              ],
              encodeOffsets: [[110667, 29785]],
            },
          },
          {
            type: "Feature",
            id: "5223",
            properties: {
              name: "黔西南布依族苗族自治州",
              cp: [105.5347, 25.3949],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VL@Vl@@IXW@kVUVbnW@XlKVVnUVlL@baVbb@xX°ÔUxV@kbm@VxkxWJV¦@ÈnVKxWXJmV@nÒ@xVbn@@blLk`VX@bla²JVUlnn@U±lw@wnw@mlwVIX@@m@klKnkaKnwmmXkÆVmU¥l@nb°n@aVwVmVIVnI@a¯@mU°l@@VnI@JV@UV@b@IUbVJmXöºzllUbVa@aXUl@U@llLnKVaUa@UmK@UwVbnKV@VwVK@UXV@Vbn@w@UWnX@a@mI@UUKlaUaVk¯VaVLXK»XaWk¯mkğwmW@mIVkwJUIÇVwUUkVKkm@UkmU@WÅwm£Vm¤¯IkJWa_lUbmJzÝJkUÇVU@bUÝnm¯LUb@`mL@VkL@VUmmk@UU±Umka@kU@ķymUkk@mmkÝmUaUakImV@V@VÅL¦JUXmJXWb@n°Æx¼nV@LlbUUbmL¯@ÞbV¤nbVx@bUVlblI@KVVUnVJUn@VlLUlmLUUUxmK@I@@VW@@bU@UJmUkLVVUl@b@V",
              ],
              encodeOffsets: [[107157, 25965]],
            },
          },
          {
            type: "Feature",
            id: "5202",
            properties: {
              name: "六盘水市",
              cp: [104.7546, 26.0925],
              childNum: 5,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@ôyVL@nXJVUbxbUlU@nVbV@naVwaVUXVxxbnaWmXa_@y°aVUkaVIaVamkXa@WVU@aUUlUXwVV@UVbVUnKUwVa°abVIlan@manw@VklJXI@mLVVVUVK@UÇk@KUa@UkaVU@UVWV_XWVXVWlLXKlLXaÆKwVL@akKm@Uw@@XUVk@VUI@wWK@aUVI@UkK@mLW@kImJUÅVmkXUW@UJkx@nmx@xkxV²m@kmUV±Ikb@aUWl_kK@am@Ua@wÑ@mnUWIXwULm@ÇU¥XIlwUwn@laU@Vw¯ÓW@waUab@akKUmVUUkL@WmXUaUV@lWX@Jk@@UUKULmLUJmzkKmVX°VUnWKULL@mU@UnVJ@b@UV@X`m_@l@@bmbXJmnn@°wnn@VLX@V@nVl@nk@@bl@nn°WlXzW`XXVKnUlxVbUb@VXb@VxÈbVlnbmn@kVUL@mLUVVL",
                ],
                ["@@@@UmWUwkU@Um@@VkL@V@@V@VkV@nbVa"],
              ],
              encodeOffsets: [[[107089, 27181]], [[107213, 27479]]],
            },
          },
          {
            type: "Feature",
            id: "5204",
            properties: {
              name: "安顺市",
              cp: [105.9082, 25.9882],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lL@bUKxÅLWbkKWLkKUXUWWXU`UX@VUVlb@VVb@Ll°xXxbbXUVbVnUxKlL°nUlVn@UmVU@kUUVablVXKV@ÆXþlXUxnU@mVK@_@ml@UU@blU@KnLVyUw@@UmkWVw@UVK@VXzVK@nVVUUW@kVJnla@nKWkaWL@Uõb@JU@mU@@_WWL@lUU@WUUK@lakÅUUlWVa_@`WIU¯mW@InKVVXa@Ll@VaV@@UXUWakUVWUIUWUkUmVXW@@amUUmLl@UUawn@laIVlnLVKUUU@amK@kUKVyUU@aUImK@UXa@aV@VakaW@@UnIVWVaUkb@mWX@Vxm@UaU@W@VULUxU@mLaUx@VnL@VVbUbmLkK@kVk@WV@bUbVakkyõ¹nWUIVa@J@aVUU@@ImJ@Uk@¯V@n°@bmJUUJUnUxbm@¯mak@¦VUnÅWlnnmxLbmlkL@l@nWVnlÆUVnIlJ@XnK@lL@VJVU@bXL@xVJUl@VU@W@Vxn@",
              ],
              encodeOffsets: [[108237, 26792]],
            },
          },
          {
            type: "Feature",
            id: "5201",
            properties: {
              name: "贵阳市",
              cp: [106.6992, 26.7682],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nlLXVJLVblJn°lnLlVnKlU@nUUa@WlX@ln@Vb@la@alJ°¦Kwn@°xLVkUmmwUmk_labK@UlK@UUm@wLmnwmw@U@¯@KnL@aaġXWW@UKbKWXJIWakJ@_kWkKUU@UVKk@@UlamV_X@WKXK@WUUnUK@kU@WJU@@UnK@LVUVJVkUK@UUJm_@UaVaV@UU@Ww@aV@Xkmmm@kw@IVa@KVLXU@`lLX@VKm_@yI@WU@UlVl@UanU@Um@UaWaU@Uk@XJmXVbkV@IUVUbWUUKmbk@kwmV@K@mWUXUakbKUUUJVb@LU@@VkL@VXKlbXmL@kbmUI@lVXUVU@mULWy@UUL@VUxXnl@V@VxUzmK@LkVa@VVk@@n@`UL@nmV@bmJ@X`WX°WVn@xnxnIl`VbnVlwXUlLl_nV@b@bl°VnWJkx@nmx@b",
              ],
              encodeOffsets: [[108945, 27760]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/hai_nan_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "469003",
            properties: {
              name: "儋州市",
              cp: [109.3291, 19.5653],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@à®¼jpnr``pRVHÊÌ¤Zt^JÖA[CâlTébQhRPOhMBcRSQiROE[FYdGNOEIH]MgEAMLLIAG_WMCSL@ED]PCLYC[ZIHgjSxJTMbHNEFCMEE_HSDFHSLECRNSFDRICHNADGPI\\RZGIJTIAHLDQOHG`GTNCOIC@eIGDWHIS[kiE[FMbECZS@KKS[FDWsCeRuU_DUQNOE[LKGUBM¨EDQP@HWHGDImXCog_~I_fGDG|QDUWKBC\\ore|}[KLsISBHVXHCN`lNdQLOnFJSXcUEJMCKSHOUMDIm_DI`kNDIGEYFM\\YPEEIPMSGLIKOVAU_EBGQ@CIk`WGGDUM_XcIOLCJphHT_NCISG_R@V]\\OjSGAQSAKF]@q^mGFKSW^cQUC[]T}SGD@^_aRUTO@OHAT",
              ],
              encodeOffsets: [[111506, 20018]],
            },
          },
          {
            type: "Feature",
            id: "469005",
            properties: {
              name: "文昌市",
              cp: [110.8905, 19.7823],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@hĲ¤Ī¯LQDaFßL[VQìwGF~Z^Ab[¹ZYöpFº lN®D´INQQk]U[GSU©S_­c}aoSiA£cÅ¡©EiQeU­qWoESKSSOmwćõWkàmJMAAMMCWHGoM]gA[FGZLZCTURFNBncVOXCdGB@TSbk\\gDOKMNKWQHIvXDJ\\VDTXPERHJMFNj@OwX@LOTGzL^GHN^@RPHPE^KTDhhtBjZL[Pg@MNGLEdHV[HbRb@JHEV_NKLBRTPZhERHJcH^HDRlZJOPGdDJPOpXTETaV[GOZXTARQTRLBLWDa^QAF`ENUPBP\\Eji`yºEvåà",
              ],
              encodeOffsets: [[113115, 20665]],
            },
          },
          {
            type: "Feature",
            id: "469033",
            properties: {
              name: "乐东黎族自治县",
              cp: [109.0283, 18.6301],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ªVLP`@PEdNRAHOPEAKHEVL`GZBJfvdTAXNNTZJFPrHHNpKTD\\ILHbEVd^JOHLh@NNBnHP`\\xH@NBRLJTlNv_^CTLd@bNDVFbxdFVUPBTKOGEOUO@OEBXQP[H_EI\\EbeYa@UO_JMEJ_IEDKJUGMDcNUd_FMTEJSGoZ]EIYGO[YWgEQ]a@WHEDQKUSDUGAbYBUpSCYNiWqOSQEoF[UcQISWWNMSDe_cLQ_UBiKQOOASQAWgS­ā]ZaSPÝZ]XMXS[^oVËNgNKlE RôEø",
              ],
              encodeOffsets: [[111263, 19164]],
            },
          },
          {
            type: "Feature",
            id: "4602",
            properties: {
              name: "三亚市",
              cp: [109.3716, 18.3698],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@®ĂhTBXTRPBRPjLVAR`dKf`TCNXMTXRJVdE\\FpTRrPjXZMTDVoZABaVHTCLVCRGF@X^bFRhZXP\\ZHHMA[^wBWXJlW¤EJ[bCTOFWWMm@ILMGWQ@DQ^QNWFSHEbF`OXNbOVNKTEPDTLTCCVTREfvfEHNbRAENH^RJXCFHNFRpVGHWISDOTMVCZeGamaLoLÛD¹¹ėgsia{OųETtlÉwr}jR±E{L}j]HąKÃT[P",
              ],
              encodeOffsets: [[111547, 18737]],
            },
          },
          {
            type: "Feature",
            id: "469036",
            properties: {
              name: "琼中黎族苗族自治县",
              cp: [109.8413, 19.0736],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bRFnHNbHgN@NPEnbXP@bND`NT\\@\\QZb@`@J]V@XhDpWnCJGHGXO@CR§FANHVKLF\\MPVR`CvVfQtDPKpGHG@S`WJP~^dSTHWX\\RHTFACQTIAUPOU@MG__IaYSFQKNSbORHXCZeTFJgB`YBMNMFi~IVDV[tGJWXGDQRGF]JrALgESLSAYDGIaFeXQLS\\MKSLSQYJY}eKO[EHiGSaK[Yw[bmdURgEK^_kcSGEOHKIAS]aFSU@Y]IWFUTYlkP_CUOUEkmYbSQK@EMWUuAU\\M@EpK^_ZMDQ^OXwC_ZODBrERURGVVZ\\DTXcFWNIAWJWAYUUFYEWLQQaCIZeDM`cLKRGpanJZQd",
              ],
              encodeOffsets: [[112153, 19488]],
            },
          },
          {
            type: "Feature",
            id: "469007",
            properties: {
              name: "东方市",
              cp: [108.8498, 19.0414],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ºxJYZQIYXLl@dR\\WZEn]bA\\S~F`KXaDeTiNO^EEKWEDQXITBXaWaDQMUJOIaTWf@NJV@dSxGZFu_@WMKAU}AQ@MwG_[GOAmMMg@GKP]IUcaFKG[JSCoLGMqGEOYIMSWMSBucIeYA_HUKGFBLOFGPQBcMOF_@KO©UAtERadwZQ\\@ÊJÒgòUĪRlR°KĮVLJ",
              ],
              encodeOffsets: [[111208, 19833]],
            },
          },
          {
            type: "Feature",
            id: "4601",
            properties: {
              name: "海口市",
              cp: [110.3893, 19.8516],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ńZƂtĢ¬æßFuz¹j_Fi[AOVOFME_RBb]XCAKQKRSBQWSPY\\HbUFSWSPoIOcCOHIPkYCQ]GdGGIFQYgSOAQLK`MFUIGa@aQ\\GGUFcHKNMh@\\OYKAigsCgLSF]GOQO]@GM]HyKSHKPW@Pxi@EMINYREXWRQ@MQcFGWIAwXGRH\\yDI`KJIdOCGRNPNtd\\UTMbQYi@]JeYOWaL[EcICMUJqWGDNZEXGJWFEXNbZRELFV]XQbAZFrYVUBCLNFCHmJaMIDDHXHEhQNXZ_TARFHVB@DTQIRR@YHAJVnAbKFUEMLd\\c^ÍÞ",
              ],
              encodeOffsets: [[112711, 20572]],
            },
          },
          {
            type: "Feature",
            id: "469006",
            properties: {
              name: "万宁市",
              cp: [110.3137, 18.8388],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@^J@ZTVbET^JBGLFPTHld]`FLQhcVanx\\\\ZbLHTGj\\FLP~fIZRZPVTQFSVAFJE^NDLEE[~LjsxVTG\\NZZNGlLRRGLJTV@hPZANN^@T\\NEPPbDZXO`d^HSvcJDIV\\XZAJUFCLNP@PQ¤@[ïKLÑIÏ]ÇE±I{u­YśUćFcYUmsVeBSVgB[RO@aYYPO^]@UVaNeDShMLG\\EfFVE\\F`",
              ],
              encodeOffsets: [[112657, 19182]],
            },
          },
          {
            type: "Feature",
            id: "469027",
            properties: {
              name: "澄迈县",
              cp: [109.9937, 19.7314],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@T\\GJCXJH@fJDDPNCNJENN^NLHBNSx@DDYbBLLDRbjZTj@`XXTlG^Xr@PJLW\\WLTlWR@HDJTD@X_PO@STMDNTMVV@NLDM`M\\XM\\JNBH[PYZúYzŸ`Ċ\\ÎÝd]c[NKVFLEBaUmBIZGQ@JQSR@CUAEGBQ`SWYRMFgWGCGJCbNnIDGMEDKVAZUEqBYRa^WEUFKYQMaFWXEHIFWMYHCrXVIIiaK@aMCUYNSIISTwXALKH@XWXIEIJQCG[IEQDE_XSBaa[AIPW@]RS[FWS[CD]PEBYNGFSaSyJG]@ugEUDQlGHiBKHUIoNSKqHFaPMICK]UUHIPDJMuCA[SCPIDIOILGAEmU[POPBVSJDREBGS[QXWSGcT}]IO_X@TGHoHOLCX\\ELT@LYTDaFENF\\lj",
              ],
              encodeOffsets: [[112385, 19987]],
            },
          },
          {
            type: "Feature",
            id: "469030",
            properties: {
              name: "白沙黎族自治县",
              cp: [109.3703, 19.211],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@D\\RV]dTXELnHr]^@LETBBRTHPi^[@U`QTHDJ`MGSogDIPKdJ`WVNHCXHl_DJR@AH`FBVPUJLHKNTJOFFZON[ZEHFCJlMJ_Cn`CJVNGPLTNDFIdVTWEIPmRKMc_kDMWGGUTAtJLK~\\f{pqD[LAVXRCH{HC`eJ`}@W^U@I@_Ya[R[@MSC_aMO@aWFmMOM@haGGMEmaQ[@MESHaIQJQMckBIw[AOSKKAMPSDSLOAV_@@`KJRbKRDfMdHZERgAWVsDMTUHqOUr@VQXTT@TfgL^NH\\@heTCZaESNObHPHeZF\\X^ElM^F^",
              ],
              encodeOffsets: [[111665, 19890]],
            },
          },
          {
            type: "Feature",
            id: "469002",
            properties: { name: "琼海市", cp: [110.4208, 19.224], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@TP\\pATHTGlZDJGAQjE\\Rb@jVBDCN`JZ[NCNHNXbULPrP\\KNbMTLjJJRFP`pNLZz^FLRHjVPZ@hxVKbHBHMNNJFRlLzGPnNHhIrHHADcPWdUAmEMVQDSKYHY\\EhBN^HpXGNDBNNBnIßÅ_g{³So]Ã£@ORO@KMEDIVYB[WJUICudGTc]P_YWaCOOMFS[]@MMYBgOU@ISHKQQkKMHYY[MSHwUit}KF\\KFMCF]EIUBETSROUKTLT[NKTWREfJbCHBZKTFTKh",
              ],
              encodeOffsets: [[112763, 19595]],
            },
          },
          {
            type: "Feature",
            id: "469031",
            properties: {
              name: "昌江黎族自治县",
              cp: [109.0407, 19.2137],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@`ZĤd`òü BSPGP@VSbQ`@]HC~T^SE]N]FkW]E[fYGGOPaTMbFDYfS@g[MGK]he@SSSRW@UVqrPVGNStCXUhBFQGYNcCeLQQaLI@_`@EUwcEaCUaMc@SK]Du`MSkKI~BVNL@X`EvYwHcTU@MIe@SXJbIPNVCRXbWbSAWJCRXFFL]FMPSjCfWb_L}E[TaBm^YF[XcQk@WKZJYRIZw¹ ",
              ],
              encodeOffsets: [[111208, 19833]],
            },
          },
          {
            type: "Feature",
            id: "469028",
            properties: {
              name: "临高县",
              cp: [109.6957, 19.8063],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@jD`hNd\\^dZädĒH´Op@ùZY\\OAGIMN[[W_NCNMKU@NUMSNCTSP@`O@WSCCI@GXQSkXKX[IK@OWqH]SkWW@_SiiYQaKCAKZaCCw@MTGAMKM]FMMIMDSM_HGHRPKCBGSJJIYH[QOJCHMBDGQJECMTDQKFGTCEGTF`NFEDMFaGSNwIiTGhYJD\\KZODC^@FTKND`XBHKJNKFBNhG^FJMPcHEZF\\QPRjQTAdgNOPgQaRSê",
              ],
              encodeOffsets: [[112122, 20431]],
            },
          },
          {
            type: "Feature",
            id: "469034",
            properties: {
              name: "陵水黎族自治县",
              cp: [109.9924, 18.5415],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@R]NC`YL]FoN@V[vBXVFNL@TRZalnVFVP`DlOZkVSXEE_F[EUFeH[NKTgfCbMVU^@P]ZObZP@\\QhATUfAtUasñiāEoI]eYǯ@aKmaeWuCºKÜKpnbHbYfUDSNCPJTRAHJTDJSfDNLHXC``VBNGTYCQDIXMDSP@xLNEFRNXBIpVNLXah@RgF@`qOML@LJNSPLbaHAh@Jdj",
              ],
              encodeOffsets: [[112409, 19261]],
            },
          },
          {
            type: "Feature",
            id: "469026",
            properties: { name: "屯昌县", cp: [110.0377, 19.362], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@\\OnVBFKHPJCJOJTDB\\vDINOCGJVVL^JDONEbrGTLpMVJLGjAHGRkVChF@vH^zIbTETMHAZOFC^\\DXT\\EffAP\\PdAV@UIYfS|S@YPICMeM@sC[_A]VQEwyHSMuNcAUlQJMVGMS@mVBZPFO\\CSFQK[LqDMACiUa@[QiFBRIHYCHkGSBS[oSOqBIE^QHCRWHIXsHU\\UC}JEjMNAN_ZAIhSEYfWDQGaPMTLERZTJb``NHV@",
              ],
              encodeOffsets: [[112513, 19852]],
            },
          },
          {
            type: "Feature",
            id: "469025",
            properties: {
              name: "定安县",
              cp: [110.3384, 19.4698],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@JjDNdJ\\FbKPXfZ^Ij@RZNaVSc[MsMOHQPDJcLIJ_zCG[HQxWJBHXdENRR@XQFWZQQGOFSWUCI[WCJuRGLXNMPLhCl[Ta@SqGgJMGOmyHkKEQMINMAGaGULgwY@UOGiKQ]EYyMKoO_QEIIKiNSMa[LqOKOaVMWMGMDY\\_IKrL\\ERT[DEPYOUA@nNTUHINkRBVMdNvGTxzRF^U`BD\\@tfNDNOJ@Z{TeTJZ@VUcB[OBOeeQT@^OXBJb\\AbWTF`RCJFH\\RDJIJFXW@WLGBKxWTSJJMTVZND@bbL",
              ],
              encodeOffsets: [[112903, 20139]],
            },
          },
          {
            type: "Feature",
            id: "469035",
            properties: {
              name: "保亭黎族苗族自治县",
              cp: [109.6284, 18.6108],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@FJp@fxpQ\\ApN\\GNPNBM`HLMrXLXj\\PEHnI@WUCEM\\GTc\\GZYHTPBHRCPTdH\\K\\@HXiBJILJJAVNTOZJNtFPC`YxDPWci@IBgbGKaTOIM@KNKrP@_hE@QbgKWUMJoWAQMFEKM@wTONCJWRCZDHSAM_UD_GWMKeCITSCGIQBGXUHQoMEEGWDQIG]FMQBMaFGueFeSQDUSDSKOCSFMLUaPWM_PaEGFETMX]RCRR@HXKN@JNnXXESPaDI\\£FkXWIAX]xB\\GN",
              ],
              encodeOffsets: [[112031, 19071]],
            },
          },
          {
            type: "Feature",
            id: "469001",
            properties: {
              name: "五指山市",
              cp: [109.5282, 18.8299],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@TCNOLBTLBPx\\AJdlNRRIbJTGNF\\@RcIYbmHoLQdKN_fCJYbDRRXKZFVEZVXBXIJBXMdESW[CUYHUVQFQAqsEIMPYMSBUIIJKAIjGW[@[LGScDOGQOAGSYZ[HSd[HFNVD@XmJFG[OWiWKNqGKN_MAMO[HoM[BoRewo@Y^HpITSFENc`MVCdHNIVCLJFI`NFIP`@VZbaf[FFJG`O\\WRFA@PVPFPPH",
              ],
              encodeOffsets: [[111973, 19401]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/hei_long_jiang_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "2311",
            properties: {
              name: "黑河市",
              cp: [127.1448, 49.2957],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VÈÞ@kxnX°VÈa°V@kôwbJVkXlVUx@lL@xkVV°VbxlVUnVxk@KkVbIl@°kVl@lÆnkll@@VVX@V²bUlVlVUVÇn@nkJlkVb@x²V@n°VUnlKUn`@n°bWLnVUblVUVVbknV`°kkl@@V°@nzJ@XxlWXb°n@bĠlbXbbVbJ@Vba@@lbUbVmn@lVmnIW@WbÞ@n@x°@ĢaƐéϚnlČ¯ĠŻÈwm@ôçUmm£Xy°UV@wÈ£Ǫ¯kõÝçUÑUķĢkVÑÆÞU°nŎ¥ČUĊx°m°¦żVƐx°Ç£@yUônÞÆ@Èĉ°Kô¦WkWUbÇ»@ÈĕWÇÈ£ŤU@n£ÆUUKVamanwÅmÝJ¯k@JIkaVaUUÇbkaÆÑkWmÝUÛÝ@wnU±@kkV¯KUkJ¼U¦Å@ówķaķůV¥Uaó@Åwm_kVwĉĉmmn_V»a@UVwķóU¦LǫéóXÇmōLǓÇķxÝkĉkmakbUĶ°@W¼@bÈÆ@ĖLl@°J¯mkl¯LÝ±LamJ@¼VƧUóUXċb¯ńVbkÆÝI@llxk°V²V@UxÞL@b@b`ÇzkókÝ¤@ğ¯WLĉÇLmmnċVkbUaL@¯bU°ğLÝÝ@",
              ],
              encodeOffsets: [[127744, 50102]],
            },
          },
          {
            type: "Feature",
            id: "2327",
            properties: {
              name: "大兴安岭地区",
              cp: [124.1016, 52.2345],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@kϙmƏêġb¯@@wmÝ@XV@Ill@bUxl¯VlVbV@ULVlUV_kxVVVÈÝJ@¯Ulm¯x@xóÒĉ¼m¯Wxţ@Uz¯WwnUwť@knW£óVUUwğyó¦WIVmmI@±kwÇ@@b@ĉ¼ó@¯wó@¯aó¼KÅaUwmWUwÅI@aKó@UaLaVÅwō¼UUÝl±I¤VxÇx@zkJmnnmbnzxll¯ČkJl°@kbmx@x@kêmVnWxôXxU°bWLóJnÇWĵV¦UUbbÆġKk¯VU±aXmċÑUwĉKġkVxkÇKkbIÛXWl¯bX¯KbĊÞVÆnĸ²lxU°n°òÈb¦xVb@¯Vx@¯VķÞČlĊ°KĸȘI°¤ČIôò»ƨnȰKǬ¦ôWŎÈƨwlnKVXmbX`lbwkVWXXL°aƾaĊ£n°@°¥ŎzÞ¥»alwôkƒJa@ĶK£bU°ĊxźVÈUĠ¥ƨVI@XU°x°Ln¥w°UmwXmÝV¥Ģ°@nU@mÆ£¯lKÜw@aÅU¥UaÝIkmV²nn@Ķ»@Uk¥VKÞ@ÞÛ@kVmĢa@_Jómǖ¯ÆwóÇa@alUwwĢřk@wÆWXUWXWam@_ƒ»ÇéXaĸwVa@ÝKkUWkXkKXxn@lĊV@¯m¯nřÆw¥",
              ],
              encodeOffsets: [[130084, 52206]],
            },
          },
          {
            type: "Feature",
            id: "2301",
            properties: {
              name: "哈尔滨市",
              cp: [127.9688, 45.368],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°`_JlU@@V¦°JUnLôlnŤ@@ÈaUÒVbkbl¤zk°ÇVÛô°IlVUVôUxÆU@bźĀº@¦b@l²UVl@°ÒĠxnXxÆVô¼Þ@Üx²KÞlVÑ°UȰôlwô@²ĸ°lanV@VŎUll@bÈnÜmwĢ@la@ÝÞb°UXblŎ²ÆkVI@nJnĠ°knÜbĢwna@akÞKƒĀaIVbU¥wĠwkôxnLċVçkaU±IUmnġW°WôĉalÞÅĵ¯@W¹XÝab¯a±X¯ºLaVmkLóbkaVUKVkkKV_@aÝykk±L@ÅU@yV_aU¥ówÇx@UkVn@lkÅlwWVwUkĉmkklW@abVwnWWwWL@UUÇLÇm@wJĉL¥@Ý_@a¯yUWw¯¯Uġx¯aÝXVmaU£ó±¯nwa¯óÅVXmanUlUXkWa@mkIğamIklÇUkĊzkKlUōĬl@nX°@llUxŹ²mKĉVWwk@UbUK@bmVmIVmwaWxXlWČmºÞÆbUxV@ĵńWÆĉLkWUbaWzkbĉ`U±LklōwUVÝ£UW`Uwk@mk¯VkaõVX@WbLK@XƧºWzxK@lmX@bkVVÆk¼Vbk@Vn",
              ],
              encodeOffsets: [[128712, 46604]],
            },
          },
          {
            type: "Feature",
            id: "2302",
            properties: {
              name: "齐齐哈尔市",
              cp: [124.541, 47.5818],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Þ@ÞĠKV¯a°@KVblaČUmnnKĊÈKX°Ġ@Þ£ôllÈy_@a@aKÝVwU@±¯Ulkw@kÞJlÅUa°ŃČaWVôƨVU@»nIb²KÞ°Klkn°¯I@kK@ĕÇÅ@aX»¯@VĵlaÿVamI@aÅÝउýĊȗJôȁÅkmƑÛ@kxġ@@laVk¯»īŹak¥Å¯JUaWU@@wa»KUkÆkUmUmwÛ±±UUbUUXwWwÆÝklkUanaWwnKlkal¯kaƽakÅxa¯@amb¯VlÇwÛĀV@xmêVÆVVaôVwÈx@ˌx¦VÞ¯VlmX@L@¯Ua¯LmV@°XċKV@UÈ@¥@wġIUkm¥Źw¦¯lmn@°kxVV@¦óamn¦l@nxlĉVómxnÒĉĀĊ¼þǔêÞ°ˌĠÞÒ°ĀɲĀƨźˤȤƨĊ°w@£nymwnkUUV¥ôÑVmkÆmUUVamVIkmôlxkXÞþbll@kVƆVxV@¼VÒ@UnnÞJ",
              ],
              encodeOffsets: [[127744, 50102]],
            },
          },
          {
            type: "Feature",
            id: "2310",
            properties: {
              name: "牡丹江市",
              cp: [129.7815, 44.7089],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@U`lLUlVLUlbaôlKnUbK°¹²W°baÞbknyUlUkamř²L@m°@lm²n`ôÅlKxÜKnxV@l@ÅXyW_k@wmŹĕmX»Ûl°ôÈ»ôô_WW@Ual»wU@@wUV@VXI@wĢ͑ÞȻaU_@mUkly@¯óV»XmWUXUWmnm¥nUUaWLk»Æ²IÇawÅaÝ°¯nUa±a@¦õÆğ@@ÅbxUÜnÇłlb¯¦ôó»m@±Uk@Wwa¯xUV°xXbÇÅUVK@¹KUaȯ@ōÝXallÛkalÇUǫÇÅÇakbÝƆ¯nl¯@¼VUx@x¯W¼Æ¯mĖĬ¯ČVkķÅmx°ô²V¤bUnÞW°bĢw°V°XxV°z@bÞ`@¦KĊI@xnÈÈKV@VXKxXmXUxab@kXllĊnVlUxXkxlÆkm@UVl@ÈwôxV¦bU`@zÆV@²KllÞz@b",
              ],
              encodeOffsets: [[132672, 46936]],
            },
          },
          {
            type: "Feature",
            id: "2312",
            properties: {
              name: "绥化市",
              cp: [126.7163, 46.8018],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ऊþÆÞ@bnJUbĀnblĊÞlĸwǔÈŎKÈnôWǬêKV¥ĸôUx@VbU¼m`nnĊĊxlUmkaVÿLw@°»UmbKmÝUwUmVknKUUl¯KUUÈnK@ĠkX±lX°L@¯¥@wV_mĵ¯WwL¯UkōÇVUlwVó±¯aVka°wVk°mÞ¯ŦřÆl²ŎkU@mUkb¯ķ±ó@kxȯó¯VUÒkÝ±LÛwÝ@ó»ÅUWwmğw¯Ñ@UkV±@ka@¥¹Źÿ@aÅVwóVVUkU¯JÜóÈUl¯yk£laUaVÑÇb@ţ@kmómKV¯IU¥@@kVI`@ô¼blUlbÈb@xÇKkĢɳaÅɆō@VK@z@@¥ÆKnÜ@@aÛUwwnUķ@_V°@klVnULVVÞbVl@°@nxn°LÅÆlVÈmU²@VmĠLxn¯xkWzJwnLmbXbW°Æ²@x@JVxLĀ²Æ°I¯ºÈ@ÒnÈ",
              ],
              encodeOffsets: [[128352, 48421]],
            },
          },
          {
            type: "Feature",
            id: "2307",
            properties: {
              name: "伊春市",
              cp: [129.1992, 47.9608],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@K¯kWW²ğl@mLÇVVLk°VVmLUlVnxVnÞLnaV¯¼@xKUĀlbn`nÆxô@VbU¦ĸŰĸbôxÆ@V¥»IVl°LUll@²mVx@ÞÜÞVnlXÅÒlbÈaVVUblbJ@I°lÞInÆmxnbUbVLÅVm¤@ţVÇ¤XÈÇĖ@È¼aXVÜaXbWnzŎařKôbUlw@¯naÆKnUU¯Üa@mkkVUĊmżÝǖK°L²lÆI@¯¥ĉƛVaÞk@ÝVaĠlnUVwóma@wĉ@aVxamX@a@UaÅLaVW_nWm£nWm_ÅV¯m@mó¤Ý¦¯ÅalmX£VWUÅwmÇ@@IVWUw@aI@k@wŎ»WÅVaKIka@¥lUkUlwÅwVyÈwWU@a¯U°mÇ@UçaVa¯mV»ÅwÝUlUkV@kmUkX£w°@@ÇaÝIamÛam¯lğmmI@JUl±ÅōkWa¯VÝa@Þkbġ@xÛnÇm@akkōVōl±kÅťŚÝ°¯nUl¯xlbU°b²ôUxkVÈUŎVl°KXxĶ°nU`@x°¦@",
              ],
              encodeOffsets: [[131637, 48556]],
            },
          },
          {
            type: "Feature",
            id: "2308",
            properties: {
              name: "佳木斯市",
              cp: [133.0005, 47.5763],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nbÞJb@È¯@xW¤Vln@lUVlkÞVÆxU¼°nUbbVèÈ@nIn@ĢmlUw°żVUn@lnL@VôbwĊlJķĸĢlwôwƨxVVUŦxLźÈ°`nnĠwŎJÞĶwôJ@¤XnÜĸln°¼È°lUbx@l@ÞÞÈm°lôwL°¼ĸ°Þ²nĠ@ôwÞ`ŤIVÒĠU@VJĸbÆ²@°ĊKJĶaĢȰ@ô¥°n¤bČU@VxmUw@aÝţÇķ@ĕķīU¯²@ÆmVÑô¯X¥ċç@ĉ»U¥ÝţKWVÅkUVÝŎUmÇÝx¯aķxÛUóL¯a±óōb¯ÑÅVÿ_Åķa@UK@wm@Van@UmmLVa@VImmXUWÝUÅKUwÝUUkVk@l¯XÅ_J¯kJmÅLa@¥U@¯Vz¯@`@¼mxƥŏKÛk@±laÛ@@Xm@@xƽ@WŎnˣĕÅ@@aÅ@@nÝbÇ¯@_UkUWkbwÝU@çWlw@anI¯lyX°m°VaÛm@mVwÞK°XlaXmm_@UkwÝK@VIXmV»I@a¯ğWbġaU_¯JU¯ġĉkō`±nÝÆkbóĊ¯XĢXmVn²JVlbUèČmKwlóğxxV¦UaJbƑÿÝLl@bmbġx",
              ],
              encodeOffsets: [[132615, 47740]],
            },
          },
          {
            type: "Feature",
            id: "2303",
            properties: {
              name: "鸡西市",
              cp: [132.7917, 45.7361],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@LKVVnkbVÈb²U°VnklVlaÈL@anU°ÜmXV`nôLèxlLXL²aVVmÈX@ķlnUÈl`È¹@Ť°U@xKnnVmlnnUllVnnaŎwlVÞÒ@n¦LV°lwVkLaÞlnÒ@xmLÞ¤Wn¼WÈLVVUxlÈôWVaU_VKKXUÆbnnôKbÞw°bÆWXamVwKUw¯WUkUlJUwVUa@@kmyzmĉw@kVwkW¯ÅKU_VmxU@aW@@kK@wa@K@@kVUaky°_Vmkna¯K@Lwġk@@IÇóXwVakmV@mwXUWanlĉ@ÇUwKóܛǊÛm°@wÅ@±b¯W¹WVwŹĕ¯kVmōb¯w@awmVUUbVIkaVwķxk¼b@VXXó`ó¼Çó¯kÜ¼WnźĖnxl@X`WzÆ",
              ],
              encodeOffsets: [[133921, 46716]],
            },
          },
          {
            type: "Feature",
            id: "2305",
            properties: {
              name: "双鸭山市",
              cp: [133.5938, 46.7523],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UUwómÑÞÑUÝÝUkmmÅyV¯ī¥Uÿĉ¯mÇkaWbÅX¯aÝxaóLmmÅaWVLULV`UbXókÇVwUUÇKX»XmÝ£nK@wmÑkÝbKUlx¯kUKm¥@ÝÑkUōxmbUmkVkmmnkUmmL@w¯Vţ@Çºk_ÇmVk@ĸVxVÈ°lLkllUbōwnVW¼nlUx¯XmWUnÝ@xÝUó¼¯J@LVbkJWnkbW¯ÝLUxn@nÜb¯U¯nWkz°mJ@bkxX@èÞVxlaXlVV`°@ÈÞa@mÆ@@bÆ@ˤĖmXōƾ@@wn@@WÜ@kb@²ÜlŐLƦnw@»_°@y°UV@@¦bÆKnI°lIÆ`°W@kllUVÞVVxLÆÞVXWVnnUJ@UbnKVnm@Ubn@@xL@VbÆĸ`UĀÆÒ°Ŏa²ô°bôKÜVĸw°bÞwÈVnÞōVUÆlXU",
              ],
              encodeOffsets: [[137577, 48578]],
            },
          },
          {
            type: "Feature",
            id: "2306",
            properties: {
              name: "大庆市",
              cp: [124.7717, 46.4282],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@mÇ@ÑÇ°¹¯J±ÅÿKUwI@w@±ÅX¯WanamKxIylX°wmwğKUn±@nVÇUÅkÆ¯Kmmw@@¯UkÝaUUVKmUlk@¯U`ĸ@VmxVxÜ@bÛ@mÅL@¦@@yLUŎ@ÆɅɴblġÈL@wÇaakkVa»@ó¯_ÝJwÇaÅXnyU¯¥Å@wbÝaLmm@@VUlbğVm¯Xm_`¯_UxmLa¯b@maó¦Çk¤V@bóJknVxVXx±aLUbVxkLVlLWl@nX@VÅbWlÈnxbWÅbm@xbml°bXbWXVmnn`Lmnbmb@k@mwU@@¯Jlbk°lbkmLXxmbVbkllÅÞxXxVWVVa²VÜ²nxVVnÅlVlL¼b@xV@XVbIÆ°¦lźbĬ°¼Ulb@kĢ@lw@ƒÜlnȂÆóȘIĉ",
              ],
              encodeOffsets: [[128352, 48421]],
            },
          },
          {
            type: "Feature",
            id: "2304",
            properties: {
              name: "鹤岗市",
              cp: [130.4407, 47.7081],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Þ¥ô£nn@°ÆUn`mXn¤mX`UXbÆKVb@@bnWbwUbĊ@x@nbWVm_mm@ó»UmÅWXkĠ»²¯¯nķwŎ@ĊŎK°bĸUnÑKČ¦ĠÈbÆknJÆUĢV°IVƾwaVkÇ¯¯»mķkÛWm@£óIĵxÝōIğxmm¯_ÇŹKwťUVUƧwóxxġkĸķIkĉxóa@UmK@kVmUŻ¯Vxkġn@mmJ¯n°V@bXVÇxUzÆxkxlVkV@¦lbJLUbÆXō¼@xl@J@bVxXU@JÈ@nxVÆUXW¤knÆb°",
              ],
              encodeOffsets: [[132998, 49478]],
            },
          },
          {
            type: "Feature",
            id: "2309",
            properties: {
              name: "七台河市",
              cp: [131.2756, 45.9558],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²mŎ_lĊĢV°°IV`ĢbaĠX°@bJU¼WnUJ@ÞLlxV@n`lIUa@K°Iô»ÞVwÞ@VmnX°WVwmkX»UmŎxVaklkkKÇ¯UUwÇWUnU±bKWKkwçóKmU_nW¯ÛmV@bÇKkbkUml¯U±VÇaUamlUULKk@U@mwÛLwkLóÆm_±nk¯@@n±KnŚlbkVVmzlWXº@Ķ°",
              ],
              encodeOffsets: [[133369, 47228]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/he_bei_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "1308",
            properties: {
              name: "承德市",
              cp: [117.5757, 41.4075],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lLnlmxnIVVlUnb@VVxXJWL@LÞVnnVJ_@wkmKbxwXkWXXKlb²K@nVVVbL@WlU²lKVnUJVz@VVb@lÅ¼mVUVnbôaVX@°Ub@lWbX@b@bVb°x@VxÈLVlaÆ@Þb²k°@lVU@Xn@VWLXb@¤VXKVVVLnm°_ƨ¤@aUIVaalkX°kV@alwUVyU@kó°na°UVUUmUÆw@mkLVUWVIWLnn@xlVnKmyU@U°UXaV@U¥U@UÆ@aVUkWU¯aU@WLUV@bkbmKULmKkUVUkmVIUwlWV²Uml°U@WLUwVm@UUK@_KUUÜaXw@VKUU@mVIUUlmnIVVVbÈVlKnbVK@nI@nVnwVLVKKVnb@aUIVW@In°@lVnI@lWĢ@°UVL@b@VyUUa@w@WUnU@WÇ¯K@UkkJWaÛbmk@mVaÞU@amkW@mXUKkÿ£@akl@Um°UXwlaal@nmlXnW°znW@awV@akbĉ¥VmU@IVUJkUmWUKbmkUaKkUVU@KV@@klwWaU@kmXVènbmlUUKX¯JkbI@JmIUWU@Lml@XkJ@UkK@aVKwWaIWwmU@mU@J@UaċUaUUVkI±k@UU@UbVVm@UVKLlkIWaULUWXUJU@WbUb@lkXUxm@@JVn@J@bnb@Vkx@bLUÆnJaVXnKVVmzX°V@_lJXxWXK¯bÅamU@lUIbñJ@LÇKkIÇ`kxWL@@@bUVUb¯xWKkÅVlULW@n¦Ul@IlmUUUVm@kWnkKma¯XUKWmnwVwÝLmVUbUVWb@LnxmxVmbXx¦@nb@`V@kbLUmVUlkbVXkºmnm@@xk¦bĢÜl",
              ],
              encodeOffsets: [[118868, 42784]],
            },
          },
          {
            type: "Feature",
            id: "1307",
            properties: {
              name: "张家口市",
              cp: [115.1477, 40.8527],
              childNum: 15,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@kġÛal¥@wn@nml¹UWlaVknUVKla@U@_ma@¥WwnaUwnmw@KXaVUVaUnmWUk°lnUVUXWVwIWVóKUI@WXxUU@mma@kUKWLkw@yk@aVkUUċaUU@Wk@Unm@UVmLm±IUkJkW@aI@m@UVUla@VXVXmVwnkWKKU_k@m¥mX_JmnU@km@U@KmUVU@U@Umk@@LmW@Û£Wka@wk@aI@mmk@mUa@UmUIwW@aWUbU@kbÇ@kw@makVUkU@am@aU@mxkUbKUXU±KXVWLUK@wkU@V@WXUa@WbUxJI@¦VèVVX@±ê¯KUI`¯UULVx@V@UKIVkLmVkKm@nUJÝbkIUJVXVVxVbUVJUn°bVmlU°XnK@Ul@lVÈVUXx@W@VXVKÞbn@VnbVm`UxkW@UVkLKm¼@lUnUJVnVXV@Vm@@LVklIkl@VWlULWKUL@mJ@blbUVUlmzUJUxm@UUbċÜk@Ub@VLVV¦ôbVmUKUkU@m@VlVn¼WbUJ¯@@°nIllÈl@nXWlLkJ@bkxlxkxlXUlklJXL@bWn`@nÆXxlL@xl@XbLKlVlIXblVUbUJW@lX@VL@VVXJwn@WnL°KbVbl@VI@K@U@nmVmV@XUWI@aXm@VUUkWmn@lmUUk@mUmK@UnwVĉ@mU_V@XJôVVULVUn@llUnJl_n@ml@XlLlw²LVJUL@VmbVblVXmVnl@Ť¦nn@Ü@bl@@XV`Unb@VlLVb²JXn¥ÆÑ@¥Þ@",
              ],
              encodeOffsets: [[118868, 42784]],
            },
          },
          {
            type: "Feature",
            id: "1306",
            properties: {
              name: "保定市",
              cp: [115.0488, 39.0948],
              childNum: 23,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VbXW@@UlV@xVLXKWU²LVVWLalVnwV@@bn@bVVllUnb@lxÈ@laV@aXV@bXxJnV@VVb@nnl@nJ@bll@aU_VWUwVUkUmUkb±mVwU@VIUW@UWk@VU@ynLm@IV@bnKLVaVmnIlaXwV@@WVL°@@xnX@V`V@VbUVVLVKnwnL@ll@@_V@VVnaÆ@KVXÆ@n@wKmUWm@km@kÜKXU@ÑW±nIUwVKla@I°wU±kkmm¯m_JnawW@IVaUama@wUmU@mVw@aXk@mWa@£km@a_kVmUnWW@¯bkUmk@VÇm@@kUUKUU@UVUamVUaWIkb@xU@@amUkKVkam@@kVUkUWmKmUkLUb@xmJU@UImVÛVmnUwJU@VX@UWm@Ub°¦UmxklmX@`ULU@@UW@@xkn¯@makVUmxUb°lUbUbnUJUUVaLkbUUJUU@mUUUJka@xUIWJUnJ@Vz@kb@`@bln@lb@X@@@XlbnbVb@VJlInlbVw@UKl@lbnan@VbJôLnUzlV@lÈLVbVK@LVxVWXX`WxXzbV`UXV¤nx@bVlVnVlUL",
              ],
              encodeOffsets: [[117304, 40512]],
            },
          },
          {
            type: "Feature",
            id: "1302",
            properties: {
              name: "唐山市",
              cp: [118.4766, 39.6826],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VVl@²lJUVVbČVVb@@InV@VnXxJXbxUL@bLl@VlI@WnkKV@VXnJ@IJla°IWLVVnkmaUçWVkôaÜ¯@nV°wnJlaV@VUnUUaW¯wXWWwna@£UaWKU¯¯@aVUkKUamUUn»anIVwUWlk@LlWVakU@K_lbÞU°@y°n@KÈkWWţ¥ĉōkġWUw¯£¯Çwţw@kK@k¥ÝwÅbÇ¤ÛťVlW°@ĸx@VVVULVLkl@V@X`Ub@Xm@UWbk@ÆVbnLWV@lnXUbl@X¯lmUVkKWLkK@_UK@U@UmmUxmVXLWVULkU@`W@ULUK@XlJXzV@@xml@VU@UX@Kk@WbUK@Xn`XmJnmkxUVbUVlVVxUbV@nKlLkVKÞbVKXI°KVmVUIUKULVxVJVLkV@V@UbU@WUU@UbUK@b@nV@VkLmb@b",
              ],
              encodeOffsets: [[120398, 41159]],
            },
          },
          {
            type: "Feature",
            id: "1309",
            properties: {
              name: "沧州市",
              cp: [116.8286, 38.2104],
              childNum: 15,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@ln@UÈl@Vnl°aX@mXnVlU`@bln@¤Xb@nWl@bUx@nnVV@xnbVbUb@JXxbmXa@kUVwlWkKôVm@wkkK@kl»ÈmVKXkla°@XVV@VI@ml@@Vn@VX@V@J@VxUzVV²blVk¦@Ġ@@»@VK@VÈLlK@XnJ@alIUlaVVb@n@aU@WUIV@mUn@mKXml@lL@LnWb@XV@@aVVbV@VVIVWÈbIÈ»ƒǟlWaVUÅUUm@kVUWVkaUwmaóUJUU¯ÑU¥mk¯UaKÅnÇyóXmWÛX¯aċbÛaJWÝU¯»aóóUm@IVVl@bLUJWLX@@xXUxl¤V@VnVUVXVbV@@@VVn°V@ţU¯VUmUWV@mUXabUKUwUaÇKnVk¦Wb@VnLmV@bkV@nxW`Å_UVV@bUklVX@VmlUx@VVL@xVWVL@VW@UUm@",
              ],
              encodeOffsets: [[118485, 39280]],
            },
          },
          {
            type: "Feature",
            id: "1301",
            properties: {
              name: "石家庄市",
              cp: [114.4995, 38.1006],
              childNum: 19,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@la@y@UImVXIVJw@lbIVVnV@VVIVVlaKbVUVVImVaaVk¯VanwVlUnb°@lm@wX@@VV@VK@_nWlknwV¯¥Van@VX@W@UVIVxnmÜUnUVJV@nI@wValKnV@kmU£na@mVk°KLVa@UU@UmknWWkXU@aWW@@km@UaU@@klK@UkaWaUnamm@Ua¯wWU@UkL@Un@xVlUXVJUbLmU@aUWUkmKkLUUm@mWXammkkWUm@@U¯JUUmkU¯@mKĉxÝwÝ¥LUómwkUUUWVkKmkKmLXlxVLVxXJ@nVJnz@VWL@`nX@x@kVUUmJmIXxJVnUV@UVV@LU`UXVVlXL@l@b@VmX@bxn°UbkKWLXlW@@bKmKULmakLUlmb@Xb@xmXU`Vb@`lLx@nWVXL@°WlXnlbKVKXVb@X@l_lJ@V@XnI",
              ],
              encodeOffsets: [[116562, 39691]],
            },
          },
          {
            type: "Feature",
            id: "1305",
            properties: {
              name: "邢台市",
              cp: [114.8071, 37.2821],
              childNum: 18,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nKlLnlLXUVVlVnxôVKÞ¦ÞxĊwnL°@lVnVV°I@Vn@VlXnlnbWnXn@VVlKnLVlVX@bnVKVaUIVWkU@wVm@¯@U¥VmU_°lKkw@LXVaU@wUUUKlUóW@UVUUl°KwlKU_naKVnlKkkWWa@IJVa@IlJnU@KVUUmVlaXUl@lm@kXWÝÑnk±k@wğ@@U@mKĉLmVJ@zmlnWLUÝJU_@@mJkXUVlbklÝ@Ýab¯@¯±JÅwġaUU@kU@mVI±bUKLWUXJkaLóKULWbUVkKmnk@@bmLUl@b@mnmJkUULabnmn@lVV@¦n@l@bznx@`Vz@bxnV@xllbnKVx",
              ],
              encodeOffsets: [[116764, 38346]],
            },
          },
          {
            type: "Feature",
            id: "1304",
            properties: {
              name: "邯郸市",
              cp: [114.4775, 36.535],
              childNum: 18,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bVKlVnInm@@akVnK@al@nmlLVUXaVKôLKlbIVWXKVL²aJnU@lV@VVĢbÆx²I°°@aÞbÞ@lkkaVUlWnI@@V`ÞIVXKmnk@yInUĊKÇkUUamUUk@aU@Uk@WUwVkVJVkkw°a@mK@UX@VVLVW@wwVa@¯Xm@@lUIWaU@UWkXWmU@UwmUkKmn@lkV²VaULUVmJUUUwLma@UmkIUmLmVmx@bLUamKÅL@VmbkU¯KÝamzkJUb±VkbL@lU@WIkJzkKmKnUalWkkKW@@nkbk@WW¯XUVUJ@XlJ@X@XlWLkU`VUnaWaUV@UVIaUxUUmVK@I@W@ÇU@@U@b@nmKXmx@UxkVWUX@`VLlL@`zXÝb@b@VUVkIUJVz°KVlnLlKnLxlLVVUVlXUJ@nnI@mVUlbn@@m@bVnV",
              ],
              encodeOffsets: [[116528, 37885]],
            },
          },
          {
            type: "Feature",
            id: "1303",
            properties: {
              name: "秦皇岛市",
              cp: [119.2126, 40.0232],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lnV@Xbkx@lU@@LUVlVLVbnlaLXVVnlIVUJV@UnĊ¦lab@nJ°UmV@wn@VUJVI°bnWlXnWVLVK²bakklI@aUaVUwVUUalaVwnUVak¥X@WkLVÓmmUK@_lW@n_UK@alÅ@ğÅƑŃÝm@ÑţÇlL@¯mz¯@ÝVak`@LlVUbkXK@klVXUxJmbm¼VnVVblLUV@b°V°XLVb@¤mbXxWX°xXVbmVUVU@kbmI¯xmU@Û°óbUl",
              ],
              encodeOffsets: [[121411, 41254]],
            },
          },
          {
            type: "Feature",
            id: "1311",
            properties: {
              name: "衡水市",
              cp: [115.8838, 37.7161],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@KVlV@X°xb@VnnmbVXblb@VkL@lV@Vbn@@l@XX@bWVXlmXnlVV@@VUbK¯LUl@nmbV¤n@lLXnlVUV@ln@lbUlLnV@bV@@wlaXJVbnUVbVU@VVLVVn@VVX@@UKXUU@wUK@UwVnk@UUWlkV@aUVUÆ`X_w@mlU@anUmK@UXal¥UmÈLVbVxVLabVW@nXUVnV°UŤV@U¯Um@U@@UUaWVUmUUU@k£VwW@wW@XKIUa@wU@@al@UK@_mKXKbUU@aVKm@Xm±@kbÇakLğVaUw@a@mkUJk@ykw@£WX@lknk@WVkbUVnUVL@mVkI@JUbI@JXbXllkLUmLmbV`kLx¯LkVUV@VôXkVVLVV@xVUbW@KxlL¯kV`UnV¦°@",
              ],
              encodeOffsets: [[118024, 38549]],
            },
          },
          {
            type: "Feature",
            id: "1310",
            properties: { name: "廊坊市", cp: [116.521, 39.0509], childNum: 9 },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@laU@UnL@VWbklWxnIVVV@XJlbUlXVbn@@KmV@@X°WVInJmn²@lmVbnL@amKV_kwlmX@@LVamaXaaVU@UnJVanLlUkaW@UaVakK@IlKUU@an@ln@alKUkIVa@a@klaUKUV@UkUV¯KVV@kUmU@@a¯ImJUU@VV@UL@U@@WXUWa@Ukwm@X@@w@al@@aVIUmVUUUVWUknK@I@l¥kU±aUUVyUw@@I@UUWm@@Uk@@nUJU@WU¯@kbWlULnÇk¼@llLl@xUnóLlkXUxV@lWbI`°nnnllV²¯x@JkbLUVxmJX²@ÒWVÛL@lln@XnnVL",
                ],
                [
                  "@@@kX@Valaa@KWI@UXW@WanaUIW@UaUKķk_W@UVUKU@b@UamxVXnJUbWVXLVbn@W°kb@U@Wó¼mIU¼k`V@bVbl@lX@lUôVlUIV`lXVn@lUlVn@l@UVaIUWl£UmVWU@@UUKlUUUnVL@KUnLVWUa@U",
                ],
              ],
              encodeOffsets: [[[119037, 40467]], [[119970, 40776]]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/he_nan_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "4113",
            properties: {
              name: "南阳市",
              cp: [112.4011, 33.0359],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lKl@nVV@bn@VVnmnLLXx@VLlKVUIXWÜ@Člbl@XUĊUlwnWLÞwm@ÞUVmnVl@nXJXLm@VnnJlaI@VkxVb@VlnJ@knKVn@°aVanal@XK°b@¯VJXIVK@al@nVk@nKab@XL@blVVKVLXK@VaVI°mVaX@V_@a@yUkVwVIVaJ°@anIlaV@nKnXÆm@wUUV±UUWUKnaWwXUWmÅ¯Vam@kakImUK»lan@VXXaW@@UlUUa@a@UlwUV@Xal@@anIVaUK@VXmwVmUmVLXl@nalLnal@nKlkV@@UnJUXnl@nVl¦V@@VnJ@nUVVVVIn@VaJÆn@@K@mka@kmWVaUI@a@k@@aUL@mmaVIUKUV@@IU@mUmmL@K@UUUU@mW@@nU@ğ»mVmbk@klW@UXnV@LJmlUnUJUUUW@UnkKxmLa@@@lUUbmUVWk@@nkUmam@UakJU_Vm@ÅlÇLUVmVUwULKU@k@UVUlU@@U@UaUUWaÅzJaWLklb@bmL@kKabWUV_@mV@b¯JmXUbUK¤ÇLUU@b@JkLWmkUWIkJ@VmX@JUbVXU`¯VV¯blK@LXKlUV@Um@@Uk@kxWkbL@KkbmL@UXmaU@@l@x@blX@xUJ@bULUlULÇ@@VnU`W@@nÛ¼U@@VmKUkm@VVX@@xÇ@bUbVb@VX@@xLUb@l¼XLlbUlVVUUb@n",
              ],
              encodeOffsets: [[113671, 34364]],
            },
          },
          {
            type: "Feature",
            id: "4115",
            properties: {
              name: "信阳市",
              cp: [114.8291, 32.0197],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VllInJlknJVkVU@mXlUÞ`VnVVU@U@y@nXlKVnJVkXKWaXIb@yVkVUkVwn@K@nW@kKlUXVVUlbnUV`n@V_V@llX@@Vb@bV@@nlVUb¯WLnbmb@nLnKbUbVWnLlaX@VVUX@Vln@`kL@ll@VXVJÈIVl@XÞJ°UnaLlylU@UXKlnn@lanLWWnbVI@KXKVL@LVWVL@UVKUIVWX@@XÆJ@In`@lJVI@aWÛnK@UlK@UU@VKnlmnXalUllLUbVVknJ@nV@Vm@al@@xnVlJVUU@w@ak@XW@_mWnUlŁUmVKV@VXwW»XWaUwnkWUkVUU@@@WlaUkkaIWVkm¯xmIUmLUVaUIó»m@mmwXk@amk¯¯l@wmkLmmU@UbkUWJ@XUbJ@b@l@znÆmK@Xk@Ub@lm@I@akmVKUUVUkU@U±JUbk@IWmkxa@UUVUWVkIUaW@UlLWn@VkJI@VkK@L@bmKkJmUUaUKWXk¼VxnJ@V@@VULV¼@@UkaUlWL@U@W@IkKmL@KULUWULWKUXUJmIbK²UWnWKUUkLUmUUam@UU@mUL@xkV@VV@bmV@Vk@mwkUVUx@mbXÇnVbUL¯WnUVLVb@xnlWnU@UVUVVUbVVlVkn@llVUXUWUXVbUJ@bmLUJnb@nVK@bl@@@bVJUbnX@lb",
              ],
              encodeOffsets: [[116551, 33385]],
            },
          },
          {
            type: "Feature",
            id: "4103",
            properties: {
              name: "洛阳市",
              cp: [112.0605, 34.3158],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VVUllLXl@LWn@J@bKUVmnL@`VblLnbV@b@JmL@LnV@VV@¯VJVnXL@nm@aÞ@ak@mImVbXLynLk°@°aVJnUV@UVVXk@WJ@VXLlUnJVnn°U@»°Uwl@bWmUXÆ@VLXU@m@Ua@Imkba@naWW@_@WXUV@@U²@K@I±U@¥kKWLóLla@£Um@kWKXU@mlLXUVKUU±J¯_@`UL¯Wmk@WakklUnVUVaU@KUU@mmK@_a@KX@VaUIm±kaVKVUkw@kaW@kbkL±UUaK@UUKVak£@UmmL@lIkmU@Ualw@UJkbmIUmn@WKImWk@mUUnÝV@nÝxKmXkxĉVWVk@kaċÛ@WXJUV@zmVWnbUbVbLlUnlUÒnWVVWnk@@Vm@kxm@Unl@Ll@@V@XnkJVV@nlVXxU@ln@a@VLnWĊ¦nx@lbVKXLl@ÞVLXJl@XXl`lIXVl@XlXUVKwV@lanxzUbVJ@VVX@b",
              ],
              encodeOffsets: [[114683, 35551]],
            },
          },
          {
            type: "Feature",
            id: "4117",
            properties: {
              name: "驻马店市",
              cp: [114.1589, 32.9041],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n@b°UÆXnVlnLÜ@VLm@n@na@Jm@k@lVVxXX@V`lLVXVV@VVÞLVV°²@labnxV@@bLmlm_VWnIWUna@lLbnV°VL@KVLVUVaVLXK@mÆXna@wVma@Xw@KlL@a@Va@wUkaWnIVla@Kn@Vn@VUl@nKVnJ@LnK@aVkVUUW@VakUVanI²XW@UUU°KnUVLl@XaVK@aU@KUI@W@_lm@KkLUKV_U@»@UVJ@XV@@mVL@K@U@Kk@VwUUm@kmWL@VkVkzKmb¯VÝI@WUkÇJUIUWk@@klK@_km@UVWUUW@kbmKUXaVamLmK@namaXK°VakU@mU@@aa@UW@kkU@U`m@U_mVkaUVWUkVL@lmX@Lm@UxVlUUl@zaWJXbWLUlmIUkLmW@@z@VUVUUmÝ_kVW@nUVUlmIklmIkJUkl@n@Lm@ÅIUbm@UJUUVU@mmI@UU@k¥mUk@WmVmI@VU@klmLk@mbkKmb@WkKUVnUnnxW@UVLUbmJ@bk@WbU@Vkx@V@bVbkV@V@XWbUWm@kb¼VLnlJlb",
              ],
              encodeOffsets: [[115920, 33863]],
            },
          },
          {
            type: "Feature",
            id: "4116",
            properties: {
              name: "周口市",
              cp: [114.873, 33.6951],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lnb@xlJ@UnLlKXUlJl_KnV@xVL@bkbVVUè@Wb@UbmkVmbXVJnUl@a°@@bLVblXxInmnLVwanJÆw²IlmnXVl°VVbÈaVb@lkn@VWnLlUVmÞUUklkVkUaVaVaUwK@kkaVWmw_l@nUVVb@baV@VV@zXJl@@kl@lk°WVnÆbnbUVJI@VKVm@kK@_kK@a@aU@@wW@@k@aUW@IUWVUnLlUlVXKVwmk@W@VWa¥@k@lnUIÇKUaU@UUVmIUVUk¥Vma@¯k@Wanwm@@n@@m@UIVkUVamUXWaVU_@mUVUImW@aUIĉK@VmIb@lU@@nJkU@KIUmmLk@UVm@Um@@LkbUmJXlbV@xUb@@bkK@LWx@bUn@xmbÅW@nWLUKUbUVKU@LUK¯mU@VV@xULUVL@bU`WUz¯aUamKUa@@xkX@x",
              ],
              encodeOffsets: [[116832, 34527]],
            },
          },
          {
            type: "Feature",
            id: "4114",
            properties: { name: "商丘市", cp: [115.741, 34.2828], childNum: 8 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XVl@lLÈ@VkV@V»UanWX@VaÆÇô@ÈaVX@xVJXUÞUaVLĸbXKlV@m°Vn_nyXX»mUk¥lK@a_@yInaVKVa°_@WXI@@KVnIlbnaV@l@a@_w@lwUKmXa@UV@»Vw@kUKVUUm@w±VUXUKUwmJUU@km@@±mXkmUI@mmKUwkbWakLWaUIkJmX@l@@VUX@JWbX@VbULWblUVULknlV@bVJkmb¯KknWmk@@nmVkx@VmU¯KUnUL@JUIVmaÅaUm¯Xlkk@@lk@WI@yUUU@b@aUaUmVk@`nxUXlb@lLVxUbUbVbUllkVlÝVUnkVmKUXm@kl@nUx@xnxn@`VX@V²x@V@b@Wl@zU`VUVVbL@VbW@bkXllkLWV@V@VVÈwlV@@XK²LlbWnnÆL@VnJWn",
              ],
              encodeOffsets: [[118024, 35680]],
            },
          },
          {
            type: "Feature",
            id: "4112",
            properties: {
              name: "三门峡市",
              cp: [110.8301, 34.3158],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WKUmUI°U@@UmU@KnK@IaU@makKUa@_KnmVUL@a@IXm@KWkkKVkUU@aUW@UUIVaymwkbU@xLVUWWkk@WUkJk_WWk@WIUKÝk@WKULka@mwĉ¥mXUK@@bm@kVWwkU@mUUlIWm@@Uk@@KkVmn@lwn@@Ul@XmUXUmVÑkmkVKUaVamaUXn@ykLUK@WwKmKnUm@UmaU@mUk@kL@lxċxUnkVmnXxWb@`kzWJ@VLmVUnlmUL@lW@Ub@VXUb`VLUbUJ@nmnUlUUm@@bUJlnUU@lxkb@@XJUn@kb¯VVVmlXXlJlzn@VlkVW@bkKbmkUbVblXVxKÈnwÞlĊKlVnKlwX@lL@xlUnVn@l@lmX@ÆÈb°¼ÈwVJlx_°xalUÈxlUnbVxnL@lllbmn@nb@@VL@V@@VLJnIVVlKnV_",
              ],
              encodeOffsets: [[114661, 35911]],
            },
          },
          {
            type: "Feature",
            id: "4107",
            properties: {
              name: "新乡市",
              cp: [114.2029, 35.3595],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XVlLK°bUblbUbl@nX@WXVVKVk@@mb@UbnW`kLLV@VVLnKlVXIlV@@a@l£nWlkVa@°bnUlLVlnabnUVUXKlU@@lk@aI°y@ôkUU@wmônkWakmlUkVmkUlmUUm@nkUKWanamULXW@UVnUln`lblL°KXV@ĠJ@L°JUVwanK@UUImmkK@¯±Um@IVmUmmÅnWaUK¯aUkw@W±kVxUVwnÅJUIWaÝJóIbm`ÝbÅImJUI¯¥¯@mU¯UJmnUVóUkl±V@zXlbWVXL@bmmº@@XmJUXU°llk@nWJk@U@¦U`m¯Wx",
              ],
              encodeOffsets: [[116100, 36349]],
            },
          },
          {
            type: "Feature",
            id: "4104",
            properties: {
              name: "平顶山市",
              cp: [112.9724, 33.739],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l¤UbVL@VLVb²VlKlaX@lb@lxUVULbln²VJUbW@@Lb@`nL@nVV@LVUbUVmkVllXbl@Xn°VK@_°`²IVVV@VUVJnInaWK@U@KLÆ@nmlXXWVUUw@klKVa@knyVkVanIJXUl@XbVUl@@aa@mXkbnK@UlK@UUUVaXaWmkUm¥nWmXaWakl@VmÞbKVL@aVI@mUwVm@KÅméULKVaUk@kUK@UWXI@VlKXU@VVnInVV@VLlK@UUkKU_@WWUwU@kln@@Imb@@mnUKÛ@mKUkWVXxmbVLXVVU²VV@xÅnmWmLU@kbmJ@b¯IUbJUUxVl@z@bU`W@Ub¯nUJUb@WLUKULkU@aWK@abmL@lmUk@@bULWJUI°@¯aWLk@mbUb¯b",
              ],
              encodeOffsets: [[114942, 34527]],
            },
          },
          {
            type: "Feature",
            id: "4101",
            properties: {
              name: "郑州市",
              cp: [113.4668, 34.6234],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@nWVUKÅ@WnVnIV@kÆwV@nn@lxÞlnôJzXJl@nalUČVll@²UlkôVVUnmI°VnV°@°¦VJnIÆJÞan_VmU@ama@kU¥kaUklw@UIV¥kVUI@mmUÅmUlwVU@amUJWbUakVVé¯Im`k@wVWmLkU¯XkWmLmx@UUbm@@xJ@LbW@UUVWUkVK@kaIUamKUkkmmLUkJUVWXkWmnÅ@KL@@VXLmbmJUIUVU@ULWVkK@nWVXL@lVn@¤bkôKXKlL@¦²V@JL±@@VU@WV@X@`XXmb@blan@Jb@V",
              ],
              encodeOffsets: [[115617, 35584]],
            },
          },
          {
            type: "Feature",
            id: "4105",
            properties: {
              name: "安阳市",
              cp: [114.5325, 36.0022],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°kVaV¥kVmUkWkWVkVKUwkkmKUU@awWWXWakKWkXmlaIVmX¥U@a@WnK@kVI¯@KğI@WU¯LkKak_kmmVU@VWXKnVmbXbVLmln@VVknlVUnVlklnXbmlmlXblnÈlWbn@@nK@VLbVV°VVzln@VxIbU@WLUa¯VUkWõ@¯kkmxk¼lXUlVbVLnlULmU@lLkVUlX@xW@¯mU@UmIUWL@aXakU¯anWk°@kkKmmUIWaambUkkKmV¯a@UblkmXk¤@@b@UbULWVnb@lUVVnmnVVUJ@bWXX@WJkL@blVU°UV@XlWnXUbW@UVkVVWbnLUJWLUK@Lnn@blVUnUblxVUVJXUa@UbLnUVV@mVIVVn@UbV@XbmbUV_lVXUWanJVI@WkI@WVIVU°WXXl@la@mX@lLXlkVbmXylIXJV@@kKla²UVaIVyÞb°LlVna@UÆKnLVbK@anwU",
              ],
              encodeOffsets: [[117676, 36917]],
            },
          },
          {
            type: "Feature",
            id: "4102",
            properties: {
              name: "开封市",
              cp: [114.5764, 34.6124],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lUVbXaInV@bUVxknVVÆnn@VJlUU¦VJ@kxVllb¦lV@nb@bVUnaôJÞIXbVJÆImxUVwU²l@XxVl°bVLXb`XklUnmVblL@lmx°LVK@UXIVaWlL@Uk°KkVaVUXmmI@UÅKmmXka±KL@W@kUÇxUU@@UXUlKkklW@aXa@UKUaVUUV_@yXk@@a@U±w@UUW@_mmw@wVwmUaÇbUa¯UUkmWkn±JÅxmIbUxmKmnJWwkUaK@a¯@bk@mVUIWLmwm@Ua@WJUb@LUl@UUmLUbWJ@VL@VmXWWzUJUê",
              ],
              encodeOffsets: [[116641, 35280]],
            },
          },
          {
            type: "Feature",
            id: "4108",
            properties: {
              name: "焦作市",
              cp: [112.8406, 35.1508],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@V@VL@x@bXWV@XklUWX@J@nI@KlLKUVaV@JlL@KUk@KÞLl²_@nWlLUVV@nLWVUJVn@anV@awÞUVLVxb@lW@lbXnVn@@¼L°mKVn@bnl@nVK@blbLWU@VWLXV@nlKn@lVVbXw°nV_@¥Vl@XI@mlkkV¯VWnI@W@n¹n@aWKXUaWk@yk@kċUkVmbk@WIyóImÝkkwm@mU@xÅlU@mJXak@x¯V@¼¯VmUmmIkVWK@UXIl@UWVUU@mVUI¯b¯@lmKzWKUanJ@nlbÝ@@b",
              ],
              encodeOffsets: [[114728, 35888]],
            },
          },
          {
            type: "Feature",
            id: "4110",
            properties: {
              name: "许昌市",
              cp: [113.6975, 34.0466],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lIVnKlnVlnLVbJlb@ULVlUXVVX@a@KI@wn@aVV@nwnKlXW°lVnKUXx@ln_°JVIXyXnW@UK@UXIVanKVV@Vk@KVaXI@Vbn@nxKnaUlnVa@Xa@VçUUla@aUK@wmULk`kIWVkLmK@V@XUln@JXV@nmbUóImUa±@@ÑóVUUk@UlKVU@akWVUUlUUaUK@UUKWbUkÅJ@XWa@XbmJ@nUJ@bUKLÝaUnk@lXbWbXnmn¦lVXnWbUbVV@VkL@VmLaWl@nb@bk@UVWak@WVImJUbUlmz@lUbkL@lVx",
              ],
              encodeOffsets: [[115797, 35089]],
            },
          },
          {
            type: "Feature",
            id: "4109",
            properties: { name: "濮阳市", cp: [115.1917, 35.799], childNum: 6 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lLXbWXXx@bVVnLllVxULUlXXlVlUnlU¦Ub¯lnK@VbVb@XbVLKVxVVnIlaba¥lU@wnalLnVVlVLXnlWVXn@@lVI@WnU@mÅW¥aW_k@WwXy@km@wUm¦lUxVLV@UwJ°x@VX@Vb@`VX@VX@llIVbnJlIbVlJ@mÑ¯Lóa@KUakX@UK@wU@lWUUÝ¯ImW¯aLUKU@k»k@mwa@UnKWI@UU@akVWKk@a±bóUWKXUmkKUmLbUx@lmLX@@bVW¦UnJkbWnXl",
              ],
              encodeOffsets: [[117642, 36501]],
            },
          },
          {
            type: "Feature",
            id: "4111",
            properties: {
              name: "漯河市",
              cp: [113.8733, 33.6951],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@LUnVxnIWa@Xb@WÆIVlXaVL@VVLVbkVVUVlX@bUVkLVl@VVôU@Ò²@VbnôJVan@mWU@ImVk@WkI@wmak@wlW@w@VbnLVb°bVyXV_@aUKVVK@wUU@aK@kmbXVmJUX`knnK@aU@mwakb±@¯UUÝKUUU@WU@VkLUKU@mUmJUU@WVkL@UWJX@VVL@lVlUbLVKnêÆ",
              ],
              encodeOffsets: [[116348, 34431]],
            },
          },
          {
            type: "Feature",
            id: "4106",
            properties: { name: "鹤壁市", cp: [114.3787, 35.744], childNum: 3 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ón@xVVól@¯zJ@bkl@@kVWLUVmVXbVJnnlLl¯@Xlm°bVlWb@bKVXnJ@VV°nX@@wWVklUK@knVVKmkUKUaVkWkl»nwl°lö@lXV°UVbXKV@aJw@UmkUy¯UUUaK@UL@mm@XaÇkkmWank",
              ],
              encodeOffsets: [[117158, 36338]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/hu_bei_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "4228",
            properties: {
              name: "恩施土家族苗族自治州",
              cp: [109.5007, 30.2563],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VKbX@lbUVnL°@VlVnUl@VUX@aVmaXlaUUU@wmaVUn@Vnmmk@mU@knaaU¥VamX_@WUmW@_kVaVKnLl@VVal@k¥@kUW@kUKVUlUVÑW@kÇaU»ValmkUVUVak@aV¯_@WUkmVUlU@aalI@akkVWUaWXUWwWVbÆ@lalIVK@Um@UUW@al²a¯UağÇm@bkk@w@@WaULmxIUb¯@U`UXJmL¯aKXWUL@aknmK@aWUXaWm@I@UÅmVU@aUV@bVI@WkUbXkm@VakwUKULWKXmJ@XUK@mL@KUwVaUI@KU@mmnmXka@»V@@UUaw¯yVk@UUVmmkÛÈU@mWUnmxmlUbV¦UlbWVUL@UUIUmÇKVVbUVVxknLUxV`VX@kJVVUXWaUVVlUnmKUbkI@WULmK@L@LVlLnmUIWV@akn`VXUJIVlUVVbUX@¤mbnLmm@UXk@mm@Uka¥@kV@@KkU@aUKWbkLWVkIVk@UbVlmX@bU@@mmL@bn`@Ln@llVLVk@XVVU@`VXU¼k`VULka@VllVIn¤VU@@blÜbkx@bkLkKn@bn@@b@JUnV`UnVbVKlVXUlbn@°Vx@@bnVbUllVn@VVK@UnW@UVUlnkVÈÞxVbVVIxVaÆ@@aka@UVaU@@ak@Wl@nbVIÆ@Jk@L@VlXnlla@VJnw@UmwXU@aVK°ÒnllnLlbxnKVaV@l¦²nVl@llLx@XVVĶ@nax@U@alXUVaLÈþV°XxWXkK@mLnlUb@bxnLVlVVkb@UJ@xWXX",
              ],
              encodeOffsets: [[112816, 32052]],
            },
          },
          {
            type: "Feature",
            id: "4203",
            properties: {
              name: "十堰市",
              cp: [110.5115, 32.3877],
              childNum: 9,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@@a@w@kV@nbVK@nUla@laÅl@nlVakwWX@WkLaVmwV@anK@UlIXmWkk@@mmLkWlwk@U_mKXwWK@U¯K@UU@VUakmkIyUUVUmanU@mlwk@_mWXaUWU@Ç@U@aUaVwUKUIVkK@UWIXmaV@k@Vm@UnwlUamk@V@ULUamxUJkU@I`WkkK¯XWak@@W@IUVLWJkXkaÇVUK@kUmbmUUUKbkKWUkI@kKÝ@@aUm»nI@mU@UnWV_@aUmWbkLUl¯b@akkk@WkkJm_k@UV±@J@bnU@@WÝIUJVbXL@nlJkx@Wn@VkJmbLmU`VbUL@xVn@XV@mVVnnJVbUx@VnVUbVVx@nbUK@b@bJm²VUlbXzVJVJVbn@@Xmb@V@bVJÈ@Vnkn@°aVVV@XKnalLVmUnnVKVlnLWlXXKlk°XWkLUVVV@nU@ml¯nmbk@W`Å@mbLWm¯UxnêVèk@mbVnUK@kKmXk@@JUIlÛLllnbVnlJ@LULnlÆaVLnV@nkVJ@lkô@²bÆm°wLWV@VXKVXI@W°ÆVKb°UJVIVV¦XKVL@lInaVÝnUl@@bX@nmVL@lVLlVLVUnbVW@xXnbU°¤V@a@kWKUUn@VlnL@UV@Ü»@mX@V_akaÞ@VK¯@kkW",
                ],
                ["@@mUkUUm@nllVKXXVK"],
              ],
              encodeOffsets: [[[113918, 33739]], [[113817, 32811]]],
            },
          },
          {
            type: "Feature",
            id: "4205",
            properties: {
              name: "宜昌市",
              cp: [111.1707, 30.7617],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°`U@blUbUVlVknUbV¼Èb@lXUÒkVUVVL@lVX@ll¦k@UbU@kmKULUbl@`nXV@XW`nUbV¦bmb@lV@nnlmnUm@UVnb@xVVVkbWnbVnVa@an@UaVUJXnWlXX@l¦@lKÆXbXV@VV@°¯°xXxXV@nV°UVWU_VWXkmaVnWVkn@lln@lb@UVLXWlnX@aXUmaVK@UXUU@WVIWXXVU@¥VK@UÞa²LlV@kV@UanKma@UVUnK@UVLXyVLknJ@UV@@UXKWUXaV@Vb@mVLnKWm@aUUm@@UkK@UlaLXKWaXI@alKlmUk@wVKXL@m@WWn@UVa@K@wna@aW_XWWkXbVW@k@U¯WWwka@UUaVIVkU@m±@U@@wVKka_@VV@XUVwU¥yUkm@V±ÈUKk»ÇLmmLk@ó£kmWwm@UIkWKXwWU@kLwkbmabkK@VLkmWIUKkUUÇIǫJXÅJULVÇLUV@UK@kI@WVI@UaWmXVVUL`±kÅLmKkkÅ@UaXXxWVXVbUXll@bkJb@bkVUVlnV@X",
              ],
              encodeOffsets: [[112906, 30961]],
            },
          },
          {
            type: "Feature",
            id: "4206",
            properties: {
              name: "襄樊市",
              cp: [111.9397, 31.9263],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@Xl@Xb°WlLXl_@JlVVInwVbVK@@UnlVbkmx@VUnl@U@nbWXJ@VlLUVJVLUxVb@b@VÈ@XVVWbnX@`lkx@nmVnbUVVVzlJnlVbUV@@V°L@VXLWxnLV`l@kxlXnK@nl@XlWn`Xnl@@UVa@VÈK£VLVanW°U@UVU@`VInmV@nV@Xa@aVW@UalkXKblIyÆXnlJXbl@@VV@nklU@`nVKLVKVb@VU@UÈKUVKIlUX@V`lIVbn@nblVVmV@@XXJUVV@knKVn@`@XVnKwlLVmUUU@U@aXL@WlU@UUW@UmU@KkLWaXkWmXUWm@U@nk@UmK@U@UaUVUUKV_@al@namWUI@KUK@aV@WUIb¥ULUJkImK@U@KV@U@a@UkU@K@wVaUwlU@mUULmKUkV@@anIWmUK@I¯mKkl@LUb±lUakLmk@WwUKÝVUIm`¯n@Uk@makJU_@Jma¯ImwUVkKbaUÅ@wWaU@VU@mXIVmmUkJkwm@mIlUKWzUK@VmLUV@VnbmLVbU@@lkU±KbÝV@UL@¦VWUWXUJ@XVWV@VULnbWVbW@kmWXUK@Vkam@kkm@UlmXUnbWlUXV`UX¯VmUU@Ul@Lll@nnJ@LnWmbm@b`",
                "@@kUUm@nllVKXXVKmU",
              ],
              encodeOffsets: [
                [113423, 32597],
                [113794, 32800],
              ],
            },
          },
          {
            type: "Feature",
            id: "4211",
            properties: {
              name: "黄冈市",
              cp: [115.2686, 30.6628],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VVUnWVXnVJ@U@V@VXV@@IVJUn@V@L@KlIVlVanLVbnVlIn@@a@Kl@@IJlI@aXU@KlKkVblJXUVlU@VbVkVKXn@VlxVa²I@VlVUxln@bJXklaVWnLmÅ@y@k@aI@W@aXIlVVaV@nnlKnLVW@IUa@a@KUVVlI@wXKVV@IUla@lUXwWnnalLlxXLll°@XwVKVaXIlnb@nln@Va@U@k°UmÆUVaXIJV¯ÇUmmkU@WaKmakVm@U@aVKkkmKkVmIkÇ°£@aUUVaVVnKlkXmk@lUVaX@@Um@UmlUXVUVU@wK²¥Ua@I@UVl@UV±UIUÇ°»VkUmVI@a@Umĉ¯V±bŹĖğaÇL¯lmkX@óĀ@mÝêb±WkLn@xXx@@b@V@LW@UblţX`kxWnXô¯¦ÆV@L@JVLxkK@V@bkz°llXz@JUlVla@XUVbVKXnW`XXV@laVV@VX@V¯xx@xULVbUJ@n@LU@VmmakbUK@bIWWUUVkUmkLm@VJkb@nUJ@`V@kXaUaVmmLkUmJ@Uk@U±lkzmJUb@bVUxVXU¤L@JX@VlL@JkLUVU@mnUl¦@V",
              ],
              encodeOffsets: [[117181, 32063]],
            },
          },
          {
            type: "Feature",
            id: "4210",
            properties: { name: "荆州市", cp: [113.291, 30.0092], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÈJVlVVLXJlnK@UlLanblaxlK@XVWxXLlJ@VnXxlnô¤l@nKnÈKl¼VL²ÇUn@VlzV¦UxWVU@@U`lbUL@xV@²@@nlVUUJVb@VlbXx°XVWX_VKUwVKVa@UVKUUVk@KnblaUU@wnWl@UX@lÆ@@aIVmUkxVJUbÜ@Uk@WWnk@VVm@I@m@Un@mXUlVlUnJ@knJVU°@@aÆLX@llL@¦nJV@XblLVa²U@UlW@VX@`@LV@@bXJlIXml_lJU°bKÆLnVVl@öVmXaVIĢllUlVnLVlX@@bannxVLbn@°ÆXmmkĉ¯w±Uċ@KÝÅƧŃÝçUw¯m¯k@WkV@¯UIUJW¼kbUwk@W`@¦Uônb@VÆlÈ@VU@£UWWnUÆUnmJkUÇ£VWUI@aUU@WkI@Ua@JW@k£kaWVUKmnkKbkkVWbVmUUmwU@kk@UakUUa@V@nlx@lUb±lUbnnWLUyk@UamUK@mlk@Wb@VXL@x@xWI@a¯¯V@bVn@LkKmL@`XmKmVU@@bkL@V±bk@UaaLKUVIWXamVVbUK@b@Lm@UWkxULWVUnm@UlUX",
              ],
              encodeOffsets: [[113918, 30764]],
            },
          },
          {
            type: "Feature",
            id: "4208",
            properties: {
              name: "荆门市",
              cp: [112.6758, 30.9979],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n@lxlInVUnWJ@nUVV@Xb@xVÆbalLVUnx°JnbI@V`lInbl@@V°mn_VJÞUVLXx@nllKVb²kVa@KlknL°@JVLXnmJ@bU@VlnLVKV@nX@lUKVaXal@VKn@¥°L@UnwbnaV@KV@VUX@lVXI@KW@@IXWV@laVLKlaXUVVnkVWV@lwXblIXWVkVmaU£VaUmVIkU@y@WakKUamU@UUK@kmK@w@@mK@LV¯U@WwkmULamVVUU@IbUKUakmm@UakLmxU@UÒWlULţÿmwkIUm@akÈblW@UVUUk@JW@XkWWUkUKUIlw@aUWknWUUmnIWaUwVaÛaVUIwVlUnJ@bÅ@@kVWk@mX@xVVkbma@LUlVVUL@VUbULVxULW`UX@V@lUXWaXlWXX`@bmb@x@LUb@VmXX@@nWKUL@xVlknkL@bWJXbWLKkb@VlL@Vn@VV@bnXmLUK@nUaU@WbXVWL@VU@@V",
              ],
              encodeOffsets: [[114548, 31984]],
            },
          },
          {
            type: "Feature",
            id: "4212",
            properties: {
              name: "咸宁市",
              cp: [114.2578, 29.6631],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÞÆLČ@V²°xĊnlWnÅ¯m@aK@°nJwnVIUaÆJÅ@wwVXW@aV_l@²V°lĊwlaXLwlUkalVVaX@lVXI@aUXJ@U°UU¥VIVKVklanLVa@VÈIVV@nk@aVa@mV_@aK@klKUa@UnKWk@@lU@@UW@@nUWUwmaVIXlV@mLXblJ@kV@kk@KU@WkUWVÅwkLmW@UmL@lULKULak@maUUÝwUJIbKUU@aWK@kUWVkUwVw@mÝ@I@wkW@aww@LU¥kJ@nVJIkVVnkVUkyUIUl@xWUkaW@@°kzWxkLUWmzk@@bVVVb@@XlV@Vl@bVbUn`Wn@WbVVI@`LVbXLV`mnU@@lL@LUak@Lk@WbUJn¦@lVb@xVb@n",
              ],
              encodeOffsets: [[116303, 30567]],
            },
          },
          {
            type: "Feature",
            id: "4213",
            properties: {
              name: "随州市",
              cp: [113.4338, 31.8768],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@n`lwkUmUVWX@lk@VanUĠ¼V@@mX@@nVVVXLmJVLnK@bV@@J@VUn@VaVUUUVWVLV@@Kk_@almaVkUU@WVVUVLXmmk@wUaUKUV@°@kmaUaÈmWmUVklaX@lVnxl@@UnaUk@VUVwVKn@VVn@VbVJUknUmmVmk_VwKUUmVak¥@UVKVIkW@UmIVWkIVkmmLkwmVU@LUU@VVXL@JmLUbmK@UUKmkKUUmVUaUnÇlk¯mJUnmLUaUJUaWL@UkJU@aklkU@¯@KWLUmUUWVkbLUKkbU@WX@JX@@LWJkUW@UVU@@LUmbamx@V¯K@¦mULk@WbUbLkVW@kVVxUb@x@LlV@V@b@VU@L@VLnlJVIVK¦aVJ@XU@bLV@LVJnXmbk@@bU`VLUVVb@V@VnL@Vml@@VXnWVXnWlXblK@LnV@VVX@VkV@XWK@bVV@VV",
              ],
              encodeOffsets: [[115830, 33154]],
            },
          },
          {
            type: "Feature",
            id: "4209",
            properties: {
              name: "孝感市",
              cp: [113.9502, 31.1188],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VnXK@L@°lVlkb@VlI@VXKVbVIVbnKVmnI°lÈkVmVbnUVVlLnVL@VnLVanK@IWKUUV@V@KVnUlxnKlnUlJUXnJ@VlXUJUL@Vl¦UbnVVLUxl`UnnnmVVlnVKbmVX@a°Ý°LaXJV@VUnKVXVK@LnKlLUbVVX@VwVJVn@@UU¥V@@UUK@maUVUkkJ@L@K@UmVUI@JU@W@U@UV@UIWmXUVmUUÇ@UVmIlmnmakK@akaW@UwVUkKVnUlKVwkVU_WKUkVW@UXaWkUa@w@VU@XaW±@IkbKb¯L@WXkW@UakL@UV@UmVUmL@UXWVL@aUVUUUVU@yUUIUa@wUKWVU@kWk¯UkwVKLUxK@nVxUlUUWVUmw@wUUyXWlX¦WbUV@U@blbUVVbXXl@lVL@bk@lxkVVnVx¦`UnkL@V@L@@@xnL@lVL@VnVVblLXb@@zlVUJVnUbV¤bUnUlWXkJWakxU@UXml",
              ],
              encodeOffsets: [[116033, 32091]],
            },
          },
          {
            type: "Feature",
            id: "4201",
            properties: {
              name: "武汉市",
              cp: [114.3896, 30.6628],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nbnmknJVUÈ@@U¥VknmV@VUlK@IkK@UW@IKV£UWVwU@aVanIly²kVl@@VnIlVnKUnVbblWU@@_VI@mlaUIn@lKVnUlVVXXJ@aVLlanbUnV@@K@mVIUaVK@ww°w@UW@UUUkbU@WWX_WmULaVU@WkbkUV@IWyk¯kly@a@UlLwUK@I@KÅUW@Å±Um@wl¥ka@@_Vw@ķa@akw@kKW£XVUVwVwUaU@VUUxWKkbĉx¯k±Uk@U`@bWXUx@xÆÅIVbUJmxIm¯@UmxnUVVbnJV@L@@kV@bVn@UVULlx°VXllV@XUVL@xVbJVV@zUVVVUVV@bUKWX@VnKUVVnU@@VlKVb@lXW@X°KaLla@JX²Wb@UV@@xVbXlWb@VUXVlXLV`UlUxkLmVUlLUVVxX@lb@blL",
              ],
              encodeOffsets: [[117e3, 32097]],
            },
          },
          {
            type: "Feature",
            id: "4202",
            properties: {
              name: "黄石市",
              cp: [115.0159, 29.9213],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VUVV@VbUxaWUblUVmnKlX@bXJVIlVUxVVVIUzlx¯@VbnL@xx@UVaXKb@XkWU_Vm²klWXVKl@nXV@@wmlK²XaÞén@ôÿ@lWn°kUKmmUÑUmm@wkImWU@UakL@bVLUVċ@bUK@alIXKWK@nXnKmkUVw@¯b@LlUL±Wn@KULUaW@kL@lL@bU`@nUb@bmlU@UÇJ@UUbmKkblUULUJV¦¯V@VWIV@bWJkUW@UbkUlbkV",
              ],
              encodeOffsets: [[117282, 30685]],
            },
          },
          {
            type: "Feature",
            id: "429021",
            properties: {
              name: "神农架林区",
              cp: [110.4565, 31.5802],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n`lIXll@ll@b°aVklKXaVn@bU`mX@VV@nmJn¼V@bÞ@lL@lJXVlLaVLVnVnalV@VLÈUlblWXIKVU@J_@annaXm@KmI@mkk@KVkWWw¯w¯°@UUU@WaÅWkL@¥@kWWXkWmIUVVbm@@bUbmUUbW@UVk@mVkU@U¯mKVUkaW@aULÆVbb@VÅ@Un@VLWl¯L",
              ],
              encodeOffsets: [[112624, 32266]],
            },
          },
          {
            type: "Feature",
            id: "429006",
            properties: {
              name: "天门市",
              cp: [113.0273, 30.6409],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@K@UlKVm_¥UwUmlUkwl@@aUK@kkWWUaVUka@aV@VUXaW¥Xk@WWIklm@ÅxmIVÝUkxka@bWJaUL@W@l¯UULUbkVUa¯bm¤UnÇUkmUUxb@VkXÇal@bVnlJnxŤĀVKXkVÑV@nwlKVbn@nlVbVLaJ@VVUnUbVKlnXxV@°U@KnL",
              ],
              encodeOffsets: [[116056, 31636]],
            },
          },
          {
            type: "Feature",
            id: "429004",
            properties: {
              name: "仙桃市",
              cp: [113.3789, 30.3003],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VK°VkX@@VKbXI@alblwÞVUnJÆwn@lkXJ@XWVzV@xnxVXUVVVkUw@mLVwKVU@Um@alU@@@KUmIUaVUmnwmwmb@aW@UkmKkUkVġkUJWbnUõ@UkmUÅKL¯aVkIk`WnkJ@xVLUVVbUbk@WlXbmVxnxUblbUV@@VUV@nVL",
              ],
              encodeOffsets: [[115662, 31259]],
            },
          },
          {
            type: "Feature",
            id: "429005",
            properties: {
              name: "潜江市",
              cp: [112.7637, 30.3607],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UbVxbXmJVnXVlmVX@bkxVJVLVlXXWlX@@IVlVUaVwVlnÈVVmn£°aVbUlaVUK@mVU@U@VUkaVamwUwnWaXkl@VaUaVUUK@wWI@aU@@K@_UW@kX@V±VUbkKWaU@mI@¥kKkW@ÅK@b¯@UVmI@lmIkVkUWVnm@@V@n@JUnU@mlXXl@@V",
              ],
              encodeOffsets: [[115234, 31118]],
            },
          },
          {
            type: "Feature",
            id: "4207",
            properties: {
              name: "鄂州市",
              cp: [114.7302, 30.4102],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°¥WóXmlw_ŤWkVaX@@K@U@a@WwU@mWk@ULWkX±lUnV`XWl@aWLUb@Vw@wmKUa@°kwyVUJUUVwkUUJWI@akWmLUnkVaXVbUxUVWX¤lL@lx@bb@ĸUx@`@lbk¦@xn²VÆX@",
              ],
              encodeOffsets: [[117541, 31349]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/hu_nan_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "4312",
            properties: {
              name: "怀化市",
              cp: [109.9512, 27.4438],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@n@b@XnJ@k°x@aVUnlUXnV@@VnJWUJVnIVV°UbVVVL@²LUVa°V@aV@nmUXblLXWVXVmVLVK@an_`@X@l°VlXXW`nX@Jmn@b@nV@Lm`bUbn@VUVl@nIVbUlV@LkJUnVV@xVblVUbU@zUKU@mx@xUnn@@WV@lbUb@nVWXXV@VIV@VUnJ@VUz@JWbXllI@VXVVL@Vn@Wlb@lXVlLaV@VJ@XX`kVwVl@bkbUlVXIlnLVamVwV@@nV@XaVJVbX@lwV@n@nV@VWnIVVUÆ@Xxa@IUUKmk@mVIXmWUVJnUVU@anaVwkU@UXa@W@m_@a¯@@K@UVbnK@blIlbXa@WW_n@VU@¯bmyUkUJÇÅ@WU@kWKÅwnm°KVkmankVWnXVWV@UwXkV@mUlLnaVaX@VUn@VnVK@xlnXWU@a@@klakVwmUaV@wmIÛ`m@mVUXmlIXVI@K@aU@UaV_UK@wkUmmUKWXmVkUL@mU_nK@aVU@Ukak»@U@ymU¯UUVKkam@nka@mwkLWb¯mka_VaVKUIUw@kKmU@WK@UnmaULkU@wUalWV¹U@@WUI@WU@_@W@U@mU@WbbUK@Um@@UmbUwWWkk@WUa@anUUwlWUwUU@wlJVUnnV@@mnI@mK@U@wa@wUm@_mVUUaVUk_kċUkVWL@mlU@kn¥W@UwUWV@VÝU@lXLWVUbVLXlVIlknmU@VUJk@@@kVmwmVkxU@@XmVUb@xnKVLl@VxUxkIU`@bWVXX@JWL@bkb¤@bmUUU¯Kkmb@VVUVVn@@Vb@`lnxmblUnbk@xUmV@bmWbUV@VJIl@nVUbK@nn@VbnJVIlJVkXJ@X@lmx@bnnWVXJWXU@UlU@mk@@llb°xIUbnJ@VWbXVmI@JVX@bk@bWL@JUXUK@U@U`n@@Xm@XVW@@nX@@`ImxU@@JUI@KLmK@UÅUUV@VW@¯kUU@UamVUUmJ@nxmLKkmJkwkKm_mKXU@aU@b@Wk@ma@zUJVUmbUlU@xnXlWlXXblK¤V@@nUVVLkVl@Xb@VVKnXKVx@znW@X@@lVK@X@JXbWbnn@JUamLVVXIVxnK@aWUX@x@VnI@WlI@anVIVxkl@lbXXxVVVJVInbV@@ln¦ml@XXVWbkJWb",
                "@@XLVKVXVKUa@UUUmV@l",
              ],
              encodeOffsets: [
                [112050, 28384],
                [112174, 27394],
              ],
            },
          },
          {
            type: "Feature",
            id: "4311",
            properties: { name: "永州市", cp: [111.709, 25.752], childNum: 10 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lxUXVlXUVnlVĢJVbUXVJV@XUW¯VIUK@klW@Un@nl@V`XUVL@l@Vx@XXW`UnUbxUlVnUVlb@VnJUVVVInJlUVnwVklKnwLVJVV@nIV@nbVa@KVVVUUaKV_nVVJ@_VWnV@n¥lI@anl¥X_VKlwVlULUVVV@U@VXL@IUmn@VU@wmKXUWU@m²l@VIXWWkWUkWlkIVamUXamUnmWUU@@UnlK@XJl@kVUk@mWKXkl@@aVU@UVWUUVaIn`VUVLnw@U@K@U@w@UVmUU°K@UnV@bV@Xk@KVm@amkaU£VWUUmUUwm`UbULkaKXU@kVmU@aV_UWVIn@yXXK@klmVV_kWVUn@WUU@UmaU@wnwWanUmmXkam@UakLmK@bxUUUU@Km¥Va¯@kUaVUlmUU@mUUÇmUkUybbUaXUWWbÅLmL@VaL@WWXUKmmk@a@UUKXW¥kU@VUkxmVkUWbUJnVJ@nVJXzWxk@lVbUX@VVL@`mbUnUnVV¼k@Ulm@mwLb@lmLUK@UamWkK@£Ua@UkJkUmbVlkX@bWbUVnnUVl@bbVK@VX@lbV@nU¤x²Knblb@xVô@l@b@l@XWxnVl@VV@XLVlLUUXV`bXXmJU@@bm@UUkLW@UlUKWUUbwUmL@nklVVmVXXm@@bUKlÆnXkllVUVVL@nUbV@V@nnV@xUn¯U@JW@UX@xĉ@`m@@LV@b",
              ],
              encodeOffsets: [[113671, 26989]],
            },
          },
          {
            type: "Feature",
            id: "4305",
            properties: {
              name: "邵阳市",
              cp: [110.9619, 26.8121],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XIlJIVVK@n@VVVKnLVwVmnLVK@U@wJ@wVIÆ°X@ÜÈUÈxll@kn@VwVaXJWXn@@WVL@UUKVKV_U@@aVKx@UaV@lk@XylbUaV_Vnal@WU@aI@aV@@aVUl@XmUXWaXml@@kk@ma@V_UnUVUUWJUa@kkaWLUmk@@LUVWUkJWkK@¼UnWJIkV@b@JUIm@UlVm@Uw@a@kWXWKUknW@WUU@kmxUkVmIUJUUVmI@UkaUVUmVkwVaVmX_WW@Uw@@kUKWVU_k@mm@@VkX@lVLUJX°WVU@UIVWUaIUġmkVUkWUVWkwWXk`mI@¥kUVUUn±@mXkWknVUVmmU@@XVUk`@Xk@¥¯»mbĉó@mkU@kUKmX@UnmL@lULkKUWUU@bUaUn@Vb@l¦Ub@l@UKmnKUnlUVVbUVn@`Vn@xb@x@VL@nmJ@nU@mmUVkI@xVVVxkXVxmV@bbXVl@XlXVxna@Vn@@VVLaXaV@n@@V@X`V@@XVJ@XV@UºkXVb@xlVVKnbm@VXLV@nlL@VxJVULUb`lb°nXalKnx@lbmn@lbULVV°nV@z@Vl¼lb@VUV@bmLV`@nKlVnUXWVLnnlV@xVLU`VbV@",
              ],
              encodeOffsets: [[113535, 28322]],
            },
          },
          {
            type: "Feature",
            id: "4310",
            properties: {
              name: "郴州市",
              cp: [113.2361, 25.8673],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²zVaVlnVl@nVkJl_XJlIVmnL@mV@VXn@lV@XzV@lyV¯²U@UlJ@XVKnVVIXl@UVLV`@n@JI@mlIKVLnUlVUVVLXaKVLl@nb@WXV°KUnVVL@xVJL@b@LUVVVUVXbmbVbn@@lUbm@x@XVVV@@@bkImx@Vm@Xbb@l°XU¤aLmnL@bl@@VUX@VxnVanLnW¥XKVwnUWXmVIUWÆLVxLw@wVmlU@¥XWUkwlÇn_UwWV@VU°wnUy@aVkVlnL@lVnw@VlJ@bXx@bVKnb@U@WVUl@@Vnbl@XLlK@aVLVKnxÞn@aLlmUaVUm@ÅknUmaUKmVk@mkk@UlWUkVm@w@kUU@WU¯¥@wÇ@aVIlUV@kUWU@UUm»@k@mKVkUKUwaUaUa@kkUWJkImaU@UK@maUzk`@zy@XmJkL@UUJmUkV@z@kkVmK@¦UbWL@a@UbmKmwUKXkVUUkmVkw@UUKmL@WUIWaJW_k@@WmI@mk@WkWULUUVKUUVm@Ub@nUÇ@U@wV@Ua@aL@akl@kUJwó@@L@V@`@J@xnnmV@bkJmUó@nJWUUmU@UV@LkWlnnmVXbmxxV@nbVV@XVm@UVlXU`Ukn@lWLWzm@UJVXU`@bVUn@lWVLlbVKVan_VxnVVVUXV¤bnl@bUn@LWlU@@amU@V¯LVVUn@V@x@V@L@VmxUKUVm_JUbVV",
              ],
              encodeOffsets: [[114930, 26747]],
            },
          },
          {
            type: "Feature",
            id: "4307",
            properties: {
              name: "常德市",
              cp: [111.4014, 29.2676],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lUmkUwUyV@VW@¯VaVmUU@KVUVUVLnaWnkUÓV_@mVU@Ýw@ka@kVmUmK@IkaUamKkXWaUW@WUk@@KVU@aU@L@J@XÇVUKVak_mWkLWakVUbmLUUmlUVKUU@kUWW@UImJ@xkLkKm@@X@óÝ@UUk@UKVULKXkWWbkaIUWU@mUk@WLaUJġ@@XÈÆVIlVnz°aV@Um@X`@XWbkakJ@amLaU@V@L°@@bn`@@XWb@VVlUxmb@bUVmVUIXVWnJU@nnlVLV@JbWzk`m@UVK²VxkLVl@Vn@V°xVKVkVVlUblx@bUÆ@@nVnUllkx@VW@@VkLWxUL@bÝ@kKkVõV@bkXVVUV@VkUkVLkVa@@¯xUxmX@JVb°WXkK@Vm@kVbbn¤xUXkJblxnXÆK²l_@Wnan@UL@bJnIlV@lU@@¯ô@lWȂIVKVmU@aXaV@lwVXn@@K@UVKUUnUbn@lWXlJnULKV@l@²a@UlK@aV@naVXWV_nKlL@KUm@a°U°@VXL@a@wWmXal@k@VLnV@@bl@VnX@mwVa²aVU@mk@",
              ],
              encodeOffsets: [[114976, 30201]],
            },
          },
          {
            type: "Feature",
            id: "4331",
            properties: {
              name: "湘西土家族苗族自治州",
              cp: [109.7864, 28.6743],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@KL@wnK±nnm@WUkÜÈn@n»@mVamkmUl@VnmmU@wUan¯VKLnVWlInyWUI@WWk@KXUn@mnUmU@WmkV@kXaaVaUmIk@kaX@Um@UKWU@UkJWkXa@IVy@UmIUVU@UJU@WXWmU@VakaU@@Xm@Vm@wnwV@VLyV@VakUUa@wUUVmlI@KUVkUamJk@VU@UmVaan_@KmU@@anm@ImWX_WWUk¯@k@W_m`@bULUKUnUWWXkKWaVmnU@@b¯UUbV±K@UKUUVa¯UUmJUVIXmI@UU@WmVmkUV@b¯w@lmI@W@a@m¯LXbmJVLklWL@V@XXmbVVU@@VU²Ul@VlX@b`XxzUmkUVÒl@bXLWxXVl@VbkLma@nmVmULVbmVUb@lnzmbUÒVl@°nLVlJkn@bmJk_VmmkblxÈx@LUbxVb@Vn@JmLVU@nV@¦VbnJ@lVVbkxbm@UxVLV@n`UnVVVkl°zxVb@VU@@ÆlXnWm¦nbVK@XVVUVVl@XKUV@nVL@WnIWXLVKVLlxUbVKXVWbn@@UnKVLVbJU@aVU°b",
              ],
              encodeOffsets: [[112354, 30325]],
            },
          },
          {
            type: "Feature",
            id: "4304",
            properties: {
              name: "衡阳市",
              cp: [112.4121, 26.7902],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lV@XV@mXVlXLWX@l@bVxn@UVkn@VJ@I@alUJXIVm@»LXllIXVVU@Kl@VnXKlb@lVbXIVVUmVVU`@nbl@@lXLVVVKVbnXWJ@VXbWxXbUlVK¦nLVVUVVbbK@ULnK@Un@VxlUV`UnnL@VVL@JV@VUnxnKVbV@@VIVUnJUVUl@nWXllIUaKVbÞLV¼²`V@VIUwlaVmXa@IWanK@U@mkVVUVaX@lnaVLÈ@¥@kkJUWJUaXkaUmwVXJ@_lWUU@¥n_KkamUK@amKnKbV£¯W@kaWan@@UnwlJ@a@@UUU@Wwn@Va@km@UanaWaUVUUVU@K@aKUI@wKUUVm¯LWUX@mak@UKLWbUKVUkUmVUKLkJ@nJ@I@mU_UK@VWkUJmUUL@WkI@V±VU°kzU@Wy@kUm@UWU@@nmKUnkJWIk`IUlmk@mUUkUb±yUX@VUV@bk@WlXL@nVlUlk@WI@kLm@VV@XVmnnVWbnVUblJXkVlXXlWXUJk@±@nXVWVnL@xUVm@Vn@JWK@UV@UUVUVKUkkxULW`k¦m@bkJm¦U@mUX@`UImUU`LVbUVUU@LUbmaU@mJU@UUIKmxkLUl",
              ],
              encodeOffsets: [[114222, 27484]],
            },
          },
          {
            type: "Feature",
            id: "4306",
            properties: {
              name: "岳阳市",
              cp: [113.2361, 29.1357],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@wUklmUUmU@@UVm@wUaV_mmUKmwkIkJmUUnm@@UUbUKUmÛamm¯xVLkbÇÆUVUzkVUlUUKWLX¦W@VUUUaKUbmLKm@akU@amVaUUVIVWkk@wk@@xmLlmÅwmbVlXlÝIWVkK@kkVL@VWKU@Ublnam@b@bnW`@XUJk@UUWKk@UKnn@xmLUVm@kbVbVnV@Vb@KnVLWXÆVĢ¦VblnUJWz@ÆVóUVbkVaÅx@¦lVUbVVknWKk@wKVUÅl@zkb@`m_mJ@xXmbVb@llV@n@llbXLUXalUlalVnwnLVKlVbX@@IV@blJ@bVL@VVVUXÈ¤VnkVÑXmlbnVKkÑÅ@UmaVç@±XUlIxlV@VaX¯lUVVUVJnV@°°n°Vxĸł°¦b²¦lJ@U@aUK@kUm@_m±VIXal@Kl@bV@KK@km@UmUUaK@_UJaXU@Xm_VmUk@WUk@kU@a@m@UaUUU@al@nyXXWWwkly@¯n@@bnV@k@mVIVlUUmlUJUwIbXVaUal@Kb@VKVkXVl@VkUU@ylUVVaVL",
              ],
              encodeOffsets: [[116888, 29526]],
            },
          },
          {
            type: "Feature",
            id: "4309",
            properties: { name: "益阳市", cp: [111.731, 28.3832], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÆxXL@lV@ĢVIbXKl@nVV@XVJlbXalXWLVKUVLl@VV@ôÞ@@Wn@lLlK@wnIVJX@VX@lVVULVnkVVnKValUXblKnXl`UbVLÈU@W@IKV@@bUV@L@lXV@VXXblWnLVblb@JnLVUn@llb@x@ÞUV@nU`VÔmlXmbUKUVUV@LVVUnUb@°UX@UVzVxnlVkVnlVnaW@wnIn`@_la@ykÆVULxl@XLlmUUVakU@¥ÆwblUUaôVU@ÅXyVImkUaġ¥ÅUWXKmU@La@UmUUUalan@VUnK@wmmL@VlXLVVl@VI@WX_m@a¯mKUkwW¥UK@_UWWLUVkUWL@WUIkVU@JwkLUUmJVI@WkXm@VmkKUIU@mmm_@VUV@kJċwUU@KUWkkW@IWW@km@klwkWVkkUV¯m@kWLU`mIkmkXm@@`@L@xUKWkU@VL@JUU@mbUKVa¯WVnL@`lXUVkU@xW@UbUWVU@UJ@lnU@mnÈmVa@bULwUb@@VkxmUUUVK@IUmk@akm@wmIkK@bVWXkm@wULUmm@UVW@UbmbkKVnU@WlxVU@UXmWUXmlnbUl¯Lmn",
              ],
              encodeOffsets: [[113378, 28981]],
            },
          },
          {
            type: "Feature",
            id: "4301",
            properties: {
              name: "长沙市",
              cp: [113.0823, 28.2568],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lVUllXkx@lln@XX@JlXXlV@LVVČxlI@VU@Un`nnV@VJlLUnn@lW@XUJnIVVlKx@IVlUVJ@XXKlVVUXKVX@`VLX¦lxVnL°an@bkmVaV@XL@UKlU@llLXUÞJWkUknaÆxnknK@w@l@xllUXUJVVUbn@blV@bnLnKVaLVbVVUX@W¥XKVLVVklUVyUVÈÅlaUK°wnnÜbnVVLaVV@n@VmnVlIlJna@Valkn@na@amwm@UXwK@aUUVUUaVawWK@kU@UaW@kKUU@kW¯XWan@kmmÅ@@I@U@KmLkaVUKkLWVUk@UVmU@am@kkk¥UVUKmaUb@UbI@aKkkWm@W¯K¯b@VmaULVxUXlVk@UxVJVbUb@xUL@ULWWLĕmxVVL@VbKUwaÅ²WwX@@WUWLU@VbkV@aU@@VUnmJ@VUn@VLUK@UmUIk@UÇmU@@UW@J@LbUmVI@aUmW@@bkXUx@lmLUbm@UbkJ@V@XmlUbkKm@ma@kUaVU@aUK@mImJUIkVUVUakbWwka@UWKkLUamKUXm`Å_UULmaU@@lUV@X",
              ],
              encodeOffsets: [[114582, 28694]],
            },
          },
          {
            type: "Feature",
            id: "4302",
            properties: {
              name: "株洲市",
              cp: [113.5327, 27.0319],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XUnwĖKXXVK@VK@wVaUaUIVwl@kUVWUwVKnb@U°a°LX@XnllL@bJVa@VanbVLUV@al@@UV¯ÅÇ@Ummkw@¯yVwnUVVVUkmWVnKVUa@WXkVKn@lUVUVVVXIlV°VnI@VlKnV@mwVm@LXKWkU¥wWw@k@mX@KX¯V@VUVa@VnKWkV@VUkm@aWa@wkUWwkmV£VÿXUVL@mVIXaò@nW@aU@@am@aUUUmXmWUk@nUW@_maVmwUkamaUL@awW@akI@UxUm@kmKUklU@bzVm¯xUVU@XVxm`kÈlxXVW@¦kVUn@xxKUwÅKVXUJWnXmVUxWL¦XmmKbmUUwW@UV@k@VLnlbLm`@¦VVkX@`WIUxVnlbWVbXIVlI@l¦Ç@UKmbkW@UbUVUl@n@VmLXb@JWbUnkbVxUJUxWXXlWL@V@V@XXJWxzUVVVVKnXW`@bkIUlnLVJUbUIWVXlWV@XklVbnn@xl",
              ],
              encodeOffsets: [[115774, 28587]],
            },
          },
          {
            type: "Feature",
            id: "4308",
            properties: {
              name: "张家界市",
              cp: [110.5115, 29.328],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@InWVw°w@@blUKlUlVU@VUUUlW@aöUlUlLÞ@@aVKXwlK@UX@@UlwkVkUm@m@ÅV@akwVaUkUUlUL¯w@UUm@UkKlw±UULVn@l_XyWwÅ@VUUmJUXU@@mmU@kxW@UaUIWbU@@mU@UxnUbmKkWJkUVal@aUkUxlW_@WUIU@bkKWUJVnUbbWblU@nl@XnVmV@nmWV@LXl@XJXVmzkJUXmKULm°Vb@xnVmnUk@VnnlUb@nm¼m@ÛÇVl@Xmnm²mL@xK@LUl@nULÆx@V@VXVWbXXl@nLlm@bVKXWL°bnU@VaVU@mVwJnwVK°zn@VVba@Ċ¼",
              ],
              encodeOffsets: [[113288, 30471]],
            },
          },
          {
            type: "Feature",
            id: "4313",
            properties: {
              name: "娄底市",
              cp: [111.6431, 27.7185],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lLnJ@xln@bnlV@JLVUVnVlw@U@VaxVK@abnUmÇnV@km@I@VUVVXVaX@@wlVVUkW@_mKXU°UbVLnaV@V@IUKV@XlVL@w@K@_n@lWlnnJV_XK@l°nU@WVU@kV@nbVKVl@nLlLXU@lmkw@nW@UKVa¯IVn@@aVUUKl@nXVKVn²aXblKnLlmVI@KUU@akLUaVaUXm@a@wVUVKnLnWlXln@@U@anUVm@UInm@IUK@UmKVmU_kVUwm@@VmLK@VLaUaVUUUmK¥ULkVWaXwWa@UXImWUaULUUWKk@WnXbWVWnk@UV@bU@@bJ@bV@XkmbUU`VbkaWz@klU@b@VwUL@bV@U`ULVL@VUK@Xm@XWWIUbUxm@@lkkÇwVÛÇW@¯ÅUJ@xIx@@VULmKUnUxmKULUUm@@ULUJkIWJ@b@LJUWkJWnUV@nnÜ_nJxU@VbnUxlkb@l@",
              ],
              encodeOffsets: [[113682, 28699]],
            },
          },
          {
            type: "Feature",
            id: "4303",
            properties: {
              name: "湘潭市",
              cp: [112.5439, 27.7075],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Æ`n_VWnLVblKXL@VlbXxlaVbUVlUVJnInJ@VL@bUVVb@lnbn@lLVank@W@UlIVan@VanK@kVwlW@aX@Vn@bUJVna@KIX@@VV@nVÈl@VJn@VVLK@UVm@UnIVm@UV@@blUUaV@XKV@XW@XxÆ±bVxLUa@UKWk@wmmUalk@WXUWkXUVJVaUImKVklJ@aX_mWULUUVUyXwWI@W@U@UXKWkXWVwU@±_U»ÝKUaLVbkJkWmXk@UVVmIUVJ@UU@UamLmwUVU@mnJ@VUnmV@b@Vm@kkWmXmKULUV@x@bWnVUbVblK@bVV@LUJknmKkLWa±bUmULmWk@VLUV@bm@U°JUbVLX@@mlxkn@WVKkmK@k",
              ],
              encodeOffsets: [[114683, 28576]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/jiang_su_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "3209",
            properties: {
              name: "盐城市",
              cp: [120.2234, 33.5577],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n@°ĀÞ°@¦ULWKkx@bkLWb@lUlVXXJVbnUKmxXV@bm@@XLÞÜ¦XlVnmzVJ@n@²ÞôkÆÞaȰĉwnǉÜóéVÛnĊīČǉĉ@ō@KÞUlU@kklÇÈÑÑlġXɛ@UġaU@U_W@n@kaUL@VW@kKmkUV@bkbWW@bkzma@JWI@KUKUL@U¦`@XUJU@KmXw¯KXkmy@aUIWJXXmV@K¯UU@@bVL@¤VLXbV@@JVXVK@JVn@bkKmakVVXUVVVlI@`U@nzVVb@¤n@@UlKXLVVI@V@nV@V@ÈUx@óVōkÅWó@mU@bk@Ýwk@WbXxm@@J@zV@kVbVnLWVUXWUXUWLU@Wl°z@VkxU@UVWIxWJkbĬnW@@bUl",
              ],
              encodeOffsets: [[122344, 34504]],
            },
          },
          {
            type: "Feature",
            id: "3203",
            properties: {
              name: "徐州市",
              cp: [117.5208, 34.3268],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XKVX@WnIVx@K°Lnll@@I°KnVaU°x²mlx@VanU@ak@akmV@@w@Ua@aUwVwUw@w@UK@£kaĉlóIÇVk±@@kUKmVkIkxW@Ua¯UUm@UVI@WVIJV@@Um@UanaU@mI@J@XV@XaVlkXVaUUWLUyVIXmWak@XkJókJUL@KWkk@ULU@WalUIkJmImkVbV@lV°kXUKWKULUmb@VUlVnb@VV@IVKUUmU@ak@@bmV@xklUU@UKmV@nJVbkXKUamLUJ¯UUVmIbVVLl`@LLU`m@kXUVU@VlxUK@xkIWbUKx@VkVVnb¯@@U@xkmbkLÇKb@@XnJ@LmVkl@@XlUVkxakVVb@bVnUbU@@xVUVb@nIĊ`XVVôJ_K@xlU²KlkU@VaVVÈm@kVUVmnamUUaVXIVJ@ç@¥nkVLn@@XVK@VUX@JVUV@UnVJVLUJVLUVlnIbKnU@m°VanI@anVKVLanlKblKÞk@¦@¤@VKnLVKLKVzlWLX@VmV@VbnU°@UalkWXLVUKWkUUW@£Wa",
              ],
              encodeOffsets: [[121005, 35213]],
            },
          },
          {
            type: "Feature",
            id: "3206",
            properties: {
              name: "南通市",
              cp: [121.1023, 32.1625],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VJ@bnzWl°LxnW@LVVI@W_V¥@VKVL@LXJI@nbly@aXXla@aVUnllLX@@UVKlb@@mXV`V@bĢlkČÇÆȘ¯wnĕVĉVÿUƒUĠŦğlXÑVǵ@±ōLʵĖ¯lÇbÝÞ¯xk@Çkķén¯@ğġƴǫ@kVVlUbL@xULÇóLUl¤@nkVV°VLkxVb@laUXUKWĖklVX@¤UUkb",
              ],
              encodeOffsets: [[123087, 33385]],
            },
          },
          {
            type: "Feature",
            id: "3208",
            properties: { name: "淮安市", cp: [118.927, 33.4039], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nźUôÒɴèl¦nĖVkbmX@xVlVL@xUb@bUJVnUxlKVLÈxmzXV@lW@XVb@bÈVxnbVIXa°LaÆVVaXUlK@aXIÆVlXKVUlIXalK@alwXLVK@¥Ý¯¯ÿ@mVk@aX@mīlaXIwXJVUV@lw@U¯ybUaUġUÅaUKVknaġm@kUm@wÆIV±nLÆwÇnUUk@ƅÝU¯JÝI¯¦Ul@b@@VVL@l@LLÅmL@b@UaVaUWmLUKV¹KLWKX¥WI@mXk@UmaUVUU@VmL@WbkIUWUmVóIkbmm@UbVLUxmJkU@bkJWbnXU`WzKUÞÈlVbLmx@kè@Æ",
              ],
              encodeOffsets: [[121062, 33975]],
            },
          },
          {
            type: "Feature",
            id: "3205",
            properties: {
              name: "苏州市",
              cp: [120.6519, 31.3989],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôèĊVnX°¤²lxƒÈÜ@²x@J@b@X`nIUÆUUV@bl@VVnL@L@xJ@X@blJXnW@@`XbWkV@UbVxXUxkV@LóxVbUVW²VJĸklUǬ@ĢƳĠ°@mƒī°»ÈÇ¥ULUU±a@bU@¯U@KnImUVWUkmXUVU@lIVaUUVWKUbUkWKU¥n£WakJUkULK¯LKkVIn@VaUVUUUkVk@U@amUkJ@UUlwX¥W@@UkVmk@JUakL@kk¯ÝmJUn@nmVXlmbVVkn@UJ@±WUxV¯a¯KōbÅ¼ÇxUxUUlWL",
              ],
              encodeOffsets: [[122794, 31917]],
            },
          },
          {
            type: "Feature",
            id: "3213",
            properties: {
              name: "宿迁市",
              cp: [118.5535, 33.7775],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XbWnUJVzXKVVUbWklUWbU@@W@IJ@nVmbVbn@@V@UIUJ@XUJ@VVn°VVbX@lwlJnUVL@l²@lÈUôJĊklb@¤VL@@xVxUxVx@bVb@@xU@lnmnXmXLVmV@X@lxVnVJôLLXax@b@@KVL@bn@@m@@alLUUVaU¥nIV±I@mXI@aWWXU@LlUXWW_XWmaUwÇ@aaWUX@@kWUynÇwUKkLVwUmVI@aVa@wUKUk@wWnlaUmĕk¥ɳçóÑŹVmmzkVmm@a@Iók@@LWU@`WbXLWlkImJVn@`nXVbXmL@Vn@l@nUVl°Xx°U@LVĠ@z°@¦UV@Xn@VJmV",
              ],
              encodeOffsets: [[121005, 34560]],
            },
          },
          {
            type: "Feature",
            id: "3207",
            properties: {
              name: "连云港市",
              cp: [119.1248, 34.552],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@lzXxmÆV@@¦@l`XnlKXXmKnLlab@xmbm@kL@V@Vl@@VUXJXmb@@°Æ@èÈzlW°XĢJlÈ`lInbWV_@m@UUķnôw°ÆmnaVVÛVmĸ»Ģw±Ý@@mUInyUmWkÛ¥ÝK@Wn@@aWUnwVLmUaWIUWVk@kkJUVWLUkÅWJ@bkLWVUbÅUb¯KWbUJWXX`WXkV@KWVXX@bWJ@nJU²mJV¦UbVVkK@b@@nm@@aUK@L@@awWbKóKUIUmkwW@U@UnWKnmWn@bl@bmVUb@kw±n¯wVUb",
              ],
              encodeOffsets: [[121253, 35264]],
            },
          },
          {
            type: "Feature",
            id: "3210",
            properties: {
              name: "扬州市",
              cp: [119.4653, 32.8162],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VUXblVVVb@xV@kzV@lwVLUbVV@VU@VbUblb@nkĶ°IÞV@ƆVlmVÈÅxmKU²ÅJ@xVn@lĢnmbUlVLÆbĢVVbVaXk@VXKVVWXVWXUmKUaWaU@¥@£XWUUV@@ynam_VWkUVUna@ÆV@mnkWmXkWUW@k@@akkllWUI@UnKl¥I@VVma@a@I@U@a@anK@UmK@ÅVUnJlkI@aVwka@mVIUW@UWL@WÅbmIULkaUWUxkLUKWlXL@VImÅVUmĉLUól¯I±l@ÒUbVbUVVXUJUnVV@lnbl@",
              ],
              encodeOffsets: [[121928, 33244]],
            },
          },
          {
            type: "Feature",
            id: "3201",
            properties: {
              name: "南京市",
              cp: [118.8062, 31.9208],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@k@ma@kUUVmVIUWVUUaVa@Ñ²k°Jôk@Wmk¯KmX¯aUakKWU@XULXaV@@mUaVUUl@VmkaUXm@WUUna°IlmVmIUW@Uk@@aV@VVX@VI°»nmU@VKVan@m»UaU@U_@WlIUaaVaUala@¯n@kaUkUUWKU@mwkUUmmL@K@LmUUVKVÅImUJVkVVLèVLVU@WLV@nVÜULVUL@bW@XbWbkJUUVUxVXmVk@WUUkVmIV@nbnVWbJUkUULa@Jma@XkK@VVL@L@JLUVU@V¼nXlbm@kbUKmn@lVb@VXXVUV@b@LVbÆxXbl@@lV@UVV@XVK²VlI`UbVbUlVVn@WXn@@VUV@@KmbVLXÒLkKV@nX@VVUV@bnVllbmnbIWVXU@`lLlknVnmlLlbUmVInK°nUU@l@VU@Vn@@alI`VIXaVaVa",
              ],
              encodeOffsets: [[121928, 33244]],
            },
          },
          {
            type: "Feature",
            id: "3212",
            properties: {
              name: "泰州市",
              cp: [120.0586, 32.5525],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lUU@@y@In@WwXal@Þxl@@anVô@ÆXlŎôU@Vw@ÇUU@@m@UJUUWKkL@Vm@@£aUUmyV@@_kJUUVUUWlUnblL@aUmI@ULUW@IU@WaUK@£UK@aV@°V@LnUWWXIlaVV@£UWlkXĕVLVWb@kUalwUKU¯lU@mk£VôKÈVK@wKVaUkķlUI±ğ¥ÝUŹ¯ôm¦ĸ@XXK@VVXUJ@nlbUx@blJkmIUV@ÆnL@VmL@b@b@V@J@bnbU@UJk¦mL@VVJkXkll@b@@lXXVWlXnml@nÅU@mbUVlVUXn`mb@zU@VVWX@¤¦V@Xb",
              ],
              encodeOffsets: [[122592, 34015]],
            },
          },
          {
            type: "Feature",
            id: "3202",
            properties: {
              name: "无锡市",
              cp: [120.3442, 31.5527],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nLÒlxUVkLam@kVWUULUxVVVbUV@bVLUnnźÞVĠ¦XVUUaôw@KlUVwWUwVa@lUXWa@_X@WmkI@a@WI@w@KmKUUk@@aVUVVÅmJ_@W@a@I±wÛ@ƑÇkw±¯£mWĉUóçK¯VkUWK@XkV¯UWabmUaUUblln@b@xbXWX`@VxUblL@bn@Vb@`m@XbWnn@l¤n@xnVlUVLÆWkV@VbÞJ_nl@nKVU@aUU@mVk°WVLUV¯bVXbXlVn@VmL@xV@bl@nW@X@VVJ@²VJVU",
              ],
              encodeOffsets: [[123064, 32513]],
            },
          },
          {
            type: "Feature",
            id: "3204",
            properties: {
              name: "常州市",
              cp: [119.4543, 31.5582],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@LnxUbVVL@xnnWnn@VVXn@yImx°La¥n@VkKVwW@nXVJ@b@UVn@UnUV@Lb@`VLklVÞnÆ@VaXLlÈJmmVUK@aVUUaUUVwVKXVlUn@blKVUkwÑmKUVUI@±UI@U@WmX@k@aU@wnK@UUmWkaWU°aVUUK¯XUl@nVV@bUVmLk@m`ÝIUaU@lÅXUKkVmU@wmk£m@XmWan@@_Uam@@akKVaUw@W_XWa@w@akmm@mL@UJmnUK@@XnJWLkKUb@VxkWLaWVUImVULUK@L@lkLVVVllbm@@°kbVbUbbVbkJ@XV`V@Vbn¼",
              ],
              encodeOffsets: [[122097, 32389]],
            },
          },
          {
            type: "Feature",
            id: "3211",
            properties: {
              name: "镇江市",
              cp: [119.4763, 31.9702],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VĊKnVÆUnJ@UWKXkVLlKVwXVlbVKnJÆaķn¥°óÇIkWKUbÅ@mUÝlkUK@_a@KVUVm@mVU@@aUIW@mXUxLUlm@¦bK¯nwJzm@UW@UmmXmm@wKUUVamwKm@UbUL@Vmn¯¼JUW@UUU@@bl@@VVXJnnUk¯JmbVVXn@VWlbUnk@VVUVb@nU@WbKWV@XVlLVb°bnW°Lnl@X",
              ],
              encodeOffsets: [[122097, 32997]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/jiang_xi_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "3607",
            properties: {
              name: "赣州市",
              cp: [115.2795, 25.8124],
              childNum: 18,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@`l@Èbln@KVLl@V@bÈlnKXkVlVL@lJnb¦VKVVnXW@w°@VUmlnUV`UbVUV@xnKVI°KXKVkVL@al@XaLVlULWVVVL@bx@VXVmb@x@VVV@nn¤lb°b°KXXWbX`lbXxz@x`VIVUnKLxWXLVKVbVLVU@wnW°b@nalXmXVJn@U²mKkVlU@@xlnaVmlKn@JVLlnVl@XXÆèVlUX@xVLXVb°W@wnUWmXk@KLVwUmUkUKUw@wVaVK@k@WnkUKWkwlmXL@KVUlLVKXmWUL@aL@malaVk@aaanX@VVUblbJnXaVwn£K@UWmUk@UaWIV@bJW@KmmU@aUUUkmKkVKlUUnKVUlVaV£Å¥WUUK@UkUUw@m@mIkUUWLK¯Uw°¯@wUKUbKm@kkKUL@UUKV¥U@manw@k@U@Wm@@U@WwkmwWaUU@UUmV¯kw@@kmkKkUW@UK@ÅV@XWWkXa@Ul@Va@KVaUUU@aXwla@UkVWaXk@K@lmkUmV@Vmbk@»XI¥VUkVUVU@anKVUKUalU@wX@@a@K@ÝwL@UnÇlUIkJmn@bVVb@VmnkLV¯U@±lIWm@kaUI@aÇU@K@KUIkbWbJUIUyX¯UbU@méUUmUkWKxWIkJm@V¥U_UJUwmVkUU@@knwm@UmkWJkL@n@VW@@U@knm@kUml@xÅx@@XUJlb@VXJVxn@lbV@lULnV@VlnV@bWV@bXL@lVLVbV@blLn@VlK@xln@bX@laLVbnKUVVbKlXVVkxV@nnVUblV@@z°WWkbIkWL@LUJ@bUI@b`@UmI@mkK¯XWmUV¯@UUVUUam@@VULWUJIm`IUJKUkW@UxnWbnnmlXbmIUVmV@Vnb@VLUKWLnÒVVV@VUL@kJUV@bÈ@V°@XVV@l@xUz",
              ],
              encodeOffsets: [[116753, 26596]],
            },
          },
          {
            type: "Feature",
            id: "3608",
            properties: {
              name: "吉安市",
              cp: [114.884, 26.9659],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lxnb@V@bV@ln@nlIn@blVXKnk¼@VUKWL@bL@`UXU`@V¦XLĠ@lJ¦@nV@l°nn@mVXna@nbKn@lIV@VanJ@_lKVVnL@LK@Vn@VbUVanKlLnbnJVbnWVnVVanI@Vb@LbVKVanXVbVJVU@aXLllbôlÆ¼XxVLVK@Xn@xnVVVmb@LnVVKVXV@@mnaVXUVnVK@_UaUmwnKV_anKVL»K@¯ÝU@U@kWlUnlknKVnaUkma@UIUwl»Åw@VwV@nn@ÈXlKVmna@kVw@anm@n_WWk@mUkUK@ImkLUnbkm@wV@klUnLV±m@UInWkWmb@¯amX@xUVUKUaULWKXwKmLUVUJ_@wyWwkaW_XaWW¯L¯akam£@mUU@U@wnaWU@Uw@aUKUXUVKUkKWbk@@bUKUlWL¯LUJmLwU@UVaVU_VkmnUV¯@@xXmWUUUL¥makI@UKUkWlLkmÇ@aUk@UKL@kmÇak@_VlkL@`lbnlLVanLnbmVÆln@kJlbknmKUbÝmmwULUK@bkLWKULUUma@Kk@UV@L@llbVzxUxnl@bVLm@IVJXVlLV`@bn²@J@V@Xmbñ@WbUJ@bm@@LUĬU¦lV@xXb@blnUV",
              ],
              encodeOffsets: [[116652, 27608]],
            },
          },
          {
            type: "Feature",
            id: "3611",
            properties: {
              name: "上饶市",
              cp: [117.8613, 28.7292],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VI°`nm¤²@bVJUVVXUl@Vmb@xV@XbmVV@lkLmbn`VbnU@VaUnbVllUXVa@w°VW@_VWLnVlbLVbnlKnVK@IUW@_@am@ÑUólK@U@WU@VwU@UI@aUUaX@kwmJV@yX@kan@mkwVmmI@aUU@aUUW@kVkV@@anK»XVWnIVUl`@_W@wlUV@UWKnUbn°InJlUV@VnIbWn@VklL@l@Vn²m@U`kI@bWJnV@°VXnJmXVmx@VVL@bkLmWULUmU@bWXb@llnX@xkxVVnVV@¤nLnVxnJVXX@bn`VIb@blmlLnaV@blWXnlUnbl@KVanUVmm_XK@kWWnaU@UnaWUXaXamUkKmXUWLX¯WakKmnUWwXa@KW_aXWW_@WnIVl@XULnWVknK@ImyUUÆbXKÛ@W@IÆUnVÝlkVK@mUIVwkUVaUm@aVIVyXIaÈwmmk@UnanVUmÅaó»lwW@kkUVmUK@WKLUmWULkamKLk@Wa@wk@UU@U@mbUIWVKUXWmkUmVmU@LkakKw@w@U¯UUn¯l@bmn@xkJWxkL@VkI@mkmJUI@V@b@VVxnbWlkÈkVLbkKmVL@V@²nxWkLUL@xlKVxbXmVnWJ@Þ°@nxUKUw±`UImVmnU@kalm@akwU@UUJmxU@@U@kU@Um@@KnVm@kKmkU@@WUnkLWxkVUwmKmLkUbmKUbV@xUnkJ@n±UxVXUWJ@LUblUnm@W@nknUJUVm@kXllknVbÆKVVb¼V@Ul",
              ],
              encodeOffsets: [[119194, 29751]],
            },
          },
          {
            type: "Feature",
            id: "3604",
            properties: {
              name: "九江市",
              cp: [115.4224, 29.3774],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WUkVUkmaVUb@mVUam_nalK@kUnUWaU@@wna@UVkUWVUUI@a±n£m¯_JU@ĉ¦Ul@UVKmmLlm@ğ¹m`Uk¯@@UVK¯@UUK@amkmKkVVUa@UkUKUaL@VVXUJ@n@WUbnVb¯V@LÅlÝIJÅkÝm@UaWUU@UmUXmmwVUUKWUX±mUam@kWzUaVmÇw@aÅLmKXUWKkL@W¯IwVwlkUJ@Um@ÛÈWKUxWkaUU@KkLVl@UKUX±KUb@nVVUbUVmaUlUL@aUL@@nUlWzX`@V@lx²@Vlb@bVÞ@°nl@UxVL@lUbVV@n²xVUVmnUÞbaJ@IV°xnbl@nbÆ@VwnK@VnXlK°xnUlVXV@Vl@L@lk@W_XK@KkWxUL@JnVx@aX@VVUaIXlmL@bVVX@VbnKa²XVWk°a@UnV¤nbmLmW@XbmJUbVLaÞKL@K@U@aVKlbV@nXlJxV@VnVÈÞKôbźĕČmV@Ċ²xÆIV@Þ¦ĸ¼ÞVlVÞnxln°JkLXWVUVUVwnJVI@yn@lXlaXmWI@w»ma@UmK@akKkXmW@_kaWakKWk@@K@IWkUa",
              ],
              encodeOffsets: [[119487, 30319]],
            },
          },
          {
            type: "Feature",
            id: "3610",
            properties: {
              name: "抚州市",
              cp: [116.4441, 27.4933],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°V°UnÜ@n@lnLlV@bV°LlnLllVzVVXlVV@@L@xX@WlXm@UVL@V@n°kVmVUnKlaXxVbnlU@lVVnaVI@aX@VJ@V@bb@Vb@X@lUL@@VlIVm@wUVanLalVnKnLVxlUXwlKVm@k@Una@mWIXKWUÛVk@a@UVWn@@kl@@WXlW@_Um@UVK@aLnalInWV@@xnI@¥Km@kKmnk@mlI¤laXbVblknV@UKXVlUXa@@Unw@±mU@ak_±a@UJUIVKW_Xa@aWUK@mmUVa@IXa@UWmannlmX¯WKXwVUVw@XUlK@klJXa@kkmm@Uww@¯W¯kw@WmbULaUUU@mVUUWmkUbKmkkK@akU¯¥Ulm@akU@m@KVIVV@KUkUVUkaUWbmIkaVaUU@mWbb@bUlkbb@nK@bKXVWnULkKUV@LWKknlxXVLml@X@lULUb@xVxVLVlVnUxK@LWlXnmV@x¯XaWUUK@wVWUkÅçm`@mn@bUx@lmbUnkLÇWm@mU@Ux@Æxk¼VxVJ@nbVlmbUmLklmkVlX@VV@°Þ",
              ],
              encodeOffsets: [[118508, 28396]],
            },
          },
          {
            type: "Feature",
            id: "3609",
            properties: {
              name: "宜春市",
              cp: [115.0159, 28.3228],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VlbnK@b@JLlUnx±ĀXxÆWX@l@V@@blJ@nX@xUbVVUbVV@bVmnmJ@bmbm@klUbLmb@lVb@xUX@bVVVbV¤@LVVbXlVwLXÜÇn@@VIlVkUxx°J@XlKXLVWnLÆK@bÈxUnVbylXn@VbnW²XVLVVUnxWnnV@VVVXVbn@ÞÆlIÞJÆk@K°UUamVa@UUU»@wV@VkkUKUVW£U@UmW@@aXkVUnVlKVVUUkVmU@kWaUanUVVamIX¥W@@aUaUVW@_mW@UnIVVn@VbVm@bVL@anKVUkWKUXVIkx@nabVKb@nVJ_V@VwVUVVXUlUUaV@X@VblabnKlkVaXa¯@m@UKVUn@WXkW@@w@KU@UWkUUUykkmKk¯KU@akUmK@k@mmÛ¯V¯U@L¼UKmLbU`mLxVnVb@`LmUVUUWmb@nU@UWULmU@KnaUUmUwmJ¯IUJWIkVkaWVUIUlWaUIUVkKmbUIÒlVUnn@VlLUJ@bUX¯@aWVUKUXKUbm@UwKWa@a@VkUWn@Uak@mbXWJXbm@mLaWVk@wL@WmanU@knwWmkaWLKWUXaU@¥lUVVVbnw¥nKV»@aUk@a@UJ@kmLma@mbUWnm@ULÇº@LXnmxUm@UbkbW@@akLmWk@UXmJmUkV@VUXVlULmKUxkL@lmXnJ@Xl°Vnb@bU@WbKUX@VmKUX",
              ],
              encodeOffsets: [[116652, 28666]],
            },
          },
          {
            type: "Feature",
            id: "3601",
            properties: {
              name: "南昌市",
              cp: [116.0046, 28.6633],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@X@m@VIUW@UKVbLlV@VVbUlUnLnl@bVL@V°UL@V°@Vln_Ġºn@knKnLVU@VkĊ¥Vk@U»UaUÅLUalmkklWn@VUVIlm@mXn@VmkVa@KXIVUWVw²@m@U@VK@k@WUa@a@aU@IUW@@bUJmbUU@kkVmUaWwkbmLUVUnlWbUbklmLakbUaW@U@VbkVWVUUUVUx@U`UI@maULamb@lwJWUVXLlUVmL@bUK@aUnUam@UUmJ@VnX@`UXVVb@bX@W¦nJUbUmVVbXb@lVUnVlVUUkLmUUVWl@bX@VnV@X¤VUVLllUU@@x¼VV@V",
              ],
              encodeOffsets: [[118249, 29700]],
            },
          },
          {
            type: "Feature",
            id: "3602",
            properties: {
              name: "景德镇市",
              cp: [117.334, 29.3225],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VVX@VbmzxUlU@mbmL@V²xVbUVVblbX@VkVykValKVI@bn@n`lVWnX@lL@WKnVIVa@¯nK@alIXJVIVWUwn@nUnK@alI@a@anKm_aW@UWmIUwmmK@£UUmUUlwwW@km@kWaXaV@VnVKnXlK@aUK@UnwWUnmIUW@¯mUXI@alJV_n@m±@U@kkKUlm@XamJ@UVUkmI¯JmamVXL@VUkV@xX@`k_UVmJUXW¼mL@bU@UllX@VV@bVV@bnJUnlx@nmb@lW@zUnIlx@WbVV@bVJV@UxV@@X@VkLVôÒn@@b@`VX@J",
              ],
              encodeOffsets: [[119903, 30409]],
            },
          },
          {
            type: "Feature",
            id: "3603",
            properties: {
              name: "萍乡市",
              cp: [113.9282, 27.4823],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VWnL@UVWLXaV@@ama¯Uk@WmInW@klKVwnLVKUkVW@UlUnVnIVWl@nXlK@bX@laVan@VnwWm@KÈ¹VK¯m@kmU@¥kIğ@WKU¥@V_VW@_K@aXKVL@Ul»mWLkU@amkJm@kmU@@a@UmakwU@Xl@VXk`UIW¼kWWX@@lxV¦XlW@Ubn@mUkL@UmJ¯UkUWVUaUlm@UXWlnUJ@LmLUnXll@bUVUUmVUn@¦xlnn@VÆÈU°kbVVxllnL@VnVVUl@VanL",
              ],
              encodeOffsets: [[116652, 28666]],
            },
          },
          {
            type: "Feature",
            id: "3606",
            properties: {
              name: "鹰潭市",
              cp: [117.0813, 28.2349],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@XV@nlL@lUnm@Ln@@VlV@@VV@nwVI@VVlx@bknlbV@nmnUVJ_²VxVLw@m¯@ÝXImnUWaUwkL@wVKlKXmw@±@UKnUlLaKlUlÇXkmaUw@U@a@UUkwUJ@zWJw@WbkVWUL@VmUklUaWakb£kJ@nmlnlL@nL@¦mJ@wU@mXkJmbK@bUL@VVn@`kXW@Xk@@lm@UX@V@blÜUXVWLXJ@nmb@V@l",
              ],
              encodeOffsets: [[119599, 29025]],
            },
          },
          {
            type: "Feature",
            id: "3605",
            properties: { name: "新余市", cp: [114.95, 27.8174], childNum: 2 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@m@@WULUKWwÅ»ókakkWK@bUVUIUamWUbULa@KUa@mJUbmUXUmUamImakKmLUbVUam@@UL@KKmUUkL@`mIUb@U@V@bVl@b¼UmL¦mxUaUUVk@¦VWbXVLXKlbXnmx@lmVnb@XKxl@XUbnKn@WaXIWnal@Vb@XmlV@U@bXbLVxn@VaLVWVLXUb°@VW@aVIkK@UmVmkUÑVJnalLVUVJXbVkVJXUlblUXJVI°JnI",
              ],
              encodeOffsets: [[118182, 28542]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/ji_lin_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "2224",
            properties: {
              name: "延边朝鲜族自治州",
              cp: [129.397, 43.2587],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Wxĵm@ó¤VX@@xÜ¼ƨ²xWxVV@XVbWXllaÞU°Ċ@ô¼LôÝWanV¥Ñnĉ°¥ÅX¥°¯@w°w@»°k£°mÈŹmÈbÆŎ¦K°z@kxl¦UbU¤klVKŤÞȰ@@bV@nVVUlÞ¦lUllVlU°ÑU¯V°wbXxl@V²@nô¼ó°kmVk²ĕw@wVÞÞ@@Ġö»¯@bnb°mÞ¯°V°ÈJmX¥mamUÅUlaU¯@wKkl±n@@wkÝVUUl±¯I¯bal@kLmakb@ġŹé°Þb°ékLmwXaÅb@bVlbVbÒVbUbUUanwakbVUVak¯ULmxV°UxnôŻX@JXklbkbĉabWU@kWUU¯@@klm@@Å@awWXlKkI@WbUaVIUanU@ĕ¯KmUnWUwm@£ċèkUmbUmm@@nkJUalwk@@nmWUan_óaWmnw±KIwl@UmI@an@@mlUÅmV_KUk@U`@_KUmU@U¯mmb¯@kbImV¯LkbKÛ@ÇnɱJóaÝĢkb@xÒÇll@²VÆUVVUÇ°XóxlV¯lV@bV@nx@¤@șŎnxV¼knJnKX°¦UlnVbUbÆVnÞWVX¦llb@l°VJôÒnLVbbX",
              ],
              encodeOffsets: [[131086, 44798]],
            },
          },
          {
            type: "Feature",
            id: "2202",
            properties: {
              name: "吉林市",
              cp: [126.8372, 43.6047],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôlzaÈV°K@mLWlnVxUVÈ@ÝĬUÈnôLa²VmĀkV@ĠĊnU@bV@b@nl°UVnÞaôJ@bV¦mlkbmVXx¯@VxmnbbÈKV@bÈLwĠyônmnbÜ@nnVx@n²KJ@kal@nxÞULź±Vwkw¯LWWUkŎīVww°yVĕ°wÈVlkÛ»@wW@Uô£@nĶXwWaUamKóÑUI¯@kakkW¥XUmÝÅUVaUamVk¥W¯LmIlmU»mwȚō@£kJUÇk@am¯y¯UVwa@wġx¦K¯X°Ċ¯¦U°ċWULÅa±b¯@UkÅWmVkIUlóċ¹`óIlXWXxmbULÝbƧ@x¯bÈl@x¯zaÝ¤@nmVWb²bmn¯J¯Ò@n",
              ],
              encodeOffsets: [[128701, 44303]],
            },
          },
          {
            type: "Feature",
            id: "2208",
            properties: {
              name: "白城市",
              cp: [123.0029, 45.2637],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@óǩŁ@WlwUaƑwÛÅÇéĉamKōÇ@IôġVȁÑŹçÝUƧċĉwóóÝ@Ƒ»ğL¯ll²@ƆÅV@¦mÅb@nmlU²VxlUn@VbnWbÇbkÒn@èlnlUÒ°Lx@¼ĉb@ÒUċxÅènLVxÒbÅJ±a@_ÅJÅnVbKlnUÜĊ@UxXVÆnmVJÞ¯VĠwXw°xWLxKV¦ôUwVÝǬóÞÞ¼ÞkVôȘxÞUlVn¦ÞĊa°wb°@bÆwlŤL²`z°@V@@nJVnl@@¥nUmmn@mwnmmUnk@mlwUaLnwn¯°anWakIÇmXwÆamUXUlJXaUUklKUknmÞV@K@VWÞ@VkUwV",
              ],
              encodeOffsets: [[127350, 46553]],
            },
          },
          {
            type: "Feature",
            id: "2207",
            properties: {
              name: "松原市",
              cp: [124.0906, 44.7198],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@źèȂÒUóĢ@JŎÈLnĊbÈêÜÆƒxVbkx@XǪłôkÞ`Wb@n°abKnVw°`_X`W¦ĊIkmVakwKx°UÞbU@ll@°¦VWaÞbxÞI@mVI@VkÅUWK¥nLa@@È@°Æ@nU@KÞalkUwVékUWwkUVkkJk¯@»ókV¯ÆÇI@bĉô¯@ķw¯nmmÅL¯wVUÞy@UówÇLkmm@@UóxkkĉmL¯wVwkWWXmLõm@kÅ±V_ô»ÛÆ¯@VaVaĠVlmğwķUóÝƽ£ÇJkbǫaƽLW@nxÝ¤kzy¯XɅm@VôÇX¯Ė¯ºÝnUnLVlUÔmV",
              ],
              encodeOffsets: [[126068, 45580]],
            },
          },
          {
            type: "Feature",
            id: "2201",
            properties: {
              name: "长春市",
              cp: [125.8154, 44.2584],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@U°xÆKnn°mĸx°@Ċó@aÈJ°ÅUôl@¼l°IllUlVXxlVUêVxkllnÈUVll@Vx²IÞ¤VUlVnIôlÞlwô_bVaĶLXÅÞÇ@K¯@wÛaçn¥¯WXyW¯XwUmmÛ@manómğzxÇK@aUÇLamanUw°@WwnUalnk¥U@aóIÝbUm¯Vmk@@aU@amVğĉ@lUnÿ±UbóKmVÇÞī@ÇVUUwmXkKn@L¯ÇUbyókōè@bn@lÝX@x¯ô@ÆUV_maXm@aóJWxnX@VVnĖVnUJ@nōÆÇ¼V¼kxLklÝw@xx@zV`ÅbmxU±xUnnmknğUbUUb@Å°Üó¼U`Æ²@lönKnXWlXUx°xnKĊllôw@Vn@lnÈKôx@VÝzV",
              ],
              encodeOffsets: [[128262, 45940]],
            },
          },
          {
            type: "Feature",
            id: "2206",
            properties: {
              name: "白山市",
              cp: [127.2217, 42.0941],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ul¦kÒÆ°IlÒU¤ôz¼lJUnÆXVl°@²aÆbVKČXV¯°¥¯ĉ°WL¥Ģw@xbUx°V°znb@ÈlVlI@w@mU@akU°kUôwWÈ¯VUVUÅ±U@kÈkÑw@laÞġUÞ£@ƅKnÑĢ¯@WaUaVUVkkw@a¯@¯ÝVXnW@@WkXmK@xkKUb@bW@Uw¯mmb@WKUbmUbUaWbJĉIVW@Il±LkmUbUm@nkKWa¯n@`UbmaĉL@bÆ@W`L@n¯Xb@kb@xL@VkL±mlUIU¥mL@lÅx@_la@UaV@kmmK£LmKUnÅKVbmXVlèĉUUbmlĢÅ¤Il¯bÇ¦l@ô¼Ģ@x°l¤nal@xb",
              ],
              encodeOffsets: [[129567, 43262]],
            },
          },
          {
            type: "Feature",
            id: "2205",
            properties: {
              name: "通化市",
              cp: [125.9583, 41.8579],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÆlXnĠxĢ°lÈ°K°kXm@¦VbkŤJnÝ¤kVÞVVkÈb°y@wkÇ°awƨ@aÞKVnaWwXWkôJ_ČºôVk»óyV£kÑJÅ¯lÑk¥Va@wkbmk£¯@wġó»@kÈ¥°akJÆ£ġnkVaĊVkçWUnUaÆLVmnLKU±@m@a¯UbmV¯m@_KUaÅWó¹@UanmWak@@wmI@y@mkJVa@UaIkJ@n@Um±kkxmIkbÇm@°bXnV@°ÈmlÞ¼¯XVº¯LmkWWXLmVVlkn@@lnWÆVxbmnm¯lÝaVÈè@¼VbÆ°ÞUVJkxIxIV¤ÒXxmn",
              ],
              encodeOffsets: [[128273, 43330]],
            },
          },
          {
            type: "Feature",
            id: "2203",
            properties: { name: "四平市", cp: [124.541, 43.4894], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ɇn°WzlyÞ£mwX@ƾKǬblaÈIƾ¤ôÞĸVĠxnmmV²wVnwÆaU_@yw@wÞxlkKlwU»È»ŎÅ@mVIUmmĕUU@mWXwIô@bWnnbU`V@Å°ó@wÞW@km@aŎç@m°Ñ°Inm±aXaUn@mƑU¦@Ç¯aU£aUġ¦ÅÒJōUŻókUÇ@¥¯ak¯mUVak@@aċçÅaUm¦Ý`XbÆ@n`IxĊÞōÞml@Ub@Wl_¯JkÇUÝÆÅb@nllUb¯±a@WĉJġĀ¯Unóm¤xôaVnxôI@xV@bmÆ@lnLmÞ¯ÞxVb¯þ",
              ],
              encodeOffsets: [[126293, 45124]],
            },
          },
          {
            type: "Feature",
            id: "2204",
            properties: { name: "辽源市", cp: [125.343, 42.7643], childNum: 3 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@żôŎVIÆÑĢ¥VbV¤°bÈ@V¥ƒÞ£lÇUUUÝlÞ£mţIlUa@¥nlW¯L¯kÇġ¯ğwWmÅk¯UVUbWlXlmnbUx¯xVVknlUbVÇKUb@VnbmlnzUº±bmJUbWÈnèmÒ@X`WL",
              ],
              encodeOffsets: [[127879, 44168]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/liao_ning_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "2102",
            properties: {
              name: "大连市",
              cp: [122.2229, 39.4409],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@IÞmVk@wXWÜbnwlLnU@nLlbXW@awnbl@XLa@Ċ¥@LULnJ@xVnmV@VXXV@VJkn@VÜKXXôJlbxl@IVbnJVLUbnlnVwJVU@XUaUUlwn@°nVKnV°_VJwl@nwlVIXWlIVVnK@IWmkIVaVU@WÈUlmU@UWUalkXġŻ@kI»mmakUmĉUŁV»²ġVĕ@aUU؍IɃ`ȃ@kw@Umwĉ@WķÑIĉÇbÝLkymbIwÇmÛbmbU¯ÜõÈkÆVbŎxnXVÆnǪ¦b¤UxÝnĉÒmĊVÈ¤ÈbÆ¼ĀÆÆÞźbVVbX°²¤",
              ],
              encodeOffsets: [[124786, 41102]],
            },
          },
          {
            type: "Feature",
            id: "2113",
            properties: {
              name: "朝阳市",
              cp: [120.0696, 41.4899],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@na@UVI@mÑWkaV¥UI@wl@aÈbm@wVak@@K@k@a@UUmUUalmU@KÇUÅ±¯@±kUKVkUaaU@¥m@@¯k@WLUmkn@mmIkm@amU@wVmkU@Klk@UmaXIWWULaULVbmk@UUmUk±_Uym@mbkImaX¯WWxWKzU@WkJWwkV@Um@UbVVVVXb@VWX@W@Vkb@VnUK±aUUlwXÇWKknU@mmUkLUVVUUVUawbkKmwnIkJ@nmb`kmVkLWwUm@UUUK@UmaUa@UUaWK@mU¯Wkk¯VmUUxVXUVmL¯ymXkWUbmXUKVknWx¯JVnkLl@VVxnxlĀVL²WlXl@bÝVUn@bnlÜaXblIVl@@È¦@VmbXV@@xVVnUn@`°@VnXU@K@VV@VmbnVn@ln@bx°Ub@bLV`ÅnW@@lUnnWVU@Vbkl@Xl`XxVUblkX@°¦VUVVbUlkV@UbVbkLUxmJkX@bbxVKÆlXXbnnala@Uk@UVVklKVUXKVU°KVan@VUnLKVLWVaU_@mmUXa@mwXwVkVWXkk@k@klm@wXKl@U@KVUUUVaUV@alLxUx@b°°VnnVxlIXJmxLUVlV@bnX@VbaVx@XJ@bn@VVXÈl@llX@lUVô°°@ÞVbn@Vk@VW",
              ],
              encodeOffsets: [[123919, 43262]],
            },
          },
          {
            type: "Feature",
            id: "2106",
            properties: { name: "丹东市", cp: [124.541, 40.4242], childNum: 4 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lzXJU@²x@@V@bUVmKUn°n@lnVKnV@n@VlV°WbXn@VzJ@¦@bkbbUl@bkbJ¯zWULWbklVnb¦VJ@K°Ukl@@WbVn°@Vm²UnX`UÜLXmVXlKVbUVVnUbnX@VUL@lUbWx@²kl`n@Vlb@nUVWVLVU@aV@²bl@ÈmxWXVÈUJVl@laWnXKÈkÈ@Va°bÆm@XV°IVV°UnalVUn@UwVU@@VVJI@bl@XK@wWmXUUVbkJVXnJVI@mknwlKXL@`l@VI@UUaVKÞnaVm@aÇ£XWU@aÇUU@mbkKm£@WWL@@Kk@klUbWKUkUU¯UõÛmUUaVUU@WU_W@kVkJ_WKkV@bUL¯¯±mk¯ġğÑ@UmwKUaka@am¥ÝIUWmk@wmţLKʝbȗKWĢklVbX@VVknÇV@XUVUblJXn@J",
              ],
              encodeOffsets: [[126372, 40967]],
            },
          },
          {
            type: "Feature",
            id: "2112",
            properties: {
              name: "铁岭市",
              cp: [124.2773, 42.7423],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XJm@¯mXUlnVbUJU@bV@UJWL@VXLmJVbkXlJXxVL@b@V@n@b@`Vbk@lxknV@VVV@bUL@bV@@bVK@VXLWLXJ@LV@nbWJ@IUVx@LVJUXVxVx@VV@@LXJWL@VU@@L@VnL@bVVmVX@@VVInJmbnLWVnVULVVU@VVmX@@JVzl@nVVKVXÞ@mk_lmUUWV_nJlUÞÑÞVVUVVLUVJ@IVna@@KV@XwWknwnKlalUwaĉÝwJl_@aUaKUUU@WU@WXUÆ@@UVK@n@UnVVblK@bllb@bbW@Xbl@UlnLl°°b¦nKlVnIV@UWU@WXkw@am@nm@aVw@I@KUaVIm±XÑlknJVnVJaX_VaUaVKmwnkmmn@lU@U@mnaXlKUmUIVmklaUK@UlUVUW@UkVma@UUU@JmUU@@bmbKWV¯XUKm@ka@UVKVk@aUKmLkKUUÝUmbXbÇJ@k@WU_@m@klm@UXKVaUI@KWUXaÇWkaWUkWUL±U@lUU@UJI@V¯JmIm@@aU@Uwa@UV@VkIV¯aUkWkb@bVL@@VVVUXW@Ua@@bÝbUVÝ@LmUkVUbVllLUV@LXWbUXm@U`@kxlnnJlbnIllLXlVlUXmVKnV@L",
              ],
              encodeOffsets: [[126720, 43572]],
            },
          },
          {
            type: "Feature",
            id: "2101",
            properties: {
              name: "沈阳市",
              cp: [123.1238, 42.1216],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ȚĊÜ°bLlÞxUbUn±@ÈnVÆL@xnLlUVbxkImJkn@V±LUxkV@bbKVKnzVl@L°@VaxÞUlbôxVV@@V±bn@llXLöXĶnal@nkVJVI@aU@@aVK@aUUUU@lmkwl@Ua@_@a@m@U@aUKWwkIlWUanIWK@UXKVIU@@aVVIUamVknW°n@WI@KUmULWnkVkUWKkkmJkamIkmlw@V_n@VWXaW@KVUkKUkValUnVK@ÞVUÞa@a@VbX@VWUU@U@UK@ala@IkKmUUa@U@VkkWVwU_@KÜUXbl@V¥XUVmXakÅlUUkIm`UIUJW@UIKmkm@UUJImmU@VUXU`mIUbUK@LJUUl@X@UbJkU@nm@Uam@@aUmLKwmWXUK@kUaÇa@JUIUa@aKVUUXmUy_@lmbkLUKWLX`n@bVL@JXLWX@Vnb@Vm@UbnVmL@V@x@LUbVV@V@LUVl@mb¯U@xU@UVVV@X@VVblJ@bnVKUnx@llnL±¤b@k`VXÆK@kV@¼kl@bWIUl@VmLnbm@@JXXmb",
              ],
              encodeOffsets: [[125359, 43139]],
            },
          },
          {
            type: "Feature",
            id: "2104",
            properties: { name: "抚顺市", cp: [124.585, 41.8579], childNum: 4 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XVl°bUlJ@UVU@bVxV@@bn@nJ°I@UJIVV@V@k²VVKlXXVblÈXWbXV@LVJUbWL@Vkn@l@nV`@X@lÈIWanaÞVVVlLnKVL@bUlUL@Vlbn@VL°WXULna@aV@nV@IVV@VbUnl@VXnKVa@UUnyWkXaaVk@aabnm@_WKXmWanU@alaUl@XJVLVxX@wnKnVlw@V_@a¯¥@UkKWUaUUanK@IaU@WUaVw@klUVyUUVUUÇ@Iôba@mnUma@kXa@UWak@Wal@a@WULmU@U`mIUU`mUk@@UUK±nkJbUam@kwm@@a@UU@Ua@@K@VK@kmKU_UKUUaĉWmkkL@`LnmlkLkbmK@k@Ulmb@b@xUVIUlmVXXxm@JUUk@WUk@akx±@¯x¯UmbKUUVmUU¯UmVVnWkÆlWbUnWVU¦k@WaÛV@LV`UxXllU@@VVbnVlL@J",
              ],
              encodeOffsets: [[126754, 42992]],
            },
          },
          {
            type: "Feature",
            id: "2114",
            properties: {
              name: "葫芦岛市",
              cp: [120.1575, 40.578],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ll°XnV@XLVb@VVbnb@VLVV@VVnXxlKnUl_na@mlImJnxlLaxVbUVVUVUKVlnnV@lmXLÈWkxVV²bVLm@Ula@UX@XW@UWaUUUUVan@V@lUXxlIXV@yXLwXXW°nblJnan@Vz`l²nVVVl@nUaVKbVKnXVaUaVUynXK@kVK@X@m@mLXaLWU¯w@a@UVw¥°ó¯¯y¯UÇ¯»w¯Im¯ÇUUl¯»ţKċÑţķm¯w@mU_ómk¼VnU`±IkbVlnnU¼±Lk`@XWl¦UbmVUxkXVlkbllUVb@bkVmx@XVV@Jb±aULkKWXkWmX¯aUJmIkVm@xU@n",
              ],
              encodeOffsets: [[122097, 41575]],
            },
          },
          {
            type: "Feature",
            id: "2109",
            properties: {
              name: "阜新市",
              cp: [122.0032, 42.2699],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Xnb°lVlnXVJLlVnl@zÆxnK@bblKVLn@@VaVLVK@L@Vl@XVVInVVKVwlUXwlKLVVb@aV@XlUXbVW@nlWnXKV@@V@XUVVLUVV@@bVVV@@ln@VbVUXVIxVanJ@UIVWL@UV@@¤V@nInwWklnIVxlnzUVÇJ¦VVÜLĸUnW@aV_WĊXXaKnkl@nmLa@alUVw²K@UlmnIlJwaVUkmK@wÅKmU@Ç²VmVaÝwkKaÛ¯șĉķ¥ğ¥@kUWkƏīÝ@@akUK@KWIUm¯nU¯JmwUVmIkJÇLm@UImJUU@aW@U@@nUbJabXVWn@UVmX@V@b@l@L@lUb@xnÇabk@@xVJU¦lbXÒ@nUJ@Vmb",
              ],
              encodeOffsets: [[123919, 43262]],
            },
          },
          {
            type: "Feature",
            id: "2107",
            properties: {
              name: "锦州市",
              cp: [121.6626, 41.4294],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nJ@nlmVnXKl@@°n@@¦VbVbUlVL²l°@Æ²ÈV@LVknVbVVnnWVU@XmWUabIVa@mV@X@@bVVnIVJ@nÈKlInJVUnx°IV°mVnXJ@LLlV@b@ÞƐĬXllV@Ġ¦ĸ¦naWW@In@manK@UVkXJ@alk@»lU@ÅLUWl_@a²£Kkm@kwVmULm@akIUa@U@WUUVUaÝ@ğwkmĉ£UW@@bÇL@ma@_mKlXUwKLţÓ@UWw@K@UI@mU@UV¥@°UnJ°@@_KUwW@UnaWUmmI@mķwUaÇLóVĵwÝUUW¯¦Ux@Vb@xV°XKWbK@n@nW@UL@lWLmzUVVbUbmWXXWJbn@Vkl@LlVUn@xnV@bln",
              ],
              encodeOffsets: [[123694, 42391]],
            },
          },
          {
            type: "Feature",
            id: "2103",
            properties: {
              name: "鞍山市",
              cp: [123.0798, 40.6055],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lxĠÞ@bV@@w°Vna@UkV@K@UUUVa@K@w@UnKmUVan@@Uma@UXWWK@IUK@amW_XKVLlKna@kmKVak@VU@VmU@anIÆan@aUVnb@blLV`ÞLlUbnaKn@naVU@¥°IVK@anUUKVaUVak@mJkXUVwkVUUa°U@W@WlkXWlIXUlJlaxIVVXLll@nLV@lLXlKĊz¥maUlkXaVKX°yIla@aVkala@a@¥IUy@WmXa¯kU@U@mmUULkmm@¯VmnLVU@a@U@±w@VWIkymLUUkJWXJkUmxk@xUI¯`mUULm¯m@kxVVbWV@UVIUx@bkVVVxUbVV@V@zJVXUlnk@@lkLlLUU±Jkm@UIUVLUVU@K@UnnV@l@LlaUJ@zn`@nWlIUVUUUV±Ln@nmL@VUVkLVlUxVLVlÅXma@@akLmWUX@JUnVJVkXJ@X@`WXVUVUIlbW@bVUVL@`Un@¦U`@bUV@z@Jm@@XV`LUL¯J@IVKmKÅI@JnWVnLnVxV¤z@bmV@VUV@bUL",
              ],
              encodeOffsets: [[125123, 42447]],
            },
          },
          {
            type: "Feature",
            id: "2105",
            properties: {
              name: "本溪市",
              cp: [124.1455, 41.1987],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lb@VnlnVVUb@VJ@nnJ@bmXUx@xVbkbkWLUxnl@Ul@xWx@nUV@¼UllknkK@bmbnlLVJX@VIVJn_lJVVXUmnU°VVVUnVVLna°V°w²@lwbl@XVl@VVIn@wWWnUVkJVUw@@anaVk@@lnLlalKnkmK@_lKnlĊXVbVVLV`nL@lUL@@L@VbV@@V@bn@lxn@VbalI²mVL@Vl@nV_VVnJV_@nVKV@X@bkXbl@XblylUUk@Xa@UVIlK@UUWVULlm@UUUnKWU@K@UXmXVa@U°KVUUWUk@aUVKkaWkKUknaWa@U@m@mk@aUJk@@_WKkLmxl@nUJmIUWlIUaVWVXn@xWLk@@aJUI@U@UVVxm@UVkmb¯VUU¯JWU@Ån¯aUbÇ@ÇlLmWXkbk@UIÇVUXWwÇnk@±aU@@bUVUKUXmV@kaUm@k_±l@XwVa@kVK@UWmVaUmVUUakLUWWnÛKVW_m±VnU¯@Uma@Xk@l¯V",
              ],
              encodeOffsets: [[126552, 41839]],
            },
          },
          {
            type: "Feature",
            id: "2108",
            properties: {
              name: "营口市",
              cp: [122.4316, 40.4297],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĊĖÆn¤°Ċ¯ŎWô@xXbwnKl@nX@VUVKmL@VU@UxÝ@VlbxU@VUb@bk`IUlVUnV@@UV@@JnXlK@b@nbÆWUkUKVwUklKVU@UnK@mm²KVUVVVUJXk@mm_@yVIbk@K@kmUm@VLV@VUKVUVJn@l²IVVKklK@kl@kmVUWI@y@UUUVawUUUl@akmmVaUKmIUaJk@wkaóIWWÛL@UlmUIU@WW@UnUUm@wmIVK@Kĉ¦@bWKk@max@bWXkamK@mVkKmxÛaWX@xUlÝnJ",
              ],
              encodeOffsets: [[124786, 41102]],
            },
          },
          {
            type: "Feature",
            id: "2110",
            properties: {
              name: "辽阳市",
              cp: [123.4094, 41.1383],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@`VzWnVUVL@bVbVJ@IÈbVb@lVLXWnxLnKVb@n@Vbn@mV@lIVa@@WkVVI@KVLVanJV_VWUV@nnJVIVn@na@alLlmkVk@»VU@mXwwk@@VmkVwXKllaUa@wVwnW@amI@mUI@VaUUkmm@UkaL@UIĉyLWkkKU@mKk@kWKUUJwkbkIWVkJWXkl@X@X¯VVbUVlUxVWlnI@lUbVUbVLmV@bUL¯J@¦UVmbm@LmbakVÝKU_kK@amaVUbm@ÅbmJ@bVUn@UVl@UbnL",
              ],
              encodeOffsets: [[125562, 42194]],
            },
          },
          {
            type: "Feature",
            id: "2111",
            properties: {
              name: "盘锦市",
              cp: [121.9482, 41.0449],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vbĸx@nnJVnXmb@VXVxL@`¯@mI¯V@U¦@VV@nJ@V@LXx@VŤÔKLVxWknL@`b@nÈK@a@VXĊ¤nVK@aVU@UnU@ayU£UwmmKXUm@IÆJnLUL@J°IVKKU_@Wn@@I@yVU@aV_@¥Vm@_UKUV@aXkaVJVUUXW@_@WWIUlUIVm@IVW@IU@@VU@mUVVkJ_l@aVa@UVwka@UÞVwV@@UnKLVU@UmWk@mLxWa@wóUVUIÇÆĉ¦¯¦¯xʟJ",
              ],
              encodeOffsets: [[124392, 41822]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/nei_meng_gu_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "1507",
            properties: {
              name: "呼伦贝尔市",
              cp: [120.8057, 50.2185],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@m@Łkklô@£kJ°ýɅķÑó¤ğLĉÅlÇğŁW¯¯ƥóÿlwkţÈéÝƛó°ÞÅxV¤ĉĖWƒ¯lȭţυ̃ɱÿķƅˋğɱřÝţϙȍƧĊţ@¯kWKUKm¹Å@ķJU@ƧÑƧō¥˹Ɔ@L@ÞVLn@VōČWJX¦@JŻbU@ţÞmVU@ȁýóbkWWLÅ¯UWġkmó±UŹôV¼ƽ¼ł̥ĖƽǬʉxĉŻȗKΕ̛ʵƨʟÞ˹»Ƨţ»Ǖō˷Ȍ±ȚʊĠUɾɜɨmÜ֞߼˸ƅȂ¯ǖKˢğÈÒǔnƾŎŐ@Ċbôô̐¼ƒ@ĊôĊÞĀxĖƧL±U°U°ĬƒČ°ÜêɴȂVł°@nxŎèbÈÞȌ΀Ǹl²IlxĊl²ÒmôĖÈlĵºmÈêVþxɛČʉÇĵVmÒÈɆôƐŰǀĊ°ÆǬĮƾbyĊ@ĠƒXǀċm»ôw°Ûk¥Çm¯çkkÇǫţǕéX_ĶWǖīŎaÆĵĸĊ@ȚȘĊLĢĉVÆĉʊÇĕóaU¥ĉ°mkÅ°ġUĠřk°mÑČÿÛƒWĸ£ʠÆxÈÞŎÞ»ʈ²ĊÇČalÒ°Ť±ĸzĊKÈ²m¤Ŏ@Ò°¼nyȂUźīǖƳÈē°@ÝĶ@Èkl¥ÇçkxkJXÇUÅ@£k»óƿīÛ@lÅJl¥óý@¯ƽġÆÅanċ°é¯¹",
              ],
              encodeOffsets: [[128194, 51014]],
            },
          },
          {
            type: "Feature",
            id: "1529",
            properties: {
              name: "阿拉善盟",
              cp: [102.019, 40.1001],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƏnǟƨʫŹɆÿ°¯ÆV²ˢżÿ@ÝÆŁȰ¯ȀƳĉó@ğky¹@īwl£Ź¯Ŧé@ÇÇxŋĉƩUUŃōLÇĵóÝnóç@ó@ġƱ¥çWUçÆō@éçťKçȭVһƽ̻aW¥ȁ£ʵǊǓƲɳÞǔlżÞmĠóĬȂɲȮ@ÈĢŮźÔnĶŻǠŎȭгŃċóȭţΗÆƑÞƧÅΫóȘǫɱȁġlÛkÇ°ȁÈnõl¯ôÞɛÝkĢóWĊzÇɼʝ@ÇÈķlUČÅÜķnέƒǓKȮŎŎb°ĢǀŌ@ȼôĬmĠğŰōĖƧbЇƧōx@ķó£Ål±ĀƧīXÝġÆêĉK°Ýʇƅ@ΌʉżÅÒϱʈ@˺ƾ֛।࡬ţશóЈèʞU¤Ґ_޸Ƒʠɽ̦ÝɜL׈ɛϜóȂJϚÈ@ǟͪaÞ»Ȯź",
              ],
              encodeOffsets: [[107764, 42750]],
            },
          },
          {
            type: "Feature",
            id: "1525",
            properties: {
              name: "锡林郭勒盟",
              cp: [115.6421, 44.176],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ʶĬĊIȘƨƨ@ĬÛĢșŤĉĬĀóUÈŚÜènŦƐȤȄłϰUƨťƾÑ܆ğɲƜǔÈèʈƲĊƞƒɆ¯̼V˺Ò˺ȂŤVĢêUÜxĀˌ˘ƨÆ°ѢmÞżU¼ÆlŎ@ĊçŎnÈÒͪŎźĸU°lżwUb°°°V£ÞlĠĉĊLÞɆnźÞn¦ĊaȂīġŃ¯Iĉůl»kÇý¥Ŏ¯én£ġÑÝȭxÇ@Åçķ»óƱŎ¥çWÿmlóa£ÇbyVÅČÇV»ÝU¯KĉýǕċţnġ¯»ÇōUm»ğÑwƏbċÇÅċwˋÈÛÿʉÑ°Łkw@óÇ»ĉw¥VÑŹUmW»ğğǉVÿŤÅźī@ř¯ğnõƐ@ÞÅnŁVǉóJwĊÑkĕÝw¯nk¥ŏaó¦ĉV¦Å`ğÑÑÝ@mwn¯m±@óƒÛKˍƏǓ±UÝa¯lōșkèĬÞn@ŤġŰk°ċx@ĉ`Ƨĕ°@ţÒĉwmĉ@na¥ķnÞĉVóÆókĉķ@ÝkƧƧÛa°Ç@ÝÈUóbÝ¼@ÛÒV°@V¼ˋLÞɅŤŹǠVÞȗŤÇĖÅōbȁƜ",
              ],
              encodeOffsets: [[113817, 44421]],
            },
          },
          {
            type: "Feature",
            id: "1506",
            properties: {
              name: "鄂尔多斯市",
              cp: [108.9734, 39.2487],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĶL²ĬVłƑkkl@ȎŘWńÈĬȗ¯ºlz@ĠĊôŦôÒĠ°kÞÜn@¤UĸèĸbŌÈXĸLlÒĢxɲÆ¤ÈÛƾJÈÝ°UÅĶ»²VW¯ĸJôbkV@ôlbnĊyÈzVôab@ĸÞUl°yǬ²Ǭm°k±lbn°@È»JXVŎÑÆJ@kLÆl²Ġ²ʊůĊġřóƛÞÅ@mmLUÿóĉƧ@»L@`ČĸmȗÑţů±ĉğl¯ĀwÇçƧŤÛI@±ÜĉǓçō°UwôǫůķƳÅ±bÅ£ÓÇwnÑó@ȁƽ@ÇƧĢón»ŏĕóĊ¯bÅVȯÅImōKULǓ±ÝxċŋV±Āȗ°Źl±Û@WÒȁŚŹНŚÅèŌô¼°ȰɞȂVĊ",
              ],
              encodeOffsets: [[109542, 39983]],
            },
          },
          {
            type: "Feature",
            id: "1504",
            properties: {
              name: "赤峰市",
              cp: [118.6743, 43.2642],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɲŁĢǉĊwƾōÞĭ°_ŎŃźȹƒUČÿl»¯ôķVÿǬƽɅġÅÑǫ»̐ʟȣU¯wVWÝÈġW»Þ¹mÝƒɛŎÿŎōͩůV¹ōéċóŹÅVVĢǩʈ@Ėċ@ķÛV°¯xÇÅţ¥»°Ûôĉʟ¥WýČ¥wç»±mnÅķ¥ˋVbUÒġ»ÅxğLƧbWĖÅx¦U°ÝVóŰlô²@¥ÜÞÛôV@²±`¦¯Ý@ÅVÒō¼ô¤V²ŹĬÇĊƑţxç¯Lk»ʟlƽýmłÝÆƏ@mö°Ġ@ŚŹĬţÆUĀĠǊĠX¼nźVUÒ¦ĊxÈ¼@ôlx¯łʊÒÜĀˌÇČxÆČÈƐaxÒĠn¼ŎVÈ¼Ģ°ŤmǖČĊþLV°ÞU¼ċÈUÆzÈa¤ôbknXĀè",
              ],
              encodeOffsets: [[122232, 46328]],
            },
          },
          {
            type: "Feature",
            id: "1508",
            properties: {
              name: "巴彦淖尔市",
              cp: [107.5562, 41.3196],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²@Ζǀݴʶհĸƒ¦Ķ̒Uˌ¼ӾÇƾ¼̨UÞĉƧéÝ»ĕĉƐȍōǪakóó¯a@ôţaV¯Þ¯°@²él¥ĵğťwōxó¯k±Vó@aóbUÇyĉzmkaóU@laóķIX°±Uĵ¼Æ¯VÇÞƽIÇÜÅ£ɱġwkÑķKWŋÇķaķçV@£mÛlÝğ¯Ñťóǿƴȯ°Åł@ÞŻĀˡ±ÅU¯°ɅĀźƧʬmǠƐ",
              ],
              encodeOffsets: [[107764, 42750]],
            },
          },
          {
            type: "Feature",
            id: "1505",
            properties: {
              name: "通辽市",
              cp: [121.4758, 43.9673],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôƲĸ¼Æè@ÈȮwƾ»ʠĢ¥VÆ@²¥@»ŎÑ¯ĊJŤ£k»ÆÇX¯̼ōī°aX£ôƾȁź¥aôŤĢL°ĸ@Ȯ¼ÈÒʈŚôVXůÆaĠƛÈKķĉôÿ@ğÈĉ»ÇVnĉVwXĠÝ°ČÿĸwV¯¯ǵ±ĉǫÅÅm»²Ż±ƽIm¥ţÈķ@¯ƧJV»ÞUÝç¯UġºU£ţóaÅÅlƧī¯K¯ÞÝğL̑ȍƽ@ōŎōĀƑɜnÞÝºX¼ÇĢÞUX°xVʠȤ̏Ǭ¼ÆÒɆĢǫƾUĀóĸ°k¼ċĀƑVŹȺōń¯`ÝĮƽŎĉxġǊɱłō¦",
              ],
              encodeOffsets: [[122097, 46379]],
            },
          },
          {
            type: "Feature",
            id: "1509",
            properties: {
              name: "乌兰察布市",
              cp: [112.5769, 41.77],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ʠǠÞĸɲȺƒÒȂƛŎaÆÈĕȘţUÝźǟɆţÝˌKU»@U¯ÜÑ@Þ»ôaVÞÇÈ@¯ÜbƨƨÞlĸ@ĊôlôÅĊUÝĸm¦bmĊ@nĊxŤÑ@¯ƨĖĊ_@Čwl¯ȭLÝ»ƽ¯ķůǓ@ÇǓbċÅÅÆwÿĠÇU£óa¥¯aŎğĠţkw°»¯ůlÝĵkÇ»Ý°ɱƧǫaóôɱ»Çk¯ŃóʇŐŻĉǊŻĢ¯ÒÈUl°x°nÒĬónĊğ°ÇŚĉ¦ʵV°°ĬÛżÇJȁńʇʹó˂ƽŎÆţ¦",
              ],
              encodeOffsets: [[112984, 43763]],
            },
          },
          {
            type: "Feature",
            id: "1522",
            properties: {
              name: "兴安盟",
              cp: [121.3879, 46.1426],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÆXnlŎ°@LVLĠþxĊUȮĊnUĠV@żaW¯XIŎġ¥Ý@K@w@K@I˺ŻŎ¦ƨƨÒŎIÆ@X@VºnX°lŎ@ƾĉˤƒȘǷȘÑÝÝÞbVţĸÿŤxÈĖƐêÇKnĸ¥ô@ķÞUnÒl@UÅaīˋ¯ÑƧx@±kXřƐƏÛéVˋ»lō¯ĉÅÇÓǫÞĖġV@ğ»°ĵÇÞǓ¼¯mÛÅŃĉĠÇƾb²çéż¯VğÞml»ōÑVç»V¯¯ĕÆU¯y°k¯¯V»ôÇÑ°a@ŹkġKţóbŹ¦ƽȂóW¤¯bĬ̻ŎW°ÅÈl¼ţ¤ĉI°ōÒ@¼±¦Å@Uġ¦ʟƽ¼ÞĢÒm¤êō°¦Èþlk¼ĊŰ°JĢńȁĬ°żnÇbVÝ¼@¼óĸţ¤@°Ånl",
              ],
              encodeOffsets: [[122412, 48482]],
            },
          },
          {
            type: "Feature",
            id: "1502",
            properties: {
              name: "包头市",
              cp: [110.3467, 41.4899],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@źxżĀǔÆǬVȘĀŤ¥ÅƾōôˁʈͳȂŃÈIÜŻ¯ī¯ōm¯ɱĖ¯ķÒÝIÝ»ÅVlÅôÑġğVmÞnnWçkWÜXƝÆwU»Șĕ£ĉÑğ±±ÅkK@lÅIōÒUWIÇ¼¯@mka²l¯ǫnǫ±¯zkÝVķUôl²ô°ŎwŦxĶĠk¦±ê¯@Ý°U°bóŤ@°bôlôǩbŎƏȎĊĖÞ¼êƨÝĊ",
              ],
              encodeOffsets: [[112017, 43465]],
            },
          },
          {
            type: "Feature",
            id: "1501",
            properties: {
              name: "呼和浩特市",
              cp: [111.4124, 40.4901],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ʶUĊ¥ÈřĠ¯ĉômīÑ¯mwk¯ÇV°ÑżġĊǉǓɱţǓƝóX¯ɛÒóa@nÝÆôƜŚĉĢʉŰĊÒ¤ȗĖV¼ÅxWƞÛlXXèmÝmUnĠĢóÒkÆÆUÞ¼ÞJĸÑ°ɲĕ°Ŏn",
              ],
              encodeOffsets: [[114098, 42312]],
            },
          },
          {
            type: "Feature",
            id: "1503",
            properties: { name: "乌海市", cp: [106.886, 39.4739], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Ș°ÇīXŃŗ@ȍlkƒlUŁ±īĵKō¼VÇôXĸ¯@ťê°źk¤x@Ĭ"],
              encodeOffsets: [[109317, 40799]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/ning_xia_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "6403",
            properties: { name: "吴忠市", cp: [106.853, 37.3755], childNum: 4 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nLV@VLaÞbn@@l@bUVlUVzVx¤kÞVèXn@nm°a@UÑ@VXnV@VaUVKUUU@@U@@KVa@U²@wXkWnk±lLnU@UmmVKnIVWnI@UK@UK@@UVKXkmWLWUXmlkVwUyVa@ww@aVIK@aVÈwKlLVV@LnVVVnUÜ²°WÈIUÆ@nÞ¼@¦@UÞUVW@UxUxVnbKb¯ÞU`VbǬV@XXÆVVl°InmnUô°¯anam£WVXKXmkôaVU@Vak@@wman@K@UÛUWKXUÇ@UIb@alW@akLUKV@@Ukw±InL@kmwkWmk@JUIůVmnnU@m@UKVKlkUwknVUKmbkI±KkmVkKb@U@aVkUmn`kIlaUK@UUKmbUIÝUa@mUa@am@UUULUK@bmKkbWI@WXwlkXWa@k@kKLVkkK@L@JUVmzUKlwUUnW£XVlKUwVU@aXI@aWaUw@W@_nam@¯UkWVkUWaU@nwmJkUVkWVUmUkJ@ImbUa@@WÅ_mJknmak@@mXaUV@xU@@VUnkV@Vn@`ULUbWLXVW@kbUJ@XW`@nÅĖWJ@m°@xxbnUaw²lÞ°xŤIVVULÛWbbkVVXÆ`UbVL@kx°LlV@VWbJn@bl¤ULV°@lmL@£U@@aUwmKULVxUVVx@@kU@mK¯LÇa¯@",
              ],
              encodeOffsets: [[108124, 38605]],
            },
          },
          {
            type: "Feature",
            id: "6405",
            properties: {
              name: "中卫市",
              cp: [105.4028, 36.9525],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°@Èb°KnL@lV@@UwVUUwVKnLVx@bV@¤@nK@k¯UVKk£@amIXa@UkU¯Klw@UKVaÅ_UWlUaXaÜVKUUţJ¯wÝ±kxVbmaw@wn¯@XIÆĕm@X_@WVIlaX@WUXKVaVK@_Um@lUVm@U@Vw@VUÛwm@@W@ImKUkU@UaaX@wWaUKkw@UVaUamLUnk@»±`¯@kW@UaykbI@VWJkLWUkJwU@n¤mL¯wm@Um²XVWbnV@bmxVkxUblLUV@kVWKU¼kU@mn@JnV@bUnmJUn@k@XlxLVVnKlLVV@@LkKULVbk`WL@lkXW@kV@UÞUlÇXlkaUbmV¯@@L@V@bkb@xlWbbW@±@UJ@IU@mVkVxV@@lIlln@Vm@VUbl@JLmKÛXmVkUKULU`@LĉwKUXlVUl@VbJX¦̼bÞxŎxɜĖĠŎaô@",
              ],
              encodeOffsets: [[108124, 38605]],
            },
          },
          {
            type: "Feature",
            id: "6404",
            properties: {
              name: "固原市",
              cp: [106.1389, 35.9363],
              childNum: 6,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@Vnn@°xnK£mV@xlIXVlKXI@UJlazVbX@l°@²_@¼mlVnKVbUb@VlxVLXb@xWbVbV@VlnL@J@Xn@ÜxbW@nl@nblmnIÆ`@X@Vbna@aVUUWVk@kbWakbU@VwW@_l@nmn@@alVlk@UkmVak@@aUXaL@¯@KVa@axWI@KnkVaVJn_lJ@X@m@nVanUVb@mXLlJVWnLlaVVaVX@KXVVkVKlknKVa@aVU@KXb@klJUknUm@K@_UW@alIUamaU¯kJma@IUK@U@@UW@@aXLVVJVaXIKlaUkUV@ambUUJkIWJ@wUIV@JU@UwV@@Um@nU`@UkUmVUxWUUV@aÅb@aWXkKUUUUaWK@wnm@IVU@aXwm@UmVaUalk@anKUwlUwlkK@wmaUkmmIk@VmkUUbW@UVUnW@kV@xkVmbVnU@UbUV@ak@kkW@kLW¤@nV@VU@W_UVUU`VLUV@IUVõVULU@UUUJ@wmkUJ@WI@l@bkKkbVVbVbUL@UUJ@Vm@@L@xbVVVLVlVwX@Vb@bmUkbk@@JWIUVÅw@Km@UkWKXxWLÅ@UVUnWK@xkVW@KULwWVXVWzXVVKVXkVV@VUbV@UVV@@LXxVL@VbLnKVLVxXVmb@l",
                ],
                ["@@@J@aU@LWK¯UUxVVn@ĠLUW@UbUUUa@KUX"],
              ],
              encodeOffsets: [[[108023, 37052]], [[108541, 36299]]],
            },
          },
          {
            type: "Feature",
            id: "6401",
            properties: {
              name: "银川市",
              cp: [106.3586, 38.1775],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UwVK@UVWÞUbwV@knV@@KU_VK@Kn@W_XWlL@Vn@Ċw@Ula@Wanamī@a»ŋó@aÆÅɲÿUaV_°ÝaLaUmVwVwX@VUVÝ@@¥Ý»@mVÅÇJ¯XÛ±VUmUmU@KUUkKLÇxU@bLUJ@bx@xUbVzUxklWnXVKnXWlUL@V@VL@VL@mJUXmJULnn@VmVkK²mlXWlx±@@VUb@L@@VV@VVULVUbU@WmU@Ò@V¯bmn@V@lVnUnVWXVl@¦VVUn@x@XL@¦lXxVb",
              ],
              encodeOffsets: [[108563, 39803]],
            },
          },
          {
            type: "Feature",
            id: "6402",
            properties: {
              name: "石嘴山市",
              cp: [106.4795, 39.0015],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@U¯ķó±ÇÛ¯ķmbXb@kb@Vĉxm@@UkKWXX`m@@LULV`@L@mU@lUxaÝVUX@VULxVkLWV@JnVLXVlUV@zlVL@V@bn@lU²WVLlLVbUVxUx@xǀLxôÒkK²VaU@wXa@WÈĉUa@bÈkm@¯",
              ],
              encodeOffsets: [[109542, 39938]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/qing_hai_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "6328",
            properties: {
              name: "海西蒙古族藏族自治州",
              cp: [94.9768, 37.1118],
              childNum: 7,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@V£°@laXô±źwô@UlżaÜnKw@Uaa²LmÈLÆÈxlaUawÞmÜbÞUnJ°akôÑkwÝVğwÇ@ÝkkV¯¥@ò»nŤ¥XImw@mVwa@ÅwmLkaWw¥l»kçó»@WÑĉğ@ĉŃUwóřVómĵ»Ý@VǕ¯kÝĊÅk°ÓUklkU±IÇÞk±@ƽJ@UġIk@W¦VÑșÓÅnťKULn¯X@¯mUÛ@WÅmóKknōbxÝ@U@kw@ÿÇLţÝUkmwklċVÅU¦LkUWlÅÑ@a@ÅÑ±UóġŹ¼ÈĉmŻ@@wkwKl¯Uġ@lÇUÓ¯_Waĉ²Åló¼VbknKÇÅ@ƧĢō°Ý@ğWÅxUUm@ÝXÛWULUè¯@mbUaLbUWġxIUJWza¯by@ōÈóLU`ÇXUlUĉV¯nmÛbǕLklUĉVóaġƏbġKţnkbÝmmnÝWȭÈÝXţWókUÇl¯U¯ġUɅĀ@°¯¯VÆnmJ@ĊķnóJUbÝXUlVkL@lVxnnmb@¤Vz`ÞÞŤ@VnÆJV°bUôJkzlkl@²ó@ÆÇ°kĖÇbÛU@lmbXVkzVɅĀXˢlńĬŹ@éÅ@ĉńÆ°ğbUlɜ_°@xŦkbVbƒKĢŤVŎ°@żÈźlĊôKôb@nôxŦÆ@ôŎL@þÆb@nnWˌbÈxInaŎxlU@Ñ²±ğVUĢƨbɲ@Þ¥ôUUķWVô¯ĊWʶnôaŤˁ@£nmnIôǪK°xUXô@Ŧa°mkXÆÞVŎkĊ°ÞLÈôyVaIlwX°UVwĢÑÜKôw@nV@m°nmnÜɞ£VbmXn°ÜÒ@xx@Vb²UlbkxVnJUnVVĊ°KČm°nxÇnn¤±¦@UXVV@lVbmVVÈVxÒ°IbźaČbVw@VLƾÑ@Ŧô¯ĊkôÑ",
                ],
                [
                  "@@@@nòVaw²bVxxÜaČVô_ĊJIVmLa°@Ŏ¥XlK@klKVbUb@nUĢnaÈ@lmǬ»Ġ¯nmnƨVyÑǖĠ»ɲIn@@ÅĢƳ@¯°ôVKÈbVIÇ¥¯@Ýó@ÑnīWKkk@¥¯ÅaX±VÅw@±Ġ¯@»nWmw@@¯VUUWçKĉa±VkkV¯wx@UJx@bknÇbmÅ@Uw±U¯¦UKm¯I¯ť¼ğĊ@ÇŹÈ¯@Ý»ÇnˡJbÛèÇnÅK¯ġĠŹW¼Ålm@¤n²Ýb@b¯l¯@Å¤W¼nV@x°@Vx@lbUblbX¼WÇ²lU@¼V¦@bÇlVxUbVxÞbVbm¦VV",
                ],
              ],
              encodeOffsets: [[[100452, 39719]], [[91980, 35742]]],
            },
          },
          {
            type: "Feature",
            id: "6327",
            properties: {
              name: "玉树藏族自治州",
              cp: [93.5925, 33.9368],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɆÿĢV°°VÈklVôŤXÞWȮÇÞXnmÞnlaŤmĢLƐaĢôbĊUVlkǖKÜan°mĊUVVkÈWV_ôKŎÇ@z°abXyVIJĢwVXaKVbna°@VçVKXÜÞWn@VVÆwXĠÞ@Ŏ¯ƨġÆ@ÈLlmUaô»ÆkĊ±Xb°`ÔVkÈĢ@Vk°Llx@xż@ĊnÇź»ôĢ²VÆÒ@@bÆÒXklVKV¥ÆČUklnxlç¥ċç@±m¥wÅJ@VmÈIléÈa°U¥@kÞVK²ÑW°w²ÑK²ñyÆÝVmw»kkWĉJWUVÅwLmÅ@@mwkn¥VÑ»°°@@»¯LlaJônVUÅ¯U@W¯UmÑ¯¯k@WykU@¯wV¥kVwţk»wWÇĉĶçKÞÇaĉbIlU@kwWXU°w±@UKn£WĉKWxkĕVamwXw@Wmnk@aVkbĉLlImmwUÇWxnÝJn@¥ÆkwaXÜĉ¯ÅV¯¤mkx¯kķÜ²VWôŹVU@V£¥@°wn@m@¯@UbUôķmn@ÆÛ@ÇýVaUÇĊV@Çlğ¯xÝŤlVÈÈVx¤VxkK@@x@kVĖġ¥kIWbXŎx@nxÅUW`_@±UaLUxK¯WbkVlbbmLÛÆWIUwWkwÝV@kIéUbUUkV¯Km¯k@UmÝ¯m¯mLÞĉÛUmġ£UxkKm°Lwk@kVmKVUk@¯a¯ĢmóKUUxImlÅnÇbXèVVU°@@xXnm@¼ğ°@²ÆxU²WÆb°@¦llXLmĬ@ÒÞô°@È¦UJÇaLóU¯@°ġƴ@Æ@mɱJğ¼ǕÒUzƧmnmğ°ǫ¼knÇ@bġmmV@VaUaLkl@kLWō¦¯@bKUnJĉIó`ċUÛbwUw±axbñUm@@babÇÅXmƒÝÅôVbÞblUÞVÞU°VUx@UV@l`¼nL@ĊLW¤kXķWġXUVVVķUbVb@°kVVxÈa@Č¦ĊbaźJU@ÈVl@XkôaWĢÞ@laĸUÆb²mÞLĠÞÑôbÒĊaJVbm¦",
              ],
              encodeOffsets: [[93285, 37030]],
            },
          },
          {
            type: "Feature",
            id: "6326",
            properties: {
              name: "果洛藏族自治州",
              cp: [99.3823, 34.0466],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÞVŤÈK@ĀlxV@Þ@wŎalmôLnXÆÜ@nV°@°WmVKŦLÆmȚÔÒUX¥l@ĢJV@ƾI@wW°Ån¥kÅÝVwôÈç@lÑĊĕaJnaÆLVw°kny°UnkÆVČĊll¦Vƾ@@nUźÈÇIn°XwÞKô¦VWV£@£°ókċ±Iam¯Va»ČĉV¥°@mk¥l@Ċm@aUmwX@wÆxmĢ_`VnÆbKVw@@nUVğVmVVöIll@@çÛm£UÇw°@VU¯»m¯JōĖÅLa@»ĉĢ±`U_k`ÇçókXlK@akÝÞ£WċkÝkxJÝ¯ÅwxķxmIÅx@k±J@ýŋ¤UkmV°ÅÝxkwmġnÝVU¦ŤlmóXk¤UKç@mVkK@klī£m¯VUbW¯¼ċb¯ĵam¼mVXm@k¤ÇXÇbU¯J¯¯È@bVXVÒ¤V¼kxÝV@lVWxÛ¦W¯mKnlkU@nƑUĉÝ@ÇºÛċUĉ¥UÞÅz±òL±Ò¯xX±ÒLÝU@lV¦¯ÇbkêÇJnU@ÆIxn¦@²Čè¦è",
              ],
              encodeOffsets: [[99709, 36130]],
            },
          },
          {
            type: "Feature",
            id: "6325",
            properties: {
              name: "海南藏族自治州",
              cp: [100.3711, 35.9418],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vxń@ĊĠĊXÒ°UƾĕÞm°£nb@@LUUWÛº@nlÆǬĠ£ÞV°UXbVȂǵé@kWanm°@xzK°¯ĠVVkwLnm°kÞxÆa¥@wnĉÆ@_l_VwmĸèŤÅČU@Wn@ÑmKUnğK@°¯UÿV£nmLlUUÛé±óókkmnakV@Ç°óÝXWəÞťIţxmmVÛUVȂÓnWyȁĉkV°WnkĊa¥_K°ÿWna@mU¯wlÝIU¤UXó¥ÝLx¯WmJÇÈŹmV@ƽ@Uk¥ĉkċÅUml¯Vmz¯lUxÅKmbIbĉĖkÒ@ÇèóUxÆÞlm¦Æ¯X@x@²ÝlÈJV²klVl¯ÔlĉÆÞ°lUǖÞ@Ķ¼nUôôŚ",
              ],
              encodeOffsets: [[101712, 37632]],
            },
          },
          {
            type: "Feature",
            id: "6322",
            properties: {
              name: "海北藏族自治州",
              cp: [100.3711, 37.9138],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ōmġxƽUm±LǿþġÔ@kxmWb¯I¯mIUx@bbŹVÇkĵblĉI¯¥Um@Æ¯È@aóUlČ»@w»wXaó°ţçÝkUaV¥ÅbÝw¯lmnKlxUğU¯°Lyw¯@mnXbl@êȁǶUWa¯VÝUğ¤ǫkÅ@mÜ¹XVV@K@ma¯¤ÝnƽĖ¯V@¼ôlèk¼¦xXlbnKÆx@bUx@nnxWJţ¦m¼ñ@°¦lUÞlÈ@ĠxÞUlxÒól¯bmIÝVÛaÝnxVbkbÇwÅÇKn±Kbb@VxLmÛŻbkVó@Źxó²Wkb@¯U¤źĊ@lUX°lÆôUlLXaV°wxUb°xÜôÈKVkÈmlwkÈKwKVUŤĉŎ»»Il¥na°LV»²¯Üy@wĢ°ĸwlwĢw°±_lVk@°bÆ¯z@l_@Ģ±lÅVlUaÞLVnKlnÈ°IllČawÞÑ°xUU@wVkmĠLô»KÞýôaÞ¥ôĀÞmÆmUŎV¥Èl°²°a²¥V@@wamm@Ñn@Æ£żVĠ£@W¯Þl@»@Uk@",
              ],
              encodeOffsets: [[105087, 37992]],
            },
          },
          {
            type: "Feature",
            id: "6323",
            properties: {
              name: "黄南藏族自治州",
              cp: [101.5686, 35.1178],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôl²ôÜêVVkKmnU¤VĀ¯°@LmĠVnLÈL@alb@al@n°V_XmWUÈamaVIn@naV£óVWU£°axÈ¥@aĊwÈ¹@óağbm@kw@maÆw@In¯mm@UkkWÑÅ@@kċÅçVkÝJÅkVykŹl¥@¯ĢUÜX¥òýmmXÝÅlmU@£WlyXW»Åbl@aI»k@klm@UxUUV¼¯XlaUnķI@x@¯KĉUU`ólČ¯ô@¤ÞJk°xVn@mbX¯ĀL`¦ĉbml¯XUlȂĊXzmȁÔUÜVUnnŤwŦJɚÝXÞW¯ô@ÈlUbmln",
              ],
              encodeOffsets: [[103984, 36344]],
            },
          },
          {
            type: "Feature",
            id: "6321",
            properties: {
              name: "海东地区",
              cp: [102.3706, 36.2988],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@Òb¤ÆI°ôU¼°UnnWx@b¯L@lUUWbXxWlƨnxVUllXVUnL@lȀý²KVnƾĢwV»@mÞ£nÆÞÑmLKUaVżĕWVk²ÆÝ@Xw°@ô@a°wóUUmIkaVmÞwmkny¹VÿƧnÅm£X»naV±Ýw@ab@am¯ĉVó¦kÝWKUU@WanUb@ôÇºĉxb@Ç¦w¯bV¤UXôU¤bmm@UJnbÇbXVWn`¯Umk@@bka@bÇK",
              ],
              encodeOffsets: [[104108, 37030]],
            },
          },
          {
            type: "Feature",
            id: "6301",
            properties: {
              name: "西宁市",
              cp: [101.4038, 36.8207],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@kmKVUWkVkUmwƧXkWwXaVV@k°K@aXwmmV¯V»¯óÅJ£amX@ċVţÆķçnUx`k`@ÅmĊx@¦U¦blVÞŤèô¯Wbx¼@xċ¼kVôbÇ@Å°@nV°¦ĊJkĶalÈźUa@aVwnJ°°JanXlw@ĢÓ",
              ],
              encodeOffsets: [[104356, 38042]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/shang_hai_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "310230",
            properties: {
              name: "崇明县",
              cp: [121.5637, 31.5383],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@uŏu»GPIV±ÐɃŜ{\\qJmC[W\\t¾ÕjÕpnÃ±Â|ěÔe`² nZzZ~V|B^IpUbU{bs\\a\\OvQKªsMň£RAhQĤlA`GĂA@ĥWĝO",
              ],
              encodeOffsets: [[124908, 32105]],
            },
          },
          {
            type: "Feature",
            id: "310119",
            properties: { name: "南汇区", cp: [121.8755, 30.954], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@`yĉNǕDwǏ»ÖLxCdJ`HB@LBTD@CPFXANC@@PGBKNECCBB@EBFHEDDDSNKAUNBDMNqf[HcDCCcF@EFGLEBa@ACoCCDDD@LGHD@DJFBBJED@BGAEGGFKIGDBDLBAD@FHBEF@RFDMLE@SGANFFJBANPH@@E@FJjRIACDMDOEKLFD@DbDAJI@AP@BGHFBCBGDCC@DCA@CECGH@FKCEHFJGBFDIHACEDNJDCVFBDCRKRLDLITB@CjNJI^DBCfNVDHDFKHAFGDIICDWBIF@@CFAjFJNJBBHD@CJ@AEFJ@@DH@BFBCPDBMFEQGDIFCNDHIP@HDABFACBJFHEBSZC@DP@@JDBƤ~",
              ],
              encodeOffsets: [[124854, 31907]],
            },
          },
          {
            type: "Feature",
            id: "310120",
            properties: {
              name: "奉贤区",
              cp: [121.5747, 30.8475],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@~T~JjZdDbLXDLCB_J@@FHFZJJIAGH@HGR@BENBLID@@LFCDF\\FpDBDb@FAHKFE@dEDDdC\\GreNMACVMLBTMCCFCEGFAA@DAFDLMHA@OD@BMEWDOC@AS@KGAI_DcKwÕísƝåĆctKbMBQ@EGEBEJ@@MBKL@BJB@FIBGKE@ABG@@FMFCPL@AjCD@ZOFCJIDICIlKJHNGJALH@@FPDCTJDGDBNCn",
              ],
              encodeOffsets: [[124274, 31722]],
            },
          },
          {
            type: "Feature",
            id: "310115",
            properties: {
              name: "浦东新区",
              cp: [121.6928, 31.2561],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@EN@JJLNHjLJNR^GRYVBNZJRBV@PDvbLNDN@LGNER@nCNQNuT_TIVFV\\Z\\XnDrI|[Ʉś²ÏJUHOƣ}CA@IO@@CYDATGFIEDAEBBAGCO@GJMCEDCJRHEFANOCADAEG@@CI@FE@BDIC@AGIAIMiEEB@DE@AJCXJDCJEHGBELGCUCeMAD]CIJiM@DSAKJKCLQDQACUECDMIFCBDJGECHAEIWCK@GLMCCGEACNKCEJG@MMBMC@@CIJUINT@JAJSTEPZZCP",
              ],
              encodeOffsets: [[124383, 31915]],
            },
          },
          {
            type: "Feature",
            id: "310116",
            properties: {
              name: "金山区",
              cp: [121.2657, 30.8112],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@L@BIHFN@@EE@@EFBDGDAADVDD@@EF@CA@IIsRE@GDAF@BF@CV@|FBCHBLCNHAFCADBMDCFZXHILBVEEQA@MWFARJJ@DCX@@TEFBLHAAERE@AJABRPBNK\\BrJ\\VHGND@CNADKDADQjGAGNC@GJ@FCFFHC@JF@@dLBDSFADHVG\\DTEPDDHJALIJkJDJCDIPE@YDCBiK@DONE@EH@BAF@HLJA@EIA@ALKNA@@FIFAFHR@NALadsæąyQY@A±DŉXUVI^BF@FFF@HBJEDFFGFEBSRkVEXGHFBMFIVW@GAEEFOIAIPKABGWEKFSCQLQBSEIBC\\FdBLRR@JGACFDDEF@AWB@LJJYNABBA@CUEGPaO_AIE@MYMFIGAEFECHSAAKAO\\[JEDB@E@MMA@@AGBKMGDFFCDDFEDFJF@NPBAFLHFH@EDDHBADDC@DDCDHHCDDFDABDAD@FEFOBCJ[D@HEDDNJBDDHABJIBBvGLBJAH",
              ],
              encodeOffsets: [[123901, 31695]],
            },
          },
          {
            type: "Feature",
            id: "310118",
            properties: {
              name: "青浦区",
              cp: [121.1751, 31.1909],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@RUNKdOFDJCbRFMLAHPLDN@JGL@@APBWYCKN@TU@SHGCEJIDIJKVIZVNM`iNY@CIE@CA@KBOEGEUFCCSADEIEFCDDDIDDHC@CKIeDCG@IG@DHWFEEGCH@@GO@@O]CNpeEQDBFME[JC]DGF@CKOA@QSB@GB@@GW@@ED@AQIJIAAFE@@DO@CFI@KNG@CDACAFEGKGBEGBDCCAIFCCLIECFI@MBCLDHGNAHSF@DMB@EEKBA@@C]DEICFG@ADBHGFKCDAKKHKD@@FHGAANGEEFCHKCECBCKG@ADKCNE\\[A[I@@mGBDQQEO@BCE@AI[AML@JGACLOAFKEMM@EQKC@CUCBCCBCHEA@FF@@FM@GEAJK@GNF@EXPH@FD@M^@HIADJCFDBER@DK@@DE@CAKFOCCBDHIBCNSB@GFC@GQEEOWFICGDUAEJIDBTAHJHEB@DIF@NE@H|HBDBEH@DKBAHEF@HEEUB@FGFGCCCE@AHOB@NH@PRLVNNFBX@RCPbAvMtBfH@DJF@ELBFA@EH@HNED@FFB@HLC@CJ@@DJ@PIRf@HE@CFF@GPHD@DKE@FFBEFFD@DEFCA@DD@IjCRFBAHFDKD@HF@@PM@H@BlbDJDBFEF@DLXB@HCD@@IFCBIFEJD@FDC@FBALLF@PAACJERACAJCBD@EL@JD",
              ],
              encodeOffsets: [[124061, 32028]],
            },
          },
          {
            type: "Feature",
            id: "310117",
            properties: {
              name: "松江区",
              cp: [121.1984, 31.0268],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@DLDFRN@FNELPBDKHB@INK\\BBJF@ADP@RFCRHA@nJ@B\\[\\MFLDBCH@DLDADFGLEDFFMHBBGH@EC@GLLLCBLDHEAGBCH@DEFJ^C@DB@LAFFA@CNE@GTMBGHKCAD@NEJFDKJDDJEDBCDHAAFLHFHBEBDDCH@LMJ@DEP@@CF@BEJBJIBRC@@FX@@HA@@HTA@RPBDLE@CHD^\\INFAERCfFMo^D@PP@@HG@HDFFXECGH@@JDHfCLJ@DGDCCCJCCEDJFCFTBDDVEHFPFLAB@NBFCFKFC@CHIACNOHWHCAAFIDD@CDAGEI@ACFMF@R@R_@GQED@EGFEQEDE_IAHKAEXCQUOQCUDEN@ZI\\DDmAMHCICDSOC@EG@BKHIGMIBCGOCSF[CUHCGEBCTKA@cE@@IGDEEEDI@@HMDBHiHCRCBCLMB@DMCGH[UqI[AMLOAAQIB@BQFBFGBAKFE@SW@CDI@QIEBNXB@FRUFKAGJYWDENCCADBBEMGKDGAAD{EU@@DAEE@CB@HQFJt@JDBE@@FC@",
              ],
              encodeOffsets: [[123933, 31687]],
            },
          },
          {
            type: "Feature",
            id: "310114",
            properties: {
              name: "嘉定区",
              cp: [121.2437, 31.3625],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@F@LI@IDKJADKIEJICADGACFECCJ@HKCAFOHAJI@aCBEE@ICAEB[GFGCKL@FGEIFADMLCAEJM@ELQECEIG@BE^QKKLQCA@EHBIGQ[GEHOMGGDHKH@JOECFCjCBEFDNCACMBCILGTABDLEEOEIG@GFIMM@CGKFBFCDE@@GEAGEEACIcGaHMFITIHDN[AKF@FS@OA@BK@IHM@KCGOKBENaQIDECcPMLQVFHFB@BFBKLGD@FAJOVGIACQ@A`LPCB@JEF@RU@ANS@@RCL\\HIFpRBFRBBDKLLDADJDGBFDABHBEDNF@DGBBBADKDAHC@\\JJFBDEH[DEFDH\\LX@XLBLbT@DNJLDCEL@VJABJNDHB@HBHYFBAA@GNFB@@AFB@AFABFLFBHFCL@HJBAFBLC@DN@HN",
              ],
              encodeOffsets: [[124213, 32254]],
            },
          },
          {
            type: "Feature",
            id: "310113",
            properties: {
              name: "宝山区",
              cp: [121.4346, 31.4051],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@mÖoÖi½[s[YEUJU`SCIEBCCWJY_LIICDWU@@FaBCJIB[ICH[@@CDKEE@MK@@IMCAEBCH@AMFI@SMGEFGB@FK@BHCAIFJNQD@FEBDFMBKGACG@ECWH@@CDDTOEEBGEK@GC@EE@GPHFR\\JHGA@FDBKRLL]RAFH@FJFDKR@FINBFKDCNEBFJEHK@DLEH\\HFADB@JFFDA@bIJGBEPDBGLI@DDEFBDCHDBIJJFCLIBCL@JKJE@ADHDBHJ@HIBBDFHBBAEIJ@BJFAVL¢",
              ],
              encodeOffsets: [[124300, 32302]],
            },
          },
          {
            type: "Feature",
            id: "310112",
            properties: {
              name: "闵行区",
              cp: [121.4992, 31.0838],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@T@@ELE\\BCMJGJSNEbGdHDJFBJAFIEIFCEWG@@gMENSFCVJFAxR~B@IH@AIiI@GE@FGEAFQPDRiV[\\DFSGMHAXHDOMCJCDETBBNVJJI@DD@ANNNH@FILDDMFBDHNDHKL@XDFGLD@EHGFD@DDB@CDDHCDAEAHG@ABOJ@BIaC@CECLKPFNCDCJBiQEIF@@@OGBMIAEEBMTHF@NKEC@QFEGA@EBCKAACHCLJHEFHHB@AFCAIEACIC@HG@KCCDC[ECEED@KC@KJMAAFQ@GHG@BHIJYIGE@EI@A`KDWCaKcCiY}I}S[CYJM@CFDVPRRVWDFLBBG`JCFRFEFFHC@RF@HQ`Q@E@ENBDJ@HFCB@DCCEJBBGDGXMPBDGJ@DEDELEDMA@DJF@DMZ_jMNYUUJILCJIJDFGH@TSVM@DLXZ",
              ],
              encodeOffsets: [[124165, 32010]],
            },
          },
          {
            type: "Feature",
            id: "310110",
            properties: { name: "杨浦区", cp: [121.528, 31.2966], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@V@CXJDKJZ`XIDDFADJvSRMDM@mFQHM@KCMKMuaOCU@BDAJSX@HKJGD@PNJCJWAGT@R",
              ],
              encodeOffsets: [[124402, 32064]],
            },
          },
          {
            type: "Feature",
            id: "310107",
            properties: {
              name: "普陀区",
              cp: [121.3879, 31.2602],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@F@@FHDL@HFFAPFCSDC@@XGFDH@BDLHNACEFA@ERCIMJEDBAGL@@EHAFENHHJ\\ONQBQCIBC[MKACKI@GGGH@I_G@CW@[DMHCDIBMTDHN@JNHEH@FJFPKFACSBKHDJNABDMDECAFiDEDFDIPG@GLHCNH",
              ],
              encodeOffsets: [[124248, 32045]],
            },
          },
          {
            type: "Feature",
            id: "310104",
            properties: {
              name: "徐汇区",
              cp: [121.4333, 31.1607],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@RADL\\NCPHFfLJaJ@FWLGMGIK@IFMDOYYFOTSBI@IMSAMSACFIDNDCPWGGBHNET[CU\\QjOCERFBEHF@@HjJBJG@@J",
              ],
              encodeOffsets: [[124327, 31941]],
            },
          },
          {
            type: "Feature",
            id: "310105",
            properties: {
              name: "长宁区",
              cp: [121.3852, 31.2115],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@HFFB@HF@DCAELENSJADCNG\\CX@@D`H@JHGHHJ@BINBFUGEDO[MCKQB}AwQEBUIEDMTNF@hH@FXEDFJEJIB",
              ],
              encodeOffsets: [[124250, 31987]],
            },
          },
          {
            type: "Feature",
            id: "310108",
            properties: {
              name: "闸北区",
              cp: [121.4511, 31.2794],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@CSG@BQGODUPWTOBQAAFMECKBGEMFKEOHADDJARMR[PGI@TEJBNG@ADBFND@JL@@NFFCL@D\\@DG\\JJADI",
              ],
              encodeOffsets: [[124385, 32068]],
            },
          },
          {
            type: "Feature",
            id: "310109",
            properties: {
              name: "虹口区",
              cp: [121.4882, 31.2788],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bA@E@QHSXBDIMI@OHCLI@GTWBIACQAYIOFGCENBBARSPOXCVHPARH@DT",
              ],
              encodeOffsets: [[124385, 32068]],
            },
          },
          {
            type: "Feature",
            id: "310101",
            properties: { name: "黄浦区", cp: [121.4868, 31.219], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: ["@@NEHFLAFDHDPEAMZUHQQ]IMKJG@EPERABHBGRUCCNGV"],
              encodeOffsets: [[124379, 31992]],
            },
          },
          {
            type: "Feature",
            id: "310103",
            properties: {
              name: "卢湾区",
              cp: [121.4758, 31.2074],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@VDHQGABAFQFOH@LIiKKHEXI@IbAFZB"],
              encodeOffsets: [[124385, 31974]],
            },
          },
          {
            type: "Feature",
            id: "310106",
            properties: {
              name: "静安区",
              cp: [121.4484, 31.2286],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@DLLB\\NPGLFHUDMYABEeKEVMAAJ"],
              encodeOffsets: [[124343, 31979]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/shan_dong_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "3706",
            properties: {
              name: "烟台市",
              cp: [120.7397, 37.5128],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ŤLLllVń²è°xżĢĠÆlÒŤbV¤ĊXnlĢVĊÒÈ°ĊŰÞèL±@џn»VUźċ²»ÆkôVɆkĊŃ²kŤVVwUUVmUa@KkU@mUmmk@UwUkmW@UVIXa@mw@aKULax@Uk@UbWU@yULmK¯@kXVUwm@@JUUknWKUVLUbU@wWykIa@w@mUI@aUVynIWak@@Wbl@@knmK@wnIl°Kna@V¥ğ@ġUķ»¥@UōJX¯¤k@wmI¯k@mwak@@lX@bUJ@VbknWxkLkxlLVlkLmb@bU@bU@VbU`Vb@nL@mbU@VnUVmnU@mm@kIUWVIUKVkkUJUnmL@VmLUaVWaXamU@U@KUUmVUJUVÇwğnm@mXĉV@l¯xnô",
              ],
              encodeOffsets: [[122446, 38042]],
            },
          },
          {
            type: "Feature",
            id: "3713",
            properties: {
              name: "临沂市",
              cp: [118.3118, 35.2936],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bXll@zlV@lXXmkbVVlU@Vn@@Vmb@XKVXWJ@XXl@ÈbVLUl`@XXV@VVUxVbUxVb¦@WnXVJ@bnVUzl@°ÆxUKlU@mUUnUlUVWVUnVV@XX°V@Vll@VkaXVl@Ux@bmbXLlKlb@b@bUJn@@b@n°x°K@an@@UlLVKVbXb@bVVnK°LVa@UVa@XwKVxnLU°@naV@UWUkWULmVwÝKUUla@aó_@mK@aUU@WUkwVm@aVI°W@@IUw@a±¯@¥kUVUm@awkw@K@kVKk@maXalI@alLWXblaVLVUV@LnK@l@waXaLlnUlLmV@n°J@_VmnIVym£UKmI@WnIVm@anUVmÇ_kġIÅWUXÇm@U@Ý¯Å@@naWIVW@IkK@klKn@naWImk@abkKkLWnWkLWmk_@UaVUKmLUw@mn£WwUmUaóV@UkUm@UKULUwmJUX@WW@XÒzVblJXWXk@UVWKX¤UL@xU@@VUaU@@XmVkLmWkXUyÝLmKXnV@n@lx@bWLnVVn`knULmxUlWLXVb@VK@z¯x¯¼WxKUn@bk@lVVVz",
              ],
              encodeOffsets: [[120241, 36119]],
            },
          },
          {
            type: "Feature",
            id: "3707",
            properties: { name: "潍坊市", cp: [119.0918, 36.524], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l@@UK@@L@bX@@VlL@JLUVnX@`ÜXn`V²mJ@bU@@nb@l°xnnĸVÆ°@Ċ£Þ@lWnÑnkʶJmó°w@kk»V@»¥k@V@kw@wVmaÅmaô£ŎXI@mlnKla@mV_UK@kUkw@alWIU»m@WUIl±UUÅUbkJ@a@wUKUaVIÆmXIWaka@m@Ul£XKVw@UIJUkmJVkU@aWKImV@UxmL@bX`WXU@U`ÇkUak@@°UblXkmLUKmL@VULóVk@@Vlbn@Ub@ċaUJUbIUlVLUVVbVKXVlVXU@mb¯@VmKUwLWx@Ub@VUb¯KmLUU@aWaUaULkK@Vm@@b¯L¯w@ma@m@UUU@U¦lJUXVmkb@nmXVWkbIVxUV@VUbWLXVLW`Ux@nk@Vn@x@VkJ@V`mXk@VxV@lVI@VULVUIV`°bVXXxV@VWVnL@xVUb",
              ],
              encodeOffsets: [[121332, 37840]],
            },
          },
          {
            type: "Feature",
            id: "3702",
            properties: {
              name: "青岛市",
              cp: [120.4651, 36.3373],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@nUJXL@blVUnIVlIVJ@UxWLk¤@V@nlbXbWJÅnUJVbVL@x@blIaÆVVVk²VJ@XnV¼JkX@blxlV@VLU`@nkbLkm@nWJōó¤bnÆbUn@xlxU@l@¦@¼Ul¼ĊUnW@nĠmÈxUVIVnUVV@LV@nVWbXbUVbnK@UnKVmVIllUVLUJVXlJ@nnV@nmVUUm@Vna@K@mUaV_UaV@aV@@aanlKUkKklwlKXwlma@UVI@akW@l@bnxl@°nJxl@°£WŎIUÑn»lamô¹Ŏ¥VaUUkmkġWɱIUUŹ`@kk@ĉƨřV¥_Ç@Ĭ¤ÝL¯m¯£ƽóķwUW±ī¯kōaĉĕkğmó°bW@UKkLUaVmz@V@UxVn",
              ],
              encodeOffsets: [[122389, 36580]],
            },
          },
          {
            type: "Feature",
            id: "3717",
            properties: {
              name: "菏泽市",
              cp: [115.6201, 35.2057],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@¥IVUÈmÞ»@UlU@Un@VW@UVmkk@aVUUKVÝ@UVknK@UV@VVnIV@wnmwmKXaWaXI@UV@Vy²blkVKkamU@kb@Um@VmUkmKmkXKWwkU@Ul@UnK@UVUUmKXwUVLwKU@@Wl@@wUkV¥@@I@W@_V@VWUw@UUa@aaWa@@_mKUwl¯amzmV@WKnU@kWLķaUKbÝVmV@UWÇbÛ@X°UbW@XmVlk²UJUbmLÇxÅWUzl¯Ll@VkKXUbWJ@bU@¯@kbLmKka@l_WXºVbUz@Jn²V@¤lXnV°Ln`WbXLôVlKVUxXnlXLlU@bVV@XJWLUVnVV@@nl°nnVKÈbVXÆJU°VnXVkV@@xVL@Wlb",
              ],
              encodeOffsets: [[118654, 36726]],
            },
          },
          {
            type: "Feature",
            id: "3708",
            properties: {
              name: "济宁市",
              cp: [116.8286, 35.3375],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nam_nKlVLXaIl`_@KVVXI@m@w@@k@Knô@n`VbV@@LL@KVVn@VX@VLJl@VUUU@Uam@UkwKWaXamkJmIUVUÈblaUnV@kVKl@@lXL°kVJ@VÈnVJUX@VLXl@xVLnU@VKV@aIUaV@bĊUxKkVJXUlVUVaI@WUI@KlUnwmWk@WXIWUL@Wna@Um@@UVkUUlanWW@kkU@ykWkaWVUlÝbUU@kJUIU@@JmaókLKÇUUkKWLk@WbkUUabmKn¯°¥V@XwV@VanaVaU_@Wlk@WÈ@VUÈVVÛmaklKÈ¯lLVUX@lK@aX@@kV@VmV@VwnJV_UWUwXam@kW@wVUkKVIUUVmU@UV@IVK@aUL@aV@LmUKmx@ômLkUWJ@nXmlUxUL@VknVUU@VL`Ub±LkV@kUKÇbÛ@UWó_mJ@Wk@@X@VLxUKVWxLVnUV@VmL@Vk@VlVXxWLnlLnVlUnn@@VlaV@nlbULkl±aUzU@@VWJXbWbnLnxm@xUmJUUU@@VmLUl@VUÞVLUV@bllUn@VUXm@@VkV@VÝ¼ÇnUVJ@¦nnlnVlL@Þb°KVV",
              ],
              encodeOffsets: [[118834, 36844]],
            },
          },
          {
            type: "Feature",
            id: "3714",
            properties: {
              name: "德州市",
              cp: [116.6858, 37.2107],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@¤@VmbVXnVVbVJX@ll@zlVInl@@bVxUbĠl@ÈblaIxXVWb@L@nULWVXXWWLnL@`@LUVVL@lVnJU@UUkanVôôb°¼VÞXIÜbČabôWXÞWÈzÆmnLVJ°ÈnlV²lbnW@@UUVmnwmkkKWkla@mVIUKUaaUwmnJU@@amIk@@bVlkX@mmUklUUa@_UaUUV@wwWkXmW@I@WUaÝU@UXaWUU@UUVW@UUUWUn¥nUVa@m@k@alU@wkLWa@UUm@@wnmUwla@anKn_@alK@Ý_@@WUUUmlkaIyU@UwU_Wa¯yU_mWUwkImm@InWWUk@@UVWVkW¯U@VL@b¯b@l±¦@VV@lUbV@kxVnUl¼XV@b@lV@nIWxnb@UULxÅxm¯aUwU@mUÅVÝKULm@bmKUXó@",
              ],
              encodeOffsets: [[118542, 37801]],
            },
          },
          {
            type: "Feature",
            id: "3716",
            properties: {
              name: "滨州市",
              cp: [117.8174, 37.4963],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vb@`bVkVlnV@nlWUk@al@nJ@bV@InmVxbVbVLUJ@nkblXlLnlmxnUV@V@mXnlbĸ@nnVxb@lnXV@UJ@nVxxnxVbÆVn¯ƒĕ@@wÈçUÇlķVIb@Çmk@¥k@UkUK@aWakUóJW_UW@wkkWK@U@K@XUUkmUUalKXala@U@kkWlkÈl@kVmVIVmU_awnwVW@wwU@wU£wkJWIyUI±bkVUJ@nmVUklXmx@lnbWkVUkLWxkKUUmUkbJ±LÇxUKmkUmkkWamUaVkJÆ_²KĠ@UW@wU¥nUWwK@aÝUkÅVaVK@akLW¯I@bnbVx¯JWñWbUL@nV@VmbkUUV@IÇak@@bWak@WJUJWL@bXV@@VJlb@zUlUUImnbVmz@°UV@VbV@@V@L@xLmKUnmJVXJ@VkLW@UVUL@b",
              ],
              encodeOffsets: [[120083, 38442]],
            },
          },
          {
            type: "Feature",
            id: "3715",
            properties: {
              name: "聊城市",
              cp: [115.9167, 36.4032],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ô@VWnLan@VKÞLÆUnVV@xVbn°ÆwwKVV@maXwmJU@@k@aWUk»VUmlw@UVa@kUU@²¥@k°a@aK@UU@mmm@ówÑ±¥¯@@wKmwI¥kU¯UmakJmIUaVkKUkm@VUUaU@UaKUK¯@wUVUIUKVwk¥wbV@xn@lWnXxlL@`XlJX¦l°XxW¦@¦Uln@@@Um@@VXVmx@¯bllUnUJ@VULVn@bxVVL@bVlnVVblVÈnVlIVJLôlJ@xl²",
              ],
              encodeOffsets: [[118542, 37801]],
            },
          },
          {
            type: "Feature",
            id: "3705",
            properties: {
              name: "东营市",
              cp: [118.7073, 37.5513],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ͬUǪlô@°Uw°ōĠ¯»Ģç»XÇ@wwƑaÇkwVƑ¯@ÅķUmm¯w@ka@mV@@anIU±m_ÛW@_mWVUK@IkK@UW@@a@K@L@Vk@±U@UV@lm@mUU@kLmxV¤@xVx@xUXmxxbV`UnUJnU@lÇkkllX@l@VkbWbkLVbnVVlWV@@L@VXLll@xVXX`ôIlVXb@bVLVll@@¦nlÈ@aUJkĸVÈÇè@x",
              ],
              encodeOffsets: [[121005, 39066]],
            },
          },
          {
            type: "Feature",
            id: "3701",
            properties: {
              name: "济南市",
              cp: [117.1582, 36.8701],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²¦Òôxn@nn@V°VlXUUX@Vl@XVmX@JnnlJVxnXV`°zXbV`VxV@zJlbkVnVV@X@`@ÞkL@bm`mL@bkbxnVm@xn@VV@XbKl@xkV@b@l@nUbmVm¦XVVV@VUXVVV@XVWb@VÞVVb@X@JnXlWXx@xUVV@aVKVUX@lK@UIUWnIVmnLK@w@K@UU@a@UVU@¯nyUmanVJVVk@ykaIU@@WU@aXKIVXIl@Xb@al@Èb@JVUlVna@UmU@VKXaòX°IUwma@aU@UU@wVW@Ñw@aI±`kbUkwUmJ@UkmÇUUkmKknUV@mJUkaWka@KmKkULmyXa¯_@WmImmbLmUkVUbUVJbUkkWJkUlIUmkLlK@knaVmkI@mWaLUKUU@@VmLUVLWK@UUUWUkkVmx@Vl¦",
              ],
              encodeOffsets: [[119014, 37041]],
            },
          },
          {
            type: "Feature",
            id: "3709",
            properties: {
              name: "泰安市",
              cp: [117.0264, 36.0516],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n¼WnxL@x°@¥Uk@nwlUVlXVV@VXLKVUnK@UV@VVLKXb@nlJUnmb@lkLKlVnJklVXIllVaIVUValUnVKannnJ@X°`WbnzKlVnL@LbXlbVlnI@VUU@UmV@U@U¥@VmV@@_Ua@m°@@kmUUm@UVmn@nX@@aanJVUVLmlIVJn@nkVLVa@KVmVLXVVL@@U°bn@VaV@@K@aVkbWaXUVymU@aUImWX@¥UaVwUaVwUUU@WW@k_VUKÇa@nmxkV@LVJ@XJUbVkUWVUIlLwĉVaU@VbJ@bUUL@mVUK@wWkK@UVWUIÇm@UUI¯lWK@kk@UL@lmUVkbÇaUVVnJlInWbXbLxVln@VbV@VUV@kIUK@UWm@UU@LK@KU@Uam_ó@m@L@l@@x@nWJUU@L`k_JWbUKkmLn`mb",
              ],
              encodeOffsets: [[118834, 36844]],
            },
          },
          {
            type: "Feature",
            id: "3710",
            properties: {
              name: "威海市",
              cp: [121.9482, 37.1393],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VbUnVVUxĊ¼¼ô@ÞÑ¯WǬLŎUÆW¹UÇō¯ÑÝkţţóġóLł̥Uwm¥kÝmkkKóbÝ@U¦@mb¯LkmJ@xLmn@lk@a@X@lXbmJUzV@bVJ@n@xblJXzxV@VaKVUXLlmVV@In@VxUlW°@nLVK@zXVVal@@VwbVKL@bnx@WbUJ@VnXVlVxl@nnnV@lV@L",
              ],
              encodeOffsets: [[124842, 38312]],
            },
          },
          {
            type: "Feature",
            id: "3711",
            properties: {
              name: "日照市",
              cp: [119.2786, 35.5023],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UaVUUKVkJVaVIČb@Vam@ka@Ul@UôVK@UnKVLnKlkWVa@¯l@VbÈlV_V@XWW_@anKVwUmVw@@UnyUVblKVLX@aô¯ó¥mÛĊÿÈ¥Þ¹lUī¯Kĉ¼ʟbÇVUUXmakJUnmV@bUnmJ@XnJVLn¤UzmJUn@`¯ImU@nKVkkmKWbb@xk@mL@KUUVUKkbWaXkK@bkJWbnbl@UL@lL@lxx@bnUVlV@¦²°@bVx@J@¯XUJ@bUnlxVX@VV@bL@nô`@bkbVVÞLxnU",
              ],
              encodeOffsets: [[121883, 36895]],
            },
          },
          {
            type: "Feature",
            id: "3703",
            properties: {
              name: "淄博市",
              cp: [118.0371, 36.6064],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nlKV@nVn@@kVU@²VVaU@wmKXU@UUWwUW¯aU_JUVVK@UJU@kUw@UlnWU_@lI@U@wUml@@mVwX_KWUXKVa@UVUUwJlaXWUn@mlanUVWkIV¥V@VVVI@a@akakLWKna@aVwk@WUbUlk@k@U¯UWWU@mUUVUXkVmVVV@nkVLVÅw¯k@WVXbaUl@bV@@b@xkVVXVxkJ@nk@@VLUlVbVXUVVUzVLVbUbVVWVkLmkJ@n±@UxUVVkV@bx@ÒUX@xVVV@°JXlK@bULUblÆÞV@bLXxmV¦V@xXVğ@±LÅ`IUlVbnbXllVnnlVLÈwK²IlanVVVlLwXlKVlUXma@knwWlkVnU@mVIUl²aVJzXJlI",
              ],
              encodeOffsets: [[121129, 37891]],
            },
          },
          {
            type: "Feature",
            id: "3704",
            properties: { name: "枣庄市", cp: [117.323, 34.8926], childNum: 2 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@yUUUkl@@aVmLXw°»°w@yL@UUaWXKVknwVKlm_UmmUXK@aw@k@mUWmUL@@@£@KbÝV@akwaULmbUKLUU@lm@°mL@nUJVxVXU`mIUxU@UnU@@lW@@bkLW@UVkKÇ°kLlbnUÜÇUUVÇ@@Xkl@XV`UbmbUbU@WxU@¯¦m°nLaVblVXal@XKlLVVÈLKôlnbI@V@VJI@lVVÞaVkXU",
              ],
              encodeOffsets: [[120241, 36119]],
            },
          },
          {
            type: "Feature",
            id: "3712",
            properties: {
              name: "莱芜市",
              cp: [117.6526, 36.2714],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lmnLVlÈVln@VnIVlxVla²_JlUUUVVw²@@mlInlKXUUUVaUaKUVyUUWVUUaVkUK@l@@mlIUwUWlU@w@aU@@LU@Ubm@¯a@V@UKWUUKUn@LUbUKmlm@UIkJnUKUVmIb@b@mWm@Un@VVnnVl@¯@@nVb@`U@Un@¦@V@VUVnV@",
              ],
              encodeOffsets: [[120173, 37334]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/shan_xi_1_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "6108",
            properties: {
              name: "榆林市",
              cp: [109.8743, 38.205],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ýVnIW»W@»kUÇLÝU¯¥ÇIUWWÑUWwX¯m@»n@ÜÈķô@a±kČ±wÑmwçċmU»ÆkkVyImĉÿ@Ý¹WnwÇVÅazmmĉ¦ókVmxxU¼VkVm_UlVlk°IVkmJa¦kLmmV@XmKnlUôVXbb@UaÇLğÜÅw£mKnmċwÅ@UkbmaVn@m¯aUJm_k@kWXyl@@kÅamwLUÞmWÅzUKUk±@b@nnKbX¤mzVVxÇn¯@ÒknWVUbkķÈÑWkk@VaU@mUkbÝÅ@Ý¥ÇbkĬXV`kLÇVmalUUanV±nwmkJ@In°KVw¯UnÅ@¥U±bUU±mWbÛKWnUm`UƒVK@bmnmÈÅ¼@VL@xxmŤ°n@VmK²VllKkô@êÜV@VXLlm¦UV°Ș¯²ÿ@¥@ÆĊ²ImĶnnb°bKVĸLlÞ@UȮÜ°IVÞÝÞlx@ķĀWUxèÆ@°XnlĊĖ°mnV²V°ÒÆ¦aÞ@zll@bÞĀl¼nKĊ¼óÈb²±IǪÒ¯ĖV@lxnVlkJlaXwŌĉ@VnlÆĕUÆLèŌŤôxÈlU@xlaUċĕXmIWmnkVVVW_@aÈWUUmk@¯çVm»±W¯n¥VmkXw±ÇVw",
              ],
              encodeOffsets: [[113592, 39645]],
            },
          },
          {
            type: "Feature",
            id: "6106",
            properties: {
              name: "延安市",
              cp: [109.1052, 36.4252],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@kkÇmImUwVkUU²WmVkm@m`mIĢĕUVa@mXÿVVkyUýĕ@l_UmnWKVkţ¥awğ@@aôWakUma¯¯a±£kxmmxUwÝ@xmUb¯KwóÝ@kmm¹Ub@lklVbmnnVUV@xUknƧJUX@LÇWkwLķƧÅwWJkLkþĉxWzJUnÇk@Ɛk¼ÜÔÈKè@°lÈÆk¦ln@l¼@l¯L°UUVÇ°¹`m¼mXkbUaV@U¯x@¦ÇUUmlmUVmnnmlkw@@¦ÅÇLmx¯Ikl@¦mÆ°VUx¯Lm@JInlmxU²mVbkVbUnÈlKU_WlīÈaÞ¦Æ@ÞlanV@VUbl@XlÇÒĸlVaUXlm@Ñ°ÈmUwUnyW£amL@ma²@lVVLÆynXÝVKnxÆb@lk@WzX@lln`IV°b@nmUnbaVlÆ@ČxmnnL¤ÆxĠÛÈKVb@aWaUókVmnL@WUnnKl¥bnIlU¯JlUkVkn`lUUV»wnwlUôĊ¥nnyÆb",
              ],
              encodeOffsets: [[113074, 37862]],
            },
          },
          {
            type: "Feature",
            id: "6107",
            properties: {
              name: "汉中市",
              cp: [106.886, 33.0139],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lKnb@nlWb°bkxĸwVb@łnlĊ¥L@XlÈVblÈKbakVwôml²`n@nVKlk²xŎ°¦VUJĊw@çnWçÞVkUóÛ@¥kwUmX¯WÑk@UymIUwlUn¥mUk²a°¯V»@ÝVÈÝċÅÅVl»@l@a°±@_kammÅba@m@Å¼KknõĠ@m¯LÅwLVxmb@¼kV@mw¯wVakKW»X±¼¯Vkxb¼W@nx@x±bóakb@ÝmU@ķÓÛLkVUmk¯¤ÝLUlÝ@Ýzx@x°bmX¯aUJW¯k@bÇWwÛwWx@XWlb@VÈUlwLnl°VlUô¦U°¤VUxVXUxlbkVVlI°ÅVlU°m@kÇU¯xUlLUlVL@b°ĠInĠ°ÈnK@xÞa²naUyXUKVkWô¼Èaz°JXUVÇV_JVz@nb",
              ],
              encodeOffsets: [[109137, 34392]],
            },
          },
          {
            type: "Feature",
            id: "6109",
            properties: {
              name: "安康市",
              cp: [109.1162, 32.7722],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bĊaƨèwôô¼b°aXVÞVUÞ@aXm¥kImx¯¯V@anU@UÇéğL@¯¥V£m@ÝÈbKX°wČÿb@xÈblxÈ¯ĊmÆUVnÈ@ƨÜLĢ¥Źn°VnnKaô_ÈwUaXmnW¯klLXÇō¦ÝaÅVmbğUn¥±wÅéVan¥U»°am¥£Ý@wVw¥nUÑUmmVwmķIÅaóVWxkblb@ból@ğÒĉ¤ċX¯XxkÇ@óÆÅx@xķ_kmÝÇ£kblb@`¯²@bk@k¼ÆUČÆÞÇÞU@U¼¯°±bVlnm¦kVVxnJVz@lÒXW°nVlx@¦ôÜVUlÝXèm@è",
              ],
              encodeOffsets: [[110644, 34521]],
            },
          },
          {
            type: "Feature",
            id: "6110",
            properties: { name: "商洛市", cp: [109.8083, 33.761], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²nlôb°aVwnKÞI`°wXôw°VĊ°@ÅÞÆVzÞK@x@aLÅ@b@nLl@lnmnLVwabVVnbU¼V°blbÈ@ĶŦb@nÇ@amIyUI@ĠVmôUVwkwlanJ¯lwó¥@an°J_@nóƒó@£l¥UwmaÑ@Um±V_J£JUW¥¯@_k¯¼mUVUè¯b@wmL»ğVmağI¯¤ċIUWXKĵ¦ķaJUbIlUóVmk@WÅÅÇ@mUÅVnĉÇ°kwÇa@waċĀ¯xWLÇa@ÞnU¤°¦@ĠKÈê@VmV@bU°°nwlJn¦WbÝ@V",
              ],
              encodeOffsets: [[111454, 34628]],
            },
          },
          {
            type: "Feature",
            id: "6103",
            properties: {
              name: "宝鸡市",
              cp: [107.1826, 34.3433],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@£@°Ib@¯°ynŹaUlU£Umĵĉ@@ylUÞ@@£kWU¯WaU£¯ÇV¥@kb¯wn¥ÇkUÇnU@¯±kULm@m±_kónUxlbaÇLkUaÇkW@Kĉ¦km@ŁUaķxlw¯aXak@mmakL@mÛ@¼m@lXV`nKU°°@²¤UÈ@VxmôxKlVV²aVwXlaVlx@UVnÇnk°VVLlkIJÇk¯V@knÆn@lznmlVkzVVVx@Uxz@x±¼VxxUlkb@¼ČkVXlĠkôV²wLUKlwJ@aIV¥Þn¯Ün@nkl²kÆ@°aVbnI@Ťn",
              ],
              encodeOffsets: [[110408, 35815]],
            },
          },
          {
            type: "Feature",
            id: "6105",
            properties: {
              name: "渭南市",
              cp: [109.7864, 35.0299],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@ÈôLxU°Þ@mÈnl¤nUôLwX`@ÞÝLUmLôôbVbnºlnÞ@ôx°LanVwÞ@Vxnwnlw²¤b°°bVnlXbó@bĠ@xb¦ŤVXġ£W¥ƽɽó@ýóƝÝ»£XmƅĊkU@ókťaĵÇ@aka¯UV»maUUabUxmKnkm@kmK@xó@¯n¯KÇ¦@ôÅèlxkx°nƾ¯KU¯WķL@VÝIUbyWbX¼Ç°",
              ],
              encodeOffsets: [[111589, 35657]],
            },
          },
          {
            type: "Feature",
            id: "6104",
            properties: {
              name: "咸阳市",
              cp: [108.4131, 34.8706],
              childNum: 14,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@IXyĊwlýKlXIVaķ»a£¯aVU@awÈōaL²»VUln°WÈ¯W»XazVaÞJ@U»@¯Ýbğwly@£kÑţ±WÑ@kaIUn@¯ómţUbU¯lÇIÝb@¤Ý@kV@zĊ@ĶnVV¤kVbmź¯z@°a¯J@¤@bUxb@`xUÔ±ºVXWUnUJLĢ¯ÈKlblmÈXŎ°U°LlkÞK@Èxl_°ĶUÒkbl",
              ],
              encodeOffsets: [[111229, 36394]],
            },
          },
          {
            type: "Feature",
            id: "6101",
            properties: {
              name: "西安市",
              cp: [109.1162, 34.2004],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°²@mVVÈÈl¦m°xla@U¦°ÈV¤XbV°lXÞaÈJ°kVaŤVôn°@mVJlb@XÒŤ²lÒ@¤kzĠxÞa@°¼ĸK°XV°Lƽ¯mlwkwÆç@óÈ¥°L°mô@w@aÆK@b@wÝLyÅUÝÆ@ĉ¯¯UóxW¯x_ÝJmLUx¯bóak±mÝUUW¯ba»óóxƧçĉbaĉxIUV¯¥ō±wl",
              ],
              encodeOffsets: [[110206, 34532]],
            },
          },
          {
            type: "Feature",
            id: "6102",
            properties: {
              name: "铜川市",
              cp: [109.0393, 35.1947],
              childNum: 2,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÆxĸƨKlxÈXK@VWƨIlmV@wVUmUnmUalk@kVaUaóaónKVÞK@ÝW_xóKmVk£ÇmnÝ@¯VwóK@Ç¯XkmVU±¼KbÇŎx@bUV°b¤b¼ĸUb",
              ],
              encodeOffsets: [[111477, 36192]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/shan_xi_2_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "1409",
            properties: {
              name: "忻州市",
              cp: [112.4561, 38.8971],
              childNum: 14,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vx@lnbn¦WlnnUm°²VVVVVnUnºlz@l@J@kXWVXl@La@KULlbnKlLnKLnKÆXn°bVV@bUVl°Un@LnaVJUbW@UX²l@ČwlVVIWnkÆa°anVKn°UW¯@aVUVk@Un@aV@ValwUanmWUk@WVUUanaVwnLVl°@nk@mVU@UVK@wLVKVU@K@UUKVUV@@bnLaVaôlIXmlKX_°KVV@bVV@zV`kblIVUlL@bnV@VĊllVlIXW@kaU²blKVnIlJalbXXlWVn°JnnL@l@XlJlaX@XW²@l_VmnKUblU@mnkVK¯@U@ma@kX¥VmakkLa@a@WIUUVXWWnk@a°a@kkm@kUUmJm@WUUUIk`m@VkaWWkXKmXk¯@WKLkak@±bw@aa@aka@ma¯@LKÇÅkKWbkmġ±ÅULUKVVkm¯LUVVbUwUW¯bmULxWJ@klmkUm@@KnwVkVK@akw@@a¯bKknVUIb¯mmbk@UbmKUL@xUU@klmLUlVXIVVVUVUU`mLXVWbXnW`Å²°xmxU@mĉwU@mbU@UmbkVW¦kJ@X@`¯Im@UlUVVnb@bWJXnmbJUUUUa@UamIkax@@x@b",
              ],
              encodeOffsets: [[113614, 39657]],
            },
          },
          {
            type: "Feature",
            id: "1411",
            properties: {
              name: "吕梁市",
              cp: [111.3574, 37.7325],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@a@w@wlbnJVb@VbVVVInaWmXI@aaUmVUVkn@°J@_W@lIX¥lUnaVV@naV@xĊnV@wn¯wÆ±X_WmXaWUnKV_VVUUUUWJkUVnKlk¯@@kmKUaÅ±KkU@WmI@WUIlUUmVwXw@UlUVwV@LnbW@anU@UaVkô@l»n@naJnUÈLVaÆUUVmVKV²L@mU_lK@UVWkUa@a@U¯aUaÑóÑUbKk@@ak¯mVaUwVÑkWUmK@UUKmXUWÝwUaLUU@aWJUUU@UaÝU@WL@VKVaVI@WnU@alIVK@kImIkJ@m@@@_K@x@kaW@U@Vmn@UK@mIJUXV¤XXWlkKkkK@XmJVakImJU@ó¯LWKUV@nUVLkxmKkLma@kXKmmLabLmK@V@mXVÆUxX@`nLaV@@VmLUVnLlLb@°²nx@bVUxlb@V¯bUV@zVXVĊXVx@lVn@VnnmU@LlJXVz¯VWVXbV@bmnVUVkÇþÅ@XVxmbUlVUlnW@Xl@VLXÒ@bÞJ°¦Lò@nUb@°X@XbmVUVnb@xx",
              ],
              encodeOffsets: [[113614, 39657]],
            },
          },
          {
            type: "Feature",
            id: "1410",
            properties: {
              name: "临汾市",
              cp: [111.4783, 36.1615],
              childNum: 17,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nW@@UnLKabKnnWL@lnblKnLlwKVU@mVUXL°KôV@nIlJUbnI@WlLllLXkWWU£VWInJ@VL@nm@UVX@lb@@wL@`@n@V@lw@nVmVXWmwnUla@_lKwVlUn°xVKVXXWlUVVI@K@Kn°KwlVlU@kna@V_WnmUVm@kXml_@mLlKXw°m@_ôJVUV@Xl@UaV@Va°Ilk»VwUkVmwUmmVn@V¯@KUwmK@U¯wUVÝ@mJUnWK@@UnKVa_lykUmKÛnm@x@UUlwVkXW@a@U@@K@kIVnammVakUl@wX@@k¯@VVbml@°UbULmlVbnbÅK±VKVXUJWa@ULWaUU@@U@aWK@UkxUKLUUUJ±UkL@V±kk@kam@UV@l@LWl@n@VVUxLlUUx@VUVU@aIUlL@°mLUbkUUaWUUaUU@aWKLWJ@bUL@VUVVbU@m@a@kmKmnĉlUKXWUblbxmIkU@xWb@lkVxLXmzVV@bklVVUzm@bk@Vx@xlU@lUbVnl@Wxnl@n@UbVmLmb@`X@lUX@@xlnkLWaUJnnWVVn@l@bULVV@lV@XnJVX",
              ],
              encodeOffsets: [[113063, 37784]],
            },
          },
          {
            type: "Feature",
            id: "1407",
            properties: { name: "晋中市", cp: [112.7747, 37.37], childNum: 11 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@lInJlJ@ULkJ@bmV@XUJUbL@UXKV@ÞVbV@VVXI@bVVKVbÞxVXnWVL@VnLVlXÒUVxUb°nl@bl@LVaôÒÒVb°b@VnLnnV@lmn@lbUV@JUVVXkl@lUzmJ@xXklbUnJVUbnUlbV@nlLX@lakV`Ub°@XVJnUL²KlxnI@KV@lbUbVVKnVl@zlm@U@nI@WUaVl@@mVU@XkW@nkVKV_Vwy@knwVa@XalU@Vnml@X@VLKVaÞbnnlJImVKnVVVInVlU@m@mXK@UmyUI@mWUUakamw@wUwmLkakwVmKw@wUam£y@am_W@UU@knmmamU@WUa@knw@UUUUV@nJm@mVUkKVUUUkKmwKULKUImV@lUnnm@mbUK@°bUnmbUmkkWUb@am@UXkK@a±@V@ĉÅVUXVxUVkLWl¯@@bULUlm@@nm`XlWakIkmVUbUL@Vm@kI@@Km@VaXI@W@aU@kUVU_KbJkkÇb@nkKmLwÅW@kVUUVU@WUIJmIXmma@_kyVaUUlkUm@kUx¯Lm@L@LUJUkVWXUWUL¯wVmUkxkL@`bkmVnxXUWUnm@kxU@",
              ],
              encodeOffsets: [[114087, 37682]],
            },
          },
          {
            type: "Feature",
            id: "1408",
            properties: {
              name: "运城市",
              cp: [111.1487, 35.2002],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VlnJwkaVaXWVLĊknmnLl@@bnV@UaVU@UVK@aXIKXL@bVVVbXVVblVaVnK@¯KVkJ@bVVU@UVwkVKVwUUm@@Xk@K@kVUn@lbl@²l@UlK²VVIVVKVLlw@VXL@b@VV@VXbVK@XbVIUWLU²ÆLmaUankVKVa¯@nkUaU°@n@@kWaUVaXUW@IXKVw@UWU@W@@UUU@mn@`m@UUULkUmJIU@@UK@U@anak_@wmKUwmakVkmKVk¯bw`kwUIÇx¯»ÇaÅmn@@mmUkV@wkKW@kxmLUkĉLÝkxÝw¯lóVUmV@ĀVVX¦W¤kz@`Vx°²ĸ@Ul@xêĸǊ°¤VVlXLWnXxmV@nUl@",
              ],
              encodeOffsets: [[113232, 36597]],
            },
          },
          {
            type: "Feature",
            id: "1402",
            properties: {
              name: "大同市",
              cp: [113.7854, 39.8035],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²£yl@ČĖ@bĸĢbĸXaKŤnn@ŎôllÈxnVnÞÇV@bnXllL°KbVb@J@b@UxlKXLlKlXk@UlkJlkUVKXUÇVIVm@_nÇLalwVnU@UUwma@aaÝaLmUk@@W@U@@XwVWÝUUUk@@VmLKV»nwUwaUL@`mzJUIVUaUwKUaVIlJôanÑlLVUn@a@VV@@UUwVK°Vn_lJÆLéW@UUUÅ@»lm@aÞIVwXWUUkkm@U@aU@mwU£VWU_kWmXwW_°yUkkK@UÇK@kkUVymóKU@KWIbUak@mJ@bkbmLkUmkVUW¦@lnb@@V°ULml@nkVaVmLUnk`±@XWW@kbÇ¦X¯WxI@xmbmxXlWV@bÅUz@Jb@bÞbU@Wbk@xk@WX¯VÛWÝbÝUkVUU@alI@a@akLWam@U¯UUmÇL@K@aU@¯VUkKmX@`@kJ@nVUb@lbVÆXVWULU`VbkLUV@XWl@bXJ@VbV@Vl",
              ],
              encodeOffsets: [[115335, 41209]],
            },
          },
          {
            type: "Feature",
            id: "1404",
            properties: {
              name: "长治市",
              cp: [112.8625, 36.4746],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@UkLky@IJVa@mÞaWy@_W@_WXVlUVw@nw°K@mUVamVkU@mmmnLVUmKXaU@IlKVUnK@UmWkX@WV_V@akU@aKWIXyIUVmUnUa@WaXUVKVmkUWVkULU@@VbKbIUm@mbVLxWUUkn±V¯wbÅJUbmLkbmKÅKbVnUbVKUbKUbmLKmbaKkUm@UnnVnxUVlUxl¼k¯JUbU@Vbk@WU@UVóI@`¯nWxkLK@nk`Wn@lUnVnmXU`@mb@lkV@VnklVVUblz@`nbWnnJIVJ@XUVVUV@lÆXxnKlL@maÈllIaLV`UlVV@@b@XJWUb@n@L@lJn@@UVKVaUlnlJXbkWn_@mn@VkVK@a°@XklKVUUwVWUĊÆ@U²@@blLVWn@@bVaXllVnnaVma@¯VLnan@mVm@knUVJ",
              ],
              encodeOffsets: [[116269, 37637]],
            },
          },
          {
            type: "Feature",
            id: "1406",
            properties: {
              name: "朔州市",
              cp: [113.0713, 39.6991],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XXWVXVWnnlnn@èÆ¼@xlVnblVÈUVl@blnLÜĊmUkU@Ua@WI@aXk@WVUlKUaV_VKXWUUÅka@VaU@mlI@@_nWLVl°UV@@b@LÈKVn°V@VnXblK@b@bkJ@bVVlUÞVÞaXÜ°UXWl@wl@XaV@Ýa@aa@IVyÆ@aXUWknwna@wJXw°WÈ¥kI@W@kmKm¯IUmkXWWkabkImJUkL±aVb@lWXkJUkĉk@UmU@aKkVUkJlaU_y@UU@aUU¯LW`kLWnkJóbUbmK@aU@UVVL@VL@UVULK@xUL@VUV@nml¯@UkmKUxmbVbUV@XlXVmnVbkxUbU@bm@@VUlUVb°@VX¯m",
              ],
              encodeOffsets: [[114615, 40562]],
            },
          },
          {
            type: "Feature",
            id: "1405",
            properties: {
              name: "晋城市",
              cp: [112.7856, 35.6342],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lVLbanLnKVaLVaLUVaUmaÆLnLlanKVaÆIa°x²UlmVVXwUKna@VnJaLa@UV@@alUkKVKnkmmVwUkw@@kxWUXW@@mk@aUa@a¯aLkKmwkUm@kL@K@aWIXmVXWkUVakL@UVKw@aUK@UUKmLU@¯nKUwVUIWJUWmka@UXJk@UkmW@kLWKVx@bmI@VUaVU@a¯@UUmVKmX@±`kÝKVxUL±akL@VbLkKmV@XWVUbVXb@lm@@lW@@xklVUbnnmbUlJ@@L@@Vb@WXUlkxVV@wn@ÜmnLlVkz`UbmL@V@XLmVnIÞ@VU°x@VnLxV@LU°",
              ],
              encodeOffsets: [[115223, 36895]],
            },
          },
          {
            type: "Feature",
            id: "1401",
            properties: {
              name: "太原市",
              cp: [112.3352, 37.9413],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VV@wVKnLVal@na°naVJUlmL°a@b@lx@bULUlmx@Ln@lVknl@XIwKVn°aVXVxUaVU°KnUlUVLKÆV²ĢlnXalLÈÆLKUaVkUanmWUa@WwkUWU¯y¯Ñ@anIl@@aVUmIymULUUVakaU@@LmJkw±LKmVUI@W¯VaU_lkbW@kK@mUkaVmVaUIVmalkW@wnIVy@klkWUUVI@UVkam@knU@mmmK@bblVUX@VkLV`@n±KUULUnVVÅUbÇKmVImbm@k¼ó@Ulb@VmV@bXmaK@UUxkVV@xWUxVnkVVJ@XnJ@XlV²LÆVbnL@l@°",
              ],
              encodeOffsets: [[114503, 39134]],
            },
          },
          {
            type: "Feature",
            id: "1403",
            properties: {
              name: "阳泉市",
              cp: [113.4778, 38.0951],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°@nb@lb@bbb@x²al@lbKXU@mkUWkkmUUVwV@XUW@naVklKXblKnLnLVanImaXKlLaV@U@KUKWalXK@£WKXUV@VUUUVW_V@W@@K@UIWmXUmULnJkImmÝaUbLK@UWk@mnU@kVWb@Ubmx@lzUx`UULml@XWl@UV@nk@UVb@XJm@@Vknyk@zJnUV@bk@mJ@b°Ò°zXVlVXx@bXVmnVbUlVb",
              ],
              encodeOffsets: [[115864, 39336]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/si_chuan_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "5133",
            properties: {
              name: "甘孜藏族自治州",
              cp: [99.9207, 31.0803],
              childNum: 18,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@aXam¯wm@±°wUwV@UaVw²KU@UU¥a@£ÞôxKnkmX¥IUÝUwlk°V@ÈKUwlkUyV¹mx²XllÑW»lw°UŎnJl¯°V@wôIVÇnnUllLVÇLô¼XW£@±@¥k_ÇJkUékwXa@Llw²Vxbm¼ÈxlLÈVWÞn¯mÇÑUÝlÛkwlĉmULmwUJç@wkm@ÑlUXÑôġVaUÑ¯@wķÓkbVmnU@@y¯IķKV@¹aé@kmÞU°¥@a¯@anKlblU¥@óğç@Çw@wklaçÝ±k¯±@ğÝUÛmÝ¯w@kb±¯akXWÜkXUÆÇU¤X_ƐwV@¤XUbUIUlÇUkġ@aXČmlUlèUV@mVk¦Vx@¦±¯¯¯anlW¯nÅw@w°KVak£m@klKknÇU»óKīlaUaV£@¯@ÆUVÛÝÇXÇlÓlŹ»WUğJ¯£mxLĵôºXVlUll²bllxónn°ÝU¼mJU¯nV@êĉ°Uĸw@m@¯kmXamÑ¯aUwÝKU¥mÅn¥Wmn¹n±ƑƆÇôXê±ǊnUôlĖkȂVÒ¯¼VnȮ¯ĀnƆĢ@k°V°¯ĢVlkVxm¼X²Ŏ@VxknWÜ°U¯nÆÝ@`ôÝ²ÒÇznmX@xè°K°ÅUČĬóĖÝó¼ÅêÒbmk@V@Òl@nĉÜêx@ĖmlÅJ¯¦óxȭ°Ým¯LĵèĀ@Æl°żX@xmkV@z@°blnÞ°J@bn@Æ¼UVUóóL°X°ÝLxUn°Ĭn@lnL@Æ@nKÆxnUnVInĬmÆnxŎ¼ĊIĢóÞ@ĊƨbUmV¥lkwnLmÅÆ¥XwU@wwUÞ@alUUÅUVkkm°aU°Ó°w°Ub°a²K¯ĕ@ÈbÞĊa»XVm°InĬk¼VbaJô£VĊankůnÜU@anKnĮbÈmÆ»nIé£Ġ",
              ],
              encodeOffsets: [[103073, 33295]],
            },
          },
          {
            type: "Feature",
            id: "5132",
            properties: {
              name: "阿坝藏族羌族自治州",
              cp: [102.4805, 32.4536],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l@@þ²I@lVL°wnJ°UĸŎèIlwV°¤nĮ¤ÝlèL@@xlè²ôĊ_ĊġVÈôJżīlbXÆÈVkxÇVn°¦Üb@è@nn@@°UÈ¥WÇ_Uala¯¯UÇk»mVwk»k²°VxlL@¤_@x`ÈĖöb@l²alXa@bnK°¦VK@nnWmx@nUnl@@llĉk°l°UXkmW@Un`kÇLWÛÈVxVVlVk@lIXb@ylXÈWĮWŤzy@mI²J@n°@VJ°aÅ@ŎkVÇkaUwKVwV@nkm@±ôkôĊJ¼InÑm±nIÞXÈĊxĊUÈbÜyÈ£Vkw@kVUVm@a»ÜbÈmUXwÝxUn¥@°ġÅaJVkaW¯Û@W¥UŏĶ@¯kUŃ@aI@mmanwÞW@mw°»Uřk¹±WxVx¯¦U°zţWw@°ÇVÑk¯@y°a£@mnl¼aÝÝakwU±aĉImlĵn@m@kkV¯Ñmĸ°xl@XVÞmlÛÝĉUÅ¥mwÅ¥VaUwXġċaVůÛŹlwU¯Uó±xÛV±¯¯n¯mċLmnĊm@_kJWaXmwUĉK»@mwXÝUÇkKÇw»naUw±kxK@WbxlVêlÈIl`@¦@²X¤Wó»KUÈKkkmVmUÈóJ@x¯Uk°Imō¯VxkX¼Òkk±WwnUºVzklVxLÇ@¯UklVxÞVJW¦nmlLówÝ@¤b¦V@VV±LUxVbU@Vx¯x@²n°xnWbb",
              ],
              encodeOffsets: [[103073, 33295]],
            },
          },
          {
            type: "Feature",
            id: "5134",
            properties: {
              name: "凉山彝族自治州",
              cp: [101.9641, 27.6746],
              childNum: 17,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĶóKnw°¤ĠIXV¼kźÔkÈWÞÈÜUVÅ°@@U¤VbkbĬôL¼ÈVlmLlkn@l¤Ub¯L@xÆx°mXmk°b°°²@¥Uwl¥nU@VUkçVnkWċbĢ@lÈVVkJVaVW@£UƏxW`£ÈVVÅlWXÛlW°b²la@°xnÞVÜĠÞ²@l°Þ²èkbl@xÈx@Ġènal£nUÇ²@ÞKnn¤@¼°U¼nVXUbnĠUVbUlV°LX@lVèÜUnK@_yXVyUwmIU»VkÇ¥ÿkkV¯m±n@n¯ÜanVVÆz@bwÜbm@wa@kmk»@a@VUUów@nb°mXmnVbÞVôanwJak£lwLÅnÝ@wl¥IÇÓ@UL¼kVÇÅó¯kVmmw@n_Vn»°LÅ»@éÇçŹīVÇÝ@ÝğUaVÝ¯ķlŭġl@óÞÛċ@¯nkUÓm±IVġUwóKUn±¯Kw»KÝVnl@óxUwţ£ĉUmÅÇÝKÝUlmK£UV@ÞÈW¦Ò@Ĭnny@nÒmV¼@°Vbl@VlnUUwl°a@@llnk°lbnKWĀnUVxU²Åm¦ÛÇÅaUVb@¦m`móXUmmxÅ@±Þnè²U¯»mVm@wU@wÝÝmLa@VÇUkl°¯VlkV¦UmxaULUèVx@kIUxmWV¼¯VmÈ¯UnlÈ@m»ÅVWxÅbÅğW@km@kVV¦mlnn@ōl¦ÅÆxk",
              ],
              encodeOffsets: [[102466, 28756]],
            },
          },
          {
            type: "Feature",
            id: "5107",
            properties: {
              name: "绵阳市",
              cp: [104.7327, 31.8713],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ńlV°@ŐĵVX»ÆUĊÑJw@È»m»£°Kk@ÇnÑÆ@w°JUwnw@wbVb@VlźLUwa»aUklyUUVakwWXwWUxkLmn¥mwkUXlJw@aIk°X¥W²l¥aUIlmkklÈL@m°nlWUaW@V@UaV¥@ak@Çk¹K@aK@kKkÇX@VU@kx±VèkIWwUVUkkKÇ@a@wkml¯@kUWn£WaaVwnaVÝw¯@UaWxnJÅUxUma@L@mbUU±VVnkxUÆVm@kkKW°X@¤ÇUkÆÇnU¦¯kmLVwÅK@UóbÇÆV¦L@±êX¦mVÞkÜÝnWU@k¯wķn°ÒUlln@@ĶmnkĊJ²bVlxÞbÞbk»mn@¤¯bz@l°UÒ¯È@xŤXyV¯°¥Uww²XlºVŚ¯¼nx@XÝmxnb@nJ@b",
              ],
              encodeOffsets: [[106448, 33694]],
            },
          },
          {
            type: "Feature",
            id: "5117",
            properties: { name: "达州市", cp: [107.6111, 31.333], childNum: 7 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Uxn°bnlUnÒÆnn@n¤LnxlUV@Ælx°XXxl`XVWLè±nÈb°b@²x°KÜ¼°ĉV¦lJnU@¦ÞJÞğmLÞ»xUlbVÆannalVÆX@lnŎVmUmaÅXa@aWm@£@wĉJVkkkkmnk@mna@alKJ@ÞwmÅÅ@ambkU@KUġKU@mak¯±a@aĉÑÅaVwXlw±V¥l@@ak@@£mĉÝónWV@nÝÇÇxUmbaVkkk@m@m°ÝýXmakÅī@@mb@@xmnb@mxkWL@¯b@WUXmWWKkbm@kxXmm@LUlxlêóKnUallLlLó°m¯JVUK@xK²Āô¦l°",
              ],
              encodeOffsets: [[109519, 31917]],
            },
          },
          {
            type: "Feature",
            id: "5108",
            properties: {
              name: "广元市",
              cp: [105.6885, 32.2284],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÆLĊx°»Ŧ¦WLÈ@xÞKÜ°ÞnVxÅĀlÒnJ°a@wV¯l@XWknKnwVÈ°XXalX°VI°bWna¥@w°n@yÆ@nkÞ@°¯lJn°IÈlUlXÅ@ķlUV¥VUUÝÞUU@UwJUkĉm@ýlkWUwVwWJk@VUKlUkaVUmLkm@@UIk`@UmlUkV¯ÇXKÝ_mm¯@U`kwml¼±KV¯¯Vk±Vk±kzmaKUnÇ±bk¦±X¦¯WlJ@bxkIWVlxnm¦nlKVwXWxXlxUbVVkzVlb¼bVxŹKUk@Uaa@xmxVx¯Ix@ÅmÒ@Èl¯L¤n¼",
              ],
              encodeOffsets: [[107146, 33452]],
            },
          },
          {
            type: "Feature",
            id: "5118",
            properties: {
              name: "雅安市",
              cp: [102.6672, 29.8938],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ln@xèVInxVKnĊklxkÜVÞÒnÈm°nx@¼ĊLVnxWXblI`@nmĉnKČôÅlUÑmUK²¹@ÇÅVÓÅ¯VýÞWUVmXÆbnwKUÿ@UmmIUb¯¥Uw¯ÇmçmanUm»UUlk¤a¯bVU_WĕmÇÅ±ĢUlUlÛVçkU@W¯KUVkUağVmaVWUmV»¯@»m£mÝL±@ÈmVk¤mb@ô¦kVkamL@b°@b¯¦ÝVn@lêb@ºUĸL°J@zV@nmUlaĸÔ@x°VÒUbóĢÒWkV@Ò",
              ],
              encodeOffsets: [[104727, 30797]],
            },
          },
          {
            type: "Feature",
            id: "5115",
            properties: {
              name: "宜宾市",
              cp: [104.6558, 28.548],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VlÈnlXnWLX`m²nV@b°xĢçlnVmnn@@°UzlV°nÞÒkxlw`UnVbmL@albÞKÈÛmÜ¼°@XÇ@wmW@ÅKĊLlVLVŎçÞL²±ğkw@Uy@¹lKXlKVa@wČ@w@aÇU¯n@@wġakaōK@Å»VakUWmķwkbğ¥mLak@ġÞ°¯xVVÞ@VxVVWxXlxU@k²WVÅULmèULVĊklĠVJVx±nÅ¯¦mwğ@mlğkkl±@kUk@¯±ÇKkxl¤bImx",
              ],
              encodeOffsets: [[106099, 29279]],
            },
          },
          {
            type: "Feature",
            id: "5111",
            properties: {
              name: "乐山市",
              cp: [103.5791, 29.1742],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@kVkÆkV²UlºÈIlxLXèÜlUXUmkbVèx°@@¼°Knnn@mÆIUbnJ@bVI°b°±@nK@mVakkKl¯nbmĸèl@VnÈlUUwwmwnm°¥LlLnU@VaImbkmKnk@mbLVJVUUVnkVmb@a¯JUaÆkk¥IW¥KlwÑmÝU¯kVy¯@@mmnUkmġè¯w@aU±mnW_XKWmkÇmUkóbUÝUanmW¯nma@xVôUV@b@l¼n@lb@xnÛaxa@yUÅmUÛbm°@mn²U°llĀÈ¦lUV¼nJVxUzWz@`mL",
              ],
              encodeOffsets: [[105480, 29993]],
            },
          },
          {
            type: "Feature",
            id: "5113",
            properties: {
              name: "南充市",
              cp: [106.2048, 31.1517],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@È²VmLnblyl²²UUl°U°²L»knlx_V°@nnÞ`WL°ÈUVlnkV@l_JV@n@lnKV£ÇUV¯m@laXUUbVx@VkôJU°Jn@wUk°wnUV_nJmknmm¯Vwk¯ó¥±ÿL@wLVUkUbX¯mykI@a±Kk¦ULmaXVm¯Kz±klUIVbÇJkL¯lUÿUlUkJUmUUkVVklKk@@aU@J²x¦kĬ@¼±ºXnWbxU@xx@lL@bLlº@Èl@bU¦Vb@U@XbVkX¯m@nÇKkllknJV",
              ],
              encodeOffsets: [[107989, 32282]],
            },
          },
          {
            type: "Feature",
            id: "5119",
            properties: {
              name: "巴中市",
              cp: [107.0618, 31.9977],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VUlbkVVLUl@XIUxVxXkl@þĊnVlIVx@VVÝVÞUVU¦kV@ĸWÆô²@VÞn@Vaôb²W@K@XUmÑUW°¯°Ina@y_lWn¼lLUbô¼Kla@nkUyôÆx°@n£Ý@¥mVkIU¥Ċ¯Û»¯L±w@¯aÇa²mçKXUWk_Ww¯WwÅk@UkVmwK£@mmmÅmÑkVmamnnlmIU`Vm¯xVlx@m¯IVóIUl@UwVaVWkb@nU°VÈU¤",
              ],
              encodeOffsets: [[108957, 32569]],
            },
          },
          {
            type: "Feature",
            id: "5105",
            properties: { name: "泸州市", cp: [105.4578, 28.493], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VVXwVKnwnVnl@b¯xmKUbVn°°X°@blLènV@Vnl@ULnmmUnaVV_ĶV@wnJl@@kkKVólaUwnJmwUlm@aUaôKVnJWbÞ@VwVLX¥VV_Þ`wWÞŹmmnIn¥W@kWV¯@°kILk¼Ç@k¤±XknmÝ¯UlÅÛKWV¯klUwkLÓ@U@w@ġXVWX@UbVbV_kÇVlU°lnwŎ¦ÞaÆ¯nmm¯Um¥nkVmkl_ó¥¯UÇl¯@Lk`¯ķLUy¯@mw¼ķ°ġ_ÅU°mlnÇVUÞ@_JUnVUXblĢb@x@mV°Èb@xċ@@xUbkLWkL@ºzV@lxĠ±²",
              ],
              encodeOffsets: [[107674, 29639]],
            },
          },
          {
            type: "Feature",
            id: "5101",
            properties: {
              name: "成都市",
              cp: [103.9526, 30.7617],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°n°m²°ÜUw²ôV°VkxÜźUŰČbĢlaÈL»@kwVÇ@nÛÆ»ÈUÝ°Kl_V°U`Vbn@VbÈLaVU@ƨ»VnIlUUa±lIk±@VnKmÅ@WaK¦lVōkKÝ@maXÇmw¯IU@kVwUmVIçÿU±Å@¯È@xK@wLUbÇKÅ@mÝ£@yóUóóUxkI@WlIUabaVĀLmxÅaWUnVÝXUþÆ°UÔÈÆ@±ºLnVVÒkóÆ",
              ],
              encodeOffsets: [[105492, 31534]],
            },
          },
          {
            type: "Feature",
            id: "5120",
            properties: {
              name: "资阳市",
              cp: [104.9744, 30.1575],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@èUJVnxU@lV°JnxWÈnbÞ@lLŎUk¥LXbÆ@nmLU@zlbXmlnVynLçJVbUnómUnamUan¥lKV_²aValWôn@nbVK°¯VblW@kklUnlV£°W@wUXk°KVwmVkwVyVI@wkmVÅ_Umm@Uÿmbk£xUaVw±V¼V¤kLWxU@UkbyXóm°V@@zÝÒkKn±U@@_VVkÇaVwnLWalm@@kkVVl¦kIV`±n@wKk²aVUUV¤nkxmUkVWVnLUbVb`kUUmLUmX@`ÅbÇXbWLXn",
              ],
              encodeOffsets: [[106695, 31062]],
            },
          },
          {
            type: "Feature",
            id: "5104",
            properties: {
              name: "攀枝花市",
              cp: [101.6895, 26.7133],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@bKÞnÞ@xV@xnUn°¼V±mç²ÝÆ@wnnVWnôn_@¥UaVbÆÈÜn¥Æ±VUwVmXÿmLkal¯km@k@¯bkVxmVUkk@Ua@¯»UnmÑ@mzm@īÑX¥Ç@ÝxU¦ÅÇUkx@lbUWVXmV@xĵĖ±@@¯xUÆLnÆmx@nXL±lUUVwKWak@WxkbÞĉbUn@@@xó¦Ŏ",
              ],
              encodeOffsets: [[103602, 27816]],
            },
          },
          {
            type: "Feature",
            id: "5114",
            properties: {
              name: "眉山市",
              cp: [103.8098, 30.0146],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Vx°¦VanJVn@baVbkJ@XlJVwôôôV@zÞ¤@nÆÈLVaK@xL@w°ÇÆ@²VĀmWXKWaÈÆa@_nWVnKVlV_UaVamKXUWwnmmwÑm£@ynUkWĉUkWVkkV±çkJmkKK¯¦mnnxxVxVÇkUmk@çķnmak°LllUb@nmL@¯²¯aUJ@amIVaÅJnm@mm¯L@»¯@wUçanlVWVÛkWçKkwÇJk¹±VUÅlġV²ÈÆnXĖV`U°ab£lkVVn¼mVnbèÈn°",
              ],
              encodeOffsets: [[105683, 30685]],
            },
          },
          {
            type: "Feature",
            id: "5116",
            properties: {
              name: "广安市",
              cp: [106.6333, 30.4376],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VlIVkVĀVk°lKÈIUaVJlk²yLn°UWnbVKl¥²L@blJnzW°alV°Inô¯KkKkkbVmôLkéwVk@KnnWlwn@laXLnXVW@X°a@XKlnw@man@w@na@@wĕġġwUkUWb@mk@¦¥mUÛb±yÅn@bml@kV@lknVbmVnlmbÇk¯bWyk@V_UamJ@I@WaVXamIVWkUkbVaUUx@VnkVU¼bkKUxmK@WxnV@n",
              ],
              encodeOffsets: [[108518, 31208]],
            },
          },
          {
            type: "Feature",
            id: "5106",
            properties: { name: "德阳市", cp: [104.48, 31.1133], childNum: 6 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nUW¥²é@K¥UÈÅôa@VÆLUxnKl°V¥ÈmlÅÈV@£WX¯lLln@UVÅlwUm²UVVna@@KnbVVwÆImXwWkIVwÝĕVUaIèmKUzkmWnka@y@l²kJ²VbVkmJUƧ¼@UVbÇKUam@Ua_¯VUk`¯LVÞÇÅ¼mÜ@UÈx@l¼ÇKkbWVxUbÆ¦nxÆ¦ĊV",
              ],
              encodeOffsets: [[106594, 32457]],
            },
          },
          {
            type: "Feature",
            id: "5110",
            properties: {
              name: "内江市",
              cp: [104.8535, 29.6136],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@²èlUUllXĊVXlmV@zn¤ÒnxmnXxlUnVlwmU£VVUbl±L@x²mU_lJ¥UklU@ln@kXbmKUxÈblUU@`V@²mlLÞÑ@yU@¯ônWzaVlV@XwlKU£»aVaUwm@mwUVUwklVÇ²LlKVm_@ykUm@mUçkKmxkIUÝ@LUJ@n±kºLXb¼@mmIXa@mamnkWKUx_U`UklwUwmUbV²akbmkn@`UmÒVxUbI`UaÝÈ",
              ],
              encodeOffsets: [[106774, 30342]],
            },
          },
          {
            type: "Feature",
            id: "5109",
            properties: {
              name: "遂宁市",
              cp: [105.5347, 30.6683],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ÞĖUxlJXVb°@xUÞmbUxbXbm¤VX@lk°ln@xbÈ@lLVlVUXxlJç²UlwV@@UÈWlLw@wVwXaWm²¹@»lī¥w±I@V@bl@kLUllUVVn@mmUwXċbVb@VUkbmamW@ka@k@laUa@¯b@mmwó@@lkXUa¯°LUamm@ókXUb±bU`kLm¦bnVmbnVmô",
              ],
              encodeOffsets: [[107595, 31270]],
            },
          },
          {
            type: "Feature",
            id: "5103",
            properties: {
              name: "自贡市",
              cp: [104.6667, 29.2786],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lIÞÇbV_JVaUwnÑV@_lmnlab±UVanVxkxVlV_`wVLlXnmnb@WbnJ@n»WaKl¹²@mVI@KÞVlJnw@aW¯¯¯UmVanL°w@akmmUxmULWxUUÝKōèUKUkĉKL@ÆnX@xWÈ¯@Û»nÇÜÝLka@bKnUaVm_xkLX¦Jl¦ÅlVb°I@bnaUmlUVUVIUKa@nmlnLlnaJUbV@",
              ],
              encodeOffsets: [[106752, 30347]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/tai_wan_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "7100",
            properties: { name: "台湾", cp: [121.0295, 23.6082], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@\\s@pS}aekgKSuSsMß`¡CqZ·be@Q^o@gieMp]}}Ľc_Kk{ùA¡r[uom@ÑĥJiq©mŉq¯Bq]ÙYgSåk_gwU­isTEĕiqiUEkue_OSsZaWKo¡­qycY£w}ĩĕS§Z©SN¥SyLÑ¡±Ks^IYPdY[UoFp}´\\¬\\j]eÜò¤¡ā a\\bnUãº¹Ìs¼j®[cíȈEĝĆ`ļf¶®K|VØDdKGpVnUFjpHF`B[pMºxÖjbpÎxp¬|ÎŸÜÒC²®ÜApZG~dÞàV¨|¸`|²tx~\\~|dFf^zGĄŚhdL\\hĸ¼OªP®lV`p\\]Xpllæ¤CpQ|oF}fMRiNSon_²qämMNM\\",
              ],
              encodeOffsets: [[124853, 25650]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/tian_jin_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "120225",
            properties: { name: "蓟县", cp: [117.4672, 40.004], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@EUDAEI@WNMNCBFAHFFNACDJDPBD@@GD@DIFFHEFGDBDEQOFG@EI_KG@OcJQM]RMEKBGPG@[LaCIICBWKCEEG@WBQHCDFD@HSLEJI@IHWECFGAAEKCGDBFCBSBIDCKKHEADMJMFABKOKEQAA@IEEG@GIQAEK@OZEESMOLlu@SLUTYFQCMG@@SQUAYKAACA@IB@BDB@B@DC@@BGAEFAA@BEGKJCC@AGAIHA@@JC@QEIP@@A@EGIDC@O@C@@@@CJCWKABFLBBEBSQGBAAMIEM@AKBcJEN@BEBCFMAEFEF@J@BG@BFABECKFG@AFQ@@F@BEB@@A@@AAAKAE@GFGDECEFEECBKIKDELDFEDYH@EIACDCHKBEB@BAAC@ADBHABKJIAIJICEDGDCD@@A@A@DHCHJHDFEFGBKRKBGIK@GIMHSBCH_BOJECCJCFKKMD@DNJEDEGC@OJCJHRUL@HRJ@H[DCNKDZHCTFDHCFFKR`TANVDFZRDLFARB@HPAPG`ILAR@TERNDFNHDLCLDDCXDYbHF@FEB@LDDVE@JPNfXPINCVDJJD@NJPAJHLXHDNANHhB@DPNLRMTBFRBHHr@`NBFEBOCCBIAQJDHCHLHFA@HSDCRLFTB@HEFLNF@PELBDJALFLTC@EPFLLP@tUHQJDfIHGTB^JTCPDLKAIBATFPADIEGECEMJ@JIAIHGECFEAGDI\\SPOXAFCL@BQTQBBTMZECYGAHA@GJAE@HCAEME@IECFKJADDBABLTHHG@ILEAMNDJCDHEBF@@JNFJELDFKTOT@JETBFFHBHEHKI@@IJEJ@XKEOUMS@AF@CEB",
              ],
              encodeOffsets: [[120575, 41009]],
            },
          },
          {
            type: "Feature",
            id: "120114",
            properties: {
              name: "武清区",
              cp: [117.0621, 39.4121],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@FWôµ@IFCLIB@EHNBp]AGEAKAEDMGZKFGBGME@ILGP@HEFB@BXMEAHUGC@IHCLOD@X[NWHWPKAEF[@EKIOL@EKGBNMJ@EIEHKBIC@BAKMIACCFQZCF]DB@ERAKADIHGEIBCGIIECFaGLZO@EFCNGAGDGAKL@BMG@IE@ADSDEH[JGC@CGA@BMDeK@EIACFE@@GG@FIAMM@CCGC@EM@ADE@CFMAAGHBDKIEAJG@DOGCDEKAGIS@KFCHKAEHIE]BeKNO[IFIOELC@A]GMBKVYCDDgGAICARc@MW@AQE@DGI@@AQ@@BKBAIQQYEFW@CEADIGGBCEIiMEMF_LGEKMBBDWEBGRC@E_CHYGCH_IAED@FFBQh@FGJaJ}AHRAREF@bE\\C@CT`FHC@\\BBF@BID@HGDDJ@@FAHKBARECKDAZBJIVNHCTA@EREAMLHDAFFBVFFC@RNRETHD@FOJMACH@CAB@P@DF@@FGDWE@FFSIEMKQDYCCHKb^JADOCIDGNDBdBCFJB@EC\\A@BJEA@JAAAD@HHD@LFBCFF@BERDHNhZQHMBGHOACCEBWEGD@PSJKCGEUD@CINLFGHE@AJK@HDABBHTB@F`DBFLBBHEDARCFG@ABJBAPVFE^FBGLGCFG_BMLEXGAAFE@@JNRVJHFALFBEHQJCTbNDHCF@PlFLJSXCHFHfVBTNJ\\BPJXC^FAVNFCHFB@FFH@JF@\\ABCFD\\BDMCAAJKQBGAILOEGHILECQLWFENJHADC@QxNHFJNLDFA@CBA@DUÂmR@FBL@BD",
              ],
              encodeOffsets: [[119959, 40574]],
            },
          },
          {
            type: "Feature",
            id: "120115",
            properties: {
              name: "宝坻区",
              cp: [117.4274, 39.5913],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@TZbB@JHD@DODCLM@AP@LL@BNH@ETFN@`E@DNG@CHLBCJA@AICFKDDBKA@\\N@AFNAGRBFjFFFL@DHLBLFQPcXAZMJ]GAVHAIZJFNE@JpDRRDCLFDGXA@EFF@CFFPDfEBDB@DCHCFCJDJIJBLI@I@CB@@ADBB@FALADGDC@@H@BB@FZGFCCE@@FMLALJDAFFFEFDFCB@@AHCF@L@@BBB@BB@FC@E@@R@BEL@HEFD@G@AH@AIB@@@FEFEBALDDEFAFO^IF@JCBBFPNJJ@D@PRDCEKBAXL@BIFD@T@JE@BHHJORFDI@@B@JGH@@B@BDDLIFFHCD@D@DEE@BAAAB@DAF@B@H@NGLJLMRDNMfGIEPMI@GDAKK@KIDIJ@GE@CFDN@FE@GFEPGV@TCDFKHBBF@RW@DD@@ID@TJFKIKLI@EP@IGBCLAEKLEN@KSHIGYACSD@SEAMBBMGEBMQBCMIGKFB[D@HDLPHDBC@IFITDLG@IIIFGVBNJDLN@VIRI@YIAIHIC@CLKZCBEE@JECEIHEAKGDGECBGEEM@@DA@CCCBBEGA[GEDBBoNAAH]MKiIAWKQoIIPMFQAEEDMH@FMSUYIeF@EK@BIOEKJEBICFKaKPFAFSE@LWCCFMHDDEKESBOGBKIEIODLG@CCDEQCEDWEMDIEIB@EHGEEDAEAa@@HqDEJGF[AECCFa@WCEIKAAEQB@FCAE^YDERDDJBLNABD@AJGLJF@FNIAMLH@FPKLJ@FE\\BFOLGXMXW\\C@KPGD@JHDGVFBWN@AEAGFO@KH@JNFAHEHYLNHFCLBFBBHo^MAFGA@KJED@Jó¶EX",
              ],
              encodeOffsets: [[119959, 40574]],
            },
          },
          {
            type: "Feature",
            id: "120223",
            properties: {
              name: "静海县",
              cp: [116.9824, 38.8312],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@NGFMDATCNDR@CCbINEHNJA@C\\EEGVE@IhE[wepc¢·²^QEKIEKIgiQDkehY£uSDBMkUDOJDHC@GF@CAFBFEN@CQ@BeP@@G@HD@@MHQKi@[IGCOCESE@GMA_OcCGDu`a@VZzKDkJBLNXGDqKEWE@cFEFA@ISIi@@KMABJGBcMuFEzGVH\\ATSEUBeALCEMG@CEBUHUCGXaBPtUBBFIBFTDFF@DDKBFNGBJPHXDDMDCLJ^mBIHIL@LR\\@LCR[@@z@NFD@LLBNb@RHDBNTPT\\F@BJF@BXCFBHHBDLFB@HODADE@@JHVXCPDHCFTLBBFNCDCCCU@@GAABEHHZHBCAEdEjFDD@GfD@DXFCHF@ERFDLBH@",
              ],
              encodeOffsets: [[119688, 40010]],
            },
          },
          {
            type: "Feature",
            id: "120221",
            properties: {
              name: "宁河县",
              cp: [117.6801, 39.3853],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@BFLBFJXDb@DEFD\\BHEFIrC@Gb@FBCBFFGH@FJAJFNCXFFCRDCFDDH@CKJPJFALPHTALFCFGCENDDKXF@ETEBObLELJDFALIPFAJL@@FfEZJTVENG@CNFFRBNEJOpJLRBXjJNLG^BBpMAAFC\\HHBAFDADDB@@CN@FFAHFDCHLHFBJGFCFUNKJJTD\\XUXF\\^F@DDDQXXBRLRCBDFEVCDLVDpUl@LEDJHAPRFGL@CETGPBTCDDVI@CFF@GFDCCVGLKEK[Y@MECISG@BKNSCGCKWEAaEBEKNGFSECO@GGM@GYI@DÅCMLHPTF@DJHAVVNKEGDETJ^[TJNNd@NOAMFYJ@@GFANDPEJB^aOadSTQSI@MHBDIEOKCG@EEFCKCqXO@@DMFENCDDHCCGJ]AKFoDaGGHYFDHKJiCMFGC@EQ@AEHGAC@IEAATKOHGIC@IXIFEoGE[JCFCDHNmRADFZMF[EEBMO{GU@AOW@@]ZeHBDEHBKEfQkuIWBs@EC@d[@[^EDMTKCEEcI@cDAB@FCBCACmOCG{PYHeBgPwPFDDALFFFCHQGSD@BHFAR[TaFYXMASUiGFL@DQNCJI@@D@PLDN`ETEFIGMCGBCE~CAIFDPEHGEQPHJADFJGHCJLB",
              ],
              encodeOffsets: [[120145, 40295]],
            },
          },
          {
            type: "Feature",
            id: "120109",
            properties: { name: "大港区", cp: [117.3875, 38.757], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@JFFL°_`ONJKDDFIFZN xlb~yFVNRrdJGzDPVFBCTNND\\UR@E`F@@Ip@IWGUoawOEE@ÏDgK{İEEMFëCb@KwOCDHHKBDJCDEEEAGHOABFABMCgDLSQ@CFEBMgYIDQINE@AUSwSAdYEHQMEyK[KI@GRMLE@@OqOoBOnpJ@BmEAFHL^FDB[C@BBDVFAHFJENB@sNEjQAMYsUgCSBGDJH@\\LjGR@NC@@G@HO@AfR@DM@EFEADBE@@HGDICCPlVANTC¤vgZlfRChjLJ",
              ],
              encodeOffsets: [[120065, 39771]],
            },
          },
          {
            type: "Feature",
            id: "120107",
            properties: {
              name: "塘沽区",
              cp: [117.6801, 38.9987],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@|ODHnPBDADEDA@CB@ddJFFLDNSFC\\]\\@@cFD@nACOMW@M@ITURBRZNHNWRQoOj½fcqAqeiDÿÍyÓįFL|Ch@ÐFFxPpbHVJXo@@JCTR^BPABQA]^MB@bE@@FQBFVJRH@FXtPNZSBAja@@NDTLJrQTHFXZFB`",
              ],
              encodeOffsets: [[120391, 40118]],
            },
          },
          {
            type: "Feature",
            id: "120111",
            properties: {
              name: "西青区",
              cp: [117.1829, 39.0022],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@LHAHRHATh`LHNHDG`HDGZ`D@FQDAHXFACNAFLVRTBFOfHDCVBFQH@HSXHEPFB@LDBF[bDbLFKJBFLADBDjLvCPEI]FGEIGCBEUSjcFiBIVWfaHCjN^HtwBBFGPBJGjFBEGECGDONMFAP]TDHQOWCMGAMHKIJEIGQ]aDlUG]VGEGDC{PEbBZmE@@GH@BCA@FMQCFMYMJECELCMI_P¯`]R±¡¸odfx\\gF@JUFFH[F@DIBGMMFaJDDQ@MCSDCBENMH",
              ],
              encodeOffsets: [[119688, 40010]],
            },
          },
          {
            type: "Feature",
            id: "120113",
            properties: {
              name: "北辰区",
              cp: [117.1761, 39.2548],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ROHFFGCOJEDB}DFHANDJHFEFSM_KC@O@CJ@DIRM@CEKKALFKACHoLSJSIBETDJaEIIE]E]K[MYUYQILC@GF[MGNKEK@A@BCWECAIFEFYAGFOMI[OFuDiKACBCEKIAELaKaCE\\CA@KEAFOWGGTG@ERUACDeGEPSAUQKHE`FNjNFJADHHCJFB@DEXZFRRBJLA@AR@@BJ@CHF@BRX@@NQdDBBJhHCCZDLUNA^H@BKDPFEJ\\JMPfL^AJFFGLBDGLET@HJLBCFHDCPH@BIJFCLGABHNBDEF@BCN@@FHDDDN@BNEJH@@HF@DEJB@FfLNC@AHB@DHD\\IFGTCBCF@@JNH@ALKHBHCHBDMFEP@KYbHDEJF",
              ],
              encodeOffsets: [[120139, 40273]],
            },
          },
          {
            type: "Feature",
            id: "120110",
            properties: {
              name: "东丽区",
              cp: [117.4013, 39.1223],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ZV\\N^L^FJFFJIbSCAFTJTIpKDGLBEKLBjHTVNBZWbE\\SBQGE@ATCRHDGEEKECBECxOhOfAZGA_YEEWSGqRKISC@Mb@BiTAMYsOEWG@IQEURA@EF@@acUOXQRYCUDCHDTEF[SUEgAYDcVGJM`iAWDWLQRMHUHgDsDBLHJFCFDFGHBFFVEAGHCJN@RJFPIhBD\\FENCPWA@LFBAFHBEJUEARCDIAEDQBRNa^",
              ],
              encodeOffsets: [[120048, 40134]],
            },
          },
          {
            type: "Feature",
            id: "120108",
            properties: {
              name: "汉沽区",
              cp: [117.8888, 39.2191],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@LMEI\\MTABKN@FCDMH@COAcH[AoēAM¡Wa[MeqpQRMXMGQYQASV@J@NNXDPmBAtJXlveRLFGACFGAYf@^X@BPV@|HNPFA\\FNEEYBCnQGMDCDE\\IHFpEFWJ@JJDGHLPBSFB@JBDGHBFR@@FHDNEjDLICGZEHGbHpCLE^BHIDDCGDCFMNE@CP@rWLDEDFFH@",
              ],
              encodeOffsets: [[120859, 40235]],
            },
          },
          {
            type: "Feature",
            id: "120112",
            properties: {
              name: "津南区",
              cp: [117.3958, 38.9603],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@TLv@CNHFFBHGZFETNPhCVGNGRQXKXCjBN_HIdUZChBVF\\TFECSDGVCZDRQPWdVNA^]RBBAAOQ]DSE@F_Q@[VMCSMADUECOHycIqMQEU}zkawENRDENB@ADG@@HF@YnaAOF|CDFHUHH^kVbCR^JHIFLJNGHBDNPXGRSCO^EBMNCPDHHFAFiEIHOAEH",
              ],
              encodeOffsets: [[120045, 39982]],
            },
          },
          {
            type: "Feature",
            id: "120103",
            properties: {
              name: "河西区",
              cp: [117.2365, 39.0804],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@d@hZNFdcLYXKRCtCMOFSYEGHEAGEDMu@SKAAsx]GMTGt"],
              encodeOffsets: [[119992, 40041]],
            },
          },
          {
            type: "Feature",
            id: "120102",
            properties: {
              name: "河东区",
              cp: [117.2571, 39.1209],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ZBVFFIGABEEA@KXBDOFM[EACJgOIE@QIMGDBHUFEEGAEHECEDGIAKQDWLKZcdQPEP@FOFBJTJ@HNORJf@DBCN",
              ],
              encodeOffsets: [[120063, 40098]],
            },
          },
          {
            type: "Feature",
            id: "120104",
            properties: {
              name: "南开区",
              cp: [117.1527, 39.1065],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@NMVDCG\\E^B@HlB@YEDS@CHsNSiMGDebUXAJEjidVTAFHDFJ",
              ],
              encodeOffsets: [[119940, 40093]],
            },
          },
          {
            type: "Feature",
            id: "120105",
            properties: {
              name: "河北区",
              cp: [117.2145, 39.1615],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@DBXFADB@L@LFHM\\NHED@JKZRb]QMRAFCJBDCBQYADMCAe@QIMP@GSIAIPE@E[EGH@ZEF]^HJAXK@KF",
              ],
              encodeOffsets: [[119980, 40125]],
            },
          },
          {
            type: "Feature",
            id: "120106",
            properties: {
              name: "红桥区",
              cp: [117.1596, 39.1663],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@J\\PNHEZBFEJELEL@BWGI^]FEkA@G]A[FDHUCMNEHJ^"],
              encodeOffsets: [[119942, 40112]],
            },
          },
          {
            type: "Feature",
            id: "120101",
            properties: {
              name: "和平区",
              cp: [117.2008, 39.1189],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@DT@FCHG\\FFOROMEgYc@"],
              encodeOffsets: [[119992, 40041]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/world_geo", [], function () {
      return {
        type: "FeatureCollection",
        offset: { x: 170, y: 90 },
        features: [
          {
            type: "Feature",
            id: "AFG",
            properties: { name: "Afghanistan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ࡪ͇وŐǬϠڐŶӂʮǚڦ۾ǌƀ̚ІɣʪҴMوǯʲĹ،˒˰ǋ˖ϪԈiżŬĘͺβ̈Ҕȏĝʱʪ¡ý۷ͪ˟̊ǰώĊԼϖׂ×ࢀAƬʋӧĥяƹ७ĭࣗǭӫλȤΣĪллΛ͑ɳ̡ߛͦ։՗ɅΥԕ²ԋ͡ɿ̳þٝŋğɻسDҵӇ܍થΓבôǝȁԇņ࠿űටіހހåզُƚßՔ˟ڢάҢιŮɲؒ΂ਸ",
              ],
              encodeOffsets: [[62680, 36506]],
            },
          },
          {
            type: "Feature",
            id: "AGO",
            properties: { name: "Angola" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@ȸصʌԋȘ˕͐ѯ֊æˤŠҬşŲɀɂӨԶ®ƤіHñ̡৴RfՉǞ͕ūԑÖԫ˪̷­ৃȼüκsԴŴϦ¹ĘʹĩСƨϿů̿î́ყZᦵ֤ۋպԽ໳΁᎝Š׋Ж₭ŵÏԃϞկ~ԉƝЙǅÿՈŜ݊̂ޒªΰ˚ݶȨΆӘռːϐĘج«ӊʣ̜ɡԚȵԎ®Ǩʶͬʭ߼ǣ֚сՐĄǎΌŔʒg̎ĸៜ[",
                ],
                ["@@ɉėɣلͼδʪƘ̀˽̩ǯƍɍλ"],
              ],
              encodeOffsets: [[[16719, -6018]], [[12736, -5820]]],
            },
          },
          {
            type: "Feature",
            id: "ALB",
            properties: { name: "Albania" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Ń˷ŢέΒȳiə˗ŧ»˙ϷСƛÐgȂү˰ñАîֶŖʼƗƂÉˌθаÂƿɨôǴɥȪďȨ̂"],
              encodeOffsets: [[21085, 42860]],
            },
          },
          {
            type: "Feature",
            id: "ARE",
            properties: { name: "United Arab Emirates" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Ƭ¤ɱڂƂ۞uԖ{ֺ֪ظՠՎԮǆ˹ŖڑѕGçճƪŝϝǑE΅ʓΏuͷǝǱᡋъ͏࡚Ț"],
              encodeOffsets: [[52818, 24828]],
            },
          },
          {
            type: "Feature",
            id: "ARG",
            properties: { name: "Argentina" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ߗ§ѓ̔ԑx࣑@Aሞ͒ϵрؿનԋ୲ȿϙп"],
                [
                  "@@Ӵ؇͠ڰॠƊǷ໶ോۊŷਆاࡾ͡Ŧχࠡ౧ࡒɭ़ŷڔƈނ٢Ǝݐжǈфӝiڣۻҩ֟΁ॅࠃ૭ଧȽڥɣࡹT࠷ǽȇÝիËѫ੨ܙŗ׃Հν§Ч߯ઁఛ҉။ǩउĎǰԅǣػƺщԋ̏ࡱř̪͕߱ɗŜ࠳֨ʧҠˆʢѧޛʻڭԹūࡋȣ҇ߏEڃљʋؿؙࠞߦǝ˿ݭ঳Ӄձটލͧ΅Ͽ˔ࢍ֔ӡΟ¨ީƀ᎓ŒΑӪhؾ֓Ą̃̏óࢺ٤φˈՒĭьѾܔ̬૘ěӲξǄę̈́ϵǚˢΜϛ͈ȝॺ͸Ǣƙ਀ȠࡲɤݢԊ̨ʭࠐEޚَոo۰ӒࠎDޜɓƶϭฐԬࡺÿࠀ̜ބռ߂צԺʥ͢Ǭ˔ඔࣶд̀ࢎĹɂ۬ݺશȱ",
                ],
              ],
              encodeOffsets: [[[-67072, -56524]], [[-66524, -22605]]],
            },
          },
          {
            type: "Feature",
            id: "ARM",
            properties: { name: "Armenia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@୞ƀǨə͌ƣǛɁ҄˽ʁˋΦɫϘƏl׋̣}΃ӢHżχCʝɤǩuͧʖرȼĄФƛ̒"],
              encodeOffsets: [[44629, 42079]],
            },
          },
          {
            type: "Feature",
            id: "ATF",
            properties: { name: "French Southern and Antarctic Lands" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ը˃ߐĿǅɽϣಇÃq҂ŮΎÊǢ"],
              encodeOffsets: [[70590, -49792]],
            },
          },
          {
            type: "Feature",
            id: "AUS",
            properties: { name: "Australia" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ߺ́ҜŘپǊԎÉÐঽ˽́ēگ̉ɰ׍בǧ®ԫԭܘŗֈӝܸtϬռõ"],
                [
                  "@@̢ڇբ̈́˦ΡЖ͟đϋǴܛŸнɄĹɬܕąѥ˖֭࣬ѭצЋ֞λŋȯӔՃࣧ͜ͲȂ;ηȴźƢࢹ׬ԩϸ͋ڀڹʀڭtӏËԳА܋µݓơϵɩݡjӕǕ׻χއثЭ̫ٱ˫гʝܧ͕нɅػŉׁªˇӕ̇वޡ·ϫ͙ԕέ۟ψԥƪżѬҝǃ݁؉ܩɪӉƄӑÔ߿ʐիԮƻْțьЭ;߱ĸˢРȯزЧ׉ݝƷѮҬŶӞ͘ЬãجہܑԿ˽͏ڛٽΊ~ҀԿ،ѹ̀ǂȘઃԚןz߯Цຓāછ̝ख़˫ߡÈࢻљܯȗǉѱ̳Ϳ܉qՅõݑƶ׿ğֽԁ҃ʕуʁЗˋؕ֛Bࢽ՜ҋǄlӖкŘƚȒ̠ĺאģӼѻࡖƏӒӎͭնsʚϋͰĽڄӓڔřΪτε˳ެиʑʞ͗aјеڎă˄țʦĠӠǢȸŘрęӮΎ؀Úٕ΢׀ۀˬЦΪٜ̰ϤàɴĻڎ̺ԚĤŶȀɞüҬoࢨʖҚώɊ҆ӲѐͲvҘט܎ΠܩΦǚ̗Ј˂ТψǻĸٖҠаȮͨцƜ`ɼτĭdɂτŦОŔبϫҲӽՂMՖÿǱҦДڪϜɘſȾκӒԘ̒јıۺǂeі؛ˢ҂Ū֎ȻҀ·ۼɋʈĐԶʵӬʊ͂ñȠǊϬеɡ͉҇ͻ˿Įͱʙп̗ЭÔʁڜҫ٨ˏѠ́؈ӻʂBѰɍŶʷߤ˵ֈ˼ǐҊǠόľҤʰڞŝОÔʔīӔŌنǈǠŽˬȮѾǆҦtʈ̸̾ʂЩÎՃȾķΛ̨ёÚӇ̥",
                ],
              ],
              encodeOffsets: [[[148888, -41771]], [[147008, -14093]]],
            },
          },
          {
            type: "Feature",
            id: "AUT",
            properties: { name: "Austria" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Û΃ӁCǎǻ˧էǇƗܽsщȏۛÞயɐȉ̊ࠧƣĭǅԗŢѕxϝƶźȴƬʪ²ьɹŤɜݎ׸ƮЖ}ˀǣþƜšո̠ń̒ϰز˓ӀΆ̐ÚٶʱЂªϰǁãŃČ̅",
              ],
              encodeOffsets: [[17388, 49279]],
            },
          },
          {
            type: "Feature",
            id: "AZE",
            properties: { name: "Azerbaijan" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ʞɣψDGŻ΄ӡֽŒщϰƃ͆Ǫv"],
                [
                  "@@ϊËƞɈԈͺѴѵђ׭ϺʸɧۗãƣٵƟ̭̍ȝvзȽ¥ԻѲ̂дʝʚ̿×যإk׌ϗƐΥɬʂˌ҃˾ǜɂ͋ƤǧɚȶƎضʍҐ¹ŘĲбҔɔŚʀ׀ԙ",
                ],
              ],
              encodeOffsets: [[[46083, 40694]], [[48511, 42210]]],
            },
          },
          {
            type: "Feature",
            id: "BDI",
            properties: { name: "Burundi" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Á০ɃϢԜßʲӎҀÅ¸ͧǸȏT˗ȹǭ͛ѫ̧̥΍"],
              encodeOffsets: [[30045, -4607]],
            },
          },
          {
            type: "Feature",
            id: "BEL",
            properties: { name: "Belgium" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@؜áުǪՐοҦȝħ֧ɕĝһܿϦћßדІϷͶϷ`ũ̒ڪǔ"],
              encodeOffsets: [[3395, 52579]],
            },
          },
          {
            type: "Feature",
            id: "BEN",
            properties: { name: "Benin" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ۛįȹ׆ኞǛǦЮ̇̌ʱʞņѶ̀ĨǠξЪĀȀʤˮʘ̠F٘ә˩ȎӽǓͷĘɧСԳʵʳǁՉt՗µണ"],
              encodeOffsets: [[2757, 6410]],
            },
          },
          {
            type: "Feature",
            id: "BFA",
            properties: { name: "Burkina Faso" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ֹɐϽ̍Ƀϗǰƥ˦ϙǾÅӦɮΤo˴ښۢŬּɲȴОœΚǢŘɎٴϖǆˀ޼ΒҦŢɀǇՠJáСŔϣӀչНॺȏmֻǿʣЩÿǟν˿ħ݁lϳâ˓ƉωÖร¡qӉŘم",
              ],
              encodeOffsets: [[-2895, 9874]],
            },
          },
          {
            type: "Feature",
            id: "BGD",
            properties: { name: "Bangladesh" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@i׽̉ŶÆگʉѬµєǅКΕӨޟü΋˃ҳΧǠũƵʃĠ͗øŽۖ̅لƜԒԫɤȆ̪Հ̼؅Ѽ֮̔ږεВ£ô׏ߞřު^Ӟƛϯ܅ϕµʷӍҢѥƎ՞ɶFѶ೯",
              ],
              encodeOffsets: [[94897, 22571]],
            },
          },
          {
            type: "Feature",
            id: "BGR",
            properties: { name: "Bulgaria" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ʎΉ͚Ö٦ſ௾«иɌবȜ̩ؒӴĕѥΏ̫׹˔ӏܣŒࡥ˃Uлޅÿס̊ڧɱة|Ñ֊сːƒŢĝĴƘˌ͌ˀСδ÷̬ȸȐ",
              ],
              encodeOffsets: [[23201, 45297]],
            },
          },
          {
            type: "Feature",
            id: "BHS",
            properties: { name: "The Bahamas" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ȵ£ɇӜ̿ʐǾՔʨۣ̎Jӥ"],
                ["@@ࣷƅÏ̴Ђäֈ{~ɕ"],
                ["@@ƟׯƷņ`ѮϓͪCĪڐϗ"],
              ],
              encodeOffsets: [
                [[-79395, 24330]],
                [[-79687, 27218]],
                [[-78848, 27229]],
              ],
            },
          },
          {
            type: "Feature",
            id: "BIH",
            properties: { name: "Bosnia and Herzegovina" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@̦FȿσМ͓ūЃȡƽû˙țūҥݓ͈ͅΘ͋Ȅϭ̾ǻʺЩϾǬΒ̞ȕǼǨϾnܠƓ׈\\Ϟȅ"],
              encodeOffsets: [[19462, 45937]],
            },
          },
          {
            type: "Feature",
            id: "BLR",
            properties: { name: "Belarus" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@߼Mࣰ̈́ȚӄېːÿϔԜƚ͖ࣘࢮɁŢȻѲĴࠒȧĊЁǷɧՄս΂Ƴ»Ʊ֦Ʃʎɡ͝ǿڳǉÿȠ˧ȸ՝ܝ¹ʵȁÃхͭĆݷ¡əȞ̿ƥ́ŨڍjफȬࡕàٱmҡɩГeϐʷϴԌǢLͰɷ͌ϊ",
              ],
              encodeOffsets: [[24048, 55207]],
            },
          },
          {
            type: "Feature",
            id: "BLZ",
            properties: { name: "Belize" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@OŮĸƴı̞ԔǄZHūǄGaɭƋεôŻĕ̝ÀăīщǓɟƱǓ̅ʣ@àॆPژ"],
              encodeOffsets: [[-91282, 18236]],
            },
          },
          {
            type: "Feature",
            id: "BMU",
            properties: { name: "Bermuda" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@OEMA]NOGNG\\Q^McMOI_OK@CQSGa@WNLVWHFLJXVFGJ`ZRTDLeeWKIHGIK@@[MQNi`]VDTBHCJAPBJLVFjT^LV\\RJZRn^RH`TfJjZHHOTTFJP_NOX[EYQQKMEJOLANJH@HQHAARF@ZEPS[U_IcRQXE@EEKKOCGGCQCOGISKYGUC",
              ],
              encodeOffsets: [[-66334, 33083]],
            },
          },
          {
            type: "Feature",
            id: "BOL",
            properties: { name: "Bolivia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@य़͟گӳ؈વȲ۫ݹ؅ŗ͡୆ҋऺˆ߾ѳ΢ŏ؆ЫֲՌ࣢αۺȖ˰ƭ̶͠рh܎¤נǸ˶ܩഠزíѠnȈʪ݀;Ѷ͂સƚęؽļ͓ãࣰ֛ݫऴƑ̻ͦ֨ǕΐʑՈTӦʟӟǐʕZγʓa͒এྖūӟĜͧҞɽȤԹƫڋɯρĄӏʿǥaʶ޳јޭ^ัʓЕ݋sҋͥ৕ƉǸ",
              ],
              encodeOffsets: [[-64354, -22563]],
            },
          },
          {
            type: "Feature",
            id: "BRA",
            properties: { name: "Brazil" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@૮ନॆࠄ֠΂ۼҪjڤуӞеǇǒӜŖӼBҦ̡ƴ̿Ƌ̻į͔ýޔƿʤ֥ɪ΃ǏࢱǈÈଜʝҴˀǦăӐɰςƬڌȣԺҝɾěͨŬӠྕ͑ঐʔbYδǏʖӠӥʠՇSΏʒ֧ǖ̼ͥळƒ࣯ݬä֜Ļ͔Ěؾષƙѵ́ܿͽȇʩџmرîӃƟϡĪÈ౨ۏӷݏv҄ͅ֏¶ǲΰұԞΓݴɜƶA΢ԖʎċҔɊ̈Ôϼ०ֲێǊŔŴݴϚᘰpθſӔύ̬LؐӀƒǚē͐ӯĔYՀ࿖k˦̂ɸˉǐӷǂļҨѻٸÆǌʲشȞΊƐĮΤ׸ʆ¯Ǯ܅ðśՊ֞ϓɒǀþجŅڜȿʐȤ؀žल̮͎̾ŏʂѪȜȗŉσ̀ŵȖϷɷ̏ƅ܏ɌыÔϳԬϿЮ¥ĢǒˆϠƦ˚ɢҬíȲҚçøǢƗǘĎʐͺõЈĒӔǱξǥʺɪȊŘɿДÒ͒͊ʴؤӼޒ˺¢ȺҫҼ฽҈Ƒxׅمەʾʩ๤Ɓࡃٔր੐̟ඊԡШӱƏҫ঎ʶ࿐ѹఴఔ۝੸व٪ʏܖ̦˅˸੭Ɣԗͯ൹ёշஅୡՙोثܯȿgɻءÒ༽ɹಓęօˇͧƫ૱࡛઱ƛࢁڹηȟԋ࣯Fೕ͓סύवʗ঩ڝ܅࠯ũطƔҫƽࡓȏЧחҥट๕݉ڗ֯Ͻϥߛ։ӑɷӈψЊӟֲڇҬࡹՠ̹{ࡅٰձę",
              ],
              encodeOffsets: [[-59008, -30941]],
            },
          },
          {
            type: "Feature",
            id: "BRN",
            properties: { name: "Brunei" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ͬ̾܎ҢЯ·՛Бǭ˹ϥѦ"],
              encodeOffsets: [[116945, 4635]],
            },
          },
          {
            type: "Feature",
            id: "BTN",
            properties: { name: "Bhutan" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@΂ˍÏԩۇ{ۿÈՇſޅ͊kǚ֌زҒɈ׸șѺqπɥ"],
              encodeOffsets: [[93898, 28439]],
            },
          },
          {
            type: "Feature",
            id: "BWA",
            properties: { name: "Botswana" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ǜƭ˄ӡॎइήĝD̑ʚՑٰŹ՚ϝ஑أݭع˩֓ʧ́ҙãƧГďʽ՝țہ¤БɾΟĸХșȵГЉʧпϑ׻đȇ̐üԠӽߚɧŲAរࠤ|Ჾشಖ͎̎΍՜ͤʮDӂȎưÙ͔ڣ",
              ],
              encodeOffsets: [[26265, -18980]],
            },
          },
          {
            type: "Feature",
            id: "CAF",
            properties: { name: "Central African Republic" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ۜÚƺɎƔgȾȏ੔͐Τ͠Ѭ̌ĉ̐ʂüߺ½߆ϴ؊ࣺю;ՐƜĪΫӜԿF΃ƋΓÄʻ̆ʍٖοҢͻT˗֠ѫΖεɆԋغͩƊˉˣęաpكĘ̹ïųȱ˕}ͧǲधнϥĎŗÝʥԕطǐؙĊ՗̴ۓ˸҉˓͛яùדգ²֩ƘԅѻѯޱėʐϦϧ˔̳Ѡï̠ЇѮæʢċΞÞٴȬƴц࡜",
              ],
              encodeOffsets: [[15647, 7601]],
            },
          },
          {
            type: "Feature",
            id: "CAN",
            properties: { name: "Canada" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@؎œުxЯ΅̵Å੥Φȿˬ͆ʸ̎С"],
                ["@@Хcઝ˂ޯІ̄î૆Ɂ࡮Η|Ʒ"],
                ["@@хŝൡϢʥ̘ݩ̌Ưʈࡻư͕ҜðȚࢨǿԨŵ߄ė˺̃дЋ࠼΍Όҩ"],
                ["@@։ܿո˴֠ǵ̏̉ݚɱϰȴ࠼ʵʹ؛טƞņѿʼԷΝ݉ϝփǂǾیɻńইܯԅצЂ߫Ȳࣙ¹࿅~ŹʠԼ̐λɬ۸Ԓࢄ೾Զӎܲ̂϶ǋɫ҅Չ"],
                ["@@@@@@@@߰äʥ॓ܶگͯDԑϪ̵ϮчʾƻτºˎЂŋ"],
                ["@@͡ѳχîəʢ Î͖ʦΆkɈǣ"],
                ["@@ঝҧץnǿɪزϲ଼SiǍ"],
                ["@@ƼυјżӨɗं˽४ʽöЍؤÞ׶˥ݙ˃ಳȬҽϚ࠭ҁ஡ѣ˿Ӯଗăܴдņڌ˺ޔ؈å"],
                ["@@ष¥ȿЪΦҼޖŜپɷXέħřձʛ"],
                ["@@Է̍ଉʬۃğଫϘ݊ʼטζࢼʃԎƯʦǅԠ͍"],
                [
                  "@@G࡭૰ڄ৐եʡح߾֥࢚؈ؖܨ°ईஞÝఔūૼй¼зس҃פ҇ŃУ࿩חୡŻࢃʨʣуߵ۽ʓοই֩ளÇڏΡÇձ঍Ŀਉڻ࣭ु͙ڏ±উంƕϜ޻ϼّ୲ǔ༞εࡀ͋׺Ѕ੆ɳࢸΟ൶µࣴąƍܫʼࡋ،ळనߗ٨˚ҔࡺѭೢףѶഎЀ॒לҮהç֭֘܌৷لলࢤνݾ˫ಾגȘ෸ɫࡸć۠ɚ޴˵ਚӣʮ͙ຄÛ}۷˪ਜ਼ގſ،ӵ௖Ұߦऔ֌ϸٺݣબੳघ৙͵Յ૤Ӂݰӓംɏբˍͬ܃ټŏͶͅÖऻ؍́׽̏൯̗੏ۑ෇ƋᅛǮుPࢇÍ۱׽ੳω௉૗ॵޡ܌Ɛഘૄᄈ۪సČݔЫߍ֟ˊࣟ˜هતп൸ŨࡆीÎ؍ժ̥ਣսᇷԁ࠯ͽय؁ٓÖ܆ฤ۞഍णĹջӆBନύʐ֛ƛ˧ɚٙىʱٹ̕ϡΥŽˏ¥čȹ໽A౥MϛƷࢵ؃Ŀßˍ͝ޗBࠛGϛƅƊǑøʯeďષлࡽſউ҅Ɂ@˷ƂĥŦnĔȂ̎ЂҦʘӺǙܴǵނ࢕ЂľƬūĺɳ@ǛƆ¥ȤǍēɥ¾ĊȡĊćɚٵːڹ˪ࠑ͘߁̨ݧʃ˝Sਕɔڻŉࠁʺ࡫Ɔו¾ʻƜƫҤ˳IE͓჏BᮝA᭯@ᡃ@ᠿ@៙@ᢡ@ࠛ@᠁@ᛷ@őF྽ࠜ׵δຽΐҳݖŤԨ੻ΨƧڴ৭؎iѠҲКwՌෙ՘࡭ॠՁ׾ޑϚ֣ΈѿѢࡇ˕ࠇҹݛւדπࠋɸࠟ|JⷎNᷲ༬ȭ೘Й࢘û݆ΖৰˀఢĹ఼τ൘Ⱦ־ΑظȠȊЄ׈ęෆݫ૦֬ŖّਔƐ͆ʖৰ·౼Λዸ̭ୄƛࠖÄଊэ஁зຶǷᗘĲܒƦࣆԋࣴьࡩΦժ˼৾ڦĎڴȩࡊҗरä๢ϛಬƄ௬oĭԺݞƦದ˵KߑՖڠڰuϞࡊ࣑԰কͺäघশ؎ૌƇࡘχଞॅݗЭ༠ǝ",
                ],
                [
                  "@@нϿሎʬୠщॊіސ˟یࠛфΒ׭ࡰ݊Ŭ࠲Ƈश͹ՆࠉʼץථеະЉĝσൡã՚͓˱ູ̯Ƃฃɪঋ»ཅ˷ᒃű๻āҕІଫɮݙģਛږ֔ĚಘƜஈરƦྷȞᅗã஗jѷ̴ዎͲಗ[ืɚ۶ـגͮᖬԠ࡬ǋ",
                ],
                ["@@݉ևಹך˸Ş૸ٔȁ"],
                ["@@öɵࢿ|ࣟjࣿőʑ¼ऍѾ̠ИÈነěชң"],
                [
                  "@@ڎԽޤڴᒆΈ෺ࢅůջဒʒߒͮሀыୄЏŊν༚Ȑ࢘՗᎐ܸͩ͹ߐ޻໯ϹጘչೲȁீޙೖÇʽכ้ঋਗά೓߲ઙĿŁӕࢪӥଜϯΌɟմࠩ́׿੕ɪᑏڨஎܣ࢔ԕƎ̉ᗱͲᅩӤ৳Ц̌ʂయќ௥Т`ʑᝡƅ܃˾ֆؤ཈dႸņ˫̜̊оચࠊɳϊ͕˾౿Рၳ˺՞ɆࢷԺ݋´ڏ˸҇ʛ຿ŅᵝȈᄫʚഹŴۥ̐࢞Ϧ஝Hˉ࡚٦ݨࡺ΄ᓪɢأի",
                ],
                ["@@৊ǯຄńɖʑ޷Е౜αƱݳ൝͗߳ê׉͎ᐡٮjˎ႖ĽएռসР"],
                ["@@࣓عय़Խ݆`кѮΨ࠰ɮცྈȱళݟ৉Ǎ"],
                ["@@ᕍЙѷςኹѺήΤ׌ؘܰւࠑԦᭊƀ஬ǧᒰ±ࠄʑࣖΝ੍ɃᏝןਫי@ν"],
                ["@@ҙ͙௝Øৱɖ҂Ϛீɨܼ̬̍ˇ"],
                ["@@ٞϵљϣس൱đࣗƈjӬ൝ÝÁٮࣜౌ˺ஂµÜŎ"],
                ["@@̙͢ݠƘࢢƪЩԝЋ᭗Žᑯη౩mŅ˜პϊ④ĳ୯Ʈପࠐ߈ɾᛄ˳๶ӻฺÛறߨޔ̪ࢄĭ˲Џ"],
                ["@@ढ˓ကFܨˡȑ́८ȍՔȧଊ௬ë೸ǼႊðീÏ࣒ͅȊ΍ԽɟభǷ੽ĸᜱŻႫcഫļᖁ˔̃ҦĹжࡇξ჋ĺঅʼ͂ΈႾÁ"],
                ["@@ŗ٣٩̇޹£༝Ϋ഍ŹଗǼ@@ුؼႮծಆ[ସŬ"],
                ["@@ϣy༽Âɡɼၜ]מƻĵĩ"],
                ["@@༩ʋఝ˔ڼˎ௮Đஈſ˩ʥ"],
                ["@@৽ǏඉBbŤࡴʦҌદǝ"],
                ["@@కǥۃȚέ͂áΎજӪÅ৐̇ɫ̣"],
                ["@@͜Ε൏Ĥ൩˘ሏߺʠ৫ȮÕ͐࿶ŕᗢ̫ٞЍ"],
                ["@@০˕ଽʟ༇ك๥Óდņࣗ΄^̦ڔɢ໡Oए˨ՑϠ׌ώ׊ʲࡴÎοȖዜ¨੶҅මǵ൞ǃڒև"],
                [
                  "@@ᖢßᅮŅ໤ɫɡᏅη᎙ǟݻȉᆬJጡԙേʃ෯ۇႿƓՙǡᡷěୈĿׇƭ۞бߙ˽ಛʃЋ͡୫ʣŞȏ෬lȳᖟԋᔧɴឿŻధĸཟªĿЖ༊Ȑб؆ԢÐᖤγ଩բഹǈڼ͘๰Ȩʄ̊஋͠ΥѠᘞڒĝ಼̪ቃĬ᰽Á๣˸۩ͼগʘȁ˺దǈঘ࿲ƌం̺ਬ©ࣤɽٔҒૐƈບĢᢲҀĝ᝚ƚᆔÁᆒÁ",
                ],
              ],
              encodeOffsets: [
                [[-65192, 47668]],
                [[-63289, 50284]],
                [[-126474, 49675]],
                [[-57481, 51904]],
                [[-135895, 55337]],
                [[-81168, 63651]],
                [[-83863, 64216]],
                [[-87205, 67234]],
                [[-77686, 68761]],
                [[-97943, 70767]],
                [[-92720, 71166]],
                [[-116907, 74877]],
                [[-107008, 75183]],
                [[-78172, 74858]],
                [[-88639, 74914]],
                [[-102764, 75617]],
                [[-95433, 74519]],
                [[-123351, 73097]],
                [[-95859, 76780]],
                [[-100864, 78562]],
                [[-110808, 78031]],
                [[-96956, 78949]],
                [[-118987, 79509]],
                [[-96092, 79381]],
                [[-112831, 79562]],
                [[-112295, 80489]],
                [[-98130, 79931]],
                [[-102461, 80205]],
                [[-89108, 81572]],
                [[-70144, 85101]],
              ],
            },
          },
          {
            type: "Feature",
            id: "CHE",
            properties: { name: "Switzerland" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ƫŹȳϞƵіwá΅χƙةŀǻ͹ЏơƄһ˵Л¡αǶ˽ςБſ^ϠؚҾɈϤûɲƞ܎MǦǼ࣒ʱ"],
              encodeOffsets: [[9825, 48666]],
            },
          },
          {
            type: "Feature",
            id: "CHL",
            properties: { name: "Chile" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@Bም࣒@Ԓw˧ͻܛʻЭӻä؏ʨ࢟ŨੑҸ࡫Ҏୃशۘǭ୼֗૜̟ѢϬ˘ֺޠΎװı"],
                [
                  "@@͢୅؆ŘĺɁ˿ࢍࣵгඓǫ˓ʦ͡ץԹջ߁̛ރĀ߿ԫࡹϮฏɔƵCޛӑࠍpۯٍշFޙʮࠏԉ̧ɣݡȟࡱƚ৿ͷǡȞॹϜ͇ˡΛ϶ǙĚ̓νǃĜӱ̫૗ѽܓĮыˇՑ٣υôࢹ̧̐֔ÄgؽΒө᎔őުſݝPЙȷݷ̣Ɖ޹Σoॅ˚१ג@@ਲ਼ӔˁՒʄӰх֒Ņ෤Φ߰ࢴٰౣʔߞݒ˸ඊत̏Ѯგ֝ɠʿ਻ՉŠ˂ல˺༒ϮָʍࠎéूΠԨപ׈എΤబȗ఼ʤۚĵਞӮਆưྺ˒ნˀሤÕ൘ǩ஄ќɌɦњЬֱŐ؅ѴΡ˅߽Ҍह",
                ],
              ],
              encodeOffsets: [[[-70281, -53899]], [[-69857, -22010]]],
            },
          },
          {
            type: "Feature",
            id: "CHN",
            properties: { name: "China" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ԑഓΫۏѷ܂ĩخӶࠜڦَϨʡƣԓ", "@@ܩЗۏʺyܢаϠࣾɾӚoȊ͍σσșӟ"],
                [
                  "@@ฬˍ঺ׯͼ߃౨Cܰͨ൸ʜѳݱ͙̭˽ः֡ࠇ৵ƪܝ̑ɜܙť঳ѕwLяթӺͯһಙαƀѹܩЍ˂ֽ׭ऑҋۃա୭ʑأϽࣝɭ҂ϴǭ͞ږ֠ѹѲܷ̓ॉ׏ԫթ࠙¡ѓϻѸ֩یƏϕڔʕस׶ݚ͝լuƌѱஓɻϻҏࠇућיࣜҥͦࠝԞޓ֮٥_دՅɯȪ҃ӶʻŻۃɇڗҷ÷ؗࣧڹિޭোିޡୟۻृĩԣύ̃˘Ӈй୭сࢵŹ˻ࢱҭ·ə؎Ȧ͘ૻːЇƍࡍɔЏ΀ƄӜޏƶЙܑ̀҃ࠇīڡJ҉ȳѥūŶ॥҃x÷Ȣ}Ύ؝ʓεƸر͂ʔۤՏǎȧޜࢱƓĴাߔۮۚ{٠νȨ˭ӶӭÙࣟŲ˴ΜϿԺ׳Ν۵ȸॷ՗އسڳĿοɦѹr׷Țґɇ֋رëڌԟǭওĈोȖڿτٵǔ˯ЖҽŦࡓոکʴΑȩଢ଼טࠛՒɽऐ׾őіͭјĐۆࣙঠ൧ͼʝ٦ةϼƫʌųӎ͜ԛȔ˟ďɇިʈȔśȠߤЈ׈ǐࢸő͆՜ંĲͮ̚೜ҔŠȐãӐּɔݱฦဘͲјȈ؆ຒဠˡҲϞ¢ࡆۦĀٖ֔͢èɚו۸ѽப̿׆ڱ͕ঙ̢ηূƝଆŝ৪ԻԲġϤޟӲӿऒnჄȉ૤Ŝࠦůఔԛ৮BόʽঐҌബ̈ాঘ̒׾҈ך˰Ƌˤˍ͔ѴըӀùࡺǝ࠸Ѿ౲͚؞֊נʆ௠ŐڐĥĠ̘ݿזګː٥̳ࠣžӇŃɏΆר࠾Цو৚̓ஆՎQτݸࢾҲːWҪңȦۜмਰƲ૜vసʡ݈̱԰ࡏ̀α̊ԩ̶ࠕ",
                ],
              ],
              encodeOffsets: [
                [
                  [124701, 24980],
                  [112988, 19127],
                ],
                [[130722, 50955]],
              ],
            },
          },
          {
            type: "Feature",
            id: "CIV",
            properties: { name: "Ivory Coast" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ϣUוǒ՟Wহƥ׍ʍ̯ࠫǋvÞۖĄŀ}ͨΣΚˉÈʕɲǾώčО ʔƄB¸ξÝǌĄŜ̸ĶȹڨȗΎæ˸ǘÞŊúɸųٮOƸʖƢgʎĦžΫȞłΌŰϚǽƦ˥Ϙǯ̎ɄϾֺɏɠ஡Ο۷ɕेθܣͧ",
              ],
              encodeOffsets: [[-2924, 5115]],
            },
          },
          {
            type: "Feature",
            id: "CMR",
            properties: { name: "Cameroon" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ľ°ӻŇԝŒЋÅ൅nŬڒ͟֊ϧƚǟϖɋŦXɶɎתЎ߸ʒRԄӮ͈bҾΉ־˲ĀΔȌͺžь҆ΊǞךǲȊŢѨɜ՚۾ٲ¬˨ĠƲͫͰˌʂ¶ͮ՟Ê֏֏ҜޅҷTʁÏϥČǻЅӸөμƛŠΏˆ׃ſɩх࡛ȫƳÝٳČΝåʡЈѭð̴̟џϨ˓ϥĘʏÓґڛȤڷɜ੗",
              ],
              encodeOffsets: [[13390, 2322]],
            },
          },
          {
            type: "Feature",
            id: "COD",
            properties: { name: "Democratic Republic of the Congo" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@»ঙͶŕˑ̗͓ɟ͍ѫǯϷ±ګț͍OهʍɹԃŗÝýҟɄϡÂ৥ưޝċѧǘӣӤҹҒ੕ͥĒ૿ƙɣĵʇՙȊχƫষĻࡇɨƫט͝ɲƴìٟࣟR·Ҧ̳ΨٟŠȋѰԣ˅ڧŞ˫ϢՕüϽqµʾ́rϥºԳųιtȻû®ৄ˩̸ÕԬŬԒǝ͖eՊ৳Qò̢ѕG­ƣԵɁӧűȿҫŠˣş։å͏Ѱȗ˖ʋԌȷض៛\\̍ķʑh΋œşʼɊĘμƎɎ̪ǰɚđ˼͐ҜSÄʃ̼ƩӶՄӨШɆː۔θࠆϬўքМĪˌt̰Ǝ̆«ӊŀݖǐԾʦ҈¸Ԕúה͜ѐҊ˔۔˷՘ؚ̳ĉظǏʦԖŘÞϦčनоͨǱ˖~ŴȲ̺ðلėբoˤĚԘۙϘķɤƖϲÅҶǲȦΫ݊֏",
              ],
              encodeOffsets: [[31574, 3594]],
            },
          },
          {
            type: "Feature",
            id: "COG",
            properties: { name: "Republic of the Congo" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@̿˾ʩƗͻγۏࢸٖҪ̓֌˾ɂ֦ĺäό҆ЗݐʴЈł֒ĝڀЉӺζ঄ȽǘسçɻѢÔξ੘ڸɛڜȣÔҒѰ޲ԆѼ֪Ɨդ±·ԓʥ҇ǏԽĿݕ¬Ӊƍ̅s̯ĩˋփЛϫѝηࠅۓɅˏӧЧӵՃ̻ƪÃʄқT˻͏əĒ",
              ],
              encodeOffsets: [[13308, -4895]],
            },
          },
          {
            type: "Feature",
            id: "COL",
            properties: { name: "Colombia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ΫȤЭ˨ʅƅ܉Ŝȱΰƽ_࠿Ӓŕʺ̼ÚтȢ̦иÊΞՆ͐Ѵ̳ȦǄӦȏސǸɚƃ܄ͻ҄ņТ˔ÑǂʠțӶĺŬѢـהΌĚT˦ƺ܂ӖϸՊfäǪڂéڌъ͞ȊОК̖»ɚɛǍ˱գƕɇп͗ʋʓ̷Ĺ׵ɷӭѢÇņϭȄȁâ͹ĳ̵ǫȸéȨ̉ઊĄӦŃעܡͼĚ؂­ӐĪ̔ƟƱҍȇ˯ß׻ǜ֑ʆʟȉэл̨ȃɠ̋ʰ࠹ǁĻǏӸɷˊ˥́࿕lZԿӰē͏ǙĔҿƑK؏ώ̫ƀӓoηϙᘯп҂ʣpժࡤٟϾԍị̈ƤҧɝصŀӵࢤϳɐˍІ֑Њɡā",
              ],
              encodeOffsets: [[-77182, -155]],
            },
          },
          {
            type: "Feature",
            id: "CRI",
            properties: { name: "Costa Rica" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@җȆǟǮĬƤȄɷȪͥǔ́ņÅʖəƮÄʑǗȩȓɸˑĊŗǞLʮŎˆʁŠȖǌŴňֆɝȖŊˊéƔǥʜÇȪǲɈҙ͖ͷЂΩ͗õLͷǪűűıƱëǟ©Ǖ",
              ],
              encodeOffsets: [[-84956, 8423]],
            },
          },
          {
            type: "Feature",
            id: "CUB",
            properties: { name: "Cuba" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ܨÑڊW߄˹̭ͮ޺Ĩ̔ȡ܈ԳԺϛˢ\\ԆǟÕʁئٌ΅ıȟ֑Ń֡¥׃âளą֜Ҷ΁ɔէÈ̃ʐȥӎӃ޵ɦʥǬભž̋ǐ̀ɀࠗ¨׿ѧΏ[ťȳеğΫĂѺʸǼ̤ϞȈіǎَĄȰĢ",
              ],
              encodeOffsets: [[-84242, 23746]],
            },
          },
          {
            type: "Feature",
            id: "-99",
            properties: { name: "Northern Cyprus" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ÐJŨȮ؄Yކʢ֧ΧÔƿęǇÙűj¥iĎÑ¾ǋVɫïƿ¬"],
              encodeOffsets: [[33518, 35984]],
            },
          },
          {
            type: "Feature",
            id: "CYP",
            properties: { name: "Cyprus" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ãࡱͿЩŊȟͶЎǀ«ɬðǌUÒ½jč¦ŲiǈÚĚ"],
              encodeOffsets: [[34789, 35900]],
            },
          },
          {
            type: "Feature",
            id: "CZE",
            properties: { name: "Czech Republic" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ϯǂЁ©ٵʲ̏Ùҿ΅ر˔ӃΰѕȬėΠƧʠؒǾ̸Ⱦ׾ǎɂǆɜīϒĖЊ˓ؼñ¿ɳҘǧŲɒּĥĄʿز»ϮЯʡCŽƯȕÅȑǇ¡wý˹ēϋbšȁ",
              ],
              encodeOffsets: [[17368, 49764]],
            },
          },
          {
            type: "Feature",
            id: "DEU",
            properties: { name: "Germany" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@d͗ࡔțS̗ࡢǂҾɰॊͧІˋȞёɹɣ̨̙Ⱥ҅ß́Έ՛ϑĕɛĬɁǅ׽Ǎ̷ȽؑǽƨʟĘΟіȫӄί̑ϯ̟ŃŢշýƛʿǤЕ~׷ƭݍţɛыɺʩ±࣑ʲǥǻ܍Nń״ьֺ௅ƸЇɘ´ςǗȐĨ֨ƗࢢԎ@Ɉ͂Ⱦޔƿ˴ǐǲ۰°Ƽȃ֮вȓ̀ӈٌōՠŸ",
              ],
              encodeOffsets: [[10161, 56303]],
            },
          },
          {
            type: "Feature",
            id: "DJI",
            properties: { name: "Djibouti" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ȤʹΑӏȩήɯ̱҇ȅƬȭÏҷb_ʮßɶ˴Ѐ̐ϊήñʪȴ"],
              encodeOffsets: [[44116, 13005]],
            },
          },
          {
            type: "Feature",
            id: "DNK",
            properties: { name: "Denmark" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ԋڹ࢟ӄŝΒ௼˨ˎу"],
                ["@@ȵ̓ʡĞ؁؁ɮХ՟ŷًŎͽҲ}࡬Ɣɪʌʦ݌À̐ɴڮʂѝʟ˙ĶɽҘŵ"],
              ],
              encodeOffsets: [[[12995, 56945]], [[11175, 57814]]],
            },
          },
          {
            type: "Feature",
            id: "DOM",
            properties: { name: "Dominican Republic" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ŀƞپIӾɏɜtƴ̕ҠhʡϐЮ̷̯ͿЍǼϫˡ¢ƱƵ͑½ŷȲˣťͳֻɏƆ§ʎjɬɍʦȲƚÞ͒óҜ"],
              encodeOffsets: [[-73433, 20188]],
            },
          },
          {
            type: "Feature",
            id: "DZA",
            properties: { name: "Algeria" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ᮩཽᝩ࿷இϑटćU՘ϵƌԹʊȧЀᬻᆴᬻᆴṕᎠfǌ@ÊQ঺ബب࠼Ÿێɦ͎тচͪجӢòϞ̶સƚƸ͜ɛǲ̃ࢲ¹Ԟ́ՠ߰ҠࣦƢՌΎ߶ʰ෎Ƭർæшůߊͨ࣌P΀ȝֺ¾ǟћƄߟȡۙԭҵôمۊԃRȯԮ͹Ϊຝ˖ݏ°ϵƧۇÔϥŃҟòՇͫΗӺؓέ̘ҵϼƸڒϷςՃ",
              ],
              encodeOffsets: [[12288, 24035]],
            },
          },
          {
            type: "Feature",
            id: "ECU",
            properties: { name: "Ecuador" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@҂غǻξ͍ϵԉςǞʀƙބ̎ŴƺԼ͆զÍ΄ҢǸ׀Ͱࡀӑƾ`Ȳί܊śʆƆЮ˧άȣŞٓʽճࣷ࢟য়ͧԥܵǃ֣Ӆ΋ΙъͻĞ΍áw̮ʈȨıΔ",
              ],
              encodeOffsets: [[-82229, -3486]],
            },
          },
          {
            type: "Feature",
            id: "EGY",
            properties: { name: "Egypt" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɽͷǹىɫѩȝƥ˩˔ϛϒ׵ஸđùΐࢯԪࡋٌವ̴ҙ˒ӃݮछǗƣճ঒ݭƨǣΏ@Ὁ@⁩@@ᶶ@Ჴʥڲɐ԰Żά̤Ж૦b߲ɝ࠲ʛϴſ٨ˊΌʊݎêװŃɮеȜ˜ڨȣټ³аɄւ෽",
              ],
              encodeOffsets: [[35761, 30210]],
            },
          },
          {
            type: "Feature",
            id: "ERI",
            properties: { name: "Eritrea" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@˻˖ΉӰϋ˒ɏܷ̄ͶֻXȭǬӯȡԛϢʽط঑ǬęʹβఀĊ֒ˆʴؤƐьӒӦঃɴޗҢУବߏҲӍҖӝˀ˿аʧʩȳέò",
              ],
              encodeOffsets: [[43368, 12844]],
            },
          },
          {
            type: "Feature",
            id: "ESP",
            properties: { name: "Spain" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@¦״΃θஒ؆ਊƱ૾NࣂƝۦªമͰ͛໺ϡ̨ǺीϝআŊ®ӥߓ֓ઁǯõ˱ԩү͕ہ͞ӑӟϑǹճىǗש٥੧_ߟhՃ͍̓ͅЩê̵˴ʃӚ޷žé˦̶̀Śɬ̃ʢɶրͳԌδèЈƎŬZپϲɪɻфөƝŁӹCɁЬ΃ū̥ɇ",
              ],
              encodeOffsets: [[-9251, 42886]],
            },
          },
          {
            type: "Feature",
            id: "EST",
            properties: { name: "Estonia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ĮӸ̱ŁՓ̘ñӘਫ਼ɼ੔Ũ࣮Ƒࢂ|Ŵƣׯӝʞ޵ΫˉۙDܡ̸ρļ܏Ʃ"],
              encodeOffsets: [[24897, 59181]],
            },
          },
          {
            type: "Feature",
            id: "ETH",
            properties: { name: "Ethiopia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ԜϡӰȢȮǫּWܸ͵ɐ̃όˑΊӯ˼˕̏ω˳Ͽàɵ`ʭҸaȮÐȆƫǽ̴̕ҧ̴Й̛͎ᩨঽۺNᛛᡃફݟףաeɯ˅ַB͹˴ލΙʝΓ֕àȃĬȟwˇT੟܌ב@˹ˢ@ҾѧƘӻࣴϥȚƧʹэЦԧÒ˸ӐҀrŲʰ[ݲʞࢠЊɾĎ΄ήٜԔи΀ࠠƆܠ঒ǫʾظ",
              ],
              encodeOffsets: [[38816, 15319]],
            },
          },
          {
            type: "Feature",
            id: "FIN",
            properties: { name: "Finland" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ūיಀ֓ޡى঎ख़֡ܛݴس΅յఘֻ́ѓޭӟᅡੵໃá๑̯ൃǯӡҞ߿ˠȈࠢСݶАӪނՆ኎࣮֖Ǭē΢ୟЈ˳͜uಒ಻ֲ૩ЪԊɞतѻલ¦ࣘȭߠϊЬ؞ಬ˶઄ͯΡכ",
              ],
              encodeOffsets: [[29279, 70723]],
            },
          },
          {
            type: "Feature",
            id: "FJI",
            properties: { name: "Fiji" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@̂ʍƓѭԳŗҩļąτ͖̀ϤĻȼƐ"],
                ["@@՛ǯŅ̼оǤˊ°Ӱˀ@ЧՕȷ"],
                ["@@é­@ШǨĽЗ"],
              ],
              encodeOffsets: [
                [[182655, -17756]],
                [[183669, -17204]],
                [[-184235, -16897]],
              ],
            },
          },
          {
            type: "Feature",
            id: "FLK",
            properties: { name: "Falkland Islands" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@৘Ԍ܎ȿԌʹڦϙʥ̋ଋʥϙ̌܋ϙпϚ"],
              encodeOffsets: [[-62668, -53094]],
            },
          },
          {
            type: "Feature",
            id: "FRA",
            properties: { name: "France" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ˣ٭ϡǠș֢ǜ̺ը͎Ɯܛ"],
                [
                  "@@הЅќà݀ϥȊñʎjЈɗெƷыֹŃ׳ɱƝϣüɇؙҽ]ϟВƀ˾ρʁʚ̿̅ʯɐٱҖŃĩηݿӅစɬ௧˗ĩԑঅŉिϞ̧ǹ໹Ϣͯ͜ѢԎǆူࢁࢤإю౹͒čؖઠǾථɏˇॎߌέዠپʨێܾǞŪ̑ϸ_ϸ͵",
                ],
              ],
              encodeOffsets: [[[9790, 43165]], [[3675, 51589]]],
            },
          },
          {
            type: "Feature",
            id: "GAB",
            properties: { name: "Gabon" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ࡹࡔ։ۚԙࢄ˨ǾˎȲؔǜخ˴¶௢SOৠЌÆԞőӼňľ¯ÓνɼѡشèȾǗεঃЊӹĞٿŁ֑ʳЇݏ҅Иãϋ֥Ĺ˽Ɂ̈́֋ٕҩ",
              ],
              encodeOffsets: [[11361, -4074]],
            },
          },
          {
            type: "Feature",
            id: "GBR",
            properties: { name: "United Kingdom" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@҉ֽًǦԱ[ǦҊǥ҈۴ࣔԳ"],
                [
                  "@@࣋ࣧࡦŘऄIɕۅݯݩࢄÃäĕݠ঱ֺƇԬढ़ʈͧৰǅķ՝ѓʗͲѣݱѯ૳Rෝɱϻǒ։ϿޥĪם͍ҁǘ௼ࢨݪǺOBಽƔʃͰ࢜ʺҡҐǆռఢ÷D@ŮӤ֛Ԯ_\\৵ƨȧɬ̨ϒˡɴҍЇ·߶щє̨ࢆٶھڤá০ì",
                ],
              ],
              encodeOffsets: [[[-5797, 55864]], [[-3077, 60043]]],
            },
          },
          {
            type: "Feature",
            id: "GEO",
            properties: { name: "Georgia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Ųάȿִӟ̲ҭĬ̯ʴĺĲ܄ƝఆƋଦЕƦƻԚƂ޶ǭʴ·Նșɓřвғŗıҏºصʎȵƍଢ଼ſ߳Юࣅ¡"],
              encodeOffsets: [[42552, 42533]],
            },
          },
          {
            type: "Feature",
            id: "GHA",
            properties: { name: "Ghana" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@೉ӯҳ˽ݳʑݡʆͨηܤɖैΠ۸ɟ஢ŗنrӊฤ¢ϊÕ˔ƊϴáÕʿΖџC؍Ąڍɂ̫ȅݳäйɢՓȈ̍"],
              encodeOffsets: [[1086, 6072]],
            },
          },
          {
            type: "Feature",
            id: "GIN",
            properties: { name: "Guinea" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ʃtǡͷʁJǏǴÈͶΗԨɕħǵmɳ³V̮ƇɘʔǻΜɹ̜ڥDțǁɵoƝǷīɹ҅σρӼ͛͢ɋŊȿǖħϊūȂʓƐώЦʮeɖƘȄDƄŎï˨ĢĖd˶МU؀ȱȄlÚĤҜáŨ´¶̭ƆBɖŒƔɸɇάãɲǺ˖ŒȬŠǚuȈȁĴɳΆΙǣɏ˙ǴĊŀį«ʡʲʍǗÝå˷Ș΍Ⱥڧ̷ĵăśÞǋ·νƃA",
              ],
              encodeOffsets: [[-8641, 7871]],
            },
          },
          {
            type: "Feature",
            id: "GMB",
            properties: { name: "Gambia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ņόࣶzȎȦˊ`ͨȷʼIˢƚǞʏεȋιdέǰ̷ȗƭQȫŝއl"],
              encodeOffsets: [[-17245, 13468]],
            },
          },
          {
            type: "Feature",
            id: "GNB",
            properties: { name: "Guinea Bissau" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@҅ΘΝÈȕʀLŸʯǴÁǶѼƌ˦ɦĨ༈c˵ġĕð˧ƃōȃCɕƗʭfύХ"],
              encodeOffsets: [[-15493, 11306]],
            },
          },
          {
            type: "Feature",
            id: "GNQ",
            properties: { name: "Equatorial Guinea" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ƿŴ़̀െmPয়௡T˳µ"],
              encodeOffsets: [[9721, 1035]],
            },
          },
          {
            type: "Feature",
            id: "GRC",
            properties: { name: "Greece" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@Ҡ˱ٺ¶شÑqƣҜĶĿʛ௃íTƒਁǎƺΦ"],
                [
                  "@@ʹՁȥĥԟ|ѫĀৱɓ׌ҿяƋҳAѻўƿȁȊԅрЁ̓ǿҴϯжʑ^ӅޥɠʜѕՓĕ͈ݏ֏Yۍμ̿ڦƧ֒͝ϮљӐÉʆϸТ¼˚˘Ũjɚռö͌ȀҖgƒƦǆت{ڨɲע̉ކĀVмЦɝ",
                ],
              ],
              encodeOffsets: [[[24269, 36562]], [[27243, 42560]]],
            },
          },
          {
            type: "Feature",
            id: "GRL",
            properties: { name: "Greenland" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ᬜԆ᱒ੴ̴ᲈĄ䀦Ŀ㉊ڗ༅͕ộ⭏ćшƫᲐĠᡚ́࿈ʴۦ̝इӧᒞ̺✘͚ᠼǋҾΫ⃝ױӃȕ᧑ơወ¡ছؕگկध৚շಽ൧ˇ༂ѽȢ܋࣍ýઞܡህÑঈ΁˟̑இŽ୥E੆֩\\Ϗပΐћɣଌȿ઼ԣ͈ڱກǉ٫͖ਣӘ˼֭উѵᕖ୆¯ᖯܵᗿڏឧ́ओIࢅ͓ୟࢱᅵכׅ૧ȷ஽ȝܛԱ[כыտോڧͺٿϗ۝љࠍஅ½఍ۈဿLࠁҢ֕ࠐฝਲэոŗݮ୓ޢ̢ئ֗̒ࠪচొ̺ͨΘǬڀॡ̕қůݯţਏ˜Éְ͢҂ެ\\႔ɟ෿Քݩ˾࠷ş۫ȼम޴ԝ̺ڗ׈ৡࢼ੯͚XΚᖷӮᄻÖᖟᏅ×ইˌวՈᕂ˄ၚ¬≹ɖ቉΄Ś͜ẊИᶎИ̪͘ᗗ̠ܺͰ᯲ז௢ĚΓϘጲɜᣚƂᣖRࣺʽᕺҨፘ̽୺áპ˙ፅҐŘή",
              ],
              encodeOffsets: [[-47886, 84612]],
            },
          },
          {
            type: "Feature",
            id: "GTM",
            properties: { name: "Guatemala" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ћƦԻfϩǖҍΌrʖĮȠšƾКۆ઄Ft˸Ƌ¾ġǺ̵Ț̹ˬϜDBӂ޸BަUOڗßॅʤ@˚ƱòŰʘŃϥ͍ЉɻÏǉâǑǧɇȟ½¬ıƿġ˽Ƀ}ŭ",
              ],
              encodeOffsets: [[-92257, 14065]],
            },
          },
          {
            type: "Feature",
            id: "GUF",
            properties: { name: "French Guiana" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@͉͑ГÑŗʀȉʹɩνǦɈΪòϤƢή͛ӸáֺѪܠ˸ğؤȥࢸۿƔ·ӻޑʳأ"],
              encodeOffsets: [[-53817, 2565]],
            },
          },
          {
            type: "Feature",
            id: "GUY",
            properties: { name: "Guyana" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ր̯Դյzџ̈́o҈Чͪ̇Ƈݱԛɕ°ȣƹџϊ؏ːAŎӃԢܳȱҫî˙ɡϟƥ˅ġǑЭ¦ԫЀÓϴɋьƆܐɸ̐ȕϸ˿ŶŊτțȘѩْ֩ɬɲiϲԬƊȾƾ˽̸ô̬ږӲ",
              ],
              encodeOffsets: [[-61192, 8568]],
            },
          },
          {
            type: "Feature",
            id: "HND",
            properties: { name: "Honduras" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ơˀʭòÐʹŗĞǣÒσĳŔʩƈǷǚʛìǨɈáǒÐǊЊɼϦ͎ĔȂƨʊ\\þåž¦ϸùϲv˒ĢİĦˎ©ȪÉɘnǖòϨśƄkʲƿʐį̏Źɜɳ˽jśŕ̇ŋɃAȅŃǙƛźĕ{ŇȩăRaǥ̉ɳƹıđĽʛǞǹɣǫPȟqlЭūQĿȓʽ",
              ],
              encodeOffsets: [[-89412, 13297]],
            },
          },
          {
            type: "Feature",
            id: "HRV",
            properties: { name: "Croatia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ȳ͗ˊʇ͓̓ϝȆׇ[ܟƔϽmǻǧ̝ȖǫΑЪϽǼʹϮ̽͌ȃ͆Ηݔ͇ġƛ߃̶ӣ̢ޑʠ۹ؤǞØϥΞe˲եƄʱγʝˮn̆bגƸƚ˸ƍͤgGɼ̈ĒĈͺڞɠˊĻؼέۜǉ̼Ų",
              ],
              encodeOffsets: [[19282, 47011]],
            },
          },
          {
            type: "Feature",
            id: "HTI",
            properties: { name: "Haiti" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ԢܰƁôқÝ͑ȱƙɎʥiɫ֏ƜЅÍԡÔϽƿ҉ʾö˔ޜśيã̢ȈϧθP͎ՋžȌɶ"],
              encodeOffsets: [[-74946, 20394]],
            },
          },
          {
            type: "Feature",
            id: "HUN",
            properties: { name: "Hungary" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@˨ըǍǼӂDÜ΄ђɋ̲ğ۸ļäǚͮ~ЦžĜÃЂŀȠȢˠ¼࣒ʭǴĒҲɭÎɣԡǭЉ֫ԕ֭کǁԽ١ə̻űۛǊػήˉļǍ˴ƗV",
              ],
              encodeOffsets: [[16592, 47977]],
            },
          },
          {
            type: "Feature",
            id: "IDN",
            properties: { name: "Indonesia" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@Λe૝ך޴ǒѴʭ̎ʭ»ɩ"],
                ["@@ܙȁĳĶø˸ΰԢࠨͬĐǓfʫշع"],
                ["@@̢ɣԲèȼΥॿǛ׉őҍP̀ӚҤPɤ̖"],
                ["@@ūұ౅ʅૣľE̬ښǪՂʥ֔Üݬ̮"],
                ["@@ྔċȂΌ༘З̪կీƵਐӿय़͋ऍ͸ݻwࢍØ޻ưঅ͎؝ČΓŁ໕ΌƣΰޑØּߤ৶·ڴ͡ΒÛŘ̗"],
                ["@@ѝֱćنƬ̠Ǭ˴ȒʗCЏ"],
                ["@@̿˥ׅƸǏΰࡘ¢Ⱦˣ"],
                ["@@̨ٝۿΌۯìӃÅׇȦҦਠऎʕ"],
                [
                  "@@ɼയ࢈ԉ۰ࢼ८ԔݜBܘ̉خ̛ࣘǇbᩑbᩑݟې࡟ǜȷʇ੡}ΦۂՈɺɕࣲЕ۸࿃܆ۗêృަʛУ͑óȏ̮GκٛЮ̢ࣞ״gëɠ௵DͩԄݥƺΡдଈȰњ˜ഘ·Ƃ̹",
                ],
                [
                  "@@ڭ࠭كǉ߱ǐඓ¥ܽŧţٍݪݛҒϠ༪˸çϯλŪιӯ͙݉ߒ੿Ƶ˿ݲॻQտ҅ʙ̐͡Мی࠙͗ȻɶŊ͖؅ӲØࠌ֕ʭîওறՓũίʚʌޜŽ߸ΛPʻֺΎվŤښф౎ǮΎ܎ذپʛ੖śॴࠨ؎Ʀȉ",
                ],
                ["@@©ܽџĈŷԝΌѷɽĵ͹Ւʟ੺ǚڤ˨̨ÔҝӸóĀ΃"],
                [
                  "@@सާহį˫ֵݿַ߱u࠷͕౻ŭ̚ॕϙͫԤ׳´лːৃ̟̩Оս¯ۗĬŹૺнɺЕܘŝ݀ĮުԂ֐Ɩָ֗ӅըǠ՜ÑӪъЖôߒɽۆǶњୠ͔̈̆क़ॲ@ܰƙӍݷآߓơϭ",
                ],
                [
                  "@@छkۻ۰અۊέԚٍۄзؾٕ୴۪݅ʙܠ̳ڀݵՊѭܘمҺࢗऒóђզಢǋݔࠓٮ֫ҪΓߔࣙࡢ_ۺֹӠ۳٘ϥͳۉӖ̞̅sƜו̊ҵؠõФՏɁ਱ಟ",
                ],
              ],
              encodeOffsets: [
                [[123613, -10485]],
                [[127423, -10383]],
                [[120730, -8289]],
                [[125854, -8288]],
                [[111231, -6940]],
                [[137959, -6363]],
                [[130304, -3542]],
                [[133603, -3168]],
                [[137363, -1179]],
                [[128247, 1454]],
                [[131777, 1160]],
                [[120705, 1872]],
                [[108358, -5992]],
              ],
            },
          },
          {
            type: "Feature",
            id: "IND",
            properties: { name: "India" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ࣚটďۅͮїѕ׽ŒɾएࠜՑ୞חՑϟ͛޻ࠀͅߊЭરһସŉӜёٮāৠȝ۪bĪͪŋՖÞβԠǮìڋlǙކ͉Ոƀ܀Çۈ|ÐԪ΁ˎڴŀވشॸ՘۶ȷ״ΞЀԹ˳Λ࣠űÜ͇̍Ʒèԫ׷Ʋછׅ~ӓҩ۵§ХϏۗځȒࢇȏ˹ĚΣгȥѵ೰ɵEƍ՝ҡѦʸӎϖ¶ϰ܆ӝƜީ]ߝŚóאБ¤ڕζ֭̓؆ѻԿ̻ȅ̩Ԭɣƛԑ̆كžەţֱ̫Zਛǩ´ك҃ӻ௃֡ळ঩كՋ࠷ջCϭлȹݳ̝Ͻ«ʥٙǪધ®ۡΣߙI෗ѣ¡ϣٙʰˣދʃ˱֯͵ʍߑ޸ϳ୴͑ࡒ̍Јѿ߰ȻੂơՀޅ଼Α࿀ʣ੾HৰǍ޾௣ԉףĶ઱৲И̤ʝͤড܊֖֔ᇜCǗܞҽюĩ٨ջϘऒࢢঊÙ࢞ࢢՄ࡞ࠄࡈ_״ܒӠڳд֪݂̇̕Ьβ౤ȱपŰߺ۸",
              ],
              encodeOffsets: [[79706, 36346]],
            },
          },
          {
            type: "Feature",
            id: "IRL",
            properties: { name: "Ireland" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ƒ׷ًݣ๯ӹ஑Ŷڼ࢚ѭࡢତڄٌϼǦ҇ǥ҉Բ\\ٌǥ"],
              encodeOffsets: [[-6346, 55161]],
            },
          },
          {
            type: "Feature",
            id: "IRN",
            properties: { name: "Iran" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@݈ǌװӔ֚{τƾװýघэڤğ।ݓظòۻ΁਷ɱؑκŭΫҡˠڡàՓِƙæեݿݿжѵ͸ԓߦυx݉ДƋêϯ௉ѡ̓উཌྷʪࣷȖेŊΧਐЕƪ٣ƭࡑНਇ˦ࡑ٦߳ʈ֗ߘا૪ҍƋՕ˦̻͝ҭѴS҂ˍ@Ɛ،ѝٔ਍Ң׉ߜȜپц̂ÙӬտʨխ৊ҟڨǐʼʿ६ּʈƄͅъϯ־ő̤~রئ̀Øʞʙ́гԼѱȾ¦ˈإߖǩ׎у஠ƟಾɞĄȞ",
              ],
              encodeOffsets: [[55216, 38092]],
            },
          },
          {
            type: "Feature",
            id: "IRQ",
            properties: { name: "Iraq" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@րʧÚӫх́țٽ׊ߛ਎ҡўٓƏ؋ˎ@TҁҮѳӿ¤֟ê؝߭༟äᛍၖఫךৡɪ͹৾ᇶ࢔͆৬āؘҢȺјԾΰž঎Ň̐ɉЖƚծ৉",
              ],
              encodeOffsets: [[46511, 36842]],
            },
          },
          {
            type: "Feature",
            id: "ISL",
            properties: { name: "Iceland" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@șիॊֵથٙᝓֹܣƵૉŮᚑˈࠠψᆧЪ๪ǎʘᄋȜ֨նౠŰಸ֭౨Ҝ੒ʃൌ҄ආÑ"],
              encodeOffsets: [[-14856, 68051]],
            },
          },
          {
            type: "Feature",
            id: "ISR",
            properties: { name: "Israel" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ƥ˅̣Ŝǫ֓ɂĥɋřɛЄŖp͛нഉց෾ʔˢË¶ɞϼǠيŤɆzVˬCþƦɤ\\`·ŕŵhM"],
              encodeOffsets: [[36578, 33495]],
            },
          },
          {
            type: "Feature",
            id: "ITA",
            properties: { name: "Italy" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@̟ڋŲʹǭѝٝ̈́ёĞ୩ѐŞќজûࡪĠْò"],
                ["@@Ԍ׭ş૕ϣÂ΁˫͇ɞ২ȓӒҨ¥рʼ"],
                [
                  "@@ரɏĝЯȬΧڝŪہ̗²зĻʇˠё߀чцۛदڱچLȲȃɽǗݪ̥ؠʩܜѫĔƿƽ̛үϼܳƐΝի؈̷ıѫΗ¹҅ܛΕÝHʲǢҊǼǶ͝ӤʱшΑŀʛδգƴεͶثÆٿϜޑմ֯ӜʿࠪйĮہˤϯŕӝϵΓÕĪθҕńɏٲ̆ʰʙ̀ʂβǵМ¢Ҽ˶ƢƃАǼͺتĿψƚâΆԘšĮǆࠨƤȊ̉",
                ],
              ],
              encodeOffsets: [
                [[15893, 39149]],
                [[9432, 42200]],
                [[12674, 47890]],
              ],
            },
          },
          {
            type: "Feature",
            id: "JAM",
            properties: { name: "Jamaica" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@֢÷ҀȫƔɯןeʭƗҹƊӑ̪ĶȔΜÎȒ"],
              encodeOffsets: [[-79431, 18935]],
            },
          },
          {
            type: "Feature",
            id: "JOR",
            properties: { name: "Jordan" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Ʀˆपͫ࿪ࣆͺ৽ǅų၅у࠸࠿ˣƛƑ˭ٙřȩ̡εʵधƆŨоഊo͜Ůʚ@Ԥ"],
              encodeOffsets: [[36399, 33172]],
            },
          },
          {
            type: "Feature",
            id: "JPN",
            properties: { name: "Japan" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ņ˽ҿԕΉːљțɝӭշʈRЊҬԆӌīΊΜؠǹ"],
                [
                  "@@́ڡƤсѩף੹Ѓ๏½ணॡ͔֡غษȃষЃঝe࡞أ֗෗իΝН͜ȶݶՏʒͿ־ߐʶѲՈࡌѢ؞ָာʤ࣎ǣࢠ๺֔Б௾ࡀӌ͜ՈਈƟा΢ՎࣀƸҞୗ}ڻޥࡍbࢁ",
                ],
                ["@@נǵרΤȈहఝɯ݁࠱೓ָқँण]ř࠴д٨࣌²ʖ୐ʜټন࢓٤˯"],
              ],
              encodeOffsets: [
                [[137870, 34969]],
                [[144360, 38034]],
                [[147365, 45235]],
              ],
            },
          },
          {
            type: "Feature",
            id: "KAZ",
            properties: { name: "Kazakhstan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ӕƹ્דο׹̹KɱЊ੫ǡێХNÚࡆ৓ؘ෷ßডũߣݶۋ͆ಥ׼ƽðᓗӹᶽљ£יچ֧ɼॕǩχ˧±ȲȶΖǅ̊অ˺ϛݮҩɆ˜ࠊāؘ܎ƎܼűƲࠎƭԲ࠿£܍ȴঃσ޵ǭяƌĐўՙ֘دw܉֬ӞِʕǢڢऊࡺӣŀؘჄࣴಾtᇢ׉঺ͻࢼΠ೰j੺ѥʔʠ୼ɂЊഷ׀߮Цƿɮ߮ɔ؅ֺϬ˼Ḯ̈ШȺᑆ̴ݰΒຢǹ˄ࢉ࢚Ȳઆ˹éҝ߮´ᑌߎ̭ˁ੶٭ሠᒑ҄ѰୄӛீɎҪƯКӟטǋΨΥ઎ŒѾԣٕ֓ۥÿ¡ࡅұϝဟˢ؅ຑїȇဗͱݲลֻɓäӏԭŬу̠ఝĖඃx̧ġ஥ΞӉǧŽӹ൩̂փşȉρ",
              ],
              encodeOffsets: [[72666, 43281]],
            },
          },
          {
            type: "Feature",
            id: "KEN",
            properties: { name: "Kenya" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ӾۙיͱȹΕ̿Õšףˑ͹Ǐ֑ͷ˥஻ࡀËӤᵁႌƙĢSࢺʊ;а֌̨ؔσ॰įтЉ׎ԬԈ֬ֆѨƗ@ҽ˺ˡג@੠܋ˈSȠxȄī֖ßʞΔގΚͺ˳ָAܽ॑Xᵣ",
              ],
              encodeOffsets: [[41977, -878]],
            },
          },
          {
            type: "Feature",
            id: "KGZ",
            properties: { name: "Kyrgyzstan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ȊςքŠ൪́žӺӊǨ஦Ν̨Ģ඄wఞĕф̟Ԯūşȏ೛ғ̙ͭઁıͅ՛ࢷŒׇǏߣЇŜȟʇȓཟŵਡ˘࣫ÝĂӜࣴƕ̮ʸٖĉ੾؂঻ѸױȽإ͂۶ծʟĊ",
              ],
              encodeOffsets: [[72666, 43281]],
            },
          },
          {
            type: "Feature",
            id: "KHM",
            properties: { name: "Cambodia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@΁Ѭыࢄȣ২ՠۨઘǆ߀ťۚ͡Ϟׄݖ̱Ȝ֕Ļ৕ඳ٧τԙࢥÓܫͷ۱Ū"],
              encodeOffsets: [[105982, 10888]],
            },
          },
          {
            type: "Feature",
            id: "KOR",
            properties: { name: "South Korea" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ܨযȺխPॷ̓ҥݽǉڥΏݳïĥҚƼـχ࢔ذƚֻܘÂúϒ͞Ϝצ¢ΨÈŨȮ"],
              encodeOffsets: [[131431, 39539]],
            },
          },
          {
            type: "Feature",
            id: "CS-KM",
            properties: { name: "Kosovo" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ǣŃPĘ́ȩĐǳɦƾȌȪÒŜ˨ư²Ţşƾ¿ŌƅƒǎƻŢLĥȳĳĳ×ȉӹŻ"],
              encodeOffsets: [[21261, 43062]],
            },
          },
          {
            type: "Feature",
            id: "KWT",
            properties: { name: "Kuwait" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@Ǭχõȓ˔هשuȽАݟĆ؞߮֠é"],
              encodeOffsets: [[49126, 30696]],
            },
          },
          {
            type: "Feature",
            id: "LAO",
            properties: { name: "Laos" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@˚Ϝ܆ڹܸ¿ٕࠦھٍÎǛ̉ӯyʣƨࢯԅoݬȸࢮ֧³ԎηʸǴ̲ܐնøȡ҄wŵ०ѦŬӮڏϖޅਚO͚ܹ՝ɗʉ̟৔ԉۦ঳Ռ݋َ׏ɄץƵ࠿ݕ̲ϝ׃ۙ͢",
              ],
              encodeOffsets: [[107745, 14616]],
            },
          },
          {
            type: "Feature",
            id: "LBN",
            properties: { name: "Lebanon" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ɣ[ýƥ˫D̘ۄмעfϘ§Ɛͣқ̓ȷҟ"],
              encodeOffsets: [[36681, 34077]],
            },
          },
          {
            type: "Feature",
            id: "LBR",
            properties: { name: "Liberia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɗQࡽАޅٖ܏Ң֣ըȪː¬ʔϜҘϺϺǶnɖĨΘԧÇ͵ǐǳʂIǢ͸ʄsʓĎНǽύʖɱˊÇΤΙ~ͧăĿÝە",
              ],
              encodeOffsets: [[-7897, 4470]],
            },
          },
          {
            type: "Feature",
            id: "LBY",
            properties: { name: "Libya" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ק̷ҿҤ೧βρՄڑϸϻƷ̗ҶήӹؔͬΘñՈńҠÓϦƨۈ¯϶˕ݐШȜðΠėΒ־͔ʶːЦʌ´٦দ́ΜðۮƓ૞ϓЀݛݮǍஆΙࣆйЦɔЖϮț٠˂Ф؄ЀׂŘ଒ǣ˺ϑ̺Iˌƛ࠴ıȲˣ̣ЕżΫɏԯʦڱ@Ჳ@ᶵ@့ॱGYΙ‧ྐ‧ྒࡓҟ",
              ],
              encodeOffsets: [[15208, 23412]],
            },
          },
          {
            type: "Feature",
            id: "LKA",
            properties: { name: "Sri Lanka" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ų࢓ΙʇܵȓЍڜƫீϠ഼׆ұϺסО࢓"],
              encodeOffsets: [[83751, 7704]],
            },
          },
          {
            type: "Feature",
            id: "LSO",
            properties: { name: "Lesotho" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@̆ʩʳУƛ˛ҳſƹˍ̛ċؿ٨҄ՐҖ͢ϼǠξʵ"],
              encodeOffsets: [[29674, -29650]],
            },
          },
          {
            type: "Feature",
            id: "LTU",
            properties: { name: "Lithuania" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ãɊĚɲχƄࢡƨǱ۸२ʴඬÁࠜĊŞǩ҂Ã߲СĀϓۏˏșӃ࣯̓߻NȫʶљĜ"],
              encodeOffsets: [[23277, 55632]],
            },
          },
          {
            type: "Feature",
            id: "LUX",
            properties: { name: "Luxembourg" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ǘȏ³ρʍiȉòĞҼɖ"],
              encodeOffsets: [[6189, 51332]],
            },
          },
          {
            type: "Feature",
            id: "LVA",
            properties: { name: "Latvia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@نЮՆߊ˼ڜعڪhǊ٤ܐƪςĻܢ̷ۚCКȕîС˒ӷ͕ࣗԛƙ߱ТҁÄŝǪࠛĉණÂ१ʳ"],
              encodeOffsets: [[21562, 57376]],
            },
          },
          {
            type: "Feature",
            id: "MAR",
            properties: { name: "Morocco" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ԒΥߜÎࢊȃκU͂՟ºԝ̄ࢱɜǱƷ͛ષƙϝ̵ӡñثঙ͍ͩсۍɥ࠻ŷഫاRহŷ@@@p҉Ա˓ȑϡ@̥Ŋ۹ě˛ٻʿÕЁ੕ୟ࣡ˣୋ΅ϗĵ̡ቅãaD ϶͒ɮ˞ѪÃ˶̀פҴՖ˲ƊɞӬp҂̤Բ̪֔Ւ࡬f\\ц͔ްĢڎָтɠۮۮȿਸ਼͊ܢŔѶդ֨ࡈϦخΐ֘࢈˄ԪؤI",
              ],
              encodeOffsets: [[-5318, 36614]],
            },
          },
          {
            type: "Feature",
            id: "MDA",
            properties: { name: "Moldova" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ȨŮ֒ĊؤʽΊϞɥÑ˵̪ƏŨΗ̊ɇÏűƾčɝ×ӷ|ĉŜǫãÒƭɱˍƥ˽ɁĝƯϦĘΪςӝԂˉΠʹʠʯĈ",
              ],
              encodeOffsets: [[27259, 49379]],
            },
          },
          {
            type: "Feature",
            id: "MDG",
            properties: { name: "Madagascar" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɠΥȺ։Ɗঢ়ɒϽĉЗƩʙ˷ӰǁʝǈثõΥɵȗ¿܅ͧওб୅ԯཧ͑ୟϛইہȣܻΡӛɊڙ̜ɳѺÇݘ̑ڠù؂Ʈ؄ϰƢD˪Дِø՚șЈǃՌãޠ̊ҺŔՒмҶǤ̶Ʋτ\\ӐӎۖԮʦцŗάΦĵҪ׎fԐ˦ϔ̊ί",
              ],
              encodeOffsets: [[50733, -12769]],
            },
          },
          {
            type: "Feature",
            id: "MEX",
            properties: { name: "Mexico" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@͙݅ƥ؁Õ૷ąЧƤқʺЧǚٳ֎سȞӏ͢бࢾɝΐΙ݄ɾٚĎؼưՊƠՖ΂ȨӬè۸Ƣʖ֬ɚࢶȚݔԚîȬǱЙҋԁȥԝƸƥűγɁٽɅɎǭcǃY̝ԓƳĲķPŭޥV޷AAӁϛC̺˫̶șĢǹƌ½s˷ઃEЙۅŢƽĭȟqʕ्ࣞџ˘ۇɖҷÓګ́чĉץɜؿǄ޹ϬؿŠ्ϸ۱ВɃɤҹº࡯ˈΓϦࣗӊсՌȧЦ˪ĈđʈȖɔJ̄˱Ϙùͮ˭ъ݋࠴ࡋڀУԼܝ΄ƷȴŸԲѓȞӹФȽהҍæӣѸϿФˀҍو̓٠^͔؇ͬ˫ӑɴƇͿƔЕĆف̀΋خׁƒȡŸÓŎ˽Ƭ\\ǜթʮɇǴ̕Նё˨ޯʠρɸϿ²ѷКͶϡ̨ϑqƭΝ̱ƫJɛԞջӎ؃РїɈؚŵҖЏʺֿϒŏŇɃɖԭȰӷӦÖÚΊ³̸̼Ϝ٩׶ӱɶ̱Հ̷վϳڦͿݲॖÞ੪ĞÿǑ౔СኀףဪPژ@DΌผ@̪̕јˇԀσ˨ѭȾҥѢʩۤʥՊڒۊhפͱфֹ̄ӯӸӏȂחɾЃپʹ׮ȁ͞|",
              ],
              encodeOffsets: [[-99471, 26491]],
            },
          },
          {
            type: "Feature",
            id: "MKD",
            properties: { name: "Macedonia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ńOǤӺżȊ˺¶ϴbтˏÒ։ǅƑƥҕh͋ǿջõΑȴšήń˸"],
              encodeOffsets: [[21085, 42860]],
            },
          },
          {
            type: "Feature",
            id: "MLI",
            properties: { name: "Mali" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@˰ƶƘӶˊpזɻӄǖ͖ÇŴȈ⁚^ȈךƣļЛ⋈Л⋆౾dᬼᆳᬼᆳȨϿԺʉ϶ƋV՗ठĈFካҟ֗íԭݛƃ଩ï̳̗ա՟Iȿǈҥš޻ΑǅʿٳϕŗɍΙǡНŔɱȳūֻڙۡp˳ɭΣÆӥ΋ůȝŁŽάʍĥơhƷʕ٭PɷŴŉùʱʎ¬ʢĿİǳĉ˚Ǥɐ΅ΚĳɴȇȂǙvȫş˕őɱǹΫäɷɈƓɕőƅAµ̮ʾí̽͘ʀǓӔԺ",
              ],
              encodeOffsets: [[-12462, 14968]],
            },
          },
          {
            type: "Feature",
            id: "MMR",
            properties: { name: "Myanmar" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ӫηץϥࣥΟƳО݅ՔؗΈօ̭ܵ̃ƹȪу֖ڙĪҷ_ϵ͠ދң޵Сࡷăذʴ٠˯ӼæࣸͽѤ˛৔Ʊਗ਼εۢօуॕ׳ҽöԳȠ̂ਪǫ޾څॺļ̢ӭņ׭ۆÅڰ̊ŵj׾дȦęΤȐ˺࢈ڂȑϐۘ¨ЦҪ۶}Ӕજ׆׸ƱçԬ̎ƸÛ͈ӮÚˮӵξȧ|ٟۙߓۭĳঽࢲƔȨޛՐǍʓۣز́ζƷ؞ʔ~΍܏յǳ̱ӓȗ",
              ],
              encodeOffsets: [[101933, 20672]],
            },
          },
          {
            type: "Feature",
            id: "MNE",
            properties: { name: "Montenegro" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ÁǀηЯÊˋǫÞɽ˞εǖĢƜŬҦ˚ȜƾüɠƟŬśˠě͌ǧçïƽȋɧó"],
              encodeOffsets: [[20277, 43521]],
            },
          },
          {
            type: "Feature",
            id: "MNG",
            properties: { name: "Mongolia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ࢮƢ྄ܤ౬Єܴʳ࢚]֘Ͻ࠼ௐɁࠈגͿӶࢊࢊश΍ނįনɍǈؿஜΛߐƺਫ਼ŌࡆōࠖЗԚѕެT੒Ƌޜȼૈƒ௸פԌĝѰ˭ৌêХهק࠽ɐ΅ӈńࠤŽ٦̴ڬˏހוğ̗ڏĦ௟ŏןʅ؝։౱͙࠷ѽࡹǞҿúѳէˎ͓ƌˣי˯׽҇গ̑ఽഫ̇এҋϋʾ৭AఓԜࠥŰૣśჃȊऑmӱԀϣޠԱĢ৩ԼଅŞুƞ̡θ͖চׅڲன̀۷Ѿəז",
              ],
              encodeOffsets: [[89858, 50481]],
            },
          },
          {
            type: "Feature",
            id: "MOZ",
            properties: { name: "Mozambique" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@لæ৞ʁɖńגt̚ʦԌaऀ͜ڞӤƊϕ࠷ľ݅ಿƨЫʣ׷͙׍՗Եޏ͉ृСॉ͓ࣕƵוׯ΋ȗí׳ЌُǔӱZʣƪ¦{ࠗƋϷȤƝűΓΗ̗ۗ˳য়ҕρ̳ðΟɊÉíѵّRïϊůϖí̠ƬपɓװГஂࢬ॔ɜ؆ŶúĨӶƉʞغǐ׌E੠ѥ˒ЏÔǹȼϳǰ۫gÅ̼āװᢈۘӚЕɴüͨɅ¸͵ǯϷØסոԱʲ׌ζǰíઊΙ؈̣˖̅]ɽદɾٔ",
              ],
              encodeOffsets: [[35390, -11796]],
            },
          },
          {
            type: "Feature",
            id: "MRT",
            properties: { name: "Mauritania" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@և־ԗؤ֍ɞГʚҵUЧǽйð˽ˏïҐɺаŀߊģࠨĵкČмɑЎѵδǾˬᾔMǃ௎ȴќ߀øᒸ᪂©F౞Ṗ᎟౽cМ⋅М⋇ƤĻȇי⁙]ųȇ͕ÈӃǕוɼˉoƗӵ˯Ƶ",
              ],
              encodeOffsets: [[-12462, 14968]],
            },
          },
          {
            type: "Feature",
            id: "MWI",
            properties: { name: "Malawi" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɽٓɾથ̆^̤˕Κ؇îઉεǯʱ׋շԲ×עǰϸ·ͶͧɆɳûәЖѵɔʮޮ˄̈Ǉۢǚڼƞɪɉ܌Ѕϐ࠘ƽǜɵ˶Ϲɾଡ",
              ],
              encodeOffsets: [[35390, -11796]],
            },
          },
          {
            type: "Feature",
            id: "MYS",
            properties: { name: "Malaysia" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@àћֈĶ˞ΈȘýӸԓΜ֛¶֣ęϡĆ˿Öӻ̒ɵͤݑe˳׫Éߑخ঵ښįђӟ֚ś̡۠ҜĠؔȃΤƤƮۈρ"],
                [
                  "@@أ˹ܯƚॱ@̅ॗ͓̇љୟۅǵߑɾЕóөщ՛Òէǟַӆƕ֘؜˽ٮǀǜ܆άǂ৖Ǻ׾ڔЬՐϦѥǮ˺В¸՜а٪אшڀͼHќыιֆɻ۬ʧÑ֝͡¥ƮЧ",
                ],
              ],
              encodeOffsets: [[[103502, 6354]], [[121466, 4586]]],
            },
          },
          {
            type: "Feature",
            id: "NAM",
            properties: { name: "Namibia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@رٌؖ͡ȃࠊȷ،˯ಒm৒ŅҞ͛Όѡۜѳ৘ǽՆۃࠐ»٢КǆԊƞհ}ԄϝŶÐ₮׌Е᎞ş໴΂یȒհµͨȍPéӁȍʭC՛͍ͣΎಕ̍س{ᲽࠣBយA᷋ݣѕҋÕՇǄϗÔƗάͩɰГг",
              ],
              encodeOffsets: [[16738, -29262]],
            },
          },
          {
            type: "Feature",
            id: "NCL",
            properties: { name: "New Caledonia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ېԵѨϭ͉ȫҥɪ׹ϚէѼ։פś˶β[Һ˹φ˷ˎɻ"],
              encodeOffsets: [[169759, -21585]],
            },
          },
          {
            type: "Feature",
            id: "NER",
            properties: { name: "Niger" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nּॹȐОҿպœϤâТբ̴̘ପðݜƄîԮҠ֘Eኬஈϒᝪ࿸᮪ཾ೨αӀңר̸ȸಯ̾ɓ`ˋΔ˽ǻί͕ၻ«ધੳߋγૉΔ̵CեբmčЃʁµˋƻm֩ंȟځҷٱʔҍ¸ʏşӯ~ӷΧѓq৯ѢЉȵѓb̿͆ࡅ̼ࣗıɕǻşӗʋ͹ÍݣٗӚ̟E˭ʗ",
              ],
              encodeOffsets: [[2207, 12227]],
            },
          },
          {
            type: "Feature",
            id: "NGA",
            properties: { name: "Nigeria" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ࢍ̡͉¬͓ȉڥl҇Ղˡ؊שֆكYݍB¶തs՘ǂՊʶʴТԴėɨǔ͸ȍӾ˪ÎݤʌͺŠӘɖǼࣘĲࡆ̻̀ͅєaЊȶৰѡєrӸΨӰ}ʐŠҎ·ٲʓڂҸȠ֪ँƼnͬͯğƱ«˧۽ٱɛՙšѧǱȉǝי҅ΉŽыȋ͹ÿΓֽ˱ҽΊ͇aԃӭʑQЍ߷ɍש",
              ],
              encodeOffsets: [[8705, 4887]],
            },
          },
          {
            type: "Feature",
            id: "NIC",
            properties: { name: "Nicaragua" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@̃ˆϽͺȁ˲Ο˄сϜĤžƒŵÚÒʾŀȔŬRkЮȠrǬOǺɤʜǝĒľƺĲ̊ɴbǦĄQňȪĖ|ƜŹǚȆńɄB̈ŌŜŖ˾iïă§ȉĐ̫ȗ˹ěͷυ®ɏtϙŹĉýΫÌɛǣɋ ɩźƏȩǱʛÈƓǦˉêȕŉօɞųŇ",
              ],
              encodeOffsets: [[-87769, 11355]],
            },
          },
          {
            type: "Feature",
            id: "NLD",
            properties: { name: "Netherlands" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ۦyǀ˳Ƚޓɇ́ԍ@ƘࢡҥȞՏπީǩ؛âѠɲ݀ఆଲΘ"],
              encodeOffsets: [[6220, 54795]],
            },
          },
          {
            type: "Feature",
            id: "NOR",
            properties: { name: "Norway" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@᥆ؙઍɣऄՅෛ͵ڵû΢לઃͰಫ˵Ы؝ߟωࣗȮ઱¥णѼԉɝԷūփནƊɝҵ߭Hևױ࠿झಫ஁̨˹̇ͫ࠯bձ޿¾૟՞э˥ধֻۧυӛ֝Ԫဋঁ૫ȟ୏є̛ࣚˇ኶ޞզᕠ۶ဌࢂ໤୦፺ྴඦلᘼ੊ᇎπ൪­౮ۢ໖ພǘ",
                ],
                ["@@ም΅๝Ȝ׆ɐԕˎეǚͮ̿ொȍ"],
                ["@@᪖صᑟͥұأ݅ǁЍۡৣᅵԢނ̘ఽʐ࿕܂ٷڄᘎ̜Ң̋஦\\͊˼௾੖̋"],
                ["@@࿮̏ఝҍ᝱ı៙ƖƫɴஹdँϬᣴɼ௞ȫࡘʤᑺȽ"],
              ],
              encodeOffsets: [
                [[28842, 72894]],
                [[25318, 79723]],
                [[18690, 81615]],
                [[26059, 82338]],
              ],
            },
          },
          {
            type: "Feature",
            id: "NPL",
            properties: { name: "Nepal" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ÝαŌՕĩͩ۩aয়Ȟ٭ĂӛђଷŊયҼ߉Ю߿͆͜޼ՒϠΒȪڪʳࡔշҾť˰ЕٶǓۀσौȕঔć"],
              encodeOffsets: [[90236, 28546]],
            },
          },
          {
            type: "Feature",
            id: "NZL",
            properties: { name: "New Zealand" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@Ȓ΋װ;ʐΡBΝ̹ϳչإїͷ̴З٭Yܗ̓ɣջӋࡗڇϓнʇޝlխˢࣱÐƗ̰Ҍذ੐ࠦժǀ׾͌ܜѰԎѦώظ͈ɆŰҶלϴȆΧ"],
                [
                  "@@،ࢫlָϜɯŲًڰ˛֨ãӒ͎юĭȯݗʯӫٛjɡʭþαūƻͅҏзֹ٭ͯƟɘΕŨӞ۔˟ҨࣛͲz̦؈̌ƚ٨լͻ֜vƪБΎڋݔΗת̸àҚұٺɑʂݡ",
                ],
              ],
              encodeOffsets: [[[177173, -41901]], [[178803, -37024]]],
            },
          },
          {
            type: "Feature",
            id: "OMN",
            properties: { name: "Oman" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@ֹ̻ϟªǩȧƉэļ֗ÿĻϯFԽ̻ćХȓǯԹP͡ɃJͻПɷҩĂ֗˳ϱ³˝טٿ൴ᠾ࠾֖၂ϩתv͸ʔΐFΆϞǒƩŞèմіHϖֵҸ̧؞ŋӼƳϜӕɨ˧̞ŃCȉ̩ԃƅɽΟˏ",
                ],
                ["@@ŉƳǅ˺ʔ˺ľñā΍"],
              ],
              encodeOffsets: [[[60274, 21621]], [[57745, 26518]]],
            },
          },
          {
            type: "Feature",
            id: "PAK",
            properties: { name: "Pakistan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@تϻʞ٥൨ͻ߹۷ऩůౣȲЫα̖݁̈֩ڴгܑӟ`׳ࠃࡇՃ࡝࢝ࢡউÚऑࢡռϗĪ٧ҾэǘܝᇛD֓֕؛Ɇʣ؀٭٘໻ǁിeஃŝ̈́ঊொѢéϰГƌw݊ߥφͷԔеѶඨѕࡀŲԈŅǞȂגóદΔ܎ҶӈشCĠɼٞŌ̴ý͢ʀ±ԌΦԖ՘Ɇͥ֊ߜɴ̢͒мΜĩмȣΤӬμࣘǮ८ĮѐƺӨĦ",
              ],
              encodeOffsets: [[76962, 38025]],
            },
          },
          {
            type: "Feature",
            id: "PAN",
            properties: { name: "Panama" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@˫ʎǵҒȺɢɅÎƿˤлɸοÁǝ̇ͻɁǽĉǩВҗɯŅŧŭϷ©ơԈŋƛˡ¸ǝ͸·ÈɓİέCǻĩŶªǖìǠƲŲĲǩŲK͸͘ö̠̝iǱͲĀæɴȵЮÔΨɄԜǞ˺ʤҬ·ĉҶώơ˜ʧ̈́ɵĹūȜӵǁʟ˓ÒŅС",
              ],
              encodeOffsets: [[-79750, 7398]],
            },
          },
          {
            type: "Feature",
            id: "PER",
            properties: { name: "Peru" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɥљћɋࡅӘñΈရࡊທࣾ٫԰ΏۜƐʎ܅ાࠣ༄ߍီ΅Ϥ˃ؤٷպױͼ˖ϒПߢʼךڢՎĲΓʇȧx̭ΎâͼĝΚщӆΌǄ֤ԦܶৠͨࣸࢠʾմŝٔɢĂ֒ЉˎЅϴɏӶࢣضĿҨɞ̤ƣԎð٠Ͻթࡣʤoрҁݳ œųۍǉ॥ֱÓϻɉ̇ČғԕʍBΡɛƵΔݳҲԝǱί֐µ͆҃ݐuېӸÇ౧ϢĩӄƠܪടǷ˵£ןg܍͟пƮ̵ȕ˯β۹Ջ࣡",
              ],
              encodeOffsets: [[-71260, -18001]],
            },
          },
          {
            type: "Feature",
            id: "PHL",
            properties: { name: "Philippines" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@Đ֏ºҽ˹ޑ̫ࡨϽэˎإʉϿ঩Ӧɿ؊ʰЎՑЈˁΑЃثҵƑʖ͢۾ՌʀҜ̈́̔ϝٔɰƎϒרv·ٰڼЋêхÐ̱"],
                ["@@̟ˡˁՍ˃ʝԫ׈ǦɤɂɾĢԸҨ¸Ɖ֣جߺāߡ"],
                ["@@ૣߕЬט؈԰Ԏ׊Ѱ࠲Ʈۅևҧѳֿ"],
                ["@@Ԏʹ՘BgΗϳΣՕʧϸÒєŽА"],
                ["@@ʀभ٫ɞj˭ȶԯЍȋעʧªƁԘӶãY͈ԣٜ߮mɴ̻"],
                ["@@ɟܩέоѓ٘ܚ̡̈"],
                [
                  "@@ԮʉʶɖüɇƍΑ˼׻ɛۥӷ˥ƁڳȊڝѾġϊĲਾүăҙ˜ȫēϯٻЮ̵Ѵɍ̯՗ԊރůлȆ¨ΎˀɊʣȘŇ̡бӚűμߨͺˡĔೄ˜ހԘA",
                ],
              ],
              encodeOffsets: [
                [[129410, 8617]],
                [[126959, 10526]],
                [[121349, 9540]],
                [[124809, 12178]],
                [[128515, 12455]],
                [[124445, 13384]],
                [[124234, 18949]],
              ],
            },
          },
          {
            type: "Feature",
            id: "PNG",
            properties: { name: "Papua New Guinea" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ɽčε͔ρՔǷ٘ŜĆĜʡʬȏРՑЈ˵ŝɽ"],
                ["@@ѯçƃɽҟȱћȟѽBۏʔӑɺêʺݬũҠàŶЖŦrĆѽӐÜʂ˼Ҹ̚ġӸԌfǜƏgү˯ԡ"],
                [
                  "@@ݤտղࢻӖω٬ƛʥǁࣀΝġʏ֋ÏȷɔܟĦࡕŴٷ՚ӉҦѧ݀ભπ܇ʇԡˣńإڇ˿һƖࢅaᩒaᩒภ׃༊ӓׄїҴхŸӵඔԱȲѽޛěȄ֕",
                ],
                ["@@ʿɡǁӸȝ͘ϝ˞ӍΪ؇ʚɺȮҒɻ˸ȁΜȫʹΛ͊ˏĶѧ"],
              ],
              encodeOffsets: [
                [[159622, -6983]],
                [[155631, -5609]],
                [[150725, -7565]],
                [[156816, -4607]],
              ],
            },
          },
          {
            type: "Feature",
            id: "POL",
            properties: { name: "Poland" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@·՜à̂ȹ̧҆̚ɺɤȝђָʘ಼ϴ੒˴࠼ƙÚȱ߸Yਚħ໶^њěȬʵωɸ͋KͯԋǡʸϳfϏцܻěɽзįރۥɒϗǿ¶ߙ͔؁šЇĒӹǵч̖Ήŕ³¼ϭаر¼ăˀֻĦűɑҗǨÀɴػòЉ˔",
              ],
              encodeOffsets: [[15378, 52334]],
            },
          },
          {
            type: "Feature",
            id: "PRI",
            properties: { name: "Puerto Rico" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@јõưǕɋɃمLӫ·άŢŬیK"],
              encodeOffsets: [[-67873, 18960]],
            },
          },
          {
            type: "Feature",
            id: "PRK",
            properties: { name: "North Korea" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Şƥ͉ºη˵ʣ˷׽ѣȅƫƧ̓ʝ֓ƏηɥηįġͰƋӈσŧȭΧÇץ¡͝ϛϑÁùСǆĵƿʙéǀɑüɥƆɰφȤİõƶɆҒÅƎөĠЇɤۄբऒҌ־׮ЎˁܪſѺಚβͰҼժӹ",
              ],
              encodeOffsets: [[133776, 43413]],
            },
          },
          {
            type: "Feature",
            id: "PRT",
            properties: { name: "Portugal" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@̦Ɉ΄ŬɂЫӺDƞłӪɼуϱɩYٽƍūЇγçʹԋɵտ̄ʡřɫ̵̿ê˥ͷɓѷŠџġŸڂÿԬϓþȩ͈äռͰ̨ÒͼǪԎkΤǙ̠˲",
              ],
              encodeOffsets: [[-9251, 42886]],
            },
          },
          {
            type: "Feature",
            id: "PRY",
            properties: { name: "Paraguay" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ͦ৖tҌЖ݌าʔޮ]޴їbʵʞҳÇଛࢲǇ΄ǐ֦ɩǀʣþޓİ͓̼̀ƌ̢ƳAҥŕӻǑӛƍݏށ١ړƇऻŸࡑɮࠢ౨ťψࡽ͢ਅبۉŸ໵ൌ",
              ],
              encodeOffsets: [[-64189, -22783]],
            },
          },
          {
            type: "Feature",
            id: "QAT",
            properties: { name: "Qatar" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ÇؔɨѲɰĜʬˁdӯǽӳɵÑʫǖ"],
              encodeOffsets: [[52030, 25349]],
            },
          },
          {
            type: "Feature",
            id: "ROU",
            properties: { name: "Romania" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@δǶԴġՠGϸȳ˺źبĄɄȠΠ@ʰćʺʟˊΟӞԁρėΩưϥϒƹЂƊϠƟpɏПǹʯĀɻ৥ӳĖ̪ؑফțзɋ௽¬٥ƀ͙ÕʍΊƵƦȚƘȷŀ˃ȋөʔßΌԟȢĥˌҕͤڪǂԖ֮Њ֬ԢǮ",
              ],
              encodeOffsets: [[23256, 49032]],
            },
          },
          {
            type: "Feature",
            id: "RUS",
            properties: { name: "Russia" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ࡌ๫కˤԫ்ࠌࡳyוُԒսٱƻ۸Ĥࠊħ࣢Țٌ૴ӯࠜôରަϮͭϴϐŠɔ։̆ߵuࠟΎࡑ"],
                ["@@໵]ਙĨȒτ୊˚ࢢƧψƃęɱäɉ"],
                ["@@֦Ƚțؐᗸű࿨޻࠭λ൛ēsࠑͳǩ޽~ٗ̊ૣʖȉθ࡟Ǝॗŉҗ̎Ǽ̸৓ȥϚЃӉΣ@„Ꮪٛᔺ࠳ïԷ"],
                ["@@ः©ƭˌੲΖ@ַ"],
                ["@@ળ»@ָň܈E௒ʉïŗࡽȩ"],
                ["@@ౡMႣĤƧ¬ߘͪੀþஞ͏ĸə"],
                ["@@ॿͩഉø༛ͨȪ˖༨ųᑔɗ"],
                ["@@ډرᶽzඃȣမղҎ׀૎ǂᕞᴬѽ"],
                ["@@ӹóᩣŊɟώູɦūҒ࡮ǶҞသܒޙĺ፨݆ɩϢሤѺ᪪բ᫠ǀ෴̸࿐Ŋאͩ֟ʻᲗз᢭Џᤙߝఫࠍ೉߱Ǡۥྎۏ"],
                [
                  "@@ɨгސȲឤYቈЧڬ̿ȽѧङʝᕅүفʟਬşఖɃݴǄєաτɔഊƂ᧪ƑȴϽ↲ů´ٜᄼƥഄLബѷϮ՝ӹΙੌڋ೔Ϳ߸ࢦഖϙ෢ɦྼʵؤʀൖş؅ޮૐζ䢀ձܐӿᔲٛ₎ǄာƑ۪΍Ĺؙਜʇ૴Ǥ๰vཚǑཪĢะݛਪˎڷ՞ϐώᧆɻფºᝂБ୲ν@”MKઇσઝÖݶҁԄەϲɧĮΏɑɝ༧Ǿ᚝مݛĭ౽ן௛ԧ̱ϣய׊ᔗڇϣ̸ߵΫ૱Ř˓ց৙߽ͻड़ȋő௣ޭΫ۱Δα฽ѕ̅ॡభȳʥ࡟ே޳ׂ̳έ௬ҵለИ୘܀ԆªϾರȊຊ੒คࡺຢڢڮஆ৷ëԍۗᒉइۍਖᓧ˷ᑃටۚԧሙɕಝēÔ؊ಯŶ਩ЭᢵƠ᪏ʟᨩ࿛ủጝ೚ŁаՃࠄȅ՞оईÃௌऍ܍ځ࠽ë্ϛഉ్௓˯ׇଙ঑ଇॻթӹ૩ӱՉYՇФૻؙſ˩ŝƦKѐіxŦ঴ɛܚܞ̒৶Ʃ֢ࠈ˾ऄ͚̮Ѵݲ൷ʛܯͧ౧Dͻ߄হװหˎ̵ࠖ̉Ԫ̿βԯࡐ̲݇షʢ૛uਯƱۛлҤȥXҩұˑݷࢻRσஅՍ৙̈́োéѯˮԋĞ௷ףેƑޛȻੑƌޫSԙіࠕИࡅŎ੝ŋߏƹ஛ΜǇـধɎށİवΎࢉࢉ΀ӵࠇב௏ɂ࠻֗Ͼ࢙^ܳʴ౫Ѓྃܣࢭơ͡çѽԤઍőΧΦחǌЙӠҩưிɍୃӜ҃ѯሟᒒੵٮ̮˂ᑋߍ߭³êҞઅ˺࢙ȱ˃ࢊມǺݯΑᑅ̳Чȹḭ̇ϫ˻؆ֹ߭ɓǀɭ߭ХസֿɁЉ୻ʓʟ੹Ѧ೯iࢻΟহͼᇡ׊ಽsჃࣳĿؗࡹӤڡउʖǡӝُ܊֫ذx՚֗ďѝѐƋϥӽ߿Ƒ࠳ࢁކߕĉ֣ࣼফԇ͹ƝɇωÌֿԚɿՅȚʳΈ޵ǮԙƁƥƼଥЖఅƌ܃ƞĹıੱ܂य़̈́ܩӴؒƈۤ۰ҹͪఌ΄uȀݯƉώѠɼ߼ÖƄ˪ȅҪ΀ѰWʚఉ˚ӭUԯЀ١ƃ੩̐lǒ̗θڟ¤éʼɀǞ՝ӈࢋąʭ¦Ƀȑ̽ȷ՞ȟ˨ǊĀڴ͞Ȁʍɢ֥ƪ¼Ʋ΁ƴՃվǸɨĉЂࠑȨѱĳšȼࢭɂˑӸíТЙȖάˊʝ޶װӞųƤक़ҬࢡЎᅢ੶ޮӠ͂єగּΆնݳش֢ܜ঍ग़ޢي౿֔ŬךڶüොͶࢀ̈൦ԕᘨȧṺो٤ЋÆ֓टѳ൏ɡ⏷ٔ؟Ńൌ؛ÂϵÆ࡫ઌʯڂɓňРԑΰ՘͈᎖Թ۾Ȳ֣؜ዦࠖޢµ޸̋Ӫ׀۫ԄЪԊءԶᚠˑӔҹ੡ĻNҳڌ˽ಜǼȶ՚ჶАᰪܞي£ࠣԙਬĕ׼˼༾xఢΐफ़ԏॖ֌ࢡӢѪˤ២ʫ୒ʿᴾॣ֚ѰࡡѺ{ǴৣĈˢЌ҅ټ}ː༄ݾրކزǒᕮɛǬұߕڽԺˋ˒חȏଵऒԧέ֕࿫஝०ŭ̢ͮऎɎɞжܮЎөӌϼֈࣿêȫҲڢࡈણۆຒ֦șװмnѴүͧ߷࣐Ƶϥ؄ඤͦლ¬༈ӏݛ۪ċࣆศǞ፾ᆘŌہѮংւॲx࿎иᕠŐ˪ɲᕂþیȋሴҀ໲aɶδߤΨጤΈ෸˗ଥȷበŹ",
                ],
                ["@@ⵙ͕ໞીےĦقÃᒈӋʟͿ"],
                ["@@૽ōݱÛśƏঙƑ࣫ȦӐʾል~࿞ƶ౨XǢɧӘȬߊƐఞǿ͗ŷ"],
                ["@@ᆳĿᚉʎඅ͎٣׾଩ǔᔆָᆎȎ࿌чኬ߻ȹݯ"],
              ],
              encodeOffsets: [
                [[147096, 51966]],
                [[23277, 55632]],
                [[-179214, 68183]],
                [[184320, 72533]],
                [[-182982, 72595]],
                [[147051, 74970]],
                [[154350, 76887]],
                [[148569, 77377]],
                [[58917, 72418]],
                [[109538, 78822]],
                [[107598, 80187]],
                [[52364, 82481]],
                [[102339, 80775]],
              ],
            },
          },
          {
            type: "Feature",
            id: "RWA",
            properties: { name: "Rwanda" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ͬӃµӵʏŁѿÆʱӍԛàþҠŘÞԄʎɺȰďԈʸ"],
              encodeOffsets: [[31150, -1161]],
            },
          },
          {
            type: "Feature",
            id: "ESH",
            properties: { name: "Western Sahara" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@oҊŸ@@ÉeǋEౝ᪁ªᒷ޿÷ȳћǄ்ᾓNǽ˫΢bCቆäĶ̢ΆϘˤୌୠ࣢Ђ੖ˀÖ˜ټۺĜ̦ŉϢ@˔ȒԲ",
              ],
              encodeOffsets: [[-9005, 27772]],
            },
          },
          {
            type: "Feature",
            id: "SAU",
            properties: { name: "Saudi Arabia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ŉΪʩʨÝͲѡ̞҃۴ʁۆׇ׀ϑƐ֋ߠīאӾӕञϿ͠ґǨˡӖ°ȎɹѦʕȊ͝زԟڴѓ־лIžҦ̌ļͲनƅζʶȪ̢ٚŚƒˮˤƜ࠷ࡀ၆фǆŴৢɩబיᛎၕ༠ãݠąȾЏתv͠ܥаȓƠִ̏Λ¼΍ċ˩ł˯ʎɽŐ˟ŲȵʬǕɶÒǆ͍ș࡙͐ᡌщǞǲϪש֕၁ᠽ࠽ᝑ͑޷ϙ׻ࢥϹƕɁˬ͏§߻ĎƷČॹmɫùΉɔɝЭĒΟρˋ",
              ],
              encodeOffsets: [[43807, 16741]],
            },
          },
          {
            type: "Feature",
            id: "SDN",
            properties: { name: "Sudan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@śhdмĵ̀џͨĵ؄ĶبϳÌÍȇԍ©Ȭʕðԍңңл؅џđ۹Ӫͅǥđʓџǃǥ࠵@řǦ؃̡ƝɳîѝӬƟɲ؃ŗɱϵɏݣ˿ǁʳğå ̅ʎÃʼƌΔE΄ӛՀĩάZȰ̱ʜUӦǭ͖̍µĎ̰ɒΖħΐˢʴǫȞɞ԰ϨئܦÏ¥ ZΚॲH@း⁪@Ὂ@ῼ@˔ࠗȁƳŪࡻ্̰͌ȷҠ̳ыӑأƏ˅ʳĉ֑α௿ĚͳƅܟͿࠟԓзέٛč΃Љɽʝ࢟Dĳ",
              ],
              encodeOffsets: [[34779, 9692]],
            },
          },
          {
            type: "Feature",
            id: "SDS",
            properties: { name: "South Sudan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Xٽűʯѿq˷ӏԨÑюХƨͳϦșӼࣳ֫օԫԇԫϭסFگȟՕȊ΋ɭ݉֐ȥάҵǱϱÆɣƕϗĸԗۚƉˊعͪɅԌΕζ֟ѬS˘ҡͼ֯͠ʴĠ̀ǂɐݤɲ϶؄ŘƠɱўӫɴí̢ƞ؄Śǥ࠶@ǦѠǄĒʔ͆ǦۺөѠĒм؆ҤҤïԎȫʖԎªÎȈϴËĵاĶ؃ѠͧĶ˿cлŜg",
              ],
              encodeOffsets: [[34779, 9692]],
            },
          },
          {
            type: "Feature",
            id: "SEN",
            properties: { name: "Senegal" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@΍ٺн̚φǄРמȦќ˾ːкïШǾҶVДʙ֎ɝԘأֈֽԹǔӓ̾ɿî͗ʽŧ³қâÙģȃk׿ȲЛV༇ɥħ˥ѻƋƏ٢ވkȬŞƮR̸ȘήǯκcζȌǝʐˡƙʻJͧȸˉ_ȍȥࣵy",
              ],
              encodeOffsets: [[-17114, 13922]],
            },
          },
          {
            type: "Feature",
            id: "SLB",
            properties: { name: "Solomon Islands" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ɾ˿חN͉ԬԈȯǜ"],
                ["@@͝mԧĎǫżÀͮֈƁ˜ǭƎə"],
                ["@@ųƹحܰǫԈ˺@̠ڥʹЗ"],
                ["@@ǛڅΦҟ̠̿˪ŰĐϮȫېϭȢˉ"],
                ["@@Ǘ³οȒ·Ί¨ƖԈΡͰ˛"],
              ],
              encodeOffsets: [
                [[166010, -10734]],
                [[164713, -10109]],
                [[165561, -9830]],
                [[163713, -8537]],
                [[161320, -7524]],
              ],
            },
          },
          {
            type: "Feature",
            id: "SLE",
            properties: { name: "Sierra Leone" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ɧØ؁ͺѩ҈Ƨ̬Ĺت҆τĬɺƞǸɶpȜǂڦCɺ̛ǼΛʓƈɗṶɴ´ϹϹϛҗ«ʓȩˏ"],
              encodeOffsets: [[-11713, 6949]],
            },
          },
          {
            type: "Feature",
            id: "SLV",
            properties: { name: "El Salvador" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ġȡӡ^̡Ą΍ǘұÀʃǶ~Ů˾ɄǀĢ«ĲȠ¾ʜëǸǙʪƇœτĴǤÑŘĝÏͳ"],
              encodeOffsets: [[-89900, 13706]],
            },
          },
          {
            type: "Feature",
            id: "-99",
            properties: { name: "Somaliland" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ϛԩד۫۹Mᩧা͍̜̳К̳ҨǾ̖̲҈˚ƹǒΏϜΗкGߊɌࣴĴ݌ʼиÆ̚ƶӎKaE΋Aࡑ@ѫ"],
              encodeOffsets: [[50113, 9679]],
            },
          },
          {
            type: "Feature",
            id: "SOM",
            properties: { name: "Somalia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ѼĎЊ˾͈FpɵýӧHѳǯ̣ʁࣥЙयԱ੷ܝ௷ܓवধ଩ࡁڹష࠯޳ٕँৱȗѷȍȣӽۚWᵤܾ॒ɰˆբfݠפબᛜᡄה۬ϜԪ@ѬBࡒFΌLbːhϰŰ",
              ],
              encodeOffsets: [[50923, 11857]],
            },
          },
          {
            type: "Feature",
            id: "SRB",
            properties: { name: "Republic of Serbia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ԡȡà΋Ӫʓ˄ȌȸĿșƗƶƥȷȏø̫Тγ͋ʿƗˋĞĳƑšϳa˹µØĴĴĦȴšKǍƼƑ ŋƆƽÀšŠƯ±ś˧ȩÑèð͋Ǩ˟ĜūŜɟƠȢŬЄЛ͔ɀτ̥Ë͔́ˉʈȱ͘٢ɚԾҖͣĦˋ",
              ],
              encodeOffsets: [[21376, 46507]],
            },
          },
          {
            type: "Feature",
            id: "SUR",
            properties: { name: "Suriname" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@৔ǙĞưڶÔࣚɥѩܟâֹͤӽƥίóϩɉΛӓǲЇđ͹öčʏƘǗ÷ǡҙèԡܴōӄˏBωؐƺѠ¯ȤԜɖƈݲ",
              ],
              encodeOffsets: [[-58518, 6117]],
            },
          },
          {
            type: "Feature",
            id: "SVK",
            properties: { name: "Slovakia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@´»ΊŖш̕ӺǶЈđ؂Ţߚ͓ɷɓǏ͹ǳđ࣑ʮ˟»ȟȡЁĿěÄХŽͭ}ãǙ۷Ļ̱ĠёɌċ̆äńŢȂόa˺Ĕxþǈ¢ÆȒȖžưʢD",
              ],
              encodeOffsets: [[19306, 50685]],
            },
          },
          {
            type: "Feature",
            id: "SVN",
            properties: { name: "Slovenia" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ۜÝъȐܾtǈƘƘUǎ˳ڝɟć͹̇đHɻͣh˷ƎƷƙבȈúȫΨĞа"],
              encodeOffsets: [[14138, 47626]],
            },
          },
          {
            type: "Feature",
            id: "SWE",
            properties: { name: "Sweden" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ࠁוƀԥ೹ڭྱܡؓஃײףߦүޗॅ࢑ȝ͍තӋ޿৳ĆӅڗঃˉߐ۳॔ٓஐφӜּۨ˦ন՝ю½ૠղ߀࠰ä̧ͬ˺ಬஂࡀञֈײ߮GɞҶཔƉŬքԸ૪Щ಼ֱv಑˴͛ฃʃ",
              ],
              encodeOffsets: [[22716, 67302]],
            },
          },
          {
            type: "Feature",
            id: "SWZ",
            properties: { name: "Swaziland" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ǡύӭěԅҖS̄ɰ̀ĂʔʐÒшƵŰϕðω"],
              encodeOffsets: [[32842, -27375]],
            },
          },
          {
            type: "Feature",
            id: "SYR",
            properties: { name: "Syria" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@࿩ࣅऩͬgNŖŶ_ΈȸҠҜ̈́Əͤϗ¨ÿٞȶΌɤȀɤȀ°Ҹ˞Ǐऎɺ҂ƿۖFॴ̀Ґaक़žїԽҡȹĂؗͅ৫ᇵ࢓",
              ],
              encodeOffsets: [[39724, 34180]],
            },
          },
          {
            type: "Feature",
            id: "TCD",
            properties: { name: "Chad" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĎЄաnDզΓ̶δ૊ੴߌ¬ન͖ၼǼΰΓ˾_ˌ̽ɔȷರࡔҠ…ྑ…ྏ¦ ܥÐϧإɝԯǬȝˡʳĨΏɑΕč̯̎¶Ǯ͕Vӥ̲ʛYȯՏƛэͽ؉ࣹ߅ϳ߹¾ʁûĊ̏ѫ̋Σ͟੓͏ȽȐƓhƹɍۛÙƀɪ˅ׄşΐλƜӷӪǼІϦċʂÐҸSқކ֐É֐ͭՠ",
              ],
              encodeOffsets: [[14844, 13169]],
            },
          },
          {
            type: "Feature",
            id: "TGO",
            properties: { name: "Togo" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ڱǳȇ̎ɡՔãкȆݴɁ̬ăڎD؎ΕѠÖˀ݂kŅѵʲʝ̈̋ЭǜǥኝȺׅ"],
              encodeOffsets: [[1911, 6290]],
            },
          },
          {
            type: "Feature",
            id: "THA",
            properties: { name: "Thailand" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ݭϬܗeŬڈ݉Káऋґ௯˙ݏÌ؋ն΀ދưܭҶӓԚĭѤѧ˝·ևĵßќۇςƣƭͧ͒ƝжҁӄПЌƏӳǃҲĠԾʚ߬ТࡸҤ޶͟ތ`϶ĩҸ֕ښȩф̄ƺ̮ܶ·ֆՓؘН݆ΠƴϦࣦצӬθӔȘθʷ´ԍ֨ȷࢭpݫࢰԆʤƧӰzǜَ̊ÍٖڽÀࠥںܷ܅˙ϛ޿Ŧગǅ՟ۧȤ১",
              ],
              encodeOffsets: [[105047, 12480]],
            },
          },
          {
            type: "Feature",
            id: "TJK",
            properties: { name: "Tajikistan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@̭ʷࣳƖāӛ࣬Þਢ˗འŶɈާˠĐԜȓ͛ŴӍࡿBׁØԻϕύĉ̉ǯͩˠþ۸ʩ¢ĞʲғȐα̇ė͹Żūԇj˕ϩ˯ǌ؋ˑʱĺӀࡘǹض؟ȨɔφۮЌҬˌբ૲ȜǩϵŤɹΎv",
              ],
              encodeOffsets: [[72719, 41211]],
            },
          },
          {
            type: "Feature",
            id: "TKM",
            properties: { name: "Turkmenistan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ñۼطॣݔڣĠगюׯþσƽ֙|ׯӓ݇ǋƻרŪ࢞ٽ˶Ɏֺ֏¸Ȇ۾ߊȵ݈ˎؓԎʉӔڱɋď؛ʿհψ˨ॖǪ֨ɻךڅњ¤ॆ\\Əцܖ̂۾ӦଆѹĜڡ͐ǣࣦˮƳаࡽ०ׇոЃ࢞Щ૤ΫwԥʩЅɤſ̙۽ǋǙڥӁʭڏŵǫϟهŏࡩ͈",
              ],
              encodeOffsets: [[62680, 36506]],
            },
          },
          {
            type: "Feature",
            id: "TLS",
            properties: { name: "East Timor" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ĲȤܢȌזˀŀ͆Ľ̯ɫ࢕ο۳ʋeʬďǔ"],
              encodeOffsets: [[127968, -9106]],
            },
          },
          {
            type: "Feature",
            id: "TTO",
            properties: { name: "Trinidad and Tobago" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ӚŊǮصۭġƯúʒɲiͪ"],
              encodeOffsets: [[-63160, 11019]],
            },
          },
          {
            type: "Feature",
            id: "TUN",
            properties: { name: "Tunisia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ΩພԭͺQȰۉԄóنԮҶȢۚƃߠǠќࣶͺךĵ}ы܊̲ÒǉпЫMϱ̆ȽōܫփхǄқѤaɄЍ͊ſ³٥Хʋʵˏֽ͓ĘΑïΟЧț",
              ],
              encodeOffsets: [[9710, 31035]],
            },
          },
          {
            type: "Feature",
            id: "TUR",
            properties: { name: "Turkey" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@஺͗ঐżܤõলѬࣆ¢ߴЭƜ̑ăУزȻͨʕֻʇˀ५ǏʻҠڧЕƙ̏Ɋ঍ňίŽॗŽҏbॳ̿ەEҁǀऍɹ˝ǐ¯ҷɣǿɣǿ̱Ϡ͈͂ԟí۱ȖֿәౣĥڹҊࣟȗΑׇĳ߻҄ࣻeӽ࠶ؗҰЦٸՓВठߨಒΜྀٔŏ৞հ঒ʄർlุף",
                ],
                ["@@۫ҏ˃Ϻ\\ǦȦĦʺՂХɞࡦ˄ܤőĴ͓ܼ˓Ƶȵি±Ωʷ"],
              ],
              encodeOffsets: [[[37800, 42328]], [[27845, 41668]]],
            },
          },
          {
            type: "Feature",
            id: "TZA",
            properties: { name: "United Republic of Tanzania" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƚġᵂႋÌӣ஼࠿ϱਙ¸Ӊՠ̩~ɓɳԓ¶ʭÇГ̌Ճΐ̰ࠡǿڝӣࣿ͛ԋb̙ʥבsɕŃঢ়ʂكåɽଢ˵ϺǛɶࠗƾӉʨՕƘͯƘΗɈґ੖ӣҺǗӤČѨƯޞΎ ̨̦͜ѬȺǮS˘ǷȐ·ͨʐł¶Ӷͫӄ̎Ķऄ[ႎà",
              ],
              encodeOffsets: [[34718, -972]],
            },
          },
          {
            type: "Feature",
            id: "UGA",
            properties: { name: "Uganda" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ः\\̍ĵԇʷȯĐPوȜ͎²ڬǰϸ͎Ѭ͔ɠ˒̘͵Ŗ¼চΌɮՖȉڰȠעEԬϮЊ׍İсτ९̧ؓЯ֋ʉͽTࢹႍß",
              ],
              encodeOffsets: [[32631, -1052]],
            },
          },
          {
            type: "Feature",
            id: "UKR",
            properties: { name: "Ukraine" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@̾ɄȒʮ¥ࢌĆ՞Ӈȿǝêʻڠ£̘ηkǑ੪̏٢Ƅ԰ϿӮVఊ˙XʙͿѯȆҩƃ˩߻Õџɻύڡã֑˕޽«ܣ̻¸ԹЪȭࡨ¼Ǐ̛ँơଛӟұǠȄЂࣽʘƨǈߪ˪ʑȔಯɆË̼ީĻ̷ҧٱةϟƠЁƉϑƺɂĞƦ˾ɲˎÑƮǬäĊśӸ{ɞØƽĎÐŲ̉ɈŧΘ̩ƐÒ˶ϝɦΉأʾ֑ĉȧŭΟ@Ƀȟاă˹ŹϷȴ՟HԳĢγǵÍɤұɮǐͺɸɔȀµɑϘބۦиİĜɾхܼДҢɪٲnࡖßबȫڎi͂ŧ̀Ʀɚȝݸ¢ͮąÄцʶȂܞº",
              ],
              encodeOffsets: [[32549, 53353]],
            },
          },
          {
            type: "Feature",
            id: "URY",
            properties: { name: "Uruguay" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@ղĚࡆٯ̺|ࡺ՟ڈҫӠֱχЉɸӇεՇॉұاǚғěޥΰ֫ԟҬÞլǾȈS࠸ɤࡺȾڦ"],
              encodeOffsets: [[-59008, -30941]],
            },
          },
          {
            type: "Feature",
            id: "USA",
            properties: { name: "United States of America" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                ["@@ũƕȽŤ|ɾƓ̨¦ĤƤƎÍǔ¸þÜe͐ƙƬñƌőɊ̍q¯͟ǵˏſ"],
                ["@@˭ÑƟǮīèQÀĈî̘āɘŹëĵ"],
                ["@@ĝ҉|Úĸа"],
                ["@@­µÓŻŃȒɤŚêÃʐ˥"],
                ["@@ıĉ˱ƴªÖŸĈȘijȝ"],
                [
                  "@@Ƭңʼƛז½࡬ƅࠂʹڼŊਖɓ˞Tݨʄ߂̧ࠒ͗ں˩ٶˏĈəȢĉ½ĉɦǎĔ¦ȣǜƅɴ@ŬĹĽƫ࢖ЁǶށǚܳʗӹЁҥȁ̍mēĦť˸Ɓɂ@ঊ҆ࡾƀસмfĐ÷ʰƉǒϜƆࠜHޘAˎ͞ŀàࢶ؄ϜƸ౦N໾BĎȺː¦Φž̖Ϣʲٺٚي˨ə֜ƜώʏAଧռӅƢ˝࣋Пࡷ̃ࢱʝѻӿƛȋSѽˤѽΒsė̬ʦȇãʇ֥ƋЗhةƥλ¥ӥ¥۫ʏఀǂʠǃ୳ʥ՗C|ĺʭɷʚǹ׽ؑ٧×Ɏȁª˟ɀǪҍȼƭ^ͅˏ͛ҿڡûʺֲѕ͎įۦǉεǴՑևƀׂ˓ߛʊÍĖ̃ŠࡁՕدࢇʝցӱнÁэ̱ţ˭इձӁЍЅӽŻׯƪ׍ˬܗώשLεЊঅ֥͛ȿԡʣŃЯĺƁς͋ȖѻܢϹٞű͢Ǥ֐ɽҦٻ۲͟źࡑϡƭ¦СϼՃȺोŁݗĤٙÍΏſƲɟaͽǴǓǇō̵Ů́ǃ؍طѺܻĿ؏ȚԹÏۻȝއح࠳γҝБȕϗUׅ¨ЕǄ˹͝{׭ȂٽʺɽЄȁטӷӐ̃ӰуֺףͲۉgՉڑۣʦѡʪȽҦ˧Ѯӿτїˈ̩̖ป@C΋ڗ@ဩOቿפ౓ТĀǒ੩ĝॕÝƙіխӚϻĴğʌһ¦̝ɪޭĊɉƌĹҢࠁࡊ۩ୠȚχˤٯ۴řۆ҃ҞȀۢܜˍ٢͠ߊĸނĺނƱૼˇܘʓ϶ĸǐ௒˷҂ߋȺɜƇې˷ێᛸ@᠂@ࠜ@ᢢ@៚@ᡀ@ᡄ@᭰@ᮞBაAF͔˴J",
                ],
                ["@@࠽͋ѕɐŽЀބ̘҆Ÿ֐ÉΤʻܫЍ"],
                ["@@ԧŽսƾԛɮࠦƞښùĂ͑"],
                ["@@԰ǅԾĒڸɛ࠲őéĝُǱٕǾ͋Ʋݍµȧôº̈́"],
                [
                  "@@؊ϛώǌහ»¹ȕ౾ƛࡨČᄚ˅ྤā٨ŉ૦Ǝౢʧࣲŝ@@MᷱIⷍࠠ{ࠌɵהρݜցࠈҺࡈ˖Ҁѡ֤·ޒϙՂ׽࡮य़ේ՗xՋұЙҥ͂ݍˌʃܺએںҍߎ߯Ä೷rটʌ჉ࢎߩǄ฽̜୑í࿻ϬৃΨटǯǦ׏ҫÁঁǫ݉˱झǳťӶϚࠚࣀʶɱɂੱҵֵ֑௅ױؚСߏ׿ࣗΗࡁʱȻωಽѡ˅ϿছΫֽÞ޷ɻ࡝˹ۧ˫෹ʉſƘऀϾࠔʸࣆҠਬĨвΈ୘ԊȈǚب̒ƢْђӸॹʫ˓Ơҕ̧շюɧ̝̽м࠿ͳԩBïԄƲ̮ե̚થǇ܁ЀַȬIӈ٩Ϊ͘ӘۆҸ̚њںÖ־ƇڴМ؎ï٘ʼƻϨҹưج͖ԩWࢻǽʯȃڏȄஏĥ௷ȬΛ͸੟Ӧ୾ΘመШ۔@ŕнᄢڽԶਕ͌ױр߫ΨଽˈҺѲ๰ਗ਼ϦȨФ࡬ЎࠊĪཪώޜÉಐ҄ౚǭ",
                ],
              ],
              encodeOffsets: [
                [[-159275, 19542]],
                [[-159825, 21140]],
                [[-160520, 21686]],
                [[-161436, 21834]],
                [[-163169, 22510]],
                [[-97093, 50575]],
                [[-156678, 58487]],
                [[-169553, 61348]],
                [[-175853, 65314]],
                [[-158789, 72856]],
              ],
            },
          },
          {
            type: "Feature",
            id: "UZB",
            properties: { name: "Uzbekistan" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@xԦૣά࢝ЪշЄ॥׈Яࡾ˭ƴࣥ͏ǤěڢଅѺ۽ӥܕ́Ɛхॅ[ᶾᓘӺƾïದ׻یͅߤݵঢŪ෸à৔ؗÙࡅЦMǢۍ੬ɲЉ̺Lπ׺૎הӖƺʠĉ۵խئ́ײȾ়ѷ੽؁ٕĊ΍uţɺǪ϶૱țˋաЋҫۭ ɓυؠȧǺصҿࡗهǰҳN",
              ],
              encodeOffsets: [[68116, 38260]],
            },
          },
          {
            type: "Feature",
            id: "VEN",
            properties: { name: "Venezuela" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@yȣӱĭ˜ϡYѭυӥ͆ڙδÆȌ؈ʻ̒§َਸ਼΀řІ̎ˆ̞ןל_մҵ˧ݮQ࣌ĔӖϕٞĻҼʾXɄਨ¼৖\\܉ʛ˼Їڦ×ِЯƆڧѬn͢ȣڕӱó̫˾̷ȽƽԫƉjϱɫɱّ֪Őʁ̭͍ऱ̽׿Žʏȣڛɀثņƿýϔɑ֝ŜՉ܆ï°ǭ׷ʅĭΣΉƏسȝǋʱٷÅҧѼʯ࠺ɟ̧̌ȄюмȊʅʠǛ֒à׼Ȉ˰ƲҎ̓Ơӏĩ؁®ͻęסܢӥńઉăȧ̊ȷêǬĴ̶áͺȃȂŅϮѡÈɸӮĺ׶ʔ̸͘ʌɈрդƖ",
              ],
              encodeOffsets: [[-73043, 12059]],
            },
          },
          {
            type: "Feature",
            id: "VNM",
            properties: { name: "Vietnam" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@૭ܗ۫ߍȁ׍٠ࢭ޺ળނԱԞګϪ།ŕ๓۫փ१եۇ۫਷ޱ̧ՠʀ֬دӌܬ͸ࢦÔσԚප٨ļ৖ț֖ƶࡀɃצٍאՋ݌ۥ঴৓Ԋʊ̠՞ɘ͙ܺਙPϕކӭڐҊȴڢIࠈĬܒ҄К̿ސƵƃӛАͿࡎɓ",
              ],
              encodeOffsets: [[110644, 22070]],
            },
          },
          {
            type: "Feature",
            id: "VUT",
            properties: { name: "Vanuatu" },
            geometry: {
              type: "MultiPolygon",
              coordinates: [["@@ˣō˭ςɤՆӗ"], ["@@ƌڱɥŀǩ­ťɴi٢Дʵ"]],
              encodeOffsets: [[[171874, -16861]], [[171119, -15292]]],
            },
          },
          {
            type: "Feature",
            id: "PSE",
            properties: { name: "West Bank" },
            geometry: {
              type: "Polygon",
              coordinates: ["@@@ԣŭʙЃŕɜɌŚɁĦǬ̤֔ś"],
              encodeOffsets: [[36399, 33172]],
            },
          },
          {
            type: "Feature",
            id: "YEM",
            properties: { name: "Yemen" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@؉ɥǋύo˹࠷Οഇϻݩףυ±ʥºӭΑ՗ǉ۷©ɃµǿɛəÕŻɇеlˍœ׉¨ɓӬzҠƍʜǑتʋΊǚ¤đϨĸǊξςˌđΠɞЮΊɓɬúॺnƸċ߼č͐¨ɂ˫ϺƖ׼ࢦ޸Ϛᝒ͒ڀ൳˞ח",
              ],
              encodeOffsets: [[54384, 17051]],
            },
          },
          {
            type: "Feature",
            id: "ZAF",
            properties: { name: "South Africa" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ǏŧΣяɻћӇ׻ोࢁףԋًϣ࢛͙ѓ«ŇɷԛŰеǅ࣫ǊԙĹΏ¬ࡿͩܓƃԱͅϡoΣ̚˳fαϒśŏɦLӰ˙֞˔ƴs٤ս޼х܈AF׽તДдͪɯƘΫϘÓՈǃҌÖݤіB᷌ɨűӾߙûԟȈ̏׼ĒрϒЊʨȶДЦȚΠķВɽۂ£՞ȜĐʾƨДҚäʨ͂˪֔ݮغஒؤ΂UОƛ˲Ķ҂ċД஁ɔׯƫऩî̟чƶʏÑāʓɯ̿T̃ԆҕӮĜǢώْQȿؑıۥɑϛֵщ",
                "@@νʶϻǟҕ҃͡Տـ٧̜ČƺˎҴƀƜ˜ʴФ̅ʪ",
              ],
              encodeOffsets: [
                [32278, -29959],
                [29674, -29650],
              ],
            },
          },
          {
            type: "Feature",
            id: "ZMB",
            properties: { name: "Zambia" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ІϏɊ܋ƝɩǙڻǈۡ˃̇ʭޭѶɓᢇۗĂׯٍřӍͯĹ̛̅ßܵۓҭխ˳o˗ĬऱĠƯÚOêͧȎկ¶ۋȑչԾ֣یᦶშYí̂Ű̀ƧЀĪТėʺ̂q¶ʽϾrՖûˬϡڨŝԤˆȌѯ٠ş̴ΧΈҥ٠Që࣠ɱƳח͞ɧƬļࡈƬসȉψʈ՚ɤĶ଀ƚͦđΘɇͰƗՖƗӊʧ",
              ],
              encodeOffsets: [[33546, -9452]],
            },
          },
          {
            type: "Feature",
            id: "ZWE",
            properties: { name: "Zimbabwe" },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ҁČ˱ĵНƜ΁VՙϞٯźʙՒC̒έĞ्ई˃ӢǛƮ͓ڤलğ˘ī˴pҮծܶ۔̜àĺ̆ӎͰَŚÆ̻۬hϴǯǺȻАÓѦˑF੟Ǐ׋عƊʝħӵŵùɛ؅ࢫ॓",
              ],
              encodeOffsets: [[31941, -22785]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/xiang_gang_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "8100",
            properties: { name: "香港", cp: [114.2784, 22.3057], childNum: 1 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@}ScTʟ@cWuJÁ]l¦RLj¼BĄà H@TOHCTDDDHDNAT@PEHDDNJLX@BABALHFF@DKHADBBLDHHFBLEJB@GDBBFBADDB@@KFAFBBJJA@BB@@FFDDADFF@FADDDBJC@AFBD@@DDD@DAA@D@DB@DHHBFJBBFEHDFAN@DGDC@DLCBDDCFDlAFBFCBEF@BC@GDAB@FD@DZJX´HĐMja@Ý`p_PCZ@lLnRGSDMFK|a\\Y}­§Mën",
              ],
              encodeOffsets: [[117078, 22678]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/xin_jiang_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "6528",
            properties: {
              name: "巴音郭楞蒙古自治州",
              cp: [88.1653, 39.6002],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@ÈÒĊanwŎVȮ¦ͪŃĢÜōȂçČéƐżLɆóĊĊaʊŁ±¯²Um»ˌmÈ»VʠţWÑÅ¯ǓéôƑƒğÆīŎī@Ƿwô˺LÞ¯ƨVǪÑƒĢȘV°wĢôk°¯ƒ»΀@Ȃ»ĸǔ@΀͔ôôLɆó̐ÝɜLɲōͪƨóŤK@ī@IU܃ÛmȻţǩÝ˹ÛǉťǓǫō@Ɲ²¯VçōKͿŁΗÇţ»ƽɅƑLÓŏÅÅɱV@ÝĊU¯ÑĊĭÞLÞŎJ±̃XȣˌōlUÈ¯ŎKÆƅ°XÑÜ±nŗġV¯óaUƧUōŁÑ±çɲ¥lĉkğ°k¥nğţL¯ÝÝUƽĬ΁lķ°@ōXÿÝ¯V»ŹLʉÞɱŤĉó°ÝJ¦ÝKÝ£ţÜÈĉ@xǩUċƑ@ky͓¹`U²ĉVġ»ğa¯¥ť@ĉó@ŻÛÛJw¯nó¯ġWƽʩķÝɛwĉĕÝ¼ȭÞķō@ó£Å΀Ƒ¯ôȯÞ¯ȰÆōèĉXÇ¼ó@ÝnºĸÞVƜĸȚUʶõˀĵĖɱŎÝĖVࢰӒѢ°˘nϚVˌÈmɼĵŦW¤öʊõʔ@°ÈXVènŎȁb¯ǫĉ±Èğ`ġwōÔğ»mVVÝ¥ó@ĸķô@bXĶmV²²`Þ_ɴbͪÈ°ÞWĸÈŌmÞkɲÈUÆ»n¼ǬVķĸźô¯°n¦ɄÇÈ",
              ],
              encodeOffsets: [[86986, 44534]],
            },
          },
          {
            type: "Feature",
            id: "6532",
            properties: {
              name: "和田地区",
              cp: [81.167, 36.9855],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƨ¥èź٨ΘƑᩄbUࢯÞĕɲōĶĕöʿVʵķșUƛÝķm¹Þô@È»ĊWŎçÅ°ȯȰÝ°óƒÆͿĉ»̽çnmɱĵƧºóUƽ@±wóL¯°̻L±Æ¯Vƴķb¯VÇ¥ğ²Ǖbk¥ÇKlÅɱġ@ÑóK@ÇaÝXğţxĉČǫķê¯K@ÑaŹƑK¼¯VóaónġwóÞéUġbóĉğÇl¹aUóğKWVÅ¯nÇŋƑķnʇ»óxĉwçÇ°Åw°ċXób±kÈÇJm²ţx@ÒÝŦÇºnó¼n°ÇbUÒ±¼XĸĠłƽXmwĉºzÈÜmnxmx²ĖmÒbnƧêUºĊêÆVóĖóUĉ¼ÅĬƑ°ɆƆŻŚlłÞL¼nĠ¼@ÞÞź@ŎÞ°VɄɴжϼِ͈Ŏ",
              ],
              encodeOffsets: [[81293, 39764]],
            },
          },
          {
            type: "Feature",
            id: "6522",
            properties: {
              name: "哈密地区",
              cp: [93.7793, 42.9236],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WnŐÆĶLĢ¦ţºźlxÅĸƽŚɄĮè@ô²ÞUĔƐńV°¯ĸX¦Ɛm̐bƒ»Ɇa΀ĢƐLˤȘÑnІǉĸÿn¯ĶaŎ¯ĢĕȘ¯°΂la¯¥ǕǔwˤӱlťО̻nŻmɃĕċţUw°WUóƨÅţķ°ýV±óÅǓéʉ¯ƽŁéōǖȁÝƏůǕw˹ǫȗǓƧǕVýé@ĬţLƧôͩɱŎɛK̏ÞɅôóK@²@°ōŘ¼lŦ¯ŰóƜÛlV¼ķ¼°kȰŰĠǬŚÝŎmĖ`@ÇÜn",
              ],
              encodeOffsets: [[93387, 44539]],
            },
          },
          {
            type: "Feature",
            id: "6529",
            properties: {
              name: "阿克苏地区",
              cp: [82.9797, 41.0229],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VÆxˌŎÞŎ°nȂÒ°²VĊ¯VğƾˍǬƨÞÞKÈÞĊVźôɆÞĢèŌôWČ²ŤVÞĸʶbl¯ôn_VÆĸlmÞnVź_ĸ¼ȮmǖéĸW°°ĸJkʠ¼Æw°¤ÈlxɆzČºĶI²ÆǔU°ô@Þ¦UnUĠ¼ŎÓĢxĠ_²ÇĊǬ°ȂamōçUÇW@¯öʓõʉX£ĶťnɻÇUˋmϙ¯˗ӑѡᩃaΗƒɜ°xWƴUxɃÒˣ¤ɅwğʉōóÝŹ±°ȗ@¯Æƒ²¼",
                "@@ōгwȁ¥Ƨ°ŹÑķV¼ÞêĊ»lĵm¦ÅW@ĀôÈźaɜxÈbÞÆĶIОŘnIÇŃÛÝĊÑĠƏ",
              ],
              encodeOffsets: [
                [80022, 41294],
                [83914, 41474],
              ],
            },
          },
          {
            type: "Feature",
            id: "6543",
            properties: {
              name: "阿勒泰地区",
              cp: [88.2971, 47.0929],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ɲˣĊIÈ¥ÅU±Ċýkō°ĉƽó»ĶƽXóʵʵȯƑÅȁɅ¯ĉ@ÇሗK֛@@ˤV֜ʵрƒǬVĸƑŎ@ƆϯÑóķ@ʇ»ķ¦έmlÈĸĊX¼WźÛÞÝѸĢČþĀĊôάVö¼ĊUƨ°°èŎČUÜÆóôVôô²êȘlˌç°`n²ǬĊaÛ°±kğmm»@°ÝɆÛÅÇVaÝVm͔ğôÝÈb@n¯ÜUĢÑĊ@źīżWŤÈǖWôŁÆI²ÓƨL@ĊXmmÑÆ»ȰÑkĶō@ý°m¯",
              ],
              encodeOffsets: [[92656, 48460]],
            },
          },
          {
            type: "Feature",
            id: "6531",
            properties: {
              name: "喀什地区",
              cp: [77.168, 37.8534],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Č@°ĠôÓô@Ŏĉ@Ƴĸ@Ť£ĢlVôWVóřXĉŤêÞ@ƐÒĢÑlèÈV@ĠIk°ÆŘ@ÈÈĀ@ǶťÒğ@@ÒĉlŻ_@ƧĖÅĬōÆ@bźÞnƒlVÝĬWÆ¼ʇÝÅ@ÇÅÈwWóĉ±ğzĬČƨÆÝIĉÝ¯bÇÑĉ¯ʈV°xUŰĊ¤ƪ_ôÓɚI@lȚXȮŎlɴȘ՘¦ɲÆʈ_ɴźôÞʊŎĠɆxˤ£ɄÑVwXƳ¯wɛŹ٧çƧ¦ōُ͇еϻɃɳUÝ¯@ōÝŹ@Ý»mğ»ÝKkŁżřɅƅƒ¯ÆīĊ»ôVôĕÅUĉéV¹ƨémanÑ±ĕnwmwnÇÛyĉ¹ŹlŏkĵèķmōÞġKñÔċKÅèĉzômxȗÿƿI@þÅČÝKÝ°@¼ÈVº@ÅĢÆUċłnÝÆǕČĵJm£ÝJ¦@ĊxV°ƏLċ¼ǩ@m@ÅĢómÇÆğ¹ÇÆĖÞKxwô¦ÆÑÆL²ÆƾU±ŚÅŻĖ@ĬŤÈñ@ǔÇxÈÇƒ",
                "@@VÇţ°ğUĠ¯mk¯ó¥ķIġÿƏbĉa±ÒĸĀlKU_m»nwm@ÈŤ¦ĉbÞ°±Þżł̦°ĢŁVé",
              ],
              encodeOffsets: [
                [76624, 39196],
                [81507, 40877],
              ],
            },
          },
          {
            type: "Feature",
            id: "6542",
            properties: {
              name: "塔城地区",
              cp: [86.6272, 45.8514],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ήnĸ¥ʈ¼ĸ@ôϰÒ@ƅƒōUķƑǫʶпU֛܃LګK@΋ĸ@Æ£ÞġÅĠċLVÝ»@Å»Ýnm¯»nŻĊ@nķŃ@¯ómóÛÝǟ¯aÝóȭ¥ōUmxĉbÇÑ@bUº¯X¯ÆƧbVÒĉnǕw¯°ƑVÇ@kx±UɱnÅK¯ƒĠǠU°ɜL@°xnĬĀŋŎÇLğϱÞέƜkôÅĀǕłĸĊŤUŰĢ°¦ȂϰÜɨ°x@°żǠÆƈČVĠ»ČL°ÇbĊÑ̐óÞlĶwÞɆVÞwǬxǪţÈ¼ÜLŐĶˢ@",
                "@@óKĵĀV͈ĉłƾǊÆŤzXl°ÆL²¼źôÈĢǔ¦lô°ɜÞʊĠğÅm»ʵƳƑʝȗīV¥¯ĉ°Ñ@ŃÅI»ĉmğnaċƨbVğwġ¯@UōaĉÝJğÑÆŎkŎÞĀlź¦",
              ],
              encodeOffsets: [
                [87593, 48184],
                [86884, 45760],
              ],
            },
          },
          {
            type: "Feature",
            id: "6523",
            properties: {
              name: "昌吉回族自治州",
              cp: [89.6814, 44.4507],
              childNum: 7,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@መL@È°ĊȂɆƒÆĊ£ťôWÓɆbĢÅŎÆ¦ČÑW¥°ķU¯ƏŃVē±Ý@óçĭɃƾřÆķkwŹŤ¹ġ¥ĵKŏÅXmˍщwǓ¤Ƒ@wóōVķ£ɱġôÛa±ÒȁóèţIVƽ¼k¤ó¹ġJmx»ÝU²@ÅÆĸǫŎĊmŎǬ՘",
                ],
                [
                  "@@Þô°bÞǠôÜôn@°ĸńǶkł¼UÞKğČÆÝĢÅ¤ķ@@ΌڬL܄K@ˣȂ˭lĉÅW¥ĵVÆý@ŃÞēUŃȗƅ@ŹƩǕĉ»k»ÇVğóřXŻKƏċêȁèÛŎġͩń",
                ],
              ],
              encodeOffsets: [[[90113, 46080]], [[87638, 44579]]],
            },
          },
          {
            type: "Feature",
            id: "6530",
            properties: {
              name: "克孜勒苏柯尔克孜自治州",
              cp: [74.6301, 39.5233],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ˎǫĠƽ°UUĉ¯±ȁÑm¯ÝōˋōwUÅ±»ÅƑ°Ș@²¯ɳʇ`ɱÅ¥՗ɳȗōkȭșW@kəJóÔƩ`ĉ£Vů¯wU°ʇĊÈÒ°aĊÞÞJÅċƧīĠyĊ²XôÇxÈÆÆ@ÞʈÅ»XÞīUƑkmŹÝ@aŎÅÆīƨĕ@ż`Ċk@ÑĠ@ŦÑ@ǵÇÿ@ÇÅŗl¯ğJ@ÇUkçġÒƏÑÝ@ţéWĊôŚUóXUġkţ¤ķ@@ƴōĊó@óÔğ¯ċ@@Ò¤kôˣŰ͓k»KX¯ċwƧôğɐÒôIVÆ¯UķǬķn¼ôb°ÒȰVVÈÞ°ĸó¤V¼°V°²êlĢÒUƨ¦ôȰƴĊVV¼ǖIċĊÞɜénČW˸ǸařÈw±īçĸ¤ĊôwĸUĢ¦éǖĬĀô¼lÞkÒ°x°ƆÞxÆV²ǔ»b°wÞȘ¥°nŎV@°ʠèŰȂb",
              ],
              encodeOffsets: [[80269, 42396]],
            },
          },
          {
            type: "Feature",
            id: "6521",
            properties: {
              name: "吐鲁番地区",
              cp: [89.6375, 42.4127],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ôKĉǪa²¼lÜô@ʠê°ĬôȂ²ÑÜbĢóɲĸ¤ŎUô@xƒǔ£ъxˎmÈÛ@_nĕÞōřǫğůlȯ¯ĸ»U»Ükôƛ°ůkť»Ŏŗ@¯@±͓óͿǓ@ķȁ¼Ϳ@Ƒ¼¯°ólġ¯xȗUġƑǩÒƧUÝ°˹Kóx@ǸōĬÅĬƑĠóƒǔêÆ°XÒʟŤUÇ¼ˋnn¼±V²°ȂUŌÝbʟǔɅô@żǬaҎÈ",
              ],
              encodeOffsets: [[90248, 44371]],
            },
          },
          {
            type: "Feature",
            id: "6540",
            properties: {
              name: "伊犁哈萨克自治州",
              cp: [82.5513, 43.5498],
              childNum: 10,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@ĉÆŘȁ̐mÞ¯ĀX°±¼@ƾ¯ƴ°ŎÝþŋ¦WÜÞbȂĉźUÇmwVUȂóô@ȰÝ΀nÆJnƾʠŌLČóǪ¯¥ǔaǖŌaôÝĢLxÆLɲm²VlwÈ@Uƒ°¯ǖxĊmUÑƨa°Å°WV¹aÇɃÈm¥°¯ŹóĸķǫUm»Å¼ÇVɱlÝŋnķÇÝX¯ͩÇɳaÝ`±_U±ĵnWa@ĸóķ¯ǓV±ÅĵJċ¹ɅykwÇ¯£Åxʟ»lķI¯X¯ķêǕȭnķ»Ź`±kÞ@Ýô@Þ°xŤŎIƨÆUxō¯²ǔĬǬlUŚ",
                ],
                ["@@ÞĀlź¦¯ĸŤKÞċƨbVğwġ¯@ţƽJ"],
              ],
              encodeOffsets: [[[82722, 44337]], [[86817, 45456]]],
            },
          },
          {
            type: "Feature",
            id: "6527",
            properties: {
              name: "博尔塔拉蒙古自治州",
              cp: [81.8481, 44.6979],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ήƛϲÝĠÈKŌōÿmīw@¯ɛKV¯ğǟ°ƑwġKóÞŋbǕǓb¦ǩ°ċôŋKʟƽmÅImͿȯÞó@ȁôUVnxÈŹVȁĊÝabŻ£¯°lóxȂŤĸkĊÞyĊêĊmĢxVƨÈĠXΘÆĠÔźɆţ°LXƾŤŤb",
              ],
              encodeOffsets: [[84555, 46311]],
            },
          },
          {
            type: "Feature",
            id: "6501",
            properties: {
              name: "乌鲁木齐市",
              cp: [87.9236, 43.5883],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WôŚUĠÈl¼Ċ¼ƪǖ@źȘƆ@ýlÜXVŘÞ¦V¼kĖóÒèkĊȁˮ֜@ǫ՗nōĉǬōķÆÅ@±ÞV¼nwĢIôºl£ƾ»UŤJôçó¯īʟéó@kÛ±»ǩbĊóLҍÇǫb@ŻɆóʠǓaŋÞȁVʉłĉbĉɅô",
              ],
              encodeOffsets: [[88887, 44146]],
            },
          },
          {
            type: "Feature",
            id: "6502",
            properties: {
              name: "克拉玛依市",
              cp: [85.2869, 45.5054],
              childNum: 2,
            },
            geometry: {
              type: "MultiPolygon",
              coordinates: [
                [
                  "@@ɜÞʊĊýVaÅm»ʵƳƑʝȗīV¥¯ĉ°Ñ@ŃÅI»ĉmğnaÝţL°ķóKĵĀV͈ĉłƾǊÆŤzXl°ÆL²¼źôÈĢǔ¦lô°",
                ],
                ["@@ƾIŤ@UUwōaĉÝJğÑÆŎkŎ"],
              ],
              encodeOffsets: [[[87424, 47245]], [[86817, 45456]]],
            },
          },
          {
            type: "Feature",
            id: "659002",
            properties: {
              name: "阿拉尔市",
              cp: [81.2769, 40.6549],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nIÇŃÛÝĊÑĠƏōгwȁ¥Ƨ°ŹÑķV¼ÞêĊ»lĵm¦ÅW@ĀôÈźaɜxÈbÞÆĶIОŘ",
              ],
              encodeOffsets: [[83824, 41929]],
            },
          },
          {
            type: "Feature",
            id: "659003",
            properties: {
              name: "图木舒克市",
              cp: [79.1345, 39.8749],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VéVÇţ°ğUĠ¯mk¯ó¥ķIġÿƏbĉa±ÒĸĀlKU_m»nwm@ÈŤ¦ĉbÞ°±Þżł̦°ĢŁ",
              ],
              encodeOffsets: [[81496, 40962]],
            },
          },
          {
            type: "Feature",
            id: "659004",
            properties: {
              name: "五家渠市",
              cp: [87.5391, 44.3024],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@çôÑlĕU»¥ÝUŗWkÛ@þVńÝĔ@ńÅþĶUX¦Æ"],
              encodeOffsets: [[89674, 45636]],
            },
          },
          {
            type: "Feature",
            id: "659001",
            properties: {
              name: "石河子市",
              cp: [86.0229, 44.2914],
              childNum: 1,
            },
            geometry: {
              type: "Polygon",
              coordinates: ["@@lŁǵmĉ@mż¼n°ÞmÆ¼@"],
              encodeOffsets: [[88178, 45529]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/xi_zang_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "5424",
            properties: {
              name: "那曲地区",
              cp: [88.1982, 33.3215],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ƨʔĸbÜºÞwnxźbÞ°ô@ĶĸIÈ¼ĊJŎÈôUÝƒ¤ǔLÞŎ@ĢȘblôLÇźçÈ¤ôL¥ÞIÞ¯ĶxʊťƨƿÑĉXVķŦ¯ȂKÇǕÑ¯IU£¯Óƿ£VĕÅÞÿÆwƑ£ǖxÞĕ±ÇÝaUÑÈU¯UōÈÝwWŁĵ±ÝóĢÿ°IÞ±mÅĢ¯mÿ¥°UnÑŤĢĕĶwǬŻͪwŎ¼źÇĢĠĕˎŁ°óƨ¼Èam@¥°wǔǖ°ƨÇŤġƨŎŃôbÈÛŎĊ°@Ġw²ÑÞJÆÆb²°êĊUÞlÈ²VÈKĊÒĸĉ»ÅôťUÅÇk¯@ÇÑklÇÅlĢVÑó@°@ÛĸV¯ÇĊn¯Uĕƽ¯m¯bÈ@Ò°Ĭbĵ¼kxķýÇJk£ÝaUÑÅóĶǟkÓʉnĉÝ¼Ƒó»Þmn£mČ¯@ȮÿV¯ĸk@Ýów»ğġ±ǓLōV¼Əèķĉè±b@ÒţUÑóakl£Ó@¯L@ÇlUóȁ¯aġÈÅĕÝLķ¯Ė¯@WĬxÒÈnW°ţôU²ǓÓġ²V°¯ôǔÝLċk»Ý»Ý¯ÞVwÛÝÇōͩÈĉċ»ĉm¯£W¥ţKkóġƏW@¯±kōÈb@ÒÇaÆ¯akóÛÇ¦Ýa¯Ýĉ@Ç»ÛmǓxķƛ¯lVĀÅÞġbÇJUÅVĖƑWzō»ōWn@è¯ÞóVkwƩnkźÇÞÒÞ¯ýğÇUxÆÈnè±bĉÝ»ÈŃwwÞ@m»ÈV@ýÇ°ķxaÝ¯Xċ¥ÈóW@ôkxlnxVÈóĊkŤġ¼@°¯ŰƑL̻Ű±ŎÝVÞVÇÞÅÇakƞ@èğŎĸżƾ°ÒLÞôĠKȰĖźVÈÒĠ¤VôUÈþťL@ôǬÞlÜÈnÇÒUŚ@ĊƨW°°X@ČÇþƴĉÒķ¦@ĢôWĀôłUÞĢǬź°¼@ôV°bUÆnzm¤ƽĸÈ",
              ],
              encodeOffsets: [[88133, 36721]],
            },
          },
          {
            type: "Feature",
            id: "5425",
            properties: {
              name: "阿里地区",
              cp: [82.3645, 32.7667],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Çƾķn£myVÅaU¯ó@¯»ŹġǫVÝóŁXÿġó@ĸ¥ĊÑƳÈý@ċW¯X¯ĉƧ@VřÈÑÇmkÛǫÝ@óŦKÇýVUó£ğÇÑŹUȯĕğLÝóK¯ÑƽķŻĠō@çlƝÈbÆÈÝUÝÞU²ō̼ůƒK°ů@¯UK±ĊƧbōÇmçÈġóÅóbźó¥kīÆ¯ólçKôĵUÅVŃķ¥nÅŏm¯¹Å»@ÑÇóxÝkʇȤU¤ķb@ƒ¯ĊÇx¯ĸĉKm°Āk¦lKnĬȀƾÛ¦WÆÅmǊĉ°ōUţ¤UŎ°ŎKÞłÆǓ¦Þř¯bmUÝl¯Umğl¯£șwÅǫaÝnĉĶk@¯Kō»ĉnaÞ»ťnkmlĸ¥UÅŻkÑťĉVôó°LôīĠUÿĉǕÅz±K¤²ō¤¯Ė¯UÝ¥VĵóÈťÝwķÈÑk¤óWýĵĕVĠVóǓķ°k±VU±ţ¦UǟÝÅJVÑ¥XUċUÅlÛƆǕÆȗƆ¯wŏÞÅ@ĉlÝóÒnUôÅlxólÝôÛ±LÛôÝL@ġ¯X¯ÇUÅ¼óaó¤¼XÒġŎóLk¦ôÅ¼ĸĠ¼KġƆô¦ÆƑÔĉĶ¯ImÒ°¦n°¯ÞlÝČnƒÒKĠÞĕklýƾťôIĖŤÒnƜm¼¯lnżóÞ@Ůó¦ôƽĖċŚn°Ý°ôÈUƜblÞó@ǖô°UÈƆ°XþôôlѢ²Ėm¦°@¤XĊblÜzkºƒĖmXŎWVóÞn°lĠxȚa°»żLźb@Æ°XĠÝȚxĊĕŤaȚ°È@@èŤ¦Ü¼WÞkÈ@V°lŤkŎ±²¦ƐUǉ°aÈÑŎbĢŎbÆ¥ÞIȘlôVÈUbkɲĶnmnXb̼òƾĖŎ@ĢȂÑôÓĠĖʊĊÔ",
              ],
              encodeOffsets: [[88133, 36721]],
            },
          },
          {
            type: "Feature",
            id: "5423",
            properties: {
              name: "日喀则地区",
              cp: [86.2427, 29.5093],
              childNum: 18,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ĶĖXþôl£ÒĸÇÞxÇŦôUĶÞ¦°V°ĕŎ£±£²LÆyĊǖĀğVóĬ¯KóôUĊŦlÒżVÆķ¦klnŦmÝ¼bĊmŎ¼L@°lĊĵÞmǬbÆȚx°¤Ġkn°VÞkVn°aŚÝǔ¥ÅÝŁōL¯ōVŤ£ŎVĊ¯nǉÆXÅÜ¥ǿƽmīLkl¥ÿn¯ĊL°ķÈw°ĉ@ƑĸaV£ʈȣÞlôwÈ@Ò¼Æ°ºŐnmÆĸ¦UńÆVóĶLèôkÅ°lĬ¦ŹôôaÆôÇĢnèŎÈƨaĉ²VLĢ»lţôĉUÇwkmlw@óôXÇČ¦°WÞbwĸÈ¯@þÇUn¼Ý@xxÇńÞ¼Ċ²amçÅÇVwĠÈþ°ÝÑÈÝlŹƪmlxôU°Ý@çmXŎŎ¼yƒXĕÆUVÈIĢaÆÝUÿ°kĸƜǔwnÜÈ¼Ċ@Þ°ÞbÈ¥Üôl°bÅÈb@ÑaÇ¯UU¯Vġ»¯aV¯Ç°ÅmnÑŤçǬVǬ±ĉ¯¥Vĕ¯Ýk£ōw@±ġÛ°ÇVÑ@Ûa@ČLƳÇa¯¤ÝIĵ¼U¥ƿōķÅţŻókÝóĕ¥¯U»Æ£X¯ġŃÛkÝ°V°ó¼¯èWôÞĖȎkĀƧĀówm¥¯JÅ¹ÝJÝōVVÅaÝƑ@ğŭÇ¯_ĵVnxÅónĵxÇĖĉVÝÈğVÒó¯±Żĉ£ķÆÅLǈĉýţÛ¯VnV¤ÝÈ@°ÅÞÝ¤ŰğŁm¦ÝxóK¥ɱÈUĠôêVôÛ¼ÇWÝçĵaō¦óĖƧlÇĢƑnŎÇV¼¼ºÛ@m¦ƽĉmm¯ÝKÛç¯bŏłĬb¼ÅLmxť°ÅUÝXkÝmĉ¦W¯KÒknÝaVÝè¯KɅńÝKnÞ¯¼",
              ],
              encodeOffsets: [[84117, 30927]],
            },
          },
          {
            type: "Feature",
            id: "5426",
            properties: {
              name: "林芝地区",
              cp: [95.4602, 29.1138],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VÈłVôÈk@°K@Ôk¤lôbVÒŤ@Ñ²açĸĊƐçU»ŎǔKĢ²Ġ¼ôx@ÞlƨĬUl¯ÈLVÞJ°ÜnʊwÜbXêVÞ¯°anaU°wÆ¼ɴÑWÑ°mÈýÈam¥Þ£Ť@¥ôblÞĢź¥ôxÈÅmÝĕÅV»ĉōŤōnó»ÈīķIUĠÑ°ġĸLÞ¯VÒÆ@Āb¼WôÈ@V¼ôóŤKÈÑU»wVǫżnWÒÈx¼lŦ£ĊōŤx²¯@ÆU¯çÆ@¤°£é°k°lůÈó@¯ŤÇÈĉkkÿó¥ÝXķÑÜ@ÒóŚÝ¯°ĉówÇ±¦ÅJUÒĉĀķw¯°mĖ¯±akxÝÅn»lÑK@¯lU¯UVÑ¯óĊ¯mōğVǓƅÞWÝÈÛ@ƿô¯ÜġzÅþ¯ólmôʇġĊÅUͿřŏȁˋŁóÇˡōƧÇbw°Ķôk¦ÒnUþġÒÔkǔķèó@²@ŘōńĵyzġaÝ¤ÅI¤Ƀť¦ğÑ¯¤ķbó¯ó±U²°¤ČÜVnÈÆŚŎ°ôĢþÆzèVĀÇĀÇXŹÑ¯¤ówċķk¦łUÒġzÇ@ÆÝx@²Þ@Æ¤Uô¦U°xU",
              ],
              encodeOffsets: [[94737, 30809]],
            },
          },
          {
            type: "Feature",
            id: "5421",
            properties: {
              name: "昌都地区",
              cp: [97.0203, 30.7068],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@VĖm°ĉÈU°ķÜ¯@@ôUÒġkÆkÈlÒ@Èl°ÈVÆóŦÆ¼aÅĢɄwnōw@¥Ŏ¦°ŹÞmV°wnÿwwÝw@¯mÞŗ°wĠĸkÞğlĔ²¦°@ĕĸwVóal@nĢÇĊn°@¦źUXçǔůĸVÆKÈÝĠ²ÅĔô@lÈ_mzǖlaU¼ôwV°¯¦ĬÈal@ČÇ¼nIxô»ɜ@ƨ¥ɆŁŃǪȁkƛƨȍʊȡóĭ@ÈÇVůÞĸƅmēƨťÅÈʉVǵ°ġVŭÅɧ°ÿnɛ£mķ²ŃóÑUĉ°mÇ»¯@mxUĀ¯èţ°ȁÝçġU¯ÆÇţÈ@°ÇôŰ¯k¯lê¯¤£Å@èV°Å@±°ţwĉŎť¤k»ÇwXÑŻmUǬxV¼ÇÒţLóôU»Ç@Xó»a@ÿÅUÑÝ°ķK¯ĢğÒVĸJÇĬ¼môţŎĊŎU¼ÆĖnÞÇÆówŹ¦ġkÝóa¦ţ@Ý¤n¦ÇbÇþ¯nXÒɳÒÅ»¯xVmbb¯Ý°UWéÛaxʉÛm¯ÝIUÇKk°VƧīķU°ȭĀ@ċ°nm¤Ýnô¼ƒÞ»ĊʊmlÔĵǠÆôVÒÞbl¤ÈIĸþlw»Ķa¯ī@ÑÇ°anƾ°",
              ],
              encodeOffsets: [[97302, 31917]],
            },
          },
          {
            type: "Feature",
            id: "5422",
            properties: {
              name: "山南地区",
              cp: [92.2083, 28.3392],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°ÞUĖ°¦²ĊôÇÜLǖĀɜȘŰÞLĸźêÞ@UÜUŤ°ɞ¯Ü°WŦĀmŎ¦ĢyVÑŁl¥Čĸôx°£źÒWÈÿÈUÿçÅyýóġō¯řÅmÇÛUċ¯£V±²°ôôĸa°£ĠÒŦ¥Ʉ£ÆJÞ£ĢbyĶzŎŃ@ŗ±ô@ĸçlǓÓĢÑVýmÑl¥ĵó¯̻̥ƛǫÝһÇƧĉyţ¼ҍēVĶĉŎ°ĸmÞVÝĸÒÛaċóŹĖèÈÈl¼k¤ÝX@`Þŏ¼Æō¼ÇçĉKUÝÝ£ğ¤@¦ġl¯Òġĉ¯ómóxÝÞğVƴċK@b@ÜUÒ¯ÈĢÜ@²xŎl¤",
              ],
              encodeOffsets: [[92363, 29672]],
            },
          },
          {
            type: "Feature",
            id: "5401",
            properties: { name: "拉萨市", cp: [91.1865, 30.1465], childNum: 8 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ŏ²l@°XĢƐlôŤLX¦°¤ĊnČ¼ÇĊŎͪÞÈÜxU°ÝÞÞ¼¼lČÞKǓ°óU¯Ģ±ǔÔV±ŤóX¯ÇmÑwXī°@°ĕĸÞKÆĖĢÇ°bȂÇŁUV¯wVó¥VÅ£Ý@@±ÞwÅÈ@¥nōťÿ¯XÛɝ°ţ¯ÛVVÝ@ŹéķÝKȗůɛǕÿÛKóÈǫǫUţèmÒn¯Æ°ÈU°b¼UĢV°°V",
              ],
              encodeOffsets: [[92059, 30696]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/yun_nan_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "5308",
            properties: {
              name: "普洱市",
              cp: [100.7446, 23.4229],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Uô²a@²²Ķ¥V°Ķ²bl¤kVxl@°Ś²@y@ô¦¯@xxVxUVbVÜm¼ŎĢmºXXWÆ@ĀmmXU°ÅÒm¼Þx°w@°XêĠ°»nV°Ul@k@V±ôī@£ČŃÆ£KÞý@¥k@ya@nWVUVwm£Jknm@wmknXX¥mUUlUnb¯°nkVInlIUw°nmk@@mlanXlanmk@wVWUw_@éĠanmUaÜ£mX¥¯@@óUmÝ¯¯ÞÝlKnxô£»»ĠJ°aVUÝÿV¥ÛbI@wmón¯yÛL@WkÅmÈ`IWa¯K@¯mUnmaXmbmak¯ĢÒÝm¯mV¯KÇb¯KÛWWX@aVknċLUWVkXóW@ka@ób¯Uwmb¥UUlaU¥U£maķKXkmÝ@kwmÑ¯k±ċbUUVakaġ¦kL@`a¯xmÅLUW@ċnÅUV°LkL@b°°@¤²nôôkl°kèÒÈzV¤ÈWôônV@¦@¼Ux",
              ],
              encodeOffsets: [[101903, 23637]],
            },
          },
          {
            type: "Feature",
            id: "5325",
            properties: {
              name: "红河哈尼族彝族自治州",
              cp: [103.0408, 23.6041],
              childNum: 13,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@°°nÞôV@°@¦WnÛ¤Vbmnğb@ê`VxUX@xÆÞUnnWÞĸĢÈ@Çè@zÛÜWÅêl²KnV¯ĖĊx@bk@@°JÆ£Èblnnm°nlUkVUUwVmKnnVÞxVLX¥laX@@xl@VzÈVmk@b°ÈĸmV¦`WXbUbbX¼°x@aVVkn@lþnXUlVxŤÅyIUkaIŎĊ@lXx@bz@ô¥_V@ln@ôy@al_l`nmÈ»@kmXwWKU¯»aÅ@wmUÝKUaUUwW@w²»@kÆV£mm£VKkÑV@@»nw¥@kÆnllIVlnLVakalknJWmnaUaVÑVVÞn¥m@¯Uÿl@VçaXaV¯UyVLVk@nJlXLlkxlbla²Òl@nVJVkxKlkUaVķÝÑU@Åm¯@±Uó°ğńķĠmUÑ@Ç¯¯Å¼@nml@°¯¯`@w£@¯Çk@»nmċ¯U»I¯LÇĶÛn@bó°Uwm¯UmÇ¯aI@ykIVU¯bIğ¼¼ó¤mwkLÝÞ",
              ],
              encodeOffsets: [[104243, 23429]],
            },
          },
          {
            type: "Feature",
            id: "5326",
            properties: {
              name: "文山壮族苗族自治州",
              cp: [104.8865, 23.5712],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@wô@²¯maUmôUÆx@XbÞInlVUVwJVaUK°¥xmÞXnlKlnna°@ĊČÆwUmnkl@°£nyn@VV@Vak@@kÞÝbmx°Vnw°klÞInĖÞVlKl@Xa°KlVU@JnxU@ÈĢbUKlm@ak_wanWUk°l»k@Wk@lwU_@UalóU¥ÇnkJW@mVXx±bK@nV±a@Åa£ÝK²WknamKknÇk¯aVV¯ĀUÒ¥I@mm¯¯xÅW@@`k@ó»UU¯lm£ÅWlĵw@mmwÅmWU@y±UxmwU¯U¥Ý¥¯£m@kÇVUV°VbklLwUlUImk@±ÑkbkalwkWKkmI@UlUKVzU°WbbUè@kVĀ°@nm¦ÝUUUÒVbmbXnmIkllbUbmKUkkJmkÅ@l¦mx@¼U@lÒULn¤nU¤Å@l±¼@xXxVVVbÞLVn@xÆb°¼V",
              ],
              encodeOffsets: [[106504, 25037]],
            },
          },
          {
            type: "Feature",
            id: "5303",
            properties: {
              name: "曲靖市",
              cp: [103.9417, 25.7025],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@È¦lKÞĕUV¯Um¯ÇVUnVVUĉnĊÇƾLn°°ÈJÆw@lbÞa¦VXJ°¯W¯aÞJVkUa@lKnÅmWUk¯a¯»@m±@ÑkkbWWX_WÓU»_lkÑm@U»m@l@IWċn¯l@VanVUVUVwVxKÈVmUē@n@VÝÆLwVVwnVlmkUVÑÇ°ka@kÿÝaÞUl£ċĕX±±ĉa@UnVnalónk@wlUVmkÝJaW@ÅwóVVnnb±°@óxXLWxn@lÇ¼nmk_k`@bózm@kU@`¦ó@nW@ÜÅXWw@yb¦@ÒlnUb@xlÜk@²Ç@U¯bmy@kV@bb¦U`lLVx@bLl¼Þ¤@°VVÞU@WÞUbJ@nn@lnnmxUUUbK@ÇwklkUVWakn@lbU@@ULVxkKUn°¯Ò@¼km¦m@klȰ@lUl¦@Vl°wnnþĊUÆbUxbVĖU°annaVal@@b",
              ],
              encodeOffsets: [[106099, 27653]],
            },
          },
          {
            type: "Feature",
            id: "5323",
            properties: {
              name: "楚雄彝族自治州",
              cp: [101.6016, 25.3619],
              childNum: 10,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@mÒXU`Wn@Xl±¦Uxnbl°knmKUxxVôUx°¼ôÒÈ°JlnÞKĠW°¦Vx²JVw_°¥@UV@@wnymknK¯I@²b°£V¥wUV¤nLkÆJÈwôô°l»Č¯ġVUU@@°ÝXl@U»°Å@U¯@w±¯VmUUlm@mÑnIVyUwmak£Vwm±@Çw@n@UxkwlÇnLmkÅ@±kka@kóJV¯Ç»U£lw¯Xalbl¥¯UX@aUaÈL@ÇVIVkaU¯mmakLWkUJ¯Umxn@kUx¯xmWÅīÝkkbŤbkxWmXwWk¯wKkLÅ¤ċń@¤óĬU²@@lk¯VmU¯¼@xV@k°l°kbU°nmVnU@°UVèÞÆbUÒÞnU¦V¼lô@Vl",
              ],
              encodeOffsets: [[103433, 26196]],
            },
          },
          {
            type: "Feature",
            id: "5329",
            properties: {
              name: "大理白族自治州",
              cp: [99.9536, 25.6805],
              childNum: 12,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lbKVIUa@²m@bxôÒÜxXLmbnl@K°¼kUôxôlV¦nJUÆnm@xÆwbXÆôôLUVwôK@wlmaVw@WknmIUmlnJla@_@kÝmKUaÑm¯Xw°aUaVl»²JVbÆJkôĶĀ²VVkmbVwUówVwnLlmk¯maVw²¥Wk@XmV_WnÑUk@kó»UV¥ÝmVÑÅaÝUçV@¯VUmn¯mVlak¯l¯U@@wğWé¯@¯xÝw¯¯Jċa¯U¥mLU¤bÞȤbÇLWUwmIUVW¼kb`UVb¯L±ĊÛkÿÝKkwKţêUĉþÈV¯ÞVbU°KVk²ÝmImV@kmUkVxm¯KXÈķJU¦V°ULWxL@môb@bkx±LnVUVLnkÜWnwlLÅƒmW@kkJU_VWĊÞ",
              ],
              encodeOffsets: [[101408, 26770]],
            },
          },
          {
            type: "Feature",
            id: "5309",
            properties: { name: "临沧市", cp: [99.613, 24.0546], childNum: 8 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@xĢl`²X°Vx@x°Þ°KXağUÑWbnIl`X²°bxl°V@xVxk¦mbl@xXVÆzX¤Æk°kx@lźêlaX»VUnJVxXÈKaÝȣaV£nKV¦°Čb°I°n»ÆÑV¯nWn@ÿXÅWWn¹ġōn»ÛUaUVUww@w°ó¥@z±@ř¯@kUwlk£±aĵ¯Uĵ¦±±@bó±VÝ@ó¤w¯I@mÅóm±X¯IólK@°UllbzkKlln@@ÔºUmVk²ôÒxŎUVóLbmÈnmbnlax@z@Æ¦k",
              ],
              encodeOffsets: [[101251, 24734]],
            },
          },
          {
            type: "Feature",
            id: "5334",
            properties: {
              name: "迪庆藏族自治州",
              cp: [99.4592, 27.9327],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WXw@akk@yk°īX¥Uóķ¯w@n»UaVaUÛ¯mV¼kÞċô@n¯xÛÒmV¯Ô@x@kwmÅa@UaÝ¯VÅyVa@ÿn»ÝVmankmmÞÅô@n£±ğzÇmU¦VmnÜmbn@°nV@xmzÅ@mºV¦k°ln¤¼õôn@xkÆIUxU@Ť¦VmVkmkXW¤XzVx@Æx¼Þ¯b@lVĸÞVm¼Xm¦VÞ@Æ¹Vón¥ÆKnKX¯x@èĊÈ±łXaÆxnlV@UÛlȻkğV¥m²ǉmÅÞĕƒƛm°ÆmX¤mznÆV¦ÞVVb°bnÞWbn°l@VÈ@VĵĊ±@óInxÆw¥@£ÞW¯ĸ£UUKk±akkkbmWmÈķaÆÇUÈÆW@wmknmU¯",
              ],
              encodeOffsets: [[102702, 28401]],
            },
          },
          {
            type: "Feature",
            id: "5306",
            properties: {
              name: "昭通市",
              cp: [104.0955, 27.6031],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@mnK@wmUÅ¥móXǓŏmX@VmL@xţnk@mlUŻÒğŋ@L@mmLkm@bXÅW¼ka¯lÇŹ¯aÇ»ÝÝ_@m@@a@UklwUm@ak@bUmbmbV¯ĕUaVwÅaĉVmým¯xUk@k¥VUX¤VÈm`@ńÇÜ@ĀknĔkƞÆĠÞUVôƆÞI@UxÆ¦nl@ĊĊnxUÒ°¦Vb¯WUnWIml@xnUbô¤¼ÈxlI»KV@ÈÔJkUĖ±ÆVb@nVÜVUVLwĠlknĠ@nx°¥Æ²mUw@mmÅUl¯UÑÑUmLllIl±@VkwW@w°@U»kUóI°»ĢÑL`nUĠ²lmbôV@nJUxÆ¦X¦l@ŎUV@lVKVÅV£UaÞUnW@¯VU@ó",
              ],
              encodeOffsets: [[107787, 28244]],
            },
          },
          {
            type: "Feature",
            id: "5301",
            properties: {
              name: "昆明市",
              cp: [102.9199, 25.4663],
              childNum: 11,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@n@VkVUn²°@x°V@¯ÆV¼k@WÞ¯@@VVUĢċ°k¼VĊx¤Ōx°mVkÑÈL°x°X°VmĊLVxUĖ°bX¦VW@kȯlkn@¥ln@»°Ñ¯VmlLUwVK@V@ka@lmXbUlVlkÈx@LVaVVwnmm@km@mIVaÝ@XVUÝ¯U@Ý£k»K@aUwkKV_¥a@alU@nz°aVÈ@@±lÛk@wVakm@Ñ¥az@XxÆW@ÛX@m@y@aWw@kōĉJlbVJzţÆUwVkmWkým@UlU@b¯wVºUVUêĠXUaUbVĊUWXUmkKWnUUUVVVÝ@kk±¯Lk±WkXlVkl@wXbmLVUIVmk@Ubma@kkaVKUkmlXLWnJ¯ÒĊ°@zkºlLUŤn@@nô@lÆnmKkÈlxVw@@mÈx@n²Uxl¤nbVxUzmJÒn",
              ],
              encodeOffsets: [[104828, 25999]],
            },
          },
          {
            type: "Feature",
            id: "5307",
            properties: { name: "丽江市", cp: [100.448, 26.955], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l@@w°ÓUnÜÑ°w@mČóÝlU»n°VÜUbVbm¼@°xôĸVW¦¯Ĭl@zll@bWxXaX@ÆĠÆaXwl@XaÆ¦n¼Jn@mnKW¯È»V¯°akVanXVwl@VyUĕVUbÈīlaUk°k¯l²VUkƛô@I@mVwĊaVakaÆbUVLaXIWKUwaWÑÅKUaVk°@Uw¯¥XğÝLkm¯IÇóÑ¯»anUl±UĵÿlóÅIaU±Ik¼UVb¯bWxn°ÒVbnLlÞ@@`kbmIkVnJmnXl@Uxbkn@xóLUxVKóóÅWaÅxw@nÅmVôXLlVU¤b¦m¼@ĀbUzUÆ°ÞVb@Æbnx",
              ],
              encodeOffsets: [[101937, 28227]],
            },
          },
          {
            type: "Feature",
            id: "5328",
            properties: {
              name: "西双版纳傣族自治州",
              cp: [100.8984, 21.8628],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l²°nÒlxÞ@nWlLĸnbV¤V¦kbVV¦nax°Vôa@b@lôXlWUVXČKlmU@bWXXÜ°LÈa°LnU°ÞnÑġ°lnba¯¯KWó@kmK@UĉV@k°VV¹a@y_ċl_nÓlL@anI@óWl£VUlkĕlKVwU@kVam¯ÅL@bÝk@VnUbÇbÝwÅ@ċ¥¯lk¼ÅÒ°b@¦nlUn@ÇVmÆbWôU@ÝÅōm¯aUmkWWw@±n¯UèaL¯mLkwl@°mnÈÒ¯ów@VxĀU¤°Į°Xl",
              ],
              encodeOffsets: [[102376, 22579]],
            },
          },
          {
            type: "Feature",
            id: "5305",
            properties: { name: "保山市", cp: [99.0637, 24.9884], childNum: 5 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@X°Il@¦È¼m¼ÞaÞÅlÈxV¼lVôÈÆlLÞ£ÈºlkUUw¯UĕVwĊ@n¦mlnVĸIWÇ°LnUwlVn@lnUnJÞl±U¯LVUa°ÝUÇĊýVŤéLlxÞLĀÜl²ĉ°KUaV_Źé@klw¯lÅW£ÅyUW@wknal¥Uw@wUk¯w¯aW±k_mJaXVÒĠWb¯L¯Ý@wwU¯±Wk_ġwwōKmb@¤bk°lĖôUJVnÅlťU¯°VbnbWxXmÞWUĀLyWzÛKmbUxVKknÝkVĀċ¤Ux@¯m@¦",
              ],
              encodeOffsets: [[100440, 25943]],
            },
          },
          {
            type: "Feature",
            id: "5304",
            properties: {
              name: "玉溪市",
              cp: [101.9312, 23.8898],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lL°xXlWxXnlwaţlaÞlÆĬnX°wVwl@mnw°VVIXllKbnnV°lbUUJ@ÈÇKVb@bW°Vk¦kaWb°kxV¤È¼U°ôI@llbl²@@ó@mm@VţkKl¹@yĉ¯°ÑIXmWKnklVULlb@lnbVal@UnVJUnKWax@lkkUlW²XlK°l²@lÞUUUVVVXmlLVnXWVUĉVaVbWğVéUVU¹W»aVaaWX_U¥nÇķ¯@alUnÇUyk@@wW@kbW¦UKÝwUmmLUnVxUVVlk¯mmnmkÇaÅ¤¯I@l@@aĉw°ĕmUL±kÆéXÜÛ@yÈç@ÇġÝķXmmÝVÅlmnkbmWkb@nl@nm¯VxkJmUJml¯°makVVnV¦WWmnl@xmnlI¤nxUVUmX@b@zl@¦Ýþ",
              ],
              encodeOffsets: [[103703, 24874]],
            },
          },
          {
            type: "Feature",
            id: "5333",
            properties: {
              name: "怒江傈僳族自治州",
              cp: [99.1516, 26.5594],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@WyX£lWlnnUU¥@ţVVwJlÅ@wmöó»£kml¯U¥n¹Æ@ny@wmU@¯mnamÛnUV¥ÈnĠy²m¤@ÆónÝnmlnbÞU¥aV£kUKWómIU¥ókwVól»¯Lk@mnaWKÛwóÑw@a±n@VbUJLkaÝXĉUV`lI@lnXÆƑkKmxÛXmlUKVmU²Klw@aaó@nKXwVKU¯V¥mUnkm¥ĉ@UxVĖ°VxVklmÞkKWĀkVWnl°Lnm@°UxlV@nk¦JVÈ°VÒ@nX°@ÆlUômlnô²nxmłnVV¯x@Èm°XblVUl°@xkXU¤WXXWXÆmkÅJmÞw±bxUīkKmÅVUĖÝèVkx@lXlnk¤LkĖk¦xUL°¯Ė@LnK@b°xVI¥Ua°Ñ@»nm@¹KŎÞÈWln²n",
              ],
              encodeOffsets: [[101071, 28891]],
            },
          },
          {
            type: "Feature",
            id: "5331",
            properties: {
              name: "德宏傣族景颇族自治州",
              cp: [98.1299, 24.5874],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@¥n@°@VwČ£ÿUlÞlmULVwnaÜLXyzKVÿXÝnWXwmaUa°¯VŦÆkUmVIókĕl¯a@£nama@¯m¯ó@óyţbġkÅm±ÛammVkLwU`Wk@VkUmÅlUUKmbkkUVUw¦ó°¼bn°ô¦lºz@x¯@U°nU¤ţU°VƆ@ÈmlnzÞl°¦ÆaxUxLkxWƒn@²ŰW@°ÈXl°Llx",
              ],
              encodeOffsets: [[100440, 25943]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n("echarts/util/mapData/geoJson/zhe_jiang_geo", [], function () {
      return {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            id: "3311",
            properties: {
              name: "丽水市",
              cp: [119.5642, 28.1854],
              childNum: 9,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@VbVl@XnUXKV@¦nxlUXVnKVmnLUV@bn¤lLXK²`nnlJXIVJIVnn°KnnVll@VLXWV@UkVaVKzV@VVaUK@U»VUl@@WnUU@wVLn@Vwl@XW°LVbn@VU@Xl`@XnKVbkl@XVJlUnlVxlL@lnXl@VUnV°°@aUVLXblWVXn@VVUV@L¤VLVUVbnalLUUVX_laVaWVzXKV@@a@KUmImmXama@kU@yVIUKaVa@kXK@aWU@VIUmW@kkVmU@VwUa@K@k@U`@kUKVk@UV@VaUm²Vy@klUUWUkVmUa@_KVaXaXmU@mUlWkaUX@mmkL@wJnVVÅbWKXa@@I@aJUUÇ@VULW@akLmb@K@aXXw@mVmUVkUy@£@aU@@VkUWm@kUKXUWU_mW@wkkmJUUkLWWUXW@IkJ@k@mW_kÓ_UlLm@I@aUa¯m@ka¯LUJ@mVVxUba@LUKkXbm@Uak@@a@Um`IUbUJ@nUVW@@LnVV@lUbVlUX@`@blXklWUmXlm¦U@@V¯bml@@nUb@llnn@VbX@lV@UVULmU@JVnbVbkbVWxU@@nUVk@",
              ],
              encodeOffsets: [[121546, 28992]],
            },
          },
          {
            type: "Feature",
            id: "3301",
            properties: {
              name: "杭州市",
              cp: [119.5313, 29.8773],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@X@l°KXXlWb@²`bIX`l@@bWl@n@VnLUV@V@°¦@l@XVlU@@xVbUb@Vkb@@XVJVzJ@LÞ@VmLUxUJ@LUVxbxXUl@VaÈwbaÞa@Vl@XUVx@V@VLlbnVal@lbVnnLnKnL@VlbVJXalIb@KUU@mVInJUVl@xUVLnU@UÞaV@lkV@UanKL@UlKVUnbÆmn@@nUlVnVJl@@UXUL@WVIVJVxVLXV@IÜKnbn@V¥V@@I@y°b@UUwnk°ÆƨVlUçXm£aÇIkV@WV@@aWIUWUIkb@WW@UnK@UU@kaWVkVIVVnU@UWVUV@VmVkKkWIkVWaULU`UImJUImmU@wmwUVIUWVkUamaU@mVkb@KVU@aVU@anKULVJU@kÛUJUVkkVakU@aVwkW@UWkXmWaULUaUK@XJUUmVU@UVUkJ@ImwmKU@k@lUW@@akKmkamIkWl_UwVm@UkaVUUa@UamakbWlkL@aUalU@mkL@U@UlmK@XkKm@Ýakb@xnXb`nUUU@U@wU@@mKkkV¯U@lULUbVbUb@Va@LºÝb@bLmKx@VUL@bk@mxULWl",
              ],
              encodeOffsets: [[121185, 30184]],
            },
          },
          {
            type: "Feature",
            id: "3303",
            properties: { name: "温州市", cp: [120.498, 27.8119], childNum: 9 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@ll@xnXV`VXWVL@lXnlV@UV@@b@¤VzUlnVU@nWxW@b@LnalK@bXVKUÈ@VVI@b@J@WbXLÆaUUmI@xlKnn@VWlbkXV@nVWnWbUbL@`VbUnVlVXkV@lUz±VnUbU@@VUlVL@l_@V@l@LVbV@XLV`VÈlxn@lU@aaVVk@XJ@nl@@LU`°LVbL°a@aUVy@anI@aanV@²wÜJX@VVV°kna@WVkaWwU@m@kaUĕÝÝŤnÈaaóI»@±XWkUķ@kV±kwUkWwUÝ»ÛkɳlImaUaWóXÿǬkUnWVmmkKţnŏÞğlUlUx@XWbV@JkX°mb@VULVxUVk@@LWWk@WIkUkJmUkVmI@y@UakLmU@mUUUkaVk@mK@UlUU@UmKmbUUUJ@n@KVLUL@VkJWXX`mnULWlkL@JVLVb@°kxkU@LVV@VLV`UL@VUX",
              ],
              encodeOffsets: [[122502, 28334]],
            },
          },
          {
            type: "Feature",
            id: "3302",
            properties: {
              name: "宁波市",
              cp: [121.5967, 29.6466],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@Ċ¦ĸĀ°nXÞVKkƨƑźÿ°»n@wô¥ÜbU°ÆXÞWóçĉÝ±IUÈ¥@U°wÆ»²mm_@aXVKÞVlk@akk̅@£X»VwÆXWa¯aȗbKƽŰĊxLók@@¯nKUL@xkLÑkWULUUmJUXVU@mUX¯@V`mbXbV@@nn¤WXx@kJ@nVVUVl²UbÝVUVk@Wx@V@VXzmlaL@VlLU`XUVVVUnl@VbnJlnUVVnlUKkbmnnVxlJnxmbU@UL@KUVX@xmb@lk@mnVVUè",
              ],
              encodeOffsets: [[123784, 30977]],
            },
          },
          {
            type: "Feature",
            id: "3309",
            properties: {
              name: "舟山市",
              cp: [122.2559, 30.2234],
              childNum: 3,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@l΢ƒʠþÆVĢLĊǬXĊÜXôVÑÆwlƏÈóVĭVǓ@ĉwɛkmK@ĉXīWaĉUĵÝm¯ĉwĉ±±nÅ¼¯x@VÇ¦V²JĊÞôèÝXÅW¯VÛaó¦@xm¯¼ŹĀ",
              ],
              encodeOffsets: [[124437, 30983]],
            },
          },
          {
            type: "Feature",
            id: "3310",
            properties: {
              name: "台州市",
              cp: [121.1353, 28.6688],
              childNum: 7,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@lVIVWVz@bXJl@Xal@°nLll@nVxnVK@UJVb¦°k`UIWJXnÆ@bUJXl@lbWn@UzVV@bVVmVnnJVXnabKUKnUVVUnVLlKVLXaJm£@mU@WanaU_°@VWnV@UVWnIVVVKlXÒlK@wVKL°m@l@ôKwĉƾůUl£@»UVkm@ƅUaÛIŏmUk@mw@a£Wk@ţIm±@ankôUlaUUw¯ōabÇbţmÞÞVĖbl@@nVXxbUl@Xmb¯lUUUW@ÛI±xU@mb@bmJ@bUzV@b¯bKUa¯KV_@Kk@@mWI@lUUb@bkVm@kwUÇU_WKU@Ux@VUnllX@VnJ@UXV@bWL@lUbbVLUJ@zV@lnbWbnnnJV@L",
              ],
              encodeOffsets: [[123312, 29526]],
            },
          },
          {
            type: "Feature",
            id: "3307",
            properties: {
              name: "金华市",
              cp: [120.0037, 29.1028],
              childNum: 8,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@nbVb@VbUVlb@VUnVxk`lXnJlbnlL@bX@V@klV@nLnx@JlIVU@VUVnVVI@WVLVbVKXbWnXl@VlXUxb@lVUbllVUIÜVnalKX@@bV@@aUUlUwUw@naWWUVaUUaVbLlxXJVk°UlkU¥@ka@LVlXLVlVWznVn@lxJl_@WX_@mVaa@alU@kVVnaKVLlKb@UUaVabnUWmXU@k@yVI@aÅWmXIVJl_¯¥UaVI@LmUUw@mkkmK¯k@Wbk@WI@aUyUXJkU@bU@WLUyXUbkbW`UVVkKmbUaVUUK£@KVUUUm@UWkXWaUKV@b¯¯mUV@UkmW@kkKwUmkkVUI@WlkUamL@Wk_W@UVm@Ua¯KWXk@Uxm@UK@xVmV@Xk@UVV¼@VLUbUU@yULUbVlU@@XlVUVVbU@lXXVW@XUVl@@VUVÈn@VVU@lVa@UmL@`X@`WL@VUX@lUL@xlx",
              ],
              encodeOffsets: [[122119, 29948]],
            },
          },
          {
            type: "Feature",
            id: "3308",
            properties: {
              name: "衢州市",
              cp: [118.6853, 28.8666],
              childNum: 5,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@XkVKnwl@@aVK@UwnLK@aÞa¹@Kb@UVaUaVaVK@k°VUllnL@V@xV@V@VVm_Wam@wlaÞbn@lL@WnLk@V@VlK@nkVVb@blKXklakw@wVK@kVW@UXK@_W@_nKV@Ub@kVUUm@ÇVU@Uk@VU@WUXWW@kVUaVUkU@WWXUKk@Ukmm¯LmmUJUIWJkImm_±WLkKm£@aVUmKUnLmWUkVmw@¥ULVWm@WUka@UmmLmm@@bUX@@WUIm@UVUK@UVUUUVVJmb@bXnmV¼nnn¦mJUVLV@VW@UzUlVnUbl`UnVl@XU@kl@bmÈUxVk@@J@¼W@ÅaVVnzmV@WJk@kWJ@lXbWbXxmVnlLXb@°lKVXnWbWVXmbV@XlbI@Kn@@x@VLlm",
              ],
              encodeOffsets: [[121185, 30184]],
            },
          },
          {
            type: "Feature",
            id: "3306",
            properties: { name: "绍兴市", cp: [120.564, 29.7565], childNum: 6 },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@x@VnnVJnIVJV_VKXblUXJllLUUnU@UVVX@mVUUUJlXUlbV@@VLVmX@@XlaVJVXXJ@b@XU@lUJÈb¤ŌJçVUUnml@@kna@wWVU@LVKV@namwkIUwmnmlaVLkUmVUkmmIUak@VmUUVUWV_kK@UKbnkWyU@@UXwl@VUÞUVak±VUUU@mlI@wXWIWbUKkLUKVmUUmVVLLambUWmIUmnUU@aUUVym@Xkak@W@z@lWVXnmVaUbVb@VakLUKLmbUU@lkV@bbUb@nW`@Xk`Ikwm@mUXyUUkWKUk@Kb@lV¦klV¯UlWIkwKUabVVUbVXXmb@VxxkVVV@bU@@aW@kLmb@lVUIVKmL@bUV@bUV@LalnUV@nbVbUlVXJVUnx",
              ],
              encodeOffsets: [[122997, 30561]],
            },
          },
          {
            type: "Feature",
            id: "3304",
            properties: {
              name: "嘉兴市",
              cp: [120.9155, 30.6354],
              childNum: 6,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@@blIX@@VÜVUnn@lklKnI°Þl`²LVKVbnbVaVLUVn@W¦@VkVVb@VI`@blLnLaX@VVb@U@XlVa@@kVaUKV»U_lWXU@albk@VllnLVKn@@UVIUw@y°IVVXU@VV@lwm@wVkƾaJLkΡƧƒlLÝUmW¯ķÿĉ¥IŋWnèkVƧU¯ÅmlVx@V¯az@@JU@U¦m@@nVmn@VLV",
              ],
              encodeOffsets: [[123233, 31382]],
            },
          },
          {
            type: "Feature",
            id: "3305",
            properties: {
              name: "湖州市",
              cp: [119.8608, 30.7782],
              childNum: 4,
            },
            geometry: {
              type: "Polygon",
              coordinates: [
                "@@kLlkm@VmÛU@UW@kJ@aUK@UnmmU@maÛL@JWUUKUwUIUJ@XKWV@Vk@UIUmVk@mm@ÅnmaUVkL@VKmLVbU@klU@ÝbV@mVUKV@wUkVmIUJ@nVV@LakJWbUIka@UmKmLKmmUUVk@@nmLX`WXUV@@nUlkmlU@UbxVVIlVnn@@nUÒ@°n@@xmb@VbnV@@b@`@L@L@x@blVklVbnnV@aXb°VlU@Wb°ULXWVUVVwÈwÜ»ĸaĠnUVw²X@V@lVU@wlaUUVm@knUV",
              ],
              encodeOffsets: [[123379, 31500]],
            },
          },
        ],
        UTF8Encoding: !0,
      };
    }),
    n(
      "echarts/chart/gauge",
      [
        "require",
        "./base",
        "../util/shape/GaugePointer",
        "zrender/shape/Text",
        "zrender/shape/Line",
        "zrender/shape/Rectangle",
        "zrender/shape/Circle",
        "zrender/shape/Sector",
        "../config",
        "../util/ecData",
        "../util/accMath",
        "zrender/tool/util",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("../util/shape/GaugePointer"),
          a = e("zrender/shape/Text"),
          o = e("zrender/shape/Line"),
          s = e("zrender/shape/Rectangle"),
          r = e("zrender/shape/Circle"),
          l = e("zrender/shape/Sector"),
          h = e("../config");
        h.gauge = {
          zlevel: 0,
          z: 2,
          center: ["50%", "50%"],
          clickable: !0,
          legendHoverLink: !0,
          radius: "80%",
          startAngle: 225,
          endAngle: -45,
          min: 0,
          max: 100,
          precision: 0,
          splitNumber: 10,
          axisLine: {
            show: !0,
            lineStyle: {
              color: [
                [0.2, "#228b22"],
                [0.8, "#48b"],
                [1, "#ff4500"],
              ],
              width: 20,
            },
          },
          axisTick: {
            show: !0,
            splitNumber: 5,
            length: 8,
            lineStyle: { color: "#eee", width: 1, type: "solid" },
          },
          axisLabel: { show: !0, textStyle: { color: "auto" } },
          splitLine: {
            show: !0,
            length: 20,
            lineStyle: { color: "#eee", width: 2, type: "solid" },
          },
          pointer: { show: !0, length: "80%", width: 8, color: "auto" },
          title: {
            show: !0,
            offsetCenter: [0, "-35%"],
            textStyle: { color: "#333", fontSize: 15 },
          },
          detail: {
            show: !0,
            backgroundColor: "rgba(0,0,0,0)",
            borderWidth: 0,
            borderColor: "#ccc",
            width: 100,
            height: 40,
            offsetCenter: [0, "50%"],
            textStyle: { color: "auto", fontSize: 30 },
          },
        };
        var V = e("../util/ecData"),
          U = e("../util/accMath"),
          m = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: h.CHART_TYPE_GAUGE,
            _buildShape: function () {
              var e = this.series;
              this._paramsMap = {};
              for (var t = 0, n = e.length; n > t; t++)
                e[t].type === h.CHART_TYPE_GAUGE &&
                  ((e[t] = this.reformOption(e[t])),
                  (this.legendHoverLink =
                    e[t].legendHoverLink || this.legendHoverLink),
                  this._buildSingleGauge(t),
                  this.buildMark(t));
              this.addShapeList();
            },
            _buildSingleGauge: function (e) {
              var t = this.series[e];
              (this._paramsMap[e] = {
                center: this.parseCenter(this.zr, t.center),
                radius: this.parseRadius(this.zr, t.radius),
                startAngle: t.startAngle.toFixed(2) - 0,
                endAngle: t.endAngle.toFixed(2) - 0,
              }),
                (this._paramsMap[e].totalAngle =
                  this._paramsMap[e].startAngle - this._paramsMap[e].endAngle),
                this._colorMap(e),
                this._buildAxisLine(e),
                this._buildSplitLine(e),
                this._buildAxisTick(e),
                this._buildAxisLabel(e),
                this._buildPointer(e),
                this._buildTitle(e),
                this._buildDetail(e);
            },
            _buildAxisLine: function (e) {
              var t = this.series[e];
              if (t.axisLine.show)
                for (
                  var n,
                    i,
                    a = t.min,
                    o = t.max - a,
                    s = this._paramsMap[e],
                    r = s.center,
                    l = s.startAngle,
                    h = s.totalAngle,
                    U = s.colorArray,
                    m = t.axisLine.lineStyle,
                    p = this.parsePercent(m.width, s.radius[1]),
                    d = s.radius[1],
                    c = d - p,
                    u = l,
                    y = 0,
                    b = U.length;
                  b > y;
                  y++
                )
                  (i = l - (h * (U[y][0] - a)) / o),
                    (n = this._getSector(r, c, d, i, u, U[y][1], m)),
                    (u = i),
                    (n._animationAdd = "r"),
                    V.set(n, "seriesIndex", e),
                    V.set(n, "dataIndex", y),
                    this.shapeList.push(n);
            },
            _buildSplitLine: function (e) {
              var t = this.series[e];
              if (t.splitLine.show)
                for (
                  var n,
                    i,
                    a,
                    s = this._paramsMap[e],
                    r = t.splitNumber,
                    l = t.min,
                    h = t.max - l,
                    V = t.splitLine,
                    U = this.parsePercent(V.length, s.radius[1]),
                    m = V.lineStyle,
                    p = m.color,
                    d = s.center,
                    c = (s.startAngle * Math.PI) / 180,
                    u = (s.totalAngle * Math.PI) / 180,
                    y = s.radius[1],
                    b = y - U,
                    g = 0;
                  r >= g;
                  g++
                )
                  (n = c - (u / r) * g),
                    (i = Math.sin(n)),
                    (a = Math.cos(n)),
                    this.shapeList.push(
                      new o({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        hoverable: !1,
                        style: {
                          xStart: d[0] + a * y,
                          yStart: d[1] - i * y,
                          xEnd: d[0] + a * b,
                          yEnd: d[1] - i * b,
                          strokeColor:
                            "auto" === p
                              ? this._getColor(e, l + (h / r) * g)
                              : p,
                          lineType: m.type,
                          lineWidth: m.width,
                          shadowColor: m.shadowColor,
                          shadowBlur: m.shadowBlur,
                          shadowOffsetX: m.shadowOffsetX,
                          shadowOffsetY: m.shadowOffsetY,
                        },
                      })
                    );
            },
            _buildAxisTick: function (e) {
              var t = this.series[e];
              if (t.axisTick.show)
                for (
                  var n,
                    i,
                    a,
                    s = this._paramsMap[e],
                    r = t.splitNumber,
                    l = t.min,
                    h = t.max - l,
                    V = t.axisTick,
                    U = V.splitNumber,
                    m = this.parsePercent(V.length, s.radius[1]),
                    p = V.lineStyle,
                    d = p.color,
                    c = s.center,
                    u = (s.startAngle * Math.PI) / 180,
                    y = (s.totalAngle * Math.PI) / 180,
                    b = s.radius[1],
                    g = b - m,
                    k = 0,
                    f = r * U;
                  f >= k;
                  k++
                )
                  k % U !== 0 &&
                    ((n = u - (y / f) * k),
                    (i = Math.sin(n)),
                    (a = Math.cos(n)),
                    this.shapeList.push(
                      new o({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        hoverable: !1,
                        style: {
                          xStart: c[0] + a * b,
                          yStart: c[1] - i * b,
                          xEnd: c[0] + a * g,
                          yEnd: c[1] - i * g,
                          strokeColor:
                            "auto" === d
                              ? this._getColor(e, l + (h / f) * k)
                              : d,
                          lineType: p.type,
                          lineWidth: p.width,
                          shadowColor: p.shadowColor,
                          shadowBlur: p.shadowBlur,
                          shadowOffsetX: p.shadowOffsetX,
                          shadowOffsetY: p.shadowOffsetY,
                        },
                      })
                    ));
            },
            _buildAxisLabel: function (e) {
              var t = this.series[e];
              if (t.axisLabel.show)
                for (
                  var n,
                    i,
                    o,
                    s,
                    r = t.splitNumber,
                    l = t.min,
                    h = t.max - l,
                    V = t.axisLabel.textStyle,
                    m = this.getFont(V),
                    p = V.color,
                    d = this._paramsMap[e],
                    c = d.center,
                    u = d.startAngle,
                    y = d.totalAngle,
                    b =
                      d.radius[1] -
                      this.parsePercent(t.splitLine.length, d.radius[1]) -
                      5,
                    g = 0;
                  r >= g;
                  g++
                )
                  (s = U.accAdd(l, U.accMul(U.accDiv(h, r), g))),
                    (n = u - (y / r) * g),
                    (i = Math.sin((n * Math.PI) / 180)),
                    (o = Math.cos((n * Math.PI) / 180)),
                    (n = (n + 360) % 360),
                    this.shapeList.push(
                      new a({
                        zlevel: this.getZlevelBase(),
                        z: this.getZBase() + 1,
                        hoverable: !1,
                        style: {
                          x: c[0] + o * b,
                          y: c[1] - i * b,
                          color: "auto" === p ? this._getColor(e, s) : p,
                          text: this._getLabelText(t.axisLabel.formatter, s),
                          textAlign:
                            n >= 110 && 250 >= n
                              ? "left"
                              : 70 >= n || n >= 290
                              ? "right"
                              : "center",
                          textBaseline:
                            n >= 10 && 170 >= n
                              ? "top"
                              : n >= 190 && 350 >= n
                              ? "bottom"
                              : "middle",
                          textFont: m,
                          shadowColor: V.shadowColor,
                          shadowBlur: V.shadowBlur,
                          shadowOffsetX: V.shadowOffsetX,
                          shadowOffsetY: V.shadowOffsetY,
                        },
                      })
                    );
            },
            _buildPointer: function (e) {
              var t = this.series[e];
              if (t.pointer.show) {
                var n = t.max - t.min,
                  a = t.pointer,
                  o = this._paramsMap[e],
                  s = this.parsePercent(a.length, o.radius[1]),
                  l = this.parsePercent(a.width, o.radius[1]),
                  h = o.center,
                  U = this._getValue(e);
                U = U < t.max ? U : t.max;
                var m =
                    ((o.startAngle - (o.totalAngle / n) * (U - t.min)) *
                      Math.PI) /
                    180,
                  p = "auto" === a.color ? this._getColor(e, U) : a.color,
                  d = new i({
                    zlevel: this.getZlevelBase(),
                    z: this.getZBase() + 1,
                    clickable: this.query(t, "clickable"),
                    style: {
                      x: h[0],
                      y: h[1],
                      r: s,
                      startAngle: (o.startAngle * Math.PI) / 180,
                      angle: m,
                      color: p,
                      width: l,
                      shadowColor: a.shadowColor,
                      shadowBlur: a.shadowBlur,
                      shadowOffsetX: a.shadowOffsetX,
                      shadowOffsetY: a.shadowOffsetY,
                    },
                    highlightStyle: {
                      brushType: "fill",
                      width: l > 2 ? 2 : l / 2,
                      color: "#fff",
                    },
                  });
                V.pack(
                  d,
                  this.series[e],
                  e,
                  this.series[e].data[0],
                  0,
                  this.series[e].data[0].name,
                  U
                ),
                  this.shapeList.push(d),
                  this.shapeList.push(
                    new r({
                      zlevel: this.getZlevelBase(),
                      z: this.getZBase() + 2,
                      hoverable: !1,
                      style: {
                        x: h[0],
                        y: h[1],
                        r: a.width / 2.5,
                        color: "#fff",
                      },
                    })
                  );
              }
            },
            _buildTitle: function (e) {
              var t = this.series[e];
              if (t.title.show) {
                var n = t.data[0],
                  i = null != n.name ? n.name : "";
                if ("" !== i) {
                  var o = t.title,
                    s = o.offsetCenter,
                    r = o.textStyle,
                    l = r.color,
                    h = this._paramsMap[e],
                    V = h.center[0] + this.parsePercent(s[0], h.radius[1]),
                    U = h.center[1] + this.parsePercent(s[1], h.radius[1]);
                  this.shapeList.push(
                    new a({
                      zlevel: this.getZlevelBase(),
                      z:
                        this.getZBase() +
                        (Math.abs(V - h.center[0]) + Math.abs(U - h.center[1]) <
                        2 * r.fontSize
                          ? 2
                          : 1),
                      hoverable: !1,
                      style: {
                        x: V,
                        y: U,
                        color: "auto" === l ? this._getColor(e) : l,
                        text: i,
                        textAlign: "center",
                        textFont: this.getFont(r),
                        shadowColor: r.shadowColor,
                        shadowBlur: r.shadowBlur,
                        shadowOffsetX: r.shadowOffsetX,
                        shadowOffsetY: r.shadowOffsetY,
                      },
                    })
                  );
                }
              }
            },
            _buildDetail: function (e) {
              var t = this.series[e];
              if (t.detail.show) {
                var n = t.detail,
                  i = n.offsetCenter,
                  a = n.backgroundColor,
                  o = n.textStyle,
                  r = o.color,
                  l = this._paramsMap[e],
                  h = this._getValue(e),
                  V =
                    l.center[0] -
                    n.width / 2 +
                    this.parsePercent(i[0], l.radius[1]),
                  U = l.center[1] + this.parsePercent(i[1], l.radius[1]);
                this.shapeList.push(
                  new s({
                    zlevel: this.getZlevelBase(),
                    z:
                      this.getZBase() +
                      (Math.abs(V + n.width / 2 - l.center[0]) +
                        Math.abs(U + n.height / 2 - l.center[1]) <
                      o.fontSize
                        ? 2
                        : 1),
                    hoverable: !1,
                    style: {
                      x: V,
                      y: U,
                      width: n.width,
                      height: n.height,
                      brushType: "both",
                      color: "auto" === a ? this._getColor(e, h) : a,
                      lineWidth: n.borderWidth,
                      strokeColor: n.borderColor,
                      shadowColor: n.shadowColor,
                      shadowBlur: n.shadowBlur,
                      shadowOffsetX: n.shadowOffsetX,
                      shadowOffsetY: n.shadowOffsetY,
                      text: this._getLabelText(n.formatter, h),
                      textFont: this.getFont(o),
                      textPosition: "inside",
                      textColor: "auto" === r ? this._getColor(e, h) : r,
                    },
                  })
                );
              }
            },
            _getValue: function (e) {
              return this.getDataFromOption(this.series[e].data[0]);
            },
            _colorMap: function (e) {
              var t = this.series[e],
                n = t.min,
                i = t.max - n,
                a = t.axisLine.lineStyle.color;
              a instanceof Array || (a = [[1, a]]);
              for (var o = [], s = 0, r = a.length; r > s; s++)
                o.push([a[s][0] * i + n, a[s][1]]);
              this._paramsMap[e].colorArray = o;
            },
            _getColor: function (e, t) {
              null == t && (t = this._getValue(e));
              for (
                var n = this._paramsMap[e].colorArray, i = 0, a = n.length;
                a > i;
                i++
              )
                if (n[i][0] >= t) return n[i][1];
              return n[n.length - 1][1];
            },
            _getSector: function (e, t, n, i, a, o, s) {
              return new l({
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                hoverable: !1,
                style: {
                  x: e[0],
                  y: e[1],
                  r0: t,
                  r: n,
                  startAngle: i,
                  endAngle: a,
                  brushType: "fill",
                  color: o,
                  shadowColor: s.shadowColor,
                  shadowBlur: s.shadowBlur,
                  shadowOffsetX: s.shadowOffsetX,
                  shadowOffsetY: s.shadowOffsetY,
                },
              });
            },
            _getLabelText: function (e, t) {
              if (e) {
                if ("function" == typeof e) return e.call(this.myChart, t);
                if ("string" == typeof e) return e.replace("{value}", t);
              }
              return t;
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
          }),
          m.inherits(t, n),
          e("../chart").define("gauge", t),
          t
        );
      }
    ),
    n(
      "echarts/util/shape/GaugePointer",
      ["require", "zrender/shape/Base", "zrender/tool/util", "./normalIsCover"],
      function (e) {
        function t(e) {
          n.call(this, e);
        }
        var n = e("zrender/shape/Base"),
          i = e("zrender/tool/util");
        return (
          (t.prototype = {
            type: "gauge-pointer",
            buildPath: function (e, t) {
              var n = t.r,
                i = t.width,
                a = t.angle,
                o = t.x - Math.cos(a) * i * (i >= n / 3 ? 1 : 2),
                s = t.y + Math.sin(a) * i * (i >= n / 3 ? 1 : 2);
              (a = t.angle - Math.PI / 2),
                e.moveTo(o, s),
                e.lineTo(t.x + Math.cos(a) * i, t.y - Math.sin(a) * i),
                e.lineTo(
                  t.x + Math.cos(t.angle) * n,
                  t.y - Math.sin(t.angle) * n
                ),
                e.lineTo(t.x - Math.cos(a) * i, t.y + Math.sin(a) * i),
                e.lineTo(o, s);
            },
            getRect: function (e) {
              if (e.__rect) return e.__rect;
              var t = 2 * e.width,
                n = e.x,
                i = e.y,
                a = n + Math.cos(e.angle) * e.r,
                o = i - Math.sin(e.angle) * e.r;
              return (
                (e.__rect = {
                  x: Math.min(n, a) - t,
                  y: Math.min(i, o) - t,
                  width: Math.abs(n - a) + t,
                  height: Math.abs(i - o) + t,
                }),
                e.__rect
              );
            },
            isCover: e("./normalIsCover"),
          }),
          i.inherits(t, n),
          t
        );
      }
    ),
    n(
      "echarts/chart/funnel",
      [
        "require",
        "./base",
        "zrender/shape/Text",
        "zrender/shape/Line",
        "zrender/shape/Polygon",
        "../config",
        "../util/ecData",
        "../util/number",
        "zrender/tool/util",
        "zrender/tool/color",
        "zrender/tool/area",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o), this.refresh(a);
        }
        var n = e("./base"),
          i = e("zrender/shape/Text"),
          a = e("zrender/shape/Line"),
          o = e("zrender/shape/Polygon"),
          s = e("../config");
        s.funnel = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          x: 10,
          y: 80,
          x2: 10,
          y2: 60,
          min: 0,
          max: 100,
          minSize: "0%",
          maxSize: "100%",
          sort: "descending",
          gap: 0,
          funnelAlign: "center",
          itemStyle: {
            normal: {
              borderColor: "#fff",
              borderWidth: 1,
              label: { show: !0, position: "outer" },
              labelLine: {
                show: !0,
                length: 10,
                lineStyle: { width: 1, type: "solid" },
              },
            },
            emphasis: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              label: { show: !0 },
              labelLine: { show: !0 },
            },
          },
        };
        var r = e("../util/ecData"),
          l = e("../util/number"),
          h = e("zrender/tool/util"),
          V = e("zrender/tool/color"),
          U = e("zrender/tool/area");
        return (
          (t.prototype = {
            type: s.CHART_TYPE_FUNNEL,
            _buildShape: function () {
              var e = this.series,
                t = this.component.legend;
              (this._paramsMap = {}),
                (this._selected = {}),
                (this.selectedMap = {});
              for (var n, i = 0, a = e.length; a > i; i++)
                if (e[i].type === s.CHART_TYPE_FUNNEL) {
                  if (
                    ((e[i] = this.reformOption(e[i])),
                    (this.legendHoverLink =
                      e[i].legendHoverLink || this.legendHoverLink),
                    (n = e[i].name || ""),
                    (this.selectedMap[n] = t ? t.isSelected(n) : !0),
                    !this.selectedMap[n])
                  )
                    continue;
                  this._buildSingleFunnel(i), this.buildMark(i);
                }
              this.addShapeList();
            },
            _buildSingleFunnel: function (e) {
              var t = this.component.legend,
                n = this.series[e],
                i = this._mapData(e),
                a = this._getLocation(e);
              this._paramsMap[e] = { location: a, data: i };
              for (var o, s = 0, r = [], h = 0, V = i.length; V > h; h++)
                (o = i[h].name),
                  (this.selectedMap[o] = t ? t.isSelected(o) : !0),
                  this.selectedMap[o] &&
                    !isNaN(i[h].value) &&
                    (r.push(i[h]), s++);
              if (0 !== s) {
                for (
                  var U,
                    m,
                    p,
                    d,
                    c = this._buildFunnelCase(e),
                    u = n.funnelAlign,
                    y = n.gap,
                    b = s > 1 ? (a.height - (s - 1) * y) / s : a.height,
                    g = a.y,
                    k =
                      "descending" === n.sort
                        ? this._getItemWidth(e, r[0].value)
                        : l.parsePercent(n.minSize, a.width),
                    f = "descending" === n.sort ? 1 : 0,
                    L = a.centerX,
                    x = [],
                    h = 0,
                    V = r.length;
                  V > h;
                  h++
                )
                  if (
                    ((o = r[h].name), this.selectedMap[o] && !isNaN(r[h].value))
                  ) {
                    switch (
                      ((U =
                        V - 2 >= h
                          ? this._getItemWidth(e, r[h + f].value)
                          : "descending" === n.sort
                          ? l.parsePercent(n.minSize, a.width)
                          : l.parsePercent(n.maxSize, a.width)),
                      u)
                    ) {
                      case "left":
                        m = a.x;
                        break;
                      case "right":
                        m = a.x + a.width - k;
                        break;
                      default:
                        m = L - k / 2;
                    }
                    (p = this._buildItem(
                      e,
                      r[h]._index,
                      t ? t.getColor(o) : this.zr.getColor(r[h]._index),
                      m,
                      g,
                      k,
                      U,
                      b,
                      u
                    )),
                      (g += b + y),
                      (d = p.style.pointList),
                      x.unshift([d[0][0] - 10, d[0][1]]),
                      x.push([d[1][0] + 10, d[1][1]]),
                      0 === h &&
                        (0 === k
                          ? ((d = x.pop()),
                            "center" == u && (x[0][0] += 10),
                            "right" == u && (x[0][0] = d[0]),
                            (x[0][1] -= "center" == u ? 10 : 15),
                            1 == V && (d = p.style.pointList))
                          : ((x[x.length - 1][1] -= 5), (x[0][1] -= 5))),
                      (k = U);
                  }
                c &&
                  (x.unshift([d[3][0] - 10, d[3][1]]),
                  x.push([d[2][0] + 10, d[2][1]]),
                  0 === k
                    ? ((d = x.pop()),
                      "center" == u && (x[0][0] += 10),
                      "right" == u && (x[0][0] = d[0]),
                      (x[0][1] += "center" == u ? 10 : 15))
                    : ((x[x.length - 1][1] += 5), (x[0][1] += 5)),
                  (c.style.pointList = x));
              }
            },
            _buildFunnelCase: function (e) {
              var t = this.series[e];
              if (this.deepQuery([t, this.option], "calculable")) {
                var n = this._paramsMap[e].location,
                  i = 10,
                  a = {
                    hoverable: !1,
                    style: {
                      pointListd: [
                        [n.x - i, n.y - i],
                        [n.x + n.width + i, n.y - i],
                        [n.x + n.width + i, n.y + n.height + i],
                        [n.x - i, n.y + n.height + i],
                      ],
                      brushType: "stroke",
                      lineWidth: 1,
                      strokeColor:
                        t.calculableHolderColor ||
                        this.ecTheme.calculableHolderColor ||
                        s.calculableHolderColor,
                    },
                  };
                return (
                  r.pack(a, t, e, void 0, -1),
                  this.setCalculable(a),
                  (a = new o(a)),
                  this.shapeList.push(a),
                  a
                );
              }
            },
            _getLocation: function (e) {
              var t = this.series[e],
                n = this.zr.getWidth(),
                i = this.zr.getHeight(),
                a = this.parsePercent(t.x, n),
                o = this.parsePercent(t.y, i),
                s =
                  null == t.width
                    ? n - a - this.parsePercent(t.x2, n)
                    : this.parsePercent(t.width, n);
              return {
                x: a,
                y: o,
                width: s,
                height:
                  null == t.height
                    ? i - o - this.parsePercent(t.y2, i)
                    : this.parsePercent(t.height, i),
                centerX: a + s / 2,
              };
            },
            _mapData: function (e) {
              function t(e, t) {
                return "-" === e.value
                  ? 1
                  : "-" === t.value
                  ? -1
                  : t.value - e.value;
              }
              function n(e, n) {
                return -t(e, n);
              }
              for (
                var i = this.series[e],
                  a = h.clone(i.data),
                  o = 0,
                  s = a.length;
                s > o;
                o++
              )
                a[o]._index = o;
              return (
                "none" != i.sort && a.sort("descending" === i.sort ? t : n), a
              );
            },
            _buildItem: function (e, t, n, i, a, o, s, l, h) {
              var V = this.series,
                U = V[e],
                m = U.data[t],
                p = this.getPolygon(e, t, n, i, a, o, s, l, h);
              r.pack(p, V[e], e, V[e].data[t], t, V[e].data[t].name),
                this.shapeList.push(p);
              var d = this.getLabel(e, t, n, i, a, o, s, l, h);
              r.pack(d, V[e], e, V[e].data[t], t, V[e].data[t].name),
                this.shapeList.push(d),
                this._needLabel(U, m, !1) || (d.invisible = !0);
              var c = this.getLabelLine(e, t, n, i, a, o, s, l, h);
              this.shapeList.push(c),
                this._needLabelLine(U, m, !1) || (c.invisible = !0);
              var u = [],
                y = [];
              return (
                this._needLabelLine(U, m, !0) && (u.push(c.id), y.push(c.id)),
                this._needLabel(U, m, !0) && (u.push(d.id), y.push(p.id)),
                (p.hoverConnect = u),
                (d.hoverConnect = y),
                p
              );
            },
            _getItemWidth: function (e, t) {
              var n = this.series[e],
                i = this._paramsMap[e].location,
                a = n.min,
                o = n.max,
                s = l.parsePercent(n.minSize, i.width),
                r = l.parsePercent(n.maxSize, i.width);
              return (t * (r - s)) / (o - a);
            },
            getPolygon: function (e, t, n, i, a, s, r, l, h) {
              var U,
                m = this.series[e],
                p = m.data[t],
                d = [p, m],
                c = this.deepMerge(d, "itemStyle.normal") || {},
                u = this.deepMerge(d, "itemStyle.emphasis") || {},
                y = this.getItemStyleColor(c.color, e, t, p) || n,
                b =
                  this.getItemStyleColor(u.color, e, t, p) ||
                  ("string" == typeof y ? V.lift(y, -0.2) : y);
              switch (h) {
                case "left":
                  U = i;
                  break;
                case "right":
                  U = i + (s - r);
                  break;
                default:
                  U = i + (s - r) / 2;
              }
              var g = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase(),
                clickable: this.deepQuery(d, "clickable"),
                style: {
                  pointList: [
                    [i, a],
                    [i + s, a],
                    [U + r, a + l],
                    [U, a + l],
                  ],
                  brushType: "both",
                  color: y,
                  lineWidth: c.borderWidth,
                  strokeColor: c.borderColor,
                },
                highlightStyle: {
                  color: b,
                  lineWidth: u.borderWidth,
                  strokeColor: u.borderColor,
                },
              };
              return (
                this.deepQuery([p, m, this.option], "calculable") &&
                  (this.setCalculable(g), (g.draggable = !0)),
                new o(g)
              );
            },
            getLabel: function (e, t, n, a, o, s, r, l, m) {
              var p,
                d = this.series[e],
                c = d.data[t],
                u = this._paramsMap[e].location,
                y = h.merge(h.clone(c.itemStyle) || {}, d.itemStyle),
                b = "normal",
                g = y[b].label,
                k = g.textStyle || {},
                f = y[b].labelLine.length,
                L = this.getLabelText(e, t, b),
                x = this.getFont(k),
                _ = n;
              (g.position = g.position || y.normal.label.position),
                "inner" === g.position ||
                "inside" === g.position ||
                "center" === g.position
                  ? ((p = m),
                    (_ =
                      Math.max(s, r) / 2 > U.getTextWidth(L, x)
                        ? "#fff"
                        : V.reverse(n)))
                  : (p = "left" === g.position ? "right" : "left");
              var W = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase() + 1,
                style: {
                  x: this._getLabelPoint(g.position, a, u, s, r, f, m),
                  y: o + l / 2,
                  color: k.color || _,
                  text: L,
                  textAlign: k.align || p,
                  textBaseline: k.baseline || "middle",
                  textFont: x,
                },
              };
              return (
                (b = "emphasis"),
                (g = y[b].label || g),
                (k = g.textStyle || k),
                (f = y[b].labelLine.length || f),
                (g.position = g.position || y.normal.label.position),
                (L = this.getLabelText(e, t, b)),
                (x = this.getFont(k)),
                (_ = n),
                "inner" === g.position ||
                "inside" === g.position ||
                "center" === g.position
                  ? ((p = m),
                    (_ =
                      Math.max(s, r) / 2 > U.getTextWidth(L, x)
                        ? "#fff"
                        : V.reverse(n)))
                  : (p = "left" === g.position ? "right" : "left"),
                (W.highlightStyle = {
                  x: this._getLabelPoint(g.position, a, u, s, r, f, m),
                  color: k.color || _,
                  text: L,
                  textAlign: k.align || p,
                  textFont: x,
                  brushType: "fill",
                }),
                new i(W)
              );
            },
            getLabelText: function (e, t, n) {
              var i = this.series,
                a = i[e],
                o = a.data[t],
                s = this.deepQuery(
                  [o, a],
                  "itemStyle." + n + ".label.formatter"
                );
              return s
                ? "function" == typeof s
                  ? s.call(this.myChart, {
                      seriesIndex: e,
                      seriesName: a.name || "",
                      series: a,
                      dataIndex: t,
                      data: o,
                      name: o.name,
                      value: o.value,
                    })
                  : "string" == typeof s
                  ? (s = s
                      .replace("{a}", "{a0}")
                      .replace("{b}", "{b0}")
                      .replace("{c}", "{c0}")
                      .replace("{a0}", a.name)
                      .replace("{b0}", o.name)
                      .replace("{c0}", o.value))
                  : void 0
                : o.name;
            },
            getLabelLine: function (e, t, n, i, o, s, r, l, V) {
              var U = this.series[e],
                m = U.data[t],
                p = this._paramsMap[e].location,
                d = h.merge(h.clone(m.itemStyle) || {}, U.itemStyle),
                c = "normal",
                u = d[c].labelLine,
                y = d[c].labelLine.length,
                b = u.lineStyle || {},
                g = d[c].label;
              g.position = g.position || d.normal.label.position;
              var k = {
                zlevel: this.getZlevelBase(),
                z: this.getZBase() + 1,
                hoverable: !1,
                style: {
                  xStart: this._getLabelLineStartPoint(i, p, s, r, V),
                  yStart: o + l / 2,
                  xEnd: this._getLabelPoint(g.position, i, p, s, r, y, V),
                  yEnd: o + l / 2,
                  strokeColor: b.color || n,
                  lineType: b.type,
                  lineWidth: b.width,
                },
              };
              return (
                (c = "emphasis"),
                (u = d[c].labelLine || u),
                (y = d[c].labelLine.length || y),
                (b = u.lineStyle || b),
                (g = d[c].label || g),
                (g.position = g.position),
                (k.highlightStyle = {
                  xEnd: this._getLabelPoint(g.position, i, p, s, r, y, V),
                  strokeColor: b.color || n,
                  lineType: b.type,
                  lineWidth: b.width,
                }),
                new a(k)
              );
            },
            _getLabelPoint: function (e, t, n, i, a, o, s) {
              switch ((e = "inner" === e || "inside" === e ? "center" : e)) {
                case "center":
                  return "center" == s
                    ? t + i / 2
                    : "left" == s
                    ? t + 10
                    : t + i - 10;
                case "left":
                  return "auto" === o
                    ? n.x - 10
                    : "center" == s
                    ? n.centerX - Math.max(i, a) / 2 - o
                    : "right" == s
                    ? t - (a > i ? a - i : 0) - o
                    : n.x - o;
                default:
                  return "auto" === o
                    ? n.x + n.width + 10
                    : "center" == s
                    ? n.centerX + Math.max(i, a) / 2 + o
                    : "right" == s
                    ? n.x + n.width + o
                    : t + Math.max(i, a) + o;
              }
            },
            _getLabelLineStartPoint: function (e, t, n, i, a) {
              return "center" == a
                ? t.centerX
                : i > n
                ? e + Math.min(n, i) / 2
                : e + Math.max(n, i) / 2;
            },
            _needLabel: function (e, t, n) {
              return this.deepQuery(
                [t, e],
                "itemStyle." + (n ? "emphasis" : "normal") + ".label.show"
              );
            },
            _needLabelLine: function (e, t, n) {
              return this.deepQuery(
                [t, e],
                "itemStyle." + (n ? "emphasis" : "normal") + ".labelLine.show"
              );
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
          }),
          h.inherits(t, n),
          e("../chart").define("funnel", t),
          t
        );
      }
    ),
    n(
      "echarts/chart/eventRiver",
      [
        "require",
        "./base",
        "../layout/eventRiver",
        "zrender/shape/Polygon",
        "../component/axis",
        "../component/grid",
        "../component/dataZoom",
        "../config",
        "../util/ecData",
        "../util/date",
        "zrender/tool/util",
        "zrender/tool/color",
        "../chart",
      ],
      function (e) {
        function t(e, t, i, a, o) {
          n.call(this, e, t, i, a, o);
          var s = this;
          (s._ondragend = function () {
            s.isDragend = !0;
          }),
            this.refresh(a);
        }
        var n = e("./base"),
          i = e("../layout/eventRiver"),
          a = e("zrender/shape/Polygon");
        e("../component/axis"),
          e("../component/grid"),
          e("../component/dataZoom");
        var o = e("../config");
        o.eventRiver = {
          zlevel: 0,
          z: 2,
          clickable: !0,
          legendHoverLink: !0,
          itemStyle: {
            normal: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              label: { show: !0, position: "inside", formatter: "{b}" },
            },
            emphasis: {
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 1,
              label: { show: !0 },
            },
          },
        };
        var s = e("../util/ecData"),
          r = e("../util/date"),
          l = e("zrender/tool/util"),
          h = e("zrender/tool/color");
        return (
          (t.prototype = {
            type: o.CHART_TYPE_EVENTRIVER,
            _buildShape: function () {
              var e = this.series;
              (this.selectedMap = {}), this._dataPreprocessing();
              for (
                var t = this.component.legend, n = [], a = 0;
                a < e.length;
                a++
              )
                if (e[a].type === this.type) {
                  (e[a] = this.reformOption(e[a])),
                    (this.legendHoverLink =
                      e[a].legendHoverLink || this.legendHoverLink);
                  var o = e[a].name || "";
                  if (
                    ((this.selectedMap[o] = t ? t.isSelected(o) : !0),
                    !this.selectedMap[o])
                  )
                    continue;
                  this.buildMark(a), n.push(this.series[a]);
                }
              i(n, this._intervalX, this.component.grid.getArea()),
                this._drawEventRiver(),
                this.addShapeList();
            },
            _dataPreprocessing: function () {
              for (var e, t, n = this.series, i = 0, a = n.length; a > i; i++)
                if (n[i].type === this.type) {
                  e = this.component.xAxis.getAxis(n[i].xAxisIndex || 0);
                  for (var o = 0, s = n[i].eventList.length; s > o; o++) {
                    t = n[i].eventList[o].evolution;
                    for (var l = 0, h = t.length; h > l; l++)
                      (t[l].timeScale = e.getCoord(
                        r.getNewDate(t[l].time) - 0
                      )),
                        (t[l].valueScale = Math.pow(t[l].value, 0.8));
                  }
                }
              this._intervalX = Math.round(this.component.grid.getWidth() / 40);
            },
            _drawEventRiver: function () {
              for (var e = this.series, t = 0; t < e.length; t++) {
                var n = e[t].name || "";
                if (e[t].type === this.type && this.selectedMap[n])
                  for (var i = 0; i < e[t].eventList.length; i++)
                    this._drawEventBubble(e[t].eventList[i], t, i);
              }
            },
            _drawEventBubble: function (e, t, n) {
              var i = this.series,
                o = i[t],
                r = o.name || "",
                l = o.eventList[n],
                V = [l, o],
                U = this.component.legend,
                m = U ? U.getColor(r) : this.zr.getColor(t),
                p = this.deepMerge(V, "itemStyle.normal") || {},
                d = this.deepMerge(V, "itemStyle.emphasis") || {},
                c = this.getItemStyleColor(p.color, t, n, l) || m,
                u =
                  this.getItemStyleColor(d.color, t, n, l) ||
                  ("string" == typeof c ? h.lift(c, -0.2) : c),
                y = this._calculateControlPoints(e),
                b = {
                  zlevel: this.getZlevelBase(),
                  z: this.getZBase(),
                  clickable: this.deepQuery(V, "clickable"),
                  style: {
                    pointList: y,
                    smooth: "spline",
                    brushType: "both",
                    lineJoin: "round",
                    color: c,
                    lineWidth: p.borderWidth,
                    strokeColor: p.borderColor,
                  },
                  highlightStyle: {
                    color: u,
                    lineWidth: d.borderWidth,
                    strokeColor: d.borderColor,
                  },
                  draggable: "vertical",
                  ondragend: this._ondragend,
                };
              (b = new a(b)),
                this.addLabel(b, o, l, e.name),
                s.pack(
                  b,
                  i[t],
                  t,
                  i[t].eventList[n],
                  n,
                  i[t].eventList[n].name
                ),
                this.shapeList.push(b);
            },
            _calculateControlPoints: function (e) {
              var t = this._intervalX,
                n = e.y,
                i = e.evolution,
                a = i.length;
              if (!(1 > a)) {
                for (var o = [], s = [], r = 0; a > r; r++)
                  o.push(i[r].timeScale), s.push(i[r].valueScale);
                var l = [];
                l.push([o[0], n]);
                var r = 0;
                for (r = 0; a - 1 > r; r++)
                  l.push([(o[r] + o[r + 1]) / 2, s[r] / -2 + n]);
                for (
                  l.push([(o[r] + (o[r] + t)) / 2, s[r] / -2 + n]),
                    l.push([o[r] + t, n]),
                    l.push([(o[r] + (o[r] + t)) / 2, s[r] / 2 + n]),
                    r = a - 1;
                  r > 0;
                  r--
                )
                  l.push([(o[r] + o[r - 1]) / 2, s[r - 1] / 2 + n]);
                return l;
              }
            },
            ondragend: function (e, t) {
              this.isDragend &&
                e.target &&
                ((t.dragOut = !0),
                (t.dragIn = !0),
                (t.needRefresh = !1),
                (this.isDragend = !1));
            },
            refresh: function (e) {
              e && ((this.option = e), (this.series = e.series)),
                this.backupShapeList(),
                this._buildShape();
            },
          }),
          l.inherits(t, n),
          e("../chart").define("eventRiver", t),
          t
        );
      }
    ),
    n("echarts/layout/eventRiver", ["require"], function () {
      function e(e, o, s) {
        function r(e, t) {
          var n = e.importance,
            i = t.importance;
          return n > i ? -1 : i > n ? 1 : 0;
        }
        function l(e, t) {
          if (e.indexOf) return e.indexOf(t);
          for (var n = 0, i = e.length; i > n; n++) if (e[n] === t) return n;
          return -1;
        }
        for (var h = 5, V = o, U = 0; U < e.length; U++) {
          for (var m = 0; m < e[U].eventList.length; m++) {
            null == e[U].eventList[m].weight && (e[U].eventList[m].weight = 1);
            for (var p = 0, d = 0; d < e[U].eventList[m].evolution.length; d++)
              p += e[U].eventList[m].evolution[d].valueScale;
            e[U].eventList[m].importance = p * e[U].eventList[m].weight;
          }
          e[U].eventList.sort(r);
        }
        for (var U = 0; U < e.length; U++) {
          null == e[U].weight && (e[U].weight = 1);
          for (var p = 0, m = 0; m < e[U].eventList.length; m++)
            p += e[U].eventList[m].weight;
          e[U].importance = p * e[U].weight;
        }
        e.sort(r);
        for (var c = Number.MAX_VALUE, u = 0, U = 0; U < e.length; U++)
          for (var m = 0; m < e[U].eventList.length; m++)
            for (var d = 0; d < e[U].eventList[m].evolution.length; d++) {
              var y = e[U].eventList[m].evolution[d].timeScale;
              (c = Math.min(c, y)), (u = Math.max(u, y));
            }
        for (
          var b = n(Math.floor(c), Math.ceil(u)), g = 0, U = 0;
          U < e.length;
          U++
        )
          for (var m = 0; m < e[U].eventList.length; m++) {
            var k = e[U].eventList[m];
            (k.time = []), (k.value = []);
            for (var d = 0; d < e[U].eventList[m].evolution.length; d++)
              k.time.push(e[U].eventList[m].evolution[d].timeScale),
                k.value.push(e[U].eventList[m].evolution[d].valueScale);
            var f = l(k.value, Math.max.apply(Math, k.value)),
              L = i(b, k.time[f], k.time[f + 1]),
              d = 0;
            for (
              k.y = L + k.value[f] / 2 + h, d = 0;
              d < k.time.length - 1;
              d++
            ) {
              var x = i(b, k.time[d], k.time[d + 1]);
              k.y - k.value[d] / 2 - h < x && (k.y = x + k.value[d] / 2 + h);
            }
            var x = i(b, k.time[d], k.time[d] + V);
            for (
              k.y - k.value[d] / 2 - h < x && (k.y = x + k.value[d] / 2 + h),
                e[U].y = k.y,
                g = Math.max(g, k.y + k.value[f] / 2),
                d = 0;
              d < k.time.length - 1;
              d++
            )
              a(b, k.time[d], k.time[d + 1], k.y + k.value[d] / 2);
            a(b, k.time[d], k.time[d] + V, k.y + k.value[d] / 2);
          }
        t(e, s, g, h);
      }
      function t(e, t, n, i) {
        for (var a = t.y, o = (t.height - i) / n, s = 0; s < e.length; s++) {
          e[s].y = e[s].y * o + a;
          for (var r = e[s].eventList, l = 0; l < r.length; l++) {
            r[l].y = r[l].y * o + a;
            for (var h = r[l].evolution, V = 0; V < h.length; V++)
              h[V].valueScale *= 1 * o;
          }
        }
      }
      function n(e, t) {
        var i = {
          left: e,
          right: t,
          leftChild: null,
          rightChild: null,
          maxValue: 0,
        };
        if (t > e + 1) {
          var a = Math.round((e + t) / 2);
          (i.leftChild = n(e, a)), (i.rightChild = n(a, t));
        }
        return i;
      }
      function i(e, t, n) {
        if (1 > n - t) return 0;
        var a = Math.round((e.left + e.right) / 2),
          o = 0;
        if (t == e.left && n == e.right) o = e.maxValue;
        else if (a >= n && null != e.leftChild) o = i(e.leftChild, t, n);
        else if (t >= a && null != e.rightChild) o = i(e.rightChild, t, n);
        else {
          var s = 0,
            r = 0;
          null != e.leftChild && (s = i(e.leftChild, t, a)),
            null != e.rightChild && (r = i(e.rightChild, a, n)),
            (o = s > r ? s : r);
        }
        return o;
      }
      function a(e, t, n, i) {
        if (null != e) {
          var o = Math.round((e.left + e.right) / 2);
          (e.maxValue = e.maxValue > i ? e.maxValue : i),
            (Math.floor(10 * t) != Math.floor(10 * e.left) ||
              Math.floor(10 * n) != Math.floor(10 * e.right)) &&
              (o >= n
                ? a(e.leftChild, t, n, i)
                : t >= o
                ? a(e.rightChild, t, n, i)
                : (a(e.leftChild, t, o, i), a(e.rightChild, o, n, i)));
        }
      }
      return e;
    });
  var i = t("zrender");
  (i.tool = {
    color: t("zrender/tool/color"),
    math: t("zrender/tool/math"),
    util: t("zrender/tool/util"),
    vector: t("zrender/tool/vector"),
    area: t("zrender/tool/area"),
    event: t("zrender/tool/event"),
  }),
    (i.animation = {
      Animation: t("zrender/animation/Animation"),
      Cip: t("zrender/animation/Clip"),
      easing: t("zrender/animation/easing"),
    });
  var a = t("echarts");
  (a.config = t("echarts/config")),
    (a.util = { mapData: { params: t("echarts/util/mapData/params") } }),
    t("echarts/chart/line"),
    t("echarts/chart/bar"),
    t("echarts/chart/scatter"),
    t("echarts/chart/k"),
    t("echarts/chart/pie"),
    t("echarts/chart/radar"),
    t("echarts/chart/chord"),
    t("echarts/chart/force"),
    t("echarts/chart/map"),
    t("echarts/chart/gauge"),
    t("echarts/chart/funnel"),
    t("echarts/chart/eventRiver"),
    (e.echarts = a),
    (e.zrender = i);
})(window);
